{"version":3,"file":"154.e9b3290e397c05ede1fe.js?v=e9b3290e397c05ede1fe","mappings":"6TAQMA,EAAkB,6BAA6BC,K,4iCAQ/CC,EAAY,+CA4DlB,EADgB,CAvDD,CACXC,GAAID,EACJE,WAAW,EACXC,SAAU,CAAC,EAAAC,cACXC,SAAU,CAAC,EAAAC,sBAAuB,EAAAC,0BAClCC,SAAU,CAACC,EAAKC,EAAaC,EAAeC,KACxC,MAAMC,EAASC,KAAKC,MAAM,EAAAC,WAAWC,UAAU,uBAAyB,MAAMjB,IAAc,CAAC,EACvFkB,EAAU,EAAAF,WAAWG,aACrBC,EAAMP,EAAOQ,YAhBH,2DAiBVA,EAAa,EAAAC,OAAOP,MAAMK,GAAKG,KAC/BC,EAAkBX,EAAOW,gBACzB,EAAAF,OAAOP,MAAMF,EAAOW,iBAAiBD,UACrCE,EAEAC,GADab,EAAOa,aAAe,IACVC,KAAKC,GAAW,EAAAN,OAAOP,MAAMa,GAAQL,OAC9DM,IAAwBhB,EAAOgB,oBAC/BC,EAAqBjB,EAAOiB,oBAAsB,CAAC,EACzD,IAAK,MAAOC,EAAKC,KAAUC,OAAOC,QAAQJ,GAClCC,EAAII,SAAS,QAA2B,iBAAVH,IAC9BF,EAAmBC,GAAO,IAAIK,IAAIJ,EAAOd,GAASK,MAG1Db,EAAY2B,SAAS,CACjBC,KAAM,CACFC,KAAM,SACNC,aAAc,mBACdC,SAAU,SACVC,KAAM,GACNC,UAAW,CACP,aAAc7C,EACd,aAAcA,IAGtB8C,OAAQC,MAAOC,IACX,MAAM,cAAEC,SAAwB,kCAC1BC,MAAiBrC,aAAqD,EAASA,EAAcsC,YAAarC,aAA2D,EAASA,EAAiBqC,UAOrM,OANID,EACAE,QAAQC,KAAK,yDAGbD,QAAQE,KAAK,6DAEV,IAAIL,EAAc,IAClBD,EACHzB,aACAG,kBACAE,cACAG,sBACAmB,aACAlB,sBACF,GAER,G","sources":["webpack://@jupyterlite/pyodide-kernel-extension/./lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IServiceWorkerManager, } from '@jupyterlite/server';\nimport { IKernelSpecs } from '@jupyterlite/kernel';\nimport { IBroadcastChannelWrapper } from '@jupyterlite/contents';\nexport * as KERNEL_SETTINGS_SCHEMA from '../schema/kernel.v0.schema.json';\nimport KERNEL_ICON_SVG_STR from '../style/img/pyodide.svg';\nconst KERNEL_ICON_URL = `data:image/svg+xml;base64,${btoa(KERNEL_ICON_SVG_STR)}`;\n/**\n * The default CDN fallback for Pyodide\n */\nconst PYODIDE_CDN_URL = 'https://cdn.jsdelivr.net/pyodide/v0.25.0/full/pyodide.js';\n/**\n * The id for the extension, and key in the litePlugins.\n */\nconst PLUGIN_ID = '@jupyterlite/pyodide-kernel-extension:kernel';\n/**\n * A plugin to register the Pyodide kernel.\n */\nconst kernel = {\n    id: PLUGIN_ID,\n    autoStart: true,\n    requires: [IKernelSpecs],\n    optional: [IServiceWorkerManager, IBroadcastChannelWrapper],\n    activate: (app, kernelspecs, serviceWorker, broadcastChannel) => {\n        const config = JSON.parse(PageConfig.getOption('litePluginSettings') || '{}')[PLUGIN_ID] || {};\n        const baseUrl = PageConfig.getBaseUrl();\n        const url = config.pyodideUrl || PYODIDE_CDN_URL;\n        const pyodideUrl = URLExt.parse(url).href;\n        const pipliteWheelUrl = config.pipliteWheelUrl\n            ? URLExt.parse(config.pipliteWheelUrl).href\n            : undefined;\n        const rawPipUrls = config.pipliteUrls || [];\n        const pipliteUrls = rawPipUrls.map((pipUrl) => URLExt.parse(pipUrl).href);\n        const disablePyPIFallback = !!config.disablePyPIFallback;\n        const loadPyodideOptions = config.loadPyodideOptions || {};\n        for (const [key, value] of Object.entries(loadPyodideOptions)) {\n            if (key.endsWith('URL') && typeof value === 'string') {\n                loadPyodideOptions[key] = new URL(value, baseUrl).href;\n            }\n        }\n        kernelspecs.register({\n            spec: {\n                name: 'python',\n                display_name: 'Python (Pyodide)',\n                language: 'python',\n                argv: [],\n                resources: {\n                    'logo-32x32': KERNEL_ICON_URL,\n                    'logo-64x64': KERNEL_ICON_URL,\n                },\n            },\n            create: async (options) => {\n                const { PyodideKernel } = await import('@jupyterlite/pyodide-kernel');\n                const mountDrive = !!((serviceWorker === null || serviceWorker === void 0 ? void 0 : serviceWorker.enabled) && (broadcastChannel === null || broadcastChannel === void 0 ? void 0 : broadcastChannel.enabled));\n                if (mountDrive) {\n                    console.info('Pyodide contents will be synced with Jupyter Contents');\n                }\n                else {\n                    console.warn('Pyodide contents will NOT be synced with Jupyter Contents');\n                }\n                return new PyodideKernel({\n                    ...options,\n                    pyodideUrl,\n                    pipliteWheelUrl,\n                    pipliteUrls,\n                    disablePyPIFallback,\n                    mountDrive,\n                    loadPyodideOptions,\n                });\n            },\n        });\n    },\n};\nconst plugins = [kernel];\nexport default plugins;\n"],"names":["KERNEL_ICON_URL","btoa","PLUGIN_ID","id","autoStart","requires","IKernelSpecs","optional","IServiceWorkerManager","IBroadcastChannelWrapper","activate","app","kernelspecs","serviceWorker","broadcastChannel","config","JSON","parse","PageConfig","getOption","baseUrl","getBaseUrl","url","pyodideUrl","URLExt","href","pipliteWheelUrl","undefined","pipliteUrls","map","pipUrl","disablePyPIFallback","loadPyodideOptions","key","value","Object","entries","endsWith","URL","register","spec","name","display_name","language","argv","resources","create","async","options","PyodideKernel","mountDrive","enabled","console","info","warn"],"sourceRoot":""}