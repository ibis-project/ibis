{"version":3,"file":"85.eb26499.js","mappings":"4JAAA,IAAIA,EAAe,4CACfC,EAAiB,uBACjBC,EAAmB,qBAkDvB,SAASC,EAAUC,EAAQC,GACzB,IAhCqBC,EAbFC,EA6CfC,EAAKJ,EAAOK,OAQhB,MAPU,KAAND,EACFH,EAAMK,UA/CWH,EA+CYC,EA9CxB,SAASJ,EAAQC,GAEtB,IADA,IAAqBI,EAAjBE,GAAU,EACmB,OAAzBF,EAAOL,EAAOK,UAChBA,GAAQF,GAAUI,IACtBA,GAAWA,GAAmB,MAARF,EAIxB,OADKE,IAASN,EAAMK,SAAWP,GACxB,QACT,GAsCSF,EAAeW,KAAKJ,GAC3BH,EAAMK,UApCaJ,EAoCYE,EAnC1B,SAASJ,EAAQC,GAOtB,MANgB,KAAZC,EACFF,EAAOS,IAAI,MACQ,KAAZP,GACPF,EAAOS,IAAI,MAEbR,EAAMK,SAAWP,EACV,UACT,GA4BSH,EAAaY,KAAKJ,KACzBH,EAAMK,SA1BV,SAAmBF,GACjB,OAAO,SAASJ,EAAQC,GAEtB,IADA,IAAIS,EAAON,GACHA,EAAKJ,EAAOW,SAAqC,MAA1BP,EAAGQ,MAAMhB,IACtCc,GAAQV,EAAOK,OAIjB,OADAJ,EAAMK,SAAWP,EACbD,EAAiBU,KAAKE,GACjB,WAtCb,SAAkBA,GAChB,OAAOG,WAAWH,GAAMI,aAAeJ,CACzC,CAqCaK,CAASL,GACT,SACiB,KAAjBV,EAAOW,OACP,eAEA,QACX,CACF,CASqBK,CAAUZ,IAErBH,EAAMK,UAAYP,EAAaE,EAAMK,SAASN,EAAQC,GAAS,IACzE,CAEO,MAAMgB,EAAO,CAClBC,KAAM,OAENC,WAAY,WACV,MAAO,CACLb,SAAUP,EAEd,EAEAqB,MAAO,SAASpB,EAAQC,GACtB,OAAID,EAAOqB,WAAmB,KACvBpB,EAAMK,SAASN,EAAQC,EAChC,E","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@codemirror/legacy-modes/mode/solr.js"],"sourcesContent":["var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\nvar isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\nvar isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\nfunction isNumber(word) {\n  return parseFloat(word).toString() === word;\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) break;\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenOperator(operator) {\n  return function(stream, state) {\n    if (operator == \"|\")\n      stream.eat(/\\|/);\n    else if (operator == \"&\")\n      stream.eat(/\\&/);\n\n    state.tokenize = tokenBase;\n    return \"operator\";\n  };\n}\n\nfunction tokenWord(ch) {\n  return function(stream, state) {\n    var word = ch;\n    while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n      word += stream.next();\n    }\n\n    state.tokenize = tokenBase;\n    if (isOperatorString.test(word))\n      return \"operator\";\n    else if (isNumber(word))\n      return \"number\";\n    else if (stream.peek() == \":\")\n      return \"propertyName\";\n    else\n      return \"string\";\n  };\n}\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"')\n    state.tokenize = tokenString(ch);\n  else if (isOperatorChar.test(ch))\n    state.tokenize = tokenOperator(ch);\n  else if (isStringChar.test(ch))\n    state.tokenize = tokenWord(ch);\n\n  return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\n}\n\nexport const solr = {\n  name: \"solr\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  }\n};\n"],"names":["isStringChar","isOperatorChar","isOperatorString","tokenBase","stream","state","operator","quote","ch","next","tokenize","escaped","test","eat","word","peek","match","parseFloat","toString","isNumber","tokenWord","solr","name","startState","token","eatSpace"],"sourceRoot":""}