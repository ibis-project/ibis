{"version":3,"file":"7997.46ee9b7.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lezer/common/dist/index.js"],"sourcesContent":["// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node.\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\nclass NodeProp {\n    /// Create a new node prop type.\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /// This is meant to be used with\n    /// [`NodeSet.extend`](#common.NodeSet.extend) or\n    /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    /// prop values for each node type in the set. Takes a [match\n    /// object](#common.NodeType^match) or function that returns undefined\n    /// if the node type doesn't get this prop, and the prop's value if\n    /// it does.\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages in mixed-language parsers.\nNodeProp.mounted = new NodeProp({ perNode: true });\n/// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\nclass MountedTree {\n    constructor(\n    /// The inner tree.\n    tree, \n    /// If this is null, this tree replaces the entire node (it will\n    /// be included in the regular iteration instead of its host\n    /// node). If not, only the given ranges are considered to be\n    /// covered by this tree. This is used for trees that are mixed in\n    /// a way that isn't strictly hierarchical. Such mounted trees are\n    /// only entered by [`resolveInner`](#common.Tree.resolveInner)\n    /// and [`enter`](#common.SyntaxNode.enter).\n    overlay, \n    /// The parser used to create this subtree.\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n}\nconst noProps = Object.create(null);\n/// Each node in a syntax tree has a node type associated with it.\nclass NodeType {\n    /// @internal\n    constructor(\n    /// The name of the node type. Not necessarily unique, but if the\n    /// grammar was written properly, different node types with the\n    /// same name within a node set should play the same semantic\n    /// role.\n    name, \n    /// @internal\n    props, \n    /// The id of this node in its set. Corresponds to the term ids\n    /// used in the parser.\n    id, \n    /// @internal\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    /// Define a node type.\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |\n            (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /// Retrieves a node prop for this type. Will return `undefined` if\n    /// the prop isn't present on this node.\n    prop(prop) { return this.props[prop.id]; }\n    /// True when this is the top node of a grammar.\n    get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }\n    /// True when this node is produced by a skip rule.\n    get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }\n    /// Indicates whether this is an error node.\n    get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }\n    /// When true, this node type doesn't correspond to a user-declared\n    /// named node, for example because it is used to cache repetition.\n    get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }\n    /// Returns true when this node's name or one of its\n    /// [groups](#common.NodeProp^group) matches the given string.\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /// Create a function from node types to arbitrary values by\n    /// specifying an object whose property names are node or\n    /// [group](#common.NodeProp^group) names. Often useful with\n    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    /// names, separated by spaces, in a single property name to map\n    /// multiple node names to a single value.\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/// An empty dummy node type to use when no actual type is available.\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);\n/// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\nclass NodeSet {\n    /// Create a set with the given types. The `id` property of each\n    /// type should correspond to its position within the array.\n    constructor(\n    /// The node types in this set, by id.\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /// Create a copy of this set with some node properties added. The\n    /// arguments to this method can be created with\n    /// [`NodeProp.add`](#common.NodeProp.add).\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/// Options that control iteration. Can be combined with the `|`\n/// operator to enable multiple ones.\nvar IterMode;\n(function (IterMode) {\n    /// When enabled, iteration will only visit [`Tree`](#common.Tree)\n    /// objects, not nodes packed into\n    /// [`TreeBuffer`](#common.TreeBuffer)s.\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n    /// Enable this to make iteration include anonymous nodes (such as\n    /// the nodes that wrap repeated grammar constructs into a balanced\n    /// tree).\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n    /// By default, regular [mounted](#common.NodeProp^mounted) nodes\n    /// replace their base node in iteration. Enable this to ignore them\n    /// instead.\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n    /// This option only applies in\n    /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n    /// library to not enter mounted overlays if one covers the given\n    /// position.\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {}));\n/// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\nclass Tree {\n    /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    constructor(\n    /// The type of the top node.\n    type, \n    /// This node's child nodes.\n    children, \n    /// The positions (offsets relative to the start of this tree) of\n    /// the children.\n    positions, \n    /// The total length of this tree\n    length, \n    /// Per-node [node props](#common.NodeProp) to associate with this node.\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /// @internal\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /// @internal\n    toString() {\n        let mounted = this.prop(NodeProp.mounted);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /// Get a [tree cursor](#common.TreeCursor) positioned at the top of\n    /// the tree. Mode can be used to [control](#common.IterMode) which\n    /// nodes the cursor visits.\n    cursor(mode = 0) {\n        return new TreeCursor(this.topNode, mode);\n    }\n    /// Get a [tree cursor](#common.TreeCursor) pointing into this tree\n    /// at the given position and side (see\n    /// [`moveTo`](#common.TreeCursor.moveTo).\n    cursorAt(pos, side = 0, mode = 0) {\n        let scope = CachedNode.get(this) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        cursor.moveTo(pos, side);\n        CachedNode.set(this, cursor._tree);\n        return cursor;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n    /// tree.\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /// Get the [syntax node](#common.SyntaxNode) at the given position.\n    /// If `side` is -1, this will move into nodes that end at the\n    /// position. If 1, it'll move into nodes that start at the\n    /// position. With 0, it'll only enter nodes that cover the position\n    /// from both sides.\n    ///\n    /// Note that this will not enter\n    /// [overlays](#common.MountedTree.overlay), and you often want\n    /// [`resolveInner`](#common.Tree.resolveInner) instead.\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /// Like [`resolve`](#common.Tree.resolve), but will enter\n    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    /// pointing into the innermost overlaid tree at the given position\n    /// (with parent links going through all parent structure, including\n    /// the host trees).\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /// Iterate over the tree and its children, calling `enter` for any\n    /// node that touches the `from`/`to` region (if given) before\n    /// running over such a node's children, and `leave` (if given) when\n    /// leaving the node. When `enter` returns `false`, that node will\n    /// not have its children iterated over (or `leave` called).\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;\n        for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {\n            let entered = false;\n            if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {\n                if (c.firstChild())\n                    continue;\n                entered = true;\n            }\n            for (;;) {\n                if (entered && leave && (anon || !c.type.isAnonymous))\n                    leave(c);\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                entered = true;\n            }\n        }\n    }\n    /// Get the value of the given [node prop](#common.NodeProp) for this\n    /// node. Works with both per-node and per-type props.\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    /// format that can be passed to the [`Tree`](#common.Tree)\n    /// constructor.\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /// Balance the direct children of this tree, producing a copy of\n    /// which may have children grouped into subtrees with type\n    /// [`NodeType.none`](#common.NodeType^none).\n    balance(config = {}) {\n        return this.children.length <= 8 /* Balance.BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /// Build a tree from a postfix-ordered buffer of node information,\n    /// or a cursor over such a buffer.\n    static build(data) { return buildTree(data); }\n}\n/// The empty tree\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it).\nclass TreeBuffer {\n    /// Create a tree buffer.\n    constructor(\n    /// The buffer's content.\n    buffer, \n    /// The total length of the group of nodes in the buffer.\n    length, \n    /// The node set used in this buffer.\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /// @internal\n    get type() { return NodeType.none; }\n    /// @internal\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /// @internal\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /// @internal\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /// @internal\n    slice(startI, endI, from) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI), len = 0;\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            let to = copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n            len = Math.max(len, to);\n        }\n        return new TreeBuffer(copy, len, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Side.Before */: return from < pos;\n        case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Side.Around */: return from < pos && to > pos;\n        case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* Side.After */: return to > pos;\n        case 4 /* Side.DontCare */: return true;\n    }\n}\nfunction enterUnfinishedNodesBefore(node, pos) {\n    let scan = node.childBefore(pos);\n    while (scan) {\n        let last = scan.lastChild;\n        if (!last || last.to != scan.to)\n            break;\n        if (last.type.isError && last.from == last.to) {\n            node = scan;\n            scan = last.prevSibling;\n        }\n        else {\n            scan = last;\n        }\n    }\n    return node;\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    let mode = overlays ? 0 : IterMode.IgnoreOverlays;\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, mode);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass TreeNode {\n    constructor(_tree, from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        this._tree = _tree;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this._tree.type; }\n    get name() { return this._tree.type.name; }\n    get to() { return this.from + this._tree.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent.from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & IterMode.ExcludeBuffers)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & IterMode.IgnoreMounts) &&\n                        next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent._tree.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        let mounted;\n        if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, mode);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;\n    }\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    get tree() { return this._tree; }\n    toTree() { return this._tree; }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    /// @internal\n    toString() { return this._tree.toString(); }\n    get node() { return this; }\n    matchContext(context) { return matchNodeContext(this, context); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor(), result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        while (!cur.type.is(before))\n            if (!cur.nextSibling())\n                return result;\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nfunction matchNodeContext(node, context, i = context.length - 1) {\n    for (let p = node.parent; i >= 0; p = p.parent) {\n        if (!p)\n            return false;\n        if (!p.type.isAnonymous) {\n            if (context[i] && context[i] != p.name)\n                return false;\n            i--;\n        }\n    }\n    return true;\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode {\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    constructor(context, _parent, index) {\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        if (mode & IterMode.ExcludeBuffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n    }\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1];\n            children.push(buffer.slice(startI, endI, from));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    /// @internal\n    toString() { return this.context.buffer.childString(this.index); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    get node() { return this; }\n    matchContext(context) { return matchNodeContext(this, context); }\n}\n/// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\nclass TreeCursor {\n    /// Shorthand for `.type.name`.\n    get name() { return this.type.name; }\n    /// @internal\n    constructor(node, \n    /// @internal\n    mode = 0) {\n        this.mode = mode;\n        /// @internal\n        this.buffer = null;\n        this.stack = [];\n        /// @internal\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /// @internal\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /// @internal\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /// Move the cursor to this node's first child. When this returns\n    /// false, the node has no child, and the cursor has not been moved.\n    firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }\n    /// Move the cursor to this node's last child.\n    lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }\n    /// Move the cursor to the first child that ends after `pos`.\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }\n    /// Move to the last child that starts before `pos`.\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }\n    /// Move the cursor to the child around `pos`. If side is -1 the\n    /// child may end at that position, when 1 it may start there. This\n    /// will also enter [overlaid](#common.MountedTree.overlay)\n    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    /// set to false.\n    enter(pos, side, mode = this.mode) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, mode));\n        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n    }\n    /// Move to the node's parent node, if this isn't the top node.\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /// @internal\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;\n    }\n    /// Move to this node's next sibling, if any.\n    nextSibling() { return this.sibling(1); }\n    /// Move to this node's previous sibling, if any.\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n                    let child = parent._tree.children[i];\n                    if ((this.mode & IterMode.IncludeAnonymous) ||\n                        child instanceof TreeBuffer ||\n                        !child.type.isAnonymous ||\n                        hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /// Move to the next node in a\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)\n    /// traversal, going from a node to its first child or, if the\n    /// current node is empty or `enter` is false, its next sibling or\n    /// the next sibling of the first parent node that has one.\n    next(enter = true) { return this.move(1, enter); }\n    /// Move to the next node in a last-to-first pre-order traveral. A\n    /// node is followed by its last child or, if it has none, its\n    /// previous sibling or the previous sibling of the first parent\n    /// node that has one.\n    prev(enter = true) { return this.move(-1, enter); }\n    /// Move the cursor to the innermost node that covers `pos`. If\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    /// it will enter nodes that start at `pos`.\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    /// position.\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /// Get the [tree](#common.Tree) that represents the current node, if\n    /// any. Will return null when the node is in a [tree\n    /// buffer](#common.TreeBuffer).\n    get tree() {\n        return this.buffer ? null : this._tree._tree;\n    }\n    /// Iterate over the current node and all its descendants, calling\n    /// `enter` when entering a node and `leave`, if given, when leaving\n    /// one. When `enter` returns `false`, any children of that node are\n    /// skipped, and `leave` isn't called for it.\n    iterate(enter, leave) {\n        for (let depth = 0;;) {\n            let mustLeave = false;\n            if (this.type.isAnonymous || enter(this) !== false) {\n                if (this.firstChild()) {\n                    depth++;\n                    continue;\n                }\n                if (!this.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(this);\n                mustLeave = this.type.isAnonymous;\n                if (this.nextSibling())\n                    break;\n                if (!depth)\n                    return;\n                this.parent();\n                depth--;\n                mustLeave = true;\n            }\n        }\n    }\n    /// Test whether the current node matches a given context—a sequence\n    /// of direct parent node names. Empty strings in the context array\n    /// are treated as wildcards.\n    matchContext(context) {\n        if (!this.buffer)\n            return matchNodeContext(this.node, context);\n        let { buffer } = this.buffer, { types } = buffer.set;\n        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n            if (d < 0)\n                return matchNodeContext(this.node, context, i);\n            let type = types[buffer.buffer[this.stack[d]]];\n            if (!type.isAnonymous) {\n                if (context[i] && context[i] != type.name)\n                    return false;\n                i--;\n            }\n        }\n        return true;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* SpecialRecord.Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* SpecialRecord.LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function makeBalanced(type) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* SpecialRecord.ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* SpecialRecord.ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* SpecialRecord.LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/// Provides a way to associate values with pieces of trees. As long\n/// as that part of the tree is reused, the associated values can be\n/// retrieved from an updated tree.\nclass NodeWeakMap {\n    constructor() {\n        this.map = new WeakMap();\n    }\n    setBuffer(buffer, index, value) {\n        let inner = this.map.get(buffer);\n        if (!inner)\n            this.map.set(buffer, inner = new Map);\n        inner.set(index, value);\n    }\n    getBuffer(buffer, index) {\n        let inner = this.map.get(buffer);\n        return inner && inner.get(index);\n    }\n    /// Set the value for this syntax node.\n    set(node, value) {\n        if (node instanceof BufferNode)\n            this.setBuffer(node.context.buffer, node.index, value);\n        else if (node instanceof TreeNode)\n            this.map.set(node.tree, value);\n    }\n    /// Retrieve value for this syntax node, if it exists in the map.\n    get(node) {\n        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)\n            : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n    }\n    /// Set the value for the node that a cursor currently points to.\n    cursorSet(cursor, value) {\n        if (cursor.buffer)\n            this.setBuffer(cursor.buffer.buffer, cursor.index, value);\n        else\n            this.map.set(cursor.tree, value);\n    }\n    /// Retrieve the value for the node that a cursor currently points\n    /// to.\n    cursorGet(cursor) {\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n    }\n}\n\n/// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\nclass TreeFragment {\n    /// Construct a tree fragment. You'll usually want to use\n    /// [`addTree`](#common.TreeFragment^addTree) and\n    /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n    /// calling this directly.\n    constructor(\n    /// The start of the unchanged range pointed to by this fragment.\n    /// This refers to an offset in the _updated_ document (as opposed\n    /// to the original tree).\n    from, \n    /// The end of the unchanged range.\n    to, \n    /// The tree that this fragment is based on.\n    tree, \n    /// The offset between the fragment's tree and the document that\n    /// this fragment can be used against. Add this when going from\n    /// document to tree positions, subtract it to go from tree to\n    /// document positions.\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);\n    }\n    /// Whether the start of the fragment represents the start of a\n    /// parse, or the end of a change. (In the second case, it may not\n    /// be safe to reuse some nodes at the start, depending on the\n    /// parsing algorithm.)\n    get openStart() { return (this.open & 1 /* Open.Start */) > 0; }\n    /// Whether the end of the fragment represents the end of a\n    /// full-document parse, or the start of a change.\n    get openEnd() { return (this.open & 2 /* Open.End */) > 0; }\n    /// Create a set of fragments from a freshly parsed tree, or update\n    /// an existing set of fragments by replacing the ones that overlap\n    /// with a tree with content from the new tree. When `partial` is\n    /// true, the parse is treated as incomplete, and the resulting\n    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    /// true.\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /// Apply a set of edits to an array of fragments, removing or\n    /// splitting fragments as necessary to remove edited ranges, and\n    /// adjusting offsets for fragments that moved.\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/// A superclass that parsers should extend.\nclass Parser {\n    /// Start a parse, returning a [partial parse](#common.PartialParse)\n    /// object. [`fragments`](#common.TreeFragment) can be passed in to\n    /// make the parse incremental.\n    ///\n    /// By default, the entire input is parsed. You can pass `ranges`,\n    /// which should be a sorted array of non-empty, non-overlapping\n    /// ranges, to parse only those ranges. The tree returned in that\n    /// case will start at `ranges[0].from`.\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /// Run a full parse, returning the resulting tree.\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, ranges) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.ranges = ranges;\n        if (!ranges.length || ranges.some(r => r.from >= r.to))\n            throw new RangeError(\"Invalid inner parse ranges given: \" + JSON.stringify(ranges));\n    }\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].ranges[0].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n        scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\n            let enter = true, range;\n            if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Cover.Full */;\n            }\n            else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\n                    if (ranges.length)\n                        this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to)\n                    overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length)\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;\n    }\n    return 0 /* Cover.None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1];\n        nodes.push(buf.slice(startI, endI, from));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, depth = 0;\n    // Scan up to the nearest tree\n    do {\n        cursor.parent();\n        depth++;\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let i = 0, base = cursor.tree, off = 0;\n    for (;; i++) {\n        off = base.positions[i] + cursor.from;\n        if (off <= node.from && off + base.children[i].length >= node.to)\n            break;\n    }\n    let buf = base.children[i], b = buf.buffer;\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length) {\n        let i = startI;\n        while (b[i + 2] + off <= node.from)\n            i = b[i + 3];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, i, children, positions, innerOffset);\n        let from = b[i + 1], to = b[i + 2];\n        let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n        children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);\n    // Move the cursor back to the target node\n    for (let d = 0; d <= depth; d++)\n        cursor.childAfter(node.from);\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\n        }\n    }\n    return result;\n}\n\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };\n"],"names":["DefaultBufferLength","nextPropID","Range","constructor","from","to","this","NodeProp","config","id","perNode","deserialize","Error","add","match","RangeError","NodeType","type","result","undefined","closedBy","str","split","openedBy","group","contextHash","lookAhead","mounted","MountedTree","tree","overlay","parser","noProps","Object","create","name","props","flags","define","spec","length","top","skipped","error","src","Array","isArray","prop","isTop","isSkipped","isError","isAnonymous","is","indexOf","map","direct","node","groups","i","found","none","NodeSet","types","extend","newTypes","newProps","source","assign","push","CachedNode","WeakMap","CachedInnerNode","IterMode","Tree","children","positions","value","toString","ch","test","JSON","stringify","cursor","mode","TreeCursor","topNode","cursorAt","pos","side","scope","get","moveTo","set","_tree","TreeNode","resolve","resolveNode","resolveInner","iterate","enter","leave","anon","IncludeAnonymous","c","entered","firstChild","nextSibling","parent","propValues","balance","balanceRange","makeTree","build","data","_a","buffer","nodeSet","maxBufferLength","reused","minRepeatType","FlatBufferCursor","takeNode","parentStart","minPos","inRepeat","start","end","size","lookAheadAtStart","next","startPos","maxSize","fork","skip","minStart","scan","nodeSize","localSkipped","nodeStart","findBufferSize","Uint16Array","endPos","index","copyToBuffer","TreeBuffer","localChildren","localPositions","localInRepeat","lastGroup","lastEnd","makeRepeatLeaf","reverse","make","last","lookAheadProp","lastI","makeBalanced","base","pop","pair","concat","bufferStart","startIndex","topID","buildTree","empty","childString","join","endIndex","findChild","dir","pick","checkSide","slice","startI","endI","b","copy","len","j","Math","max","enterUnfinishedNodesBefore","childBefore","lastChild","prevSibling","overlays","IgnoreOverlays","inner","_parent","nextChild","e","ExcludeBuffers","BufferNode","BufferContext","hasChild","IgnoreMounts","childAfter","rPos","nextSignificantParent","val","toTree","getChild","before","after","r","getChildren","matchContext","context","matchNodeContext","cur","p","child","externalSibling","stack","bufferNode","yieldNode","n","unshift","yieldBuf","yield","enterChild","sibling","d","atLastNode","move","prev","cache","depth","mustLeave","some","nodeSizeCache","balanceType","mkTop","mkTree","total","maxChild","ceil","divide","offset","groupFrom","groupStart","groupSize","nextSize","only","NodeWeakMap","setBuffer","Map","getBuffer","cursorSet","cursorGet","TreeFragment","openStart","openEnd","open","addTree","fragments","partial","f","applyChanges","changes","minGap","fI","nextF","cI","off","nextC","nextPos","fromA","cut","fFrom","fTo","min","toA","toB","Parser","startParse","input","ranges","StringInput","createParse","parse","done","advance","string","chunk","lineChunks","read","parseMixed","nest","MixedParse","InnerParse","target","ActiveOverlay","predicate","mounts","stoppedInner","innerDone","baseTree","stoppedAt","baseParse","startInner","stopAt","parsedPos","fragmentCursor","FragmentCursor","covered","isCovered","range","hasNode","find","m","frag","mount","checkCover","materialize","oldMounts","findMounts","punchRanges","enterFragments","splice","sliceBuf","buf","nodes","innerOffset","isTarget","StructureCursor","root","curTo","fragI","first","curFrag","nextFrag","outer","current","gapFrom","gapTo","findCoverChanges","a","iA","iB","inA","inB","nextA","nextB"],"sourceRoot":""}