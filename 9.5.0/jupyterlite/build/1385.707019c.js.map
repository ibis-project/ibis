{"version":3,"file":"1385.707019c.js","mappings":"4NAMA,MAAMA,EAAuB,sBAItB,MAAMC,EACT,WAAAC,CAAYC,GACRC,KAAKC,aAAeL,EACpBI,KAAKE,gBAAkB,KACvBF,KAAKG,aAAeJ,EAAQK,YAC5BJ,KAAKC,aAAeF,EAAQM,aAAeT,EAC3CI,KAAKE,gBAAkBH,EAAQO,gBAAkB,KACjDN,KAAKO,OAAS,IAAI,EAAAC,eACtB,CAIA,SAAIC,GACA,OAAOT,KAAKO,OAAOG,OACvB,CAIA,WAAIC,GACA,OAAOX,KAAKS,MAAMG,MAAK,IAAMZ,KAAKa,UACtC,CAIA,gBAAMC,SACId,KAAKe,cACXf,KAAKO,OAAOS,aAAQ,EACxB,CAIA,iBAAMD,GACFf,KAAKa,SAAWb,KAAKiB,wBACzB,CAIA,yBAAIC,GACA,IAAIC,EACJ,MAAMC,GAA0C,QAA/BD,EAAKnB,KAAKE,uBAAoC,IAAPiB,OAAgB,EAASA,EAAGE,QAAUrB,KAAKE,gBAAkB,KACrH,MAAO,CACHoB,QAAS,EACTC,KAAMvB,KAAKC,gBACPmB,EAAS,CAAEA,UAAW,CAAC,EAEnC,CAIA,sBAAAH,GACI,OAAOjB,KAAKG,aAAaqB,eAAe,CACpCC,YAAa,+BACbC,UAAW,cACR1B,KAAKkB,uBAEhB,CAOA,SAAMS,CAAIC,GAMN,aALkB5B,KAAK6B,UACFC,SACIC,MAAMC,GACpBA,EAAQC,KAAOL,GAG9B,CAIA,YAAMC,GACF,MAAMK,QAAgBlC,KAAKmC,QAAQ,YACnC,IAAIC,EAAe,GACnB,IACIA,QAAqBpC,KAAKmC,QAAQ,qBACtC,CACA,MAEA,CAGA,MAAME,EAAMH,EAAQI,OAAOF,GAErBzB,QAAgBX,KAAKW,QAW3B,MAAO,CAAEmB,eAVcS,QAAQF,IAAIA,EAAIG,KAAIC,MAAOC,IAC9C,IAAIvB,EACJ,MAAM,GAAEc,GAAOS,EACTC,EAA6C,QAAtCxB,QAAYR,EAAQiC,QAAQX,UAAyB,IAAPd,EAAgBA,EAAKuB,EAAOC,IACvF,MAAO,IACAE,EAAQC,SAASJ,GACpBC,MACAb,SAAU,QAAYa,GACzB,KAGT,CAQA,UAAMI,CAAKnB,EAAUe,eACJ3C,KAAKW,SAASqC,QAAQpB,EAAUe,EACjD,CAIA,aAAMR,CAAQc,GACV,IAAI9B,EACJ,MAAM+B,EAA6D,QAA9C/B,EAAK,EAAAgC,WAAWC,UAAU,sBAAmC,IAAPjC,EAAgBA,EAAK,IAEhG,mBAD0BkC,MAAM,EAAAC,OAAOC,KAAKL,EAAaD,KAAQO,MAErE,EAKJ,IAAIX,GACJ,SAAWA,GACP,MAAMY,EAAaC,KAAKC,MAAM,EAAAR,WAAWC,UAAU,sBAAwB,MAkB3EP,EAAQC,SAZR,SAAkBJ,GACd,GAAIe,EAAWf,EAAOT,IAAK,CAClBS,EAAOkB,OAAOC,aAEfnB,EAAOkB,OAAOC,WAAa,CAAC,GAEhC,IAAK,MAAOC,EAAMC,KAAgBC,OAAOC,QAAQR,EAAWf,EAAOT,KAAO,CAAC,GACvES,EAAOkB,OAAOC,WAAWC,GAAMI,QAAUH,CAEjD,CACA,OAAOrB,CACX,CAEH,CApBD,CAoBGG,IAAYA,EAAU,CAAC,ICrJnB,MAAMsB,EAAY,IAAI,EAAAC,MAAM,kC","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/settings/lib/settings.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/settings/lib/tokens.js"],"sourcesContent":["import { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport * as json5 from 'json5';\n/**\n * The name of the local storage.\n */\nconst DEFAULT_STORAGE_NAME = 'JupyterLite Storage';\n/**\n * A class to handle requests to /api/settings\n */\nexport class Settings {\n    constructor(options) {\n        this._storageName = DEFAULT_STORAGE_NAME;\n        this._storageDrivers = null;\n        this._localforage = options.localforage;\n        this._storageName = options.storageName || DEFAULT_STORAGE_NAME;\n        this._storageDrivers = options.storageDrivers || null;\n        this._ready = new PromiseDelegate();\n    }\n    /**\n     * A promise that resolves when the settings storage is fully initialized\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * A lazy reference to initialized storage\n     */\n    get storage() {\n        return this.ready.then(() => this._storage);\n    }\n    /**\n     * Finish any initialization after server has started and all extensions are applied.\n     */\n    async initialize() {\n        await this.initStorage();\n        this._ready.resolve(void 0);\n    }\n    /**\n     * Prepare the storage\n     */\n    async initStorage() {\n        this._storage = this.defaultSettingsStorage();\n    }\n    /**\n     * Get default options for localForage instances\n     */\n    get defaultStorageOptions() {\n        var _a;\n        const driver = ((_a = this._storageDrivers) === null || _a === void 0 ? void 0 : _a.length) ? this._storageDrivers : null;\n        return {\n            version: 1,\n            name: this._storageName,\n            ...(driver ? { driver } : {}),\n        };\n    }\n    /**\n     * Create a settings store.\n     */\n    defaultSettingsStorage() {\n        return this._localforage.createInstance({\n            description: 'Offline Storage for Settings',\n            storeName: 'settings',\n            ...this.defaultStorageOptions,\n        });\n    }\n    /**\n     * Get settings by plugin id\n     *\n     * @param pluginId the id of the plugin\n     *\n     */\n    async get(pluginId) {\n        const all = await this.getAll();\n        const settings = all.settings;\n        const setting = settings.find((setting) => {\n            return setting.id === pluginId;\n        });\n        return setting;\n    }\n    /**\n     * Get all the settings\n     */\n    async getAll() {\n        const allCore = await this._getAll('all.json');\n        let allFederated = [];\n        try {\n            allFederated = await this._getAll('all_federated.json');\n        }\n        catch {\n            // handle the case where there is no federated extension\n        }\n        // JupyterLab 4 expects all settings to be returned in one go\n        // so append the settings from federated plugins to the core ones\n        const all = allCore.concat(allFederated);\n        // return existing user settings if they exist\n        const storage = await this.storage;\n        const settings = await Promise.all(all.map(async (plugin) => {\n            var _a;\n            const { id } = plugin;\n            const raw = (_a = (await storage.getItem(id))) !== null && _a !== void 0 ? _a : plugin.raw;\n            return {\n                ...Private.override(plugin),\n                raw,\n                settings: json5.parse(raw),\n            };\n        }));\n        return { settings };\n    }\n    /**\n     * Save settings for a given plugin id\n     *\n     * @param pluginId The id of the plugin\n     * @param raw The raw settings\n     *\n     */\n    async save(pluginId, raw) {\n        await (await this.storage).setItem(pluginId, raw);\n    }\n    /**\n     * Get all the settings for core or federated plugins\n     */\n    async _getAll(file) {\n        var _a;\n        const settingsUrl = (_a = PageConfig.getOption('settingsUrl')) !== null && _a !== void 0 ? _a : '/';\n        const all = (await (await fetch(URLExt.join(settingsUrl, file))).json());\n        return all;\n    }\n}\n/**\n * A namespace for private data\n */\nvar Private;\n(function (Private) {\n    const _overrides = JSON.parse(PageConfig.getOption('settingsOverrides') || '{}');\n    /**\n     * Override the defaults of the schema with ones from PageConfig\n     *\n     * @see https://github.com/jupyterlab/jupyterlab_server/blob/v2.5.2/jupyterlab_server/settings_handler.py#L216-L227\n     */\n    function override(plugin) {\n        if (_overrides[plugin.id]) {\n            if (!plugin.schema.properties) {\n                // probably malformed, or only provides keyboard shortcuts, etc.\n                plugin.schema.properties = {};\n            }\n            for (const [prop, propDefault] of Object.entries(_overrides[plugin.id] || {})) {\n                plugin.schema.properties[prop].default = propDefault;\n            }\n        }\n        return plugin;\n    }\n    Private.override = override;\n})(Private || (Private = {}));\n//# sourceMappingURL=settings.js.map","import { Token } from '@lumino/coreutils';\n/**\n * The token for the settings service.\n */\nexport const ISettings = new Token('@jupyterlite/settings:ISettings');\n//# sourceMappingURL=tokens.js.map"],"names":["DEFAULT_STORAGE_NAME","Settings","constructor","options","this","_storageName","_storageDrivers","_localforage","localforage","storageName","storageDrivers","_ready","PromiseDelegate","ready","promise","storage","then","_storage","initialize","initStorage","resolve","defaultSettingsStorage","defaultStorageOptions","_a","driver","length","version","name","createInstance","description","storeName","get","pluginId","getAll","settings","find","setting","id","allCore","_getAll","allFederated","all","concat","Promise","map","async","plugin","raw","getItem","Private","override","save","setItem","file","settingsUrl","PageConfig","getOption","fetch","URLExt","join","json","_overrides","JSON","parse","schema","properties","prop","propDefault","Object","entries","default","ISettings","Token"],"sourceRoot":""}