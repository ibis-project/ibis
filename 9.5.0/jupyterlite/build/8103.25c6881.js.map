{"version":3,"file":"8103.25c6881.js","mappings":"2VA8TIA,E,8IApTG,MAAMC,EACT,WAAAC,GAIIC,KAAKC,gBAAkB,CAACC,EAASC,KAC7B,GACS,kBADDA,EAAIC,KAEJ,CACI,MAAMC,EAASF,EAAIG,MACnB,EAAAC,SAASC,iBAAiBR,KAAKS,QAASC,GAAMA,EAAEL,SAAWA,GAC/D,CAKR,OAAO,CAAI,EAEfL,KAAKS,OAAS,IAAIE,MAClBX,KAAKY,OAAS,IAAI,EAAAC,MAClB,EAAAC,YAAYC,mBAAmBf,KAAKY,OAAQZ,KAAKC,gBACrD,CAIA,SAAIe,GACA,OAAOhB,KAAKY,MAChB,CAMA,SAAAK,CAAUZ,EAAQa,GACdb,EAAOc,OAAS,KAChB,MAAMC,EAAO,CAAEf,SAAQa,QACjBG,EAAQ,EAAAd,SAASe,WAAWtB,KAAKS,OAAQW,EAAMvB,EAAQ0B,SAC7D,EAAAhB,SAASiB,OAAOxB,KAAKS,OAAQY,EAAOD,GACpCpB,KAAKY,OAAOa,aAAaJ,EAAOhB,EACpC,EAKG,MAAMqB,UAAyB5B,EAIlC,WAAAC,CAAY4B,GACRC,QACA5B,KAAK6B,iBAAkB,EACvB7B,KAAK8B,aAAe,IAAI,EAAAC,OAAO/B,MAC/BA,KAAKgC,eAAiB,IAAI,EAAAD,OAAO/B,MACjCA,KAAKiC,MAAQN,EACb3B,KAAKY,OAAOsB,OACZlC,KAAKmC,eAAiB,KACtBnC,KAAKoC,mBAAqB,KAC1BpC,KAAKqC,aAAe,IAAI,EAAAC,aACxBtC,KAAKqC,aAAaE,cAAcC,QAAQxC,KAAKyC,iBAAkBzC,MAC/DA,KAAK0C,aAAeC,SAASC,cAAc,UAC3C,EAAAC,UAAUC,QAAQ,CACdC,UAAW/C,KAAK0C,aAChBM,OAAQ,OACRC,MAAO,SAEXjD,KAAK0C,aAAaQ,QAAU,KACxBlD,KAAKmD,WACLnD,KAAKkC,MAAM,EAEflC,KAAK0C,aAAaU,UAAY,kCAC9BpD,KAAK0C,aAAaW,MAAQ,sBAC1B,MAAMC,EAAO,IAAI,EAAAC,OAAO,CAAEC,KAAMxD,KAAK0C,eACrC1C,KAAKY,OAAOK,UAAUqC,GACtBtD,KAAKY,OAAOK,UAAUjB,KAAKqC,aAC/B,CAIA,iBAAIoB,GACA,OAAQzD,KAAKmC,gBACTnC,KAAKoC,qBACJpC,KAAKS,OAAOiD,OAAS,EAAI1D,KAAKS,OAAO,GAAGJ,OAAS,KAC1D,CAIA,QAAIsB,GACA,OAAO3B,KAAKiC,KAChB,CAIA,aAAI0B,GACA,OAAO3D,KAAKY,OAAO+C,SACvB,CAIA,SAAI3C,GACA,OAAOhB,KAAKY,MAChB,CAIA,WAAIgD,GACA,OAAO5D,KAAKS,OAAOoD,KAAKC,GAAQA,EAAIzD,QACxC,CAIA,eAAI0D,GACA,OAAO/D,KAAK8B,YAChB,CAIA,iBAAIS,GACA,OAAOvC,KAAKgC,cAChB,CAIA,eAAIgC,GACA,OAAOhE,KAAK0C,YAChB,CAQA,MAAAuB,CAAOC,GACCA,EACIlE,KAAKmC,gBAAkBnC,KAAKmC,eAAe+B,KAAOA,GAClDlE,KAAKmD,WACLnD,KAAKkC,SAGLlC,KAAKmD,WACLnD,KAAKkC,OACLlC,KAAKmE,SAASD,GACdlE,KAAKoE,QAGJpE,KAAKyD,gBACVzD,KAAKmC,eAAiBnC,KAAKyD,cAC3BzD,KAAKmE,SAASnE,KAAKmC,eAAe+B,IAClClE,KAAKoE,OAEb,CAMA,QAAAD,CAASD,GACL,MAAM7D,EAASL,KAAKqE,gBAAgBH,GAChC7D,IACAL,KAAKmC,eAAiB9B,EACtBA,EAAO+D,OACP/D,EAAO8D,WAEf,CAIA,GAAAG,CAAIJ,GACA,OAAoC,OAA7BlE,KAAKqE,gBAAgBH,EAChC,CAIA,QAAAf,GACI,IAAIoB,EAC2B,QAA9BA,EAAKvE,KAAKmC,sBAAmC,IAAPoC,GAAyBA,EAAGrC,OACnElC,KAAKmC,eAAiB,IAC1B,CAMA,SAAAlB,CAAUZ,EAAQa,GACdb,EAAOc,OAAS,KAChBd,EAAO6B,OACP,MAAMd,EAAO,CAAEf,SAAQa,QACjBG,EAAQrB,KAAKwE,iBAAiBpD,GACpC,EAAAb,SAASiB,OAAOxB,KAAKS,OAAQY,EAAOD,GACpCpB,KAAKqC,aAAaZ,aAAaJ,EAAOhB,GACtCL,KAAKyE,qBACLzE,KAAK8B,aAAa4C,KAAKrE,EAC3B,CAIA,IAAA6B,GACIlC,KAAK6B,iBAAkB,EACvB7B,KAAKyE,oBACT,CAIA,IAAAL,GACIpE,KAAK6B,iBAAkB,EACvB7B,KAAKyE,oBACT,CAIA,gBAAAD,CAAiBpD,GACb,OAAO,EAAAb,SAASe,WAAWtB,KAAKS,OAAQW,EAAMvB,EAAQ0B,QAC1D,CAIA,gBAAAoD,CAAiBtE,GACb,OAAO,EAAAE,SAASqE,eAAe5E,KAAKS,QAASoE,GAAMA,EAAExE,SAAWA,GACpE,CAIA,eAAAgE,CAAgBH,GACZ,MAAM9C,GAAO,IAAA0D,MAAK9E,KAAKS,QAASsE,GAAUA,EAAM1E,OAAO6D,KAAOA,IAC9D,OAAO9C,EAAOA,EAAKf,OAAS,IAChC,CAIA,kBAAAoE,GACIzE,KAAKY,OAAOoE,UAAUhF,KAAK6B,gBAC/B,CAIA,gBAAAY,CAAiBwC,EAAQ5E,GACjBA,IAAWL,KAAKoC,qBAChBpC,KAAKoC,mBAAqB,MAE9B,EAAA7B,SAAS2E,SAASlF,KAAKS,OAAQT,KAAK2E,iBAAiBtE,IACrDL,KAAKyE,qBACLzE,KAAKgC,eAAe0C,KAAKrE,EAC7B,EAKG,MAAM8E,EAIT,WAAApF,CAAYqF,GACRpF,KAAKS,OAAS,GACdT,KAAKqF,gBAAkBD,EAAQE,eAC/BtF,KAAKuF,SAAWH,EAAQI,OAC5B,CAIA,OAAAC,CAAQpF,EAAQsB,GACZ,MAAM+D,EAAW1F,KAAKS,OACtB,IAAK,IAAIoE,EAAI,EAAGA,EAAIa,EAAShC,OAAQmB,IAAK,CACtC,MAAMzD,EAAOsE,EAASb,GACtB,GAAIzD,EAAKuE,WAAatF,EAAO6D,IAAM9C,EAAKO,OAASA,EAC7C,OAAOP,CAEf,CACA,OAAO,IACX,CAIA,OAAAwE,CAAQvF,EAAQsB,GAEZ,GAAI3B,KAAKyF,QAAQpF,EAAQsB,GACrB,OAGJ,MAAMkE,EAAqB7F,KAAKqF,gBAAgBO,QAAQ,CACpDJ,QAASxF,KAAKuF,SACdO,SAAU,OACVC,KAAM,CACFC,KAAMrE,EACN0B,MAAO,QAAQhD,EAAOgD,MAAM4C,UAC5B/B,GAAI7D,EAAO6D,MAKnBlE,KAAKS,OAAOyF,KAAK,CACbP,SAAUtF,EAAO6D,GACjBvC,KAAMA,EACNwE,WAAYN,GAEpB,CAIA,UAAAO,CAAW/F,EAAQsB,GACf,MAAMP,EAAOpB,KAAKyF,QAAQpF,EAAQsB,GAC9BP,GACAA,EAAK+E,WAAWE,SAExB,GAMJ,SAAWxG,GAOPA,EAAQ0B,QAHR,SAAiB+E,EAAOC,GACpB,OAAOD,EAAMpF,KAAOqF,EAAOrF,IAC/B,CAEH,CARD,CAQGrB,IAAYA,EAAU,CAAC,IC5TnB,MAAM2G,EAAiB,IAAI,EAAAC,MAAM,gDAQjC,MAAMC,UAAsB,EAAAnD,OAC/B,WAAAxD,GACI6B,QACA5B,KAAK2G,YAAc,EAAAC,eACnB5G,KAAK6G,gBAAkB,IAAI,EAAA9E,OAAO/B,MAClCA,KAAK8G,kBAAoB,IAAI,EAAAC,gBAC7B/G,KAAKkE,GAAK,OACVlE,KAAKgH,YAAc,CAAC,EACpBhH,KAAKiH,YAAc,IAAInH,EACvBE,KAAKkH,aAAe,IAAIpH,EACxBE,KAAKmH,aAAe,IAAIzF,EAAiB,QACzC1B,KAAKoH,cAAgB,IAAI1F,EAAiB,SAC1C1B,KAAKqH,MAAQ,IAAI,EAAAxG,MACjB,MAAMyG,EAActH,KAAKuH,YAAc,IAAI,EAAA1G,MACrC2G,EAAexH,KAAKyH,aAAe,IAAI,EAAA5G,MAC7Cb,KAAKiH,YAAYjG,MAAMkD,GAAK,YAC5BlE,KAAKiH,YAAYjG,MAAMwC,KAAKkE,aAAa,OAAQ,UACjD1H,KAAKkH,aAAalG,MAAMkD,GAAK,aAC7BlE,KAAKkH,aAAalG,MAAMwC,KAAKkE,aAAa,OAAQ,cAClD1H,KAAKqH,MAAMnD,GAAK,aAChBlE,KAAKqH,MAAM7D,KAAKkE,aAAa,OAAQ,QACrC1H,KAAK2H,YAAc,IAAI,EAAApE,OACvBvD,KAAK2H,YAAYzD,GAAK,oBACtBlE,KAAK4H,eAAiB,IAAI,EAAArE,OAC1BvD,KAAK4H,eAAe1D,GAAK,uBAEzBoD,EAAWpD,GAAK,oBAChBoD,EAAWrG,UAAUjB,KAAKiH,YAAYjG,OACtCwG,EAAYtD,GAAK,qBACjBsD,EAAYvG,UAAUjB,KAAKkH,aAAalG,OACxC,MAAM6G,EAAa,IAAI,EAAAC,UACjBC,EAAc/H,KAAKmH,aACnBa,EAAehI,KAAKoH,cAC1BW,EAAY/G,MAAMkD,GAAK,gBACvB6D,EAAY/G,MAAMwC,KAAKkE,aAAa,OAAQ,iBAC5CM,EAAahH,MAAMkD,GAAK,iBACxB8D,EAAahH,MAAMwC,KAAKkE,aAAa,OAAQ,iBAE7CK,EAAY7F,OACZ8F,EAAa9F,OACb,MAAM+F,EAAe,IAAI,EAAAH,UAAU,CAC/BI,QAAS,EACTC,UAAW,kBAEf,EAAAL,UAAUM,WAAWpI,KAAKuH,YAAa,GACvC,EAAAO,UAAUM,WAAWpI,KAAKyH,aAAc,GACxC,EAAAK,UAAUM,WAAWpI,KAAKqH,MAAO,GACjC,MAAMgB,EAAc,IAAI,EAAAxH,MAAM,CAAEyH,OAAQL,IACxCI,EAAYpH,UAAUjB,KAAKuH,aAC3Bc,EAAYpH,UAAUjB,KAAKyH,cAC3BY,EAAYpH,UAAUjB,KAAK2H,aAC3BU,EAAYpH,UAAUjB,KAAKqH,OAC3BgB,EAAYpH,UAAUjB,KAAK4H,gBAC3BS,EAAYC,OAASL,EAErB,MAAMM,EAAc,IAAI,EAAAC,WACxBD,EAAYrE,GAAK,mBACjBqE,EAAYL,QAAU,EACtB,EAAAJ,UAAUM,WAAWG,EAAa,GAClC,EAAAC,WAAWJ,WAAWL,EAAY/G,MAAO,GACzC,EAAAwH,WAAWJ,WAAWJ,EAAahH,MAAO,GAC1C,EAAAwH,WAAWJ,WAAWC,EAAa,GACnCE,EAAYtH,UAAU8G,EAAY/G,OAClCuH,EAAYtH,UAAUoH,GACtBE,EAAYtH,UAAU+G,EAAahH,OAInCuH,EAAYE,iBAAiB,CAAC,EAAG,IAAK,IACtCZ,EAAWK,QAAU,EACrBL,EAAW5G,UAAUsH,GACrBvI,KAAKsI,OAAST,EAEd,MAAMa,EAAyB1I,KAAK2I,uBAChC,IAAI,EAAQC,sBAAsB5I,MACtCA,KAAK6I,IAAIH,EAAsBI,eAAgB,MAAO,CAAE5H,KAAM,IAC9DlB,KAAK2I,uBAAuBvE,MAChC,CAIA,kBAAI2E,GACA,OAAO/I,KAAK6G,eAChB,CAIA,iBAAIpD,GACA,IAAIc,EACJ,OAAwC,QAAhCA,EAAKvE,KAAKqH,MAAMzD,QAAQ,UAAuB,IAAPW,EAAgBA,EAAK,IACzE,CAIA,OAAIyE,GACA,OAAOhJ,KAAKuH,WAChB,CAIA,QAAI0B,GACA,OAAOjJ,KAAKyH,YAChB,CAIA,eAAIM,GACA,OAAO/H,KAAKmH,YAChB,CAIA,gBAAIa,GACA,OAAOhI,KAAKoH,aAChB,CAIA,iBAAI8B,GACA,QAASlJ,KAAKmH,aAAaxD,WAAa3D,KAAKmH,aAAanG,MAAM2C,UACpE,CAIA,kBAAIwF,GACA,QAASnJ,KAAKoH,cAAczD,WAAa3D,KAAKoH,cAAcpG,MAAM2C,UACtE,CAIA,YAAIyF,GACA,OAAOpJ,KAAK8G,kBAAkBuC,OAClC,CAIA,cAAIC,GACA,IAAI/E,EACJ,OAAmC,QAA3BA,EAAKvE,KAAK2G,mBAAgC,IAAPpC,EAAgBA,EAAK,EAAAqC,cACpE,CACA,cAAI0C,CAAWvE,GACX,GAAIA,IAAU/E,KAAK2G,YAAa,CAC5B3G,KAAK2G,YAAc5B,EACnB,MAAMwE,EAAQxE,EAAMyE,KAAK,YACzBxJ,KAAKmH,aAAanD,YAAYX,MAAQkG,EAAME,GAAG,yBAA0BzJ,KAAKmH,aAAaxF,MAC3F3B,KAAKoH,cAAcpD,YAAYX,MAAQkG,EAAME,GAAG,yBAA0BzJ,KAAKoH,cAAczF,KACjG,CACJ,CAIA,cAAI+H,GACA,OAAO,EAAAC,QAAQC,SAAS5J,KAAKgH,YACjC,CAIA,YAAA6C,CAAa3F,GAET,IAAK,MAAMvC,IAAQ,CAAC,OAAQ,MAAO,OAAQ,QAAS,QAAS,CACzD,MAAMtB,GAAS,IAAAyE,MAAK9E,KAAK4D,QAAQjC,IAAQmI,GAAMA,EAAE5F,KAAOA,IACpD7D,IACa,SAATsB,EACA3B,KAAK+J,WAAW7F,GAEF,UAATvC,EACL3B,KAAKgK,YAAY9F,GAGjB7D,EAAO8D,WAGnB,CACJ,CAYA,GAAA0E,CAAIxI,EAAQsB,EAAMyD,GACd,IAAIb,EAAI0F,EACR,IAAIC,EAEAA,GADC9E,aAAyC,EAASA,EAAQhF,OAASJ,KAAKgH,YAAY5B,EAAQhF,MAC9EJ,KAAKgH,YAAY5B,EAAQhF,MAGzBJ,KAAKgH,YAAY3G,EAAO6D,IAE3CvC,EAAgG,QAAxF4C,EAAK2F,aAAmD,EAASA,EAAavI,YAAyB,IAAP4C,EAAgBA,EAAK5C,EAQ7H,MAAMT,EAAiF,QAAzE+I,EAAK7E,OAPnBA,EACIA,IAAY8E,aAAmD,EAASA,EAAa9E,SAC/E,IACKA,KACA8E,aAAmD,EAASA,EAAa9E,cAE9E+E,QACkD,EAAS/E,EAAQlE,YAAyB,IAAP+I,EAAgBA,EA9MlG,IA+Mb,OAAQtI,GACJ,IAAK,MACD,OAAO3B,KAAKiH,YAAYhG,UAAUZ,EAAQa,GAC9C,IAAK,OACD,OAAOlB,KAAKkH,aAAajG,UAAUZ,EAAQa,GAC/C,IAAK,OACL,UAAKiJ,EACD,GAAInK,KAAKqH,MAAMzD,QAAQF,OAAS,EAE5B,OAEJ1D,KAAKqH,MAAMpG,UAAUZ,GACrBL,KAAKqH,MAAM+C,SACXpK,KAAK6G,gBAAgBnC,UAAK,GAC1B1E,KAAK8G,kBAAkBuD,UACvB,MACJ,IAAK,OACD,OAAOrK,KAAKmH,aAAalG,UAAUZ,EAAQa,GAC/C,IAAK,QACD,OAAOlB,KAAKoH,cAAcnG,UAAUZ,EAAQa,GAChD,QACIoJ,QAAQC,KAAK,8BAA8B5I,KAEvD,CAIA,WAAA6I,GACIxK,KAAKuH,YAAYvC,WAAU,GAC3BhF,KAAK2H,YAAY3C,WAAU,EAC/B,CAIA,SAAAyF,GACIzK,KAAKuH,YAAYvC,WAAU,GAC3BhF,KAAK2H,YAAY3C,WAAU,EAC/B,CAMA,QAACpB,CAAQjC,GACL,OAAQA,QAAmCA,EAAO,QAC9C,IAAK,MAED,kBADO3B,KAAKiH,YAAYjG,MAAM4C,SAElC,IAAK,OAED,kBADO5D,KAAKkH,aAAalG,MAAM4C,SAEnC,IAAK,OAED,kBADO5D,KAAKqH,MAAMzD,SAEtB,IAAK,OAED,kBADO5D,KAAKmH,aAAavD,SAE7B,IAAK,QAED,kBADO5D,KAAKoH,cAAcxD,SAE9B,QAEI,YADA0G,QAAQI,MAAM,kCAAkC/I,MAG5D,CAIA,UAAAoI,CAAW7F,GACPlE,KAAKmH,aAAanG,MAAMoD,OACxBpE,KAAKmH,aAAalD,OAAOC,EAC7B,CAIA,YAAAyG,GACI3K,KAAKmH,aAAahE,WAClBnD,KAAKmH,aAAanG,MAAMkB,MAC5B,CAIA,WAAA8H,CAAY9F,GACRlE,KAAKoH,cAAcpG,MAAMoD,OACzBpE,KAAKoH,cAAcnD,OAAOC,EAC9B,CAIA,aAAA0G,GACI5K,KAAKoH,cAAcjE,WACnBnD,KAAKoH,cAAcpG,MAAMkB,MAC7B,CAIA,mBAAM2I,CAAcC,GAChB9K,KAAKgH,YAAc8D,CACvB,EAEG,IAAI,ECjLP,GDkLJ,SAAWjL,GAkEPA,EAAQ+I,sBAjER,MAII,WAAA7I,CAAYgL,GACR/K,KAAKgL,aAAc,EACnB,MAAMlC,EAAkB9I,KAAKiL,gBAAkB,IAAI,EAAA1H,OAC7C2H,EAAavI,SAASC,cAAc,KAC1CsI,EAAWC,KAAO,cAClBD,EAAWE,SAAW,EACtBF,EAAWG,KAAO,eAClBH,EAAW9H,UAAY,YACvB8H,EAAWI,iBAAiB,QAAStL,MACrC8I,EAAeyC,SAAS,eACxBzC,EAAe5E,GAAK,cACpB4E,EAAetF,KAAKgI,YAAYN,EACpC,CACA,WAAAO,CAAYC,GAEC,UADDA,EAAMtL,MAENJ,KAAK2L,YAGjB,CACA,UAAAA,GACI,MAAMC,EAAQjJ,SAASkJ,cAAc,oCACrCD,EAAMR,SAAW,EACjBQ,EAAME,OACV,CAIA,kBAAIhD,GACA,OAAO9I,KAAKiL,eAChB,CAIA,OAAA5E,GACQrG,KAAK+L,aAGT/L,KAAKgL,aAAc,EACnBhL,KAAKiL,gBAAgBzH,KAAKwI,oBAAoB,QAAShM,MACvDA,KAAKiL,gBAAgB5E,UACzB,CAIA,IAAAnE,GACIlC,KAAKiL,gBAAgB/I,MACzB,CAIA,IAAAkC,GACIpE,KAAKiL,gBAAgB7G,MACzB,CAIA,cAAI2H,GACA,OAAO/L,KAAKgL,WAChB,EAGP,CAnED,CAmEG,IAAY,EAAU,CAAC,IC1XnB,MAAMiB,UAAoB,EAAAC,gBAM7B,WAAAnM,CAAYqF,EAAU,CAAE2F,MAAO,IAAIrE,IAC/B,IAAInC,EAAI0F,EAwBR,GAvBArI,MAAM,IAAKwD,EAAS2F,MAAgC,QAAxBxG,EAAKa,EAAQ2F,aAA0B,IAAPxG,EAAgBA,EAAK,IAAImC,IAIrF1G,KAAKmM,KAAO,mBAIZnM,KAAKoM,UAAYpM,KAAKmM,KAItBnM,KAAKqM,OAAS,IAAI,IAAUrM,MAI5BA,KAAKsM,QAAwD,QAA7CrC,EAAK,EAAAsC,WAAWC,UAAU,qBAAkC,IAAPvC,EAAgBA,EAAK,UAC1FjK,KAAKyM,MAAQ,EAAAC,WAAWC,YACxB3M,KAAK4M,WAAa,IAAI,EAAAC,WAAU,KAC5B,EAAQC,UAAU9M,KAAK,GACxB,KAEHA,KAAK+M,YAAYC,gBAAgB,IAAI,EAAAC,oBACjC7H,EAAQ8H,eACR,IAAK,MAAMC,KAAU,QAAwB/H,EAAQ8H,gBACjDlN,KAAKoN,eAAeD,GAI5B,MAAME,EAAOC,OAAOC,KAAK,EAAAb,WAAWC,aAAaa,QAAO,CAACC,EAAKC,KACtDA,KAAOtI,IACPqI,EAAIC,GAAOC,KAAKC,MAAMD,KAAKE,UAAUzI,EAAQsI,MAE1CD,IACR,CAAC,GAEJzN,KAAKyM,MAAQ,IAAK,EAAAC,WAAWC,eAAgBU,GAC7CrN,KAAKoJ,SAAWpJ,KAAK+K,MAAM3B,SAC3BpJ,KAAKoJ,SAAS0E,MAAK,IAAM9N,KAAK4M,WAAWmB,UAC7C,CAIA,QAAIV,GACA,OAAOrN,KAAKyM,KAChB,CAIA,SAAIuB,GACA,MAAO,CACHC,KAAM,CACFC,KAAM,EAAA3B,WAAWC,UAAU,WAC3B2B,SAAU,EAAA5B,WAAWC,UAAU,eAC/B4B,IAAK,EAAA7B,WAAWC,UAAU,UAC1B6B,OAAQ,EAAA9B,WAAWC,UAAU,aAC7B8B,SAAU,EAAA/B,WAAWC,UAAU,eAC/B+B,OAAQ,EAAAhC,WAAWC,UAAU,aAC7BgC,IAAK,EAAAjC,WAAWC,UAAU,UAC1BiC,aAAc,EAAAlC,WAAWC,UAAU,sBACnCkC,QAAS,EAAAnC,WAAWC,UAAU,iBAAcrC,EAC5CwE,UAAW,EAAApC,WAAWC,UAAU,mBAAgBrC,EAChDyE,QAAS,EAAArC,WAAWC,UAAU,iBAAcrC,EAC5C0E,cAAe,EAAAtC,WAAWC,UAAU,uBAAoBrC,GAE5D2E,YAAa,CACTC,YAAa,EAAAxC,WAAWC,UAAU,kBAClCwC,QAAS,EAAAzC,WAAWC,UAAU,cAC9B6B,OAAQ,EAAA9B,WAAWC,UAAU,aAC7ByC,UAAW,EAAA1C,WAAWC,UAAU,gBAChC+B,OAAQ,EAAAhC,WAAWC,UAAU,aAC7B0C,aAAc,EAAA3C,WAAWC,UAAU,mBACnC2C,WAAY,EAAA5C,WAAWC,UAAU,cACjC4C,WAAY,EAAA7C,WAAWC,UAAU,kBAG7C,CAMA,WAAAf,CAAYC,GACR9J,MAAM6J,YAAYC,GACC,WAAfA,EAAMtL,MACDJ,KAAK4M,WAAWmB,QAE7B,CAMA,oBAAAsB,CAAqBC,GACjB,IAAIC,EAAOD,EAAIE,QAEVlC,OAAOmC,UAAUC,eAAeC,KAAKL,EAAK,gBAC3CC,EAAOD,GAEN3O,MAAMiP,QAAQL,KACfA,EAAO,CAACA,IAEZA,EAAKM,SAASzO,IACV,IACIpB,KAAKoN,eAAehM,EACxB,CACA,MAAOsJ,GACHJ,QAAQI,MAAMA,EAClB,IAER,CAMA,qBAAAoF,CAAsBC,GAClBA,EAAKF,SAASP,IACVtP,KAAKqP,qBAAqBC,EAAI,GAEtC,GAMJ,SAAWzP,GAaPA,EAAQiN,UAHR,SAAmBsB,GACfA,EAAI4B,OAASC,OAAOC,WAPH,sCAO4BC,QAAU,SAAW,SACtE,CAEH,CAdD,CAcG,IAAY,EAAU,CAAC,IC7InB,MAAMC,EAA4B,IAbzC,MAII,IAAAC,CAAKjL,GACD,MAAM,OAAEkL,EAAM,KAAEC,EAAI,aAAEC,EAAY,OAAEC,EAAM,SAAEC,GAAatL,EACnDuL,EAAM,IAAIC,IAAI,EAAAC,OAAOC,KAAKR,EAAQC,QAAmCA,EAAO,IAAKN,OAAOc,SAASC,QAIvG,OAHIR,IACAG,EAAIM,OAAST,EAAaU,YAEvBjB,OAAOI,KAAKM,EAAKF,EAAQC,EACpC,GCVSS,EAAsB,IAAI,EAAA1K,MAAM,oD","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/application/lib/panelhandler.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/application/lib/shell.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/application/lib/app.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/application/lib/pathopener.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/application/lib/tokens.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { closeIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt, find } from '@lumino/algorithm';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, StackedPanel, Widget } from '@lumino/widgets';\n/**\n * A class which manages a panel and sorts its widgets by rank.\n */\nexport class PanelHandler {\n    constructor() {\n        /**\n         * A message hook for child remove messages on the panel handler.\n         */\n        this._panelChildHook = (handler, msg) => {\n            switch (msg.type) {\n                case 'child-removed':\n                    {\n                        const widget = msg.child;\n                        ArrayExt.removeFirstWhere(this._items, (v) => v.widget === widget);\n                    }\n                    break;\n                default:\n                    break;\n            }\n            return true;\n        };\n        this._items = new Array();\n        this._panel = new Panel();\n        MessageLoop.installMessageHook(this._panel, this._panelChildHook);\n    }\n    /**\n     * Get the panel managed by the handler.\n     */\n    get panel() {\n        return this._panel;\n    }\n    /**\n     * Add a widget to the panel.\n     *\n     * If the widget is already added, it will be moved.\n     */\n    addWidget(widget, rank) {\n        widget.parent = null;\n        const item = { widget, rank };\n        const index = ArrayExt.upperBound(this._items, item, Private.itemCmp);\n        ArrayExt.insert(this._items, index, item);\n        this._panel.insertWidget(index, widget);\n    }\n}\n/**\n * A class which manages a side panel that can show at most one widget at a time.\n */\nexport class SidePanelHandler extends PanelHandler {\n    /**\n     * Construct a new side panel handler.\n     */\n    constructor(area) {\n        super();\n        this._isHiddenByUser = false;\n        this._widgetAdded = new Signal(this);\n        this._widgetRemoved = new Signal(this);\n        this._area = area;\n        this._panel.hide();\n        this._currentWidget = null;\n        this._lastCurrentWidget = null;\n        this._widgetPanel = new StackedPanel();\n        this._widgetPanel.widgetRemoved.connect(this._onWidgetRemoved, this);\n        this._closeButton = document.createElement('button');\n        closeIcon.element({\n            container: this._closeButton,\n            height: '16px',\n            width: 'auto',\n        });\n        this._closeButton.onclick = () => {\n            this.collapse();\n            this.hide();\n        };\n        this._closeButton.className = 'jp-Button jp-SidePanel-collapse';\n        this._closeButton.title = 'Collapse side panel';\n        const icon = new Widget({ node: this._closeButton });\n        this._panel.addWidget(icon);\n        this._panel.addWidget(this._widgetPanel);\n    }\n    /**\n     * Get the current widget in the sidebar panel.\n     */\n    get currentWidget() {\n        return (this._currentWidget ||\n            this._lastCurrentWidget ||\n            (this._items.length > 0 ? this._items[0].widget : null));\n    }\n    /**\n     * Get the area of the side panel\n     */\n    get area() {\n        return this._area;\n    }\n    /**\n     * Whether the panel is visible\n     */\n    get isVisible() {\n        return this._panel.isVisible;\n    }\n    /**\n     * Get the stacked panel managed by the handler\n     */\n    get panel() {\n        return this._panel;\n    }\n    /**\n     * Get the widgets list.\n     */\n    get widgets() {\n        return this._items.map((obj) => obj.widget);\n    }\n    /**\n     * Signal fired when a widget is added to the panel\n     */\n    get widgetAdded() {\n        return this._widgetAdded;\n    }\n    /**\n     * Signal fired when a widget is removed from the panel\n     */\n    get widgetRemoved() {\n        return this._widgetRemoved;\n    }\n    /**\n     * Get the close button element.\n     */\n    get closeButton() {\n        return this._closeButton;\n    }\n    /**\n     * Expand the sidebar.\n     *\n     * #### Notes\n     * This will open the most recently used widget, or the first widget\n     * if there is no most recently used.\n     */\n    expand(id) {\n        if (id) {\n            if (this._currentWidget && this._currentWidget.id === id) {\n                this.collapse();\n                this.hide();\n            }\n            else {\n                this.collapse();\n                this.hide();\n                this.activate(id);\n                this.show();\n            }\n        }\n        else if (this.currentWidget) {\n            this._currentWidget = this.currentWidget;\n            this.activate(this._currentWidget.id);\n            this.show();\n        }\n    }\n    /**\n     * Activate a widget residing in the stacked panel by ID.\n     *\n     * @param id - The widget's unique ID.\n     */\n    activate(id) {\n        const widget = this._findWidgetByID(id);\n        if (widget) {\n            this._currentWidget = widget;\n            widget.show();\n            widget.activate();\n        }\n    }\n    /**\n     * Test whether the sidebar has the given widget by id.\n     */\n    has(id) {\n        return this._findWidgetByID(id) !== null;\n    }\n    /**\n     * Collapse the sidebar so no items are expanded.\n     */\n    collapse() {\n        var _a;\n        (_a = this._currentWidget) === null || _a === void 0 ? void 0 : _a.hide();\n        this._currentWidget = null;\n    }\n    /**\n     * Add a widget and its title to the stacked panel.\n     *\n     * If the widget is already added, it will be moved.\n     */\n    addWidget(widget, rank) {\n        widget.parent = null;\n        widget.hide();\n        const item = { widget, rank };\n        const index = this._findInsertIndex(item);\n        ArrayExt.insert(this._items, index, item);\n        this._widgetPanel.insertWidget(index, widget);\n        this._refreshVisibility();\n        this._widgetAdded.emit(widget);\n    }\n    /**\n     * Hide the side panel\n     */\n    hide() {\n        this._isHiddenByUser = true;\n        this._refreshVisibility();\n    }\n    /**\n     * Show the side panel\n     */\n    show() {\n        this._isHiddenByUser = false;\n        this._refreshVisibility();\n    }\n    /**\n     * Find the insertion index for a rank item.\n     */\n    _findInsertIndex(item) {\n        return ArrayExt.upperBound(this._items, item, Private.itemCmp);\n    }\n    /**\n     * Find the index of the item with the given widget, or `-1`.\n     */\n    _findWidgetIndex(widget) {\n        return ArrayExt.findFirstIndex(this._items, (i) => i.widget === widget);\n    }\n    /**\n     * Find the widget with the given id, or `null`.\n     */\n    _findWidgetByID(id) {\n        const item = find(this._items, (value) => value.widget.id === id);\n        return item ? item.widget : null;\n    }\n    /**\n     * Refresh the visibility of the stacked panel.\n     */\n    _refreshVisibility() {\n        this._panel.setHidden(this._isHiddenByUser);\n    }\n    /*\n     * Handle the `widgetRemoved` signal from the panel.\n     */\n    _onWidgetRemoved(sender, widget) {\n        if (widget === this._lastCurrentWidget) {\n            this._lastCurrentWidget = null;\n        }\n        ArrayExt.removeAt(this._items, this._findWidgetIndex(widget));\n        this._refreshVisibility();\n        this._widgetRemoved.emit(widget);\n    }\n}\n/**\n * A class to manages the palette entries associated to the side panels.\n */\nexport class SidePanelPalette {\n    /**\n     * Construct a new side panel palette.\n     */\n    constructor(options) {\n        this._items = [];\n        this._commandPalette = options.commandPalette;\n        this._command = options.command;\n    }\n    /**\n     * Get a command palette item from the widget id and the area.\n     */\n    getItem(widget, area) {\n        const itemList = this._items;\n        for (let i = 0; i < itemList.length; i++) {\n            const item = itemList[i];\n            if (item.widgetId === widget.id && item.area === area) {\n                return item;\n            }\n        }\n        return null;\n    }\n    /**\n     * Add an item to the command palette.\n     */\n    addItem(widget, area) {\n        // Check if the item does not already exist.\n        if (this.getItem(widget, area)) {\n            return;\n        }\n        // Add a new item in command palette.\n        const disposableDelegate = this._commandPalette.addItem({\n            command: this._command,\n            category: 'View',\n            args: {\n                side: area,\n                title: `Show ${widget.title.caption}`,\n                id: widget.id,\n            },\n        });\n        // Keep the disposableDelegate object to be able to dispose of the item if the widget\n        // is remove from the side panel.\n        this._items.push({\n            widgetId: widget.id,\n            area: area,\n            disposable: disposableDelegate,\n        });\n    }\n    /**\n     * Remove an item from the command palette.\n     */\n    removeItem(widget, area) {\n        const item = this.getItem(widget, area);\n        if (item) {\n            item.disposable.dispose();\n        }\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A less-than comparison function for side bar rank items.\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { find } from '@lumino/algorithm';\nimport { JSONExt, PromiseDelegate, Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { BoxLayout, Panel, SplitPanel, Widget } from '@lumino/widgets';\nimport { PanelHandler, SidePanelHandler } from './panelhandler';\n/**\n * The Jupyter Notebook application shell token.\n */\nexport const INotebookShell = new Token('@jupyter-notebook/application:INotebookShell');\n/**\n * The default rank for ranked panels.\n */\nconst DEFAULT_RANK = 900;\n/**\n * The application shell.\n */\nexport class NotebookShell extends Widget {\n    constructor() {\n        super();\n        this._translator = nullTranslator;\n        this._currentChanged = new Signal(this);\n        this._mainWidgetLoaded = new PromiseDelegate();\n        this.id = 'main';\n        this._userLayout = {};\n        this._topHandler = new PanelHandler();\n        this._menuHandler = new PanelHandler();\n        this._leftHandler = new SidePanelHandler('left');\n        this._rightHandler = new SidePanelHandler('right');\n        this._main = new Panel();\n        const topWrapper = (this._topWrapper = new Panel());\n        const menuWrapper = (this._menuWrapper = new Panel());\n        this._topHandler.panel.id = 'top-panel';\n        this._topHandler.panel.node.setAttribute('role', 'banner');\n        this._menuHandler.panel.id = 'menu-panel';\n        this._menuHandler.panel.node.setAttribute('role', 'navigation');\n        this._main.id = 'main-panel';\n        this._main.node.setAttribute('role', 'main');\n        this._spacer_top = new Widget();\n        this._spacer_top.id = 'spacer-widget-top';\n        this._spacer_bottom = new Widget();\n        this._spacer_bottom.id = 'spacer-widget-bottom';\n        // create wrappers around the top and menu areas\n        topWrapper.id = 'top-panel-wrapper';\n        topWrapper.addWidget(this._topHandler.panel);\n        menuWrapper.id = 'menu-panel-wrapper';\n        menuWrapper.addWidget(this._menuHandler.panel);\n        const rootLayout = new BoxLayout();\n        const leftHandler = this._leftHandler;\n        const rightHandler = this._rightHandler;\n        leftHandler.panel.id = 'jp-left-stack';\n        leftHandler.panel.node.setAttribute('role', 'complementary');\n        rightHandler.panel.id = 'jp-right-stack';\n        rightHandler.panel.node.setAttribute('role', 'complementary');\n        // Hide the side panels by default.\n        leftHandler.hide();\n        rightHandler.hide();\n        const middleLayout = new BoxLayout({\n            spacing: 0,\n            direction: 'top-to-bottom',\n        });\n        BoxLayout.setStretch(this._topWrapper, 0);\n        BoxLayout.setStretch(this._menuWrapper, 0);\n        BoxLayout.setStretch(this._main, 1);\n        const middlePanel = new Panel({ layout: middleLayout });\n        middlePanel.addWidget(this._topWrapper);\n        middlePanel.addWidget(this._menuWrapper);\n        middlePanel.addWidget(this._spacer_top);\n        middlePanel.addWidget(this._main);\n        middlePanel.addWidget(this._spacer_bottom);\n        middlePanel.layout = middleLayout;\n        // TODO: Consider storing this as an attribute this._hsplitPanel if saving/restoring layout needed\n        const hsplitPanel = new SplitPanel();\n        hsplitPanel.id = 'main-split-panel';\n        hsplitPanel.spacing = 1;\n        BoxLayout.setStretch(hsplitPanel, 1);\n        SplitPanel.setStretch(leftHandler.panel, 0);\n        SplitPanel.setStretch(rightHandler.panel, 0);\n        SplitPanel.setStretch(middlePanel, 1);\n        hsplitPanel.addWidget(leftHandler.panel);\n        hsplitPanel.addWidget(middlePanel);\n        hsplitPanel.addWidget(rightHandler.panel);\n        // Use relative sizing to set the width of the side panels.\n        // This will still respect the min-size of children widget in the stacked\n        // panel.\n        hsplitPanel.setRelativeSizes([1, 2.5, 1]);\n        rootLayout.spacing = 0;\n        rootLayout.addWidget(hsplitPanel);\n        this.layout = rootLayout;\n        // Added Skip to Main Link\n        const skipLinkWidgetHandler = (this._skipLinkWidgetHandler =\n            new Private.SkipLinkWidgetHandler(this));\n        this.add(skipLinkWidgetHandler.skipLinkWidget, 'top', { rank: 0 });\n        this._skipLinkWidgetHandler.show();\n    }\n    /**\n     * A signal emitted when the current widget changes.\n     */\n    get currentChanged() {\n        return this._currentChanged;\n    }\n    /**\n     * The current widget in the shell's main area.\n     */\n    get currentWidget() {\n        var _a;\n        return (_a = this._main.widgets[0]) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Get the top area wrapper panel\n     */\n    get top() {\n        return this._topWrapper;\n    }\n    /**\n     * Get the menu area wrapper panel\n     */\n    get menu() {\n        return this._menuWrapper;\n    }\n    /**\n     * Get the left area handler\n     */\n    get leftHandler() {\n        return this._leftHandler;\n    }\n    /**\n     * Get the right area handler\n     */\n    get rightHandler() {\n        return this._rightHandler;\n    }\n    /**\n     * Is the left sidebar visible?\n     */\n    get leftCollapsed() {\n        return !(this._leftHandler.isVisible && this._leftHandler.panel.isVisible);\n    }\n    /**\n     * Is the right sidebar visible?\n     */\n    get rightCollapsed() {\n        return !(this._rightHandler.isVisible && this._rightHandler.panel.isVisible);\n    }\n    /**\n     * Promise that resolves when the main widget is loaded\n     */\n    get restored() {\n        return this._mainWidgetLoaded.promise;\n    }\n    /**\n     * Getter and setter for the translator.\n     */\n    get translator() {\n        var _a;\n        return (_a = this._translator) !== null && _a !== void 0 ? _a : nullTranslator;\n    }\n    set translator(value) {\n        if (value !== this._translator) {\n            this._translator = value;\n            const trans = value.load('notebook');\n            this._leftHandler.closeButton.title = trans.__('Collapse %1 side panel', this._leftHandler.area);\n            this._rightHandler.closeButton.title = trans.__('Collapse %1 side panel', this._rightHandler.area);\n        }\n    }\n    /**\n     * User custom shell layout.\n     */\n    get userLayout() {\n        return JSONExt.deepCopy(this._userLayout);\n    }\n    /**\n     * Activate a widget in its area.\n     */\n    activateById(id) {\n        // Search all areas that can have widgets for this widget, starting with main.\n        for (const area of ['main', 'top', 'left', 'right', 'menu']) {\n            const widget = find(this.widgets(area), (w) => w.id === id);\n            if (widget) {\n                if (area === 'left') {\n                    this.expandLeft(id);\n                }\n                else if (area === 'right') {\n                    this.expandRight(id);\n                }\n                else {\n                    widget.activate();\n                }\n            }\n        }\n    }\n    /**\n     * Add a widget to the application shell.\n     *\n     * @param widget - The widget being added.\n     *\n     * @param area - Optional region in the shell into which the widget should\n     * be added.\n     *\n     * @param options - Optional open options.\n     *\n     */\n    add(widget, area, options) {\n        var _a, _b;\n        let userPosition;\n        if ((options === null || options === void 0 ? void 0 : options.type) && this._userLayout[options.type]) {\n            userPosition = this._userLayout[options.type];\n        }\n        else {\n            userPosition = this._userLayout[widget.id];\n        }\n        area = (_a = userPosition === null || userPosition === void 0 ? void 0 : userPosition.area) !== null && _a !== void 0 ? _a : area;\n        options =\n            options || (userPosition === null || userPosition === void 0 ? void 0 : userPosition.options)\n                ? {\n                    ...options,\n                    ...userPosition === null || userPosition === void 0 ? void 0 : userPosition.options,\n                }\n                : undefined;\n        const rank = (_b = options === null || options === void 0 ? void 0 : options.rank) !== null && _b !== void 0 ? _b : DEFAULT_RANK;\n        switch (area) {\n            case 'top':\n                return this._topHandler.addWidget(widget, rank);\n            case 'menu':\n                return this._menuHandler.addWidget(widget, rank);\n            case 'main':\n            case undefined:\n                if (this._main.widgets.length > 0) {\n                    // do not add the widget if there is already one\n                    return;\n                }\n                this._main.addWidget(widget);\n                this._main.update();\n                this._currentChanged.emit(void 0);\n                this._mainWidgetLoaded.resolve();\n                break;\n            case 'left':\n                return this._leftHandler.addWidget(widget, rank);\n            case 'right':\n                return this._rightHandler.addWidget(widget, rank);\n            default:\n                console.warn(`Cannot add widget to area: ${area}`);\n        }\n    }\n    /**\n     * Collapse the top area and the spacer to make the view more compact.\n     */\n    collapseTop() {\n        this._topWrapper.setHidden(true);\n        this._spacer_top.setHidden(true);\n    }\n    /**\n     * Expand the top area to show the header and the spacer.\n     */\n    expandTop() {\n        this._topWrapper.setHidden(false);\n        this._spacer_top.setHidden(false);\n    }\n    /**\n     * Return the list of widgets for the given area.\n     *\n     * @param area The area\n     */\n    *widgets(area) {\n        switch (area !== null && area !== void 0 ? area : 'main') {\n            case 'top':\n                yield* this._topHandler.panel.widgets;\n                return;\n            case 'menu':\n                yield* this._menuHandler.panel.widgets;\n                return;\n            case 'main':\n                yield* this._main.widgets;\n                return;\n            case 'left':\n                yield* this._leftHandler.widgets;\n                return;\n            case 'right':\n                yield* this._rightHandler.widgets;\n                return;\n            default:\n                console.error(`This shell has no area called \"${area}\"`);\n                return;\n        }\n    }\n    /**\n     * Expand the left panel to show the sidebar with its widget.\n     */\n    expandLeft(id) {\n        this._leftHandler.panel.show();\n        this._leftHandler.expand(id); // Show the current widget, if any\n    }\n    /**\n     * Collapse the left panel\n     */\n    collapseLeft() {\n        this._leftHandler.collapse();\n        this._leftHandler.panel.hide();\n    }\n    /**\n     * Expand the right panel to show the sidebar with its widget.\n     */\n    expandRight(id) {\n        this._rightHandler.panel.show();\n        this._rightHandler.expand(id); // Show the current widget, if any\n    }\n    /**\n     * Collapse the right panel\n     */\n    collapseRight() {\n        this._rightHandler.collapse();\n        this._rightHandler.panel.hide();\n    }\n    /**\n     * Restore the layout state and configuration for the application shell.\n     */\n    async restoreLayout(configuration) {\n        this._userLayout = configuration;\n    }\n}\nexport var Private;\n(function (Private) {\n    class SkipLinkWidgetHandler {\n        /**\n         * Construct a new skipLink widget handler.\n         */\n        constructor(shell) {\n            this._isDisposed = false;\n            const skipLinkWidget = (this._skipLinkWidget = new Widget());\n            const skipToMain = document.createElement('a');\n            skipToMain.href = '#first-cell';\n            skipToMain.tabIndex = 1;\n            skipToMain.text = 'Skip to Main';\n            skipToMain.className = 'skip-link';\n            skipToMain.addEventListener('click', this);\n            skipLinkWidget.addClass('jp-skiplink');\n            skipLinkWidget.id = 'jp-skiplink';\n            skipLinkWidget.node.appendChild(skipToMain);\n        }\n        handleEvent(event) {\n            switch (event.type) {\n                case 'click':\n                    this._focusMain();\n                    break;\n            }\n        }\n        _focusMain() {\n            const input = document.querySelector('#main-panel .jp-InputArea-editor');\n            input.tabIndex = 1;\n            input.focus();\n        }\n        /**\n         * Get the input element managed by the handler.\n         */\n        get skipLinkWidget() {\n            return this._skipLinkWidget;\n        }\n        /**\n         * Dispose of the handler and the resources it holds.\n         */\n        dispose() {\n            if (this.isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this._skipLinkWidget.node.removeEventListener('click', this);\n            this._skipLinkWidget.dispose();\n        }\n        /**\n         * Hide the skipLink widget.\n         */\n        hide() {\n            this._skipLinkWidget.hide();\n        }\n        /**\n         * Show the skipLink widget.\n         */\n        show() {\n            this._skipLinkWidget.show();\n        }\n        /**\n         * Test whether the handler has been disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n    }\n    Private.SkipLinkWidgetHandler = SkipLinkWidgetHandler;\n})(Private || (Private = {}));\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JupyterLab, JupyterFrontEnd, } from '@jupyterlab/application';\nimport { Base64ModelFactory } from '@jupyterlab/docregistry';\nimport { createRendermimePlugins } from '@jupyterlab/application/lib/mimerenderers';\nimport { LabStatus } from '@jupyterlab/application/lib/status';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Throttler } from '@lumino/polling';\nimport { NotebookShell } from './shell';\n/**\n * App is the main application class. It is instantiated once and shared.\n */\nexport class NotebookApp extends JupyterFrontEnd {\n    /**\n     * Construct a new NotebookApp object.\n     *\n     * @param options The instantiation options for an application.\n     */\n    constructor(options = { shell: new NotebookShell() }) {\n        var _a, _b;\n        super({ ...options, shell: (_a = options.shell) !== null && _a !== void 0 ? _a : new NotebookShell() });\n        /**\n         * The name of the application.\n         */\n        this.name = 'Jupyter Notebook';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The application busy and dirty status signals and flags.\n         */\n        this.status = new LabStatus(this);\n        /**\n         * The version of the application.\n         */\n        this.version = (_b = PageConfig.getOption('appVersion')) !== null && _b !== void 0 ? _b : 'unknown';\n        this._info = JupyterLab.defaultInfo;\n        this._formatter = new Throttler(() => {\n            Private.setFormat(this);\n        }, 250);\n        // Add initial model factory.\n        this.docRegistry.addModelFactory(new Base64ModelFactory());\n        if (options.mimeExtensions) {\n            for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n                this.registerPlugin(plugin);\n            }\n        }\n        // Create an IInfo dictionary from the options to override the defaults.\n        const info = Object.keys(JupyterLab.defaultInfo).reduce((acc, val) => {\n            if (val in options) {\n                acc[val] = JSON.parse(JSON.stringify(options[val]));\n            }\n            return acc;\n        }, {});\n        // Populate application info.\n        this._info = { ...JupyterLab.defaultInfo, ...info };\n        this.restored = this.shell.restored;\n        this.restored.then(() => this._formatter.invoke());\n    }\n    /**\n     * The NotebookApp application information dictionary.\n     */\n    get info() {\n        return this._info;\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return {\n            urls: {\n                base: PageConfig.getOption('baseUrl'),\n                notFound: PageConfig.getOption('notFoundUrl'),\n                app: PageConfig.getOption('appUrl'),\n                static: PageConfig.getOption('staticUrl'),\n                settings: PageConfig.getOption('settingsUrl'),\n                themes: PageConfig.getOption('themesUrl'),\n                doc: PageConfig.getOption('docUrl'),\n                translations: PageConfig.getOption('translationsApiUrl'),\n                hubHost: PageConfig.getOption('hubHost') || undefined,\n                hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n                hubUser: PageConfig.getOption('hubUser') || undefined,\n                hubServerName: PageConfig.getOption('hubServerName') || undefined,\n            },\n            directories: {\n                appSettings: PageConfig.getOption('appSettingsDir'),\n                schemas: PageConfig.getOption('schemasDir'),\n                static: PageConfig.getOption('staticDir'),\n                templates: PageConfig.getOption('templatesDir'),\n                themes: PageConfig.getOption('themesDir'),\n                userSettings: PageConfig.getOption('userSettingsDir'),\n                serverRoot: PageConfig.getOption('serverRoot'),\n                workspaces: PageConfig.getOption('workspacesDir'),\n            },\n        };\n    }\n    /**\n     * Handle the DOM events for the application.\n     *\n     * @param event - The DOM event sent to the application.\n     */\n    handleEvent(event) {\n        super.handleEvent(event);\n        if (event.type === 'resize') {\n            void this._formatter.invoke();\n        }\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach((item) => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach((mod) => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Media query for mobile devices.\n     */\n    const MOBILE_QUERY = 'only screen and (max-width: 760px)';\n    /**\n     * Sets the `format` of a Jupyter front-end application.\n     *\n     * @param app The front-end application whose format is set.\n     */\n    function setFormat(app) {\n        app.format = window.matchMedia(MOBILE_QUERY).matches ? 'mobile' : 'desktop';\n    }\n    Private.setFormat = setFormat;\n})(Private || (Private = {}));\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { URLExt } from '@jupyterlab/coreutils';\n/**\n * A class to open paths in new browser tabs in the Notebook application.\n */\nclass DefaultNotebookPathOpener {\n    /**\n     * Open a path in a new browser tab.\n     */\n    open(options) {\n        const { prefix, path, searchParams, target, features } = options;\n        const url = new URL(URLExt.join(prefix, path !== null && path !== void 0 ? path : ''), window.location.origin);\n        if (searchParams) {\n            url.search = searchParams.toString();\n        }\n        return window.open(url, target, features);\n    }\n}\nexport const defaultNotebookPathOpener = new DefaultNotebookPathOpener();\n","import { Token } from '@lumino/coreutils';\n/**\n * The INotebookPathOpener token.\n * The main purpose of this token is to allow other extensions or downstream applications\n * to override the default behavior of opening a notebook in a new tab.\n * It also allows passing the path as a URL search parameter, or other options to the window.open call.\n */\nexport const INotebookPathOpener = new Token('@jupyter-notebook/application:INotebookPathOpener');\n"],"names":["Private","PanelHandler","constructor","this","_panelChildHook","handler","msg","type","widget","child","ArrayExt","removeFirstWhere","_items","v","Array","_panel","Panel","MessageLoop","installMessageHook","panel","addWidget","rank","parent","item","index","upperBound","itemCmp","insert","insertWidget","SidePanelHandler","area","super","_isHiddenByUser","_widgetAdded","Signal","_widgetRemoved","_area","hide","_currentWidget","_lastCurrentWidget","_widgetPanel","StackedPanel","widgetRemoved","connect","_onWidgetRemoved","_closeButton","document","createElement","closeIcon","element","container","height","width","onclick","collapse","className","title","icon","Widget","node","currentWidget","length","isVisible","widgets","map","obj","widgetAdded","closeButton","expand","id","activate","show","_findWidgetByID","has","_a","_findInsertIndex","_refreshVisibility","emit","_findWidgetIndex","findFirstIndex","i","find","value","setHidden","sender","removeAt","SidePanelPalette","options","_commandPalette","commandPalette","_command","command","getItem","itemList","widgetId","addItem","disposableDelegate","category","args","side","caption","push","disposable","removeItem","dispose","first","second","INotebookShell","Token","NotebookShell","_translator","nullTranslator","_currentChanged","_mainWidgetLoaded","PromiseDelegate","_userLayout","_topHandler","_menuHandler","_leftHandler","_rightHandler","_main","topWrapper","_topWrapper","menuWrapper","_menuWrapper","setAttribute","_spacer_top","_spacer_bottom","rootLayout","BoxLayout","leftHandler","rightHandler","middleLayout","spacing","direction","setStretch","middlePanel","layout","hsplitPanel","SplitPanel","setRelativeSizes","skipLinkWidgetHandler","_skipLinkWidgetHandler","SkipLinkWidgetHandler","add","skipLinkWidget","currentChanged","top","menu","leftCollapsed","rightCollapsed","restored","promise","translator","trans","load","__","userLayout","JSONExt","deepCopy","activateById","w","expandLeft","expandRight","_b","userPosition","undefined","update","resolve","console","warn","collapseTop","expandTop","error","collapseLeft","collapseRight","restoreLayout","configuration","shell","_isDisposed","_skipLinkWidget","skipToMain","href","tabIndex","text","addEventListener","addClass","appendChild","handleEvent","event","_focusMain","input","querySelector","focus","isDisposed","removeEventListener","NotebookApp","JupyterFrontEnd","name","namespace","status","version","PageConfig","getOption","_info","JupyterLab","defaultInfo","_formatter","Throttler","setFormat","docRegistry","addModelFactory","Base64ModelFactory","mimeExtensions","plugin","registerPlugin","info","Object","keys","reduce","acc","val","JSON","parse","stringify","then","invoke","paths","urls","base","notFound","app","static","settings","themes","doc","translations","hubHost","hubPrefix","hubUser","hubServerName","directories","appSettings","schemas","templates","userSettings","serverRoot","workspaces","registerPluginModule","mod","data","default","prototype","hasOwnProperty","call","isArray","forEach","registerPluginModules","mods","format","window","matchMedia","matches","defaultNotebookPathOpener","open","prefix","path","searchParams","target","features","url","URL","URLExt","join","location","origin","search","toString","INotebookPathOpener"],"sourceRoot":""}