{"version":3,"file":"8734.0965980.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/platform.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/dom.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/observation/notifier.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/observation/observable.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/templating/html-directive.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/templating/binding.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/templating/compiler.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/templating/view.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/templating/template.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/styles/element-styles.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/components/attributes.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/components/fast-definitions.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/components/controller.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/components/fast-element.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/styles/css-directive.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/styles/css.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/observation/array-change-records.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/observation/array-observer.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/templating/ref.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/interfaces.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/templating/when.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/templating/repeat.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/templating/node-observation.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/templating/slotted.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@microsoft/fast-element/dist/esm/templating/children.js"],"sourcesContent":["/**\n * A reference to globalThis, with support\n * for browsers that don't yet support the spec.\n * @public\n */\nexport const $global = (function () {\n    if (typeof globalThis !== \"undefined\") {\n        // We're running in a modern environment.\n        return globalThis;\n    }\n    if (typeof global !== \"undefined\") {\n        // We're running in NodeJS\n        return global;\n    }\n    if (typeof self !== \"undefined\") {\n        // We're running in a worker.\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        // We're running in the browser's main thread.\n        return window;\n    }\n    try {\n        // Hopefully we never get here...\n        // Not all environments allow eval and Function. Use only as a last resort:\n        // eslint-disable-next-line no-new-func\n        return new Function(\"return this\")();\n    }\n    catch (_a) {\n        // If all fails, give up and create an object.\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return {};\n    }\n})();\n// API-only Polyfill for trustedTypes\nif ($global.trustedTypes === void 0) {\n    $global.trustedTypes = { createPolicy: (n, r) => r };\n}\nconst propConfig = {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n};\nif ($global.FAST === void 0) {\n    Reflect.defineProperty($global, \"FAST\", Object.assign({ value: Object.create(null) }, propConfig));\n}\n/**\n * The FAST global.\n * @internal\n */\nexport const FAST = $global.FAST;\nif (FAST.getById === void 0) {\n    const storage = Object.create(null);\n    Reflect.defineProperty(FAST, \"getById\", Object.assign({ value(id, initialize) {\n            let found = storage[id];\n            if (found === void 0) {\n                found = initialize ? (storage[id] = initialize()) : null;\n            }\n            return found;\n        } }, propConfig));\n}\n/**\n * A readonly, empty array.\n * @remarks\n * Typically returned by APIs that return arrays when there are\n * no actual items to return.\n * @internal\n */\nexport const emptyArray = Object.freeze([]);\n/**\n * Creates a function capable of locating metadata associated with a type.\n * @returns A metadata locator function.\n * @internal\n */\nexport function createMetadataLocator() {\n    const metadataLookup = new WeakMap();\n    return function (target) {\n        let metadata = metadataLookup.get(target);\n        if (metadata === void 0) {\n            let currentTarget = Reflect.getPrototypeOf(target);\n            while (metadata === void 0 && currentTarget !== null) {\n                metadata = metadataLookup.get(currentTarget);\n                currentTarget = Reflect.getPrototypeOf(currentTarget);\n            }\n            metadata = metadata === void 0 ? [] : metadata.slice(0);\n            metadataLookup.set(target, metadata);\n        }\n        return metadata;\n    };\n}\n","import { $global } from \"./platform.js\";\nconst updateQueue = $global.FAST.getById(1 /* updateQueue */, () => {\n    const tasks = [];\n    const pendingErrors = [];\n    function throwFirstError() {\n        if (pendingErrors.length) {\n            throw pendingErrors.shift();\n        }\n    }\n    function tryRunTask(task) {\n        try {\n            task.call();\n        }\n        catch (error) {\n            pendingErrors.push(error);\n            setTimeout(throwFirstError, 0);\n        }\n    }\n    function process() {\n        const capacity = 1024;\n        let index = 0;\n        while (index < tasks.length) {\n            tryRunTask(tasks[index]);\n            index++;\n            // Prevent leaking memory for long chains of recursive calls to `DOM.queueUpdate`.\n            // If we call `DOM.queueUpdate` within a task scheduled by `DOM.queueUpdate`, the queue will\n            // grow, but to avoid an O(n) walk for every task we execute, we don't\n            // shift tasks off the queue after they have been executed.\n            // Instead, we periodically shift 1024 tasks off the queue.\n            if (index > capacity) {\n                // Manually shift all values starting at the index back to the\n                // beginning of the queue.\n                for (let scan = 0, newLength = tasks.length - index; scan < newLength; scan++) {\n                    tasks[scan] = tasks[scan + index];\n                }\n                tasks.length -= index;\n                index = 0;\n            }\n        }\n        tasks.length = 0;\n    }\n    function enqueue(callable) {\n        if (tasks.length < 1) {\n            $global.requestAnimationFrame(process);\n        }\n        tasks.push(callable);\n    }\n    return Object.freeze({\n        enqueue,\n        process,\n    });\n});\n/* eslint-disable */\nconst fastHTMLPolicy = $global.trustedTypes.createPolicy(\"fast-html\", {\n    createHTML: html => html,\n});\n/* eslint-enable */\nlet htmlPolicy = fastHTMLPolicy;\nconst marker = `fast-${Math.random().toString(36).substring(2, 8)}`;\n/** @internal */\nexport const _interpolationStart = `${marker}{`;\n/** @internal */\nexport const _interpolationEnd = `}${marker}`;\n/**\n * Common DOM APIs.\n * @public\n */\nexport const DOM = Object.freeze({\n    /**\n     * Indicates whether the DOM supports the adoptedStyleSheets feature.\n     */\n    supportsAdoptedStyleSheets: Array.isArray(document.adoptedStyleSheets) &&\n        \"replace\" in CSSStyleSheet.prototype,\n    /**\n     * Sets the HTML trusted types policy used by the templating engine.\n     * @param policy - The policy to set for HTML.\n     * @remarks\n     * This API can only be called once, for security reasons. It should be\n     * called by the application developer at the start of their program.\n     */\n    setHTMLPolicy(policy) {\n        if (htmlPolicy !== fastHTMLPolicy) {\n            throw new Error(\"The HTML policy can only be set once.\");\n        }\n        htmlPolicy = policy;\n    },\n    /**\n     * Turns a string into trusted HTML using the configured trusted types policy.\n     * @param html - The string to turn into trusted HTML.\n     * @remarks\n     * Used internally by the template engine when creating templates\n     * and setting innerHTML.\n     */\n    createHTML(html) {\n        return htmlPolicy.createHTML(html);\n    },\n    /**\n     * Determines if the provided node is a template marker used by the runtime.\n     * @param node - The node to test.\n     */\n    isMarker(node) {\n        return node && node.nodeType === 8 && node.data.startsWith(marker);\n    },\n    /**\n     * Given a marker node, extract the {@link HTMLDirective} index from the placeholder.\n     * @param node - The marker node to extract the index from.\n     */\n    extractDirectiveIndexFromMarker(node) {\n        return parseInt(node.data.replace(`${marker}:`, \"\"));\n    },\n    /**\n     * Creates a placeholder string suitable for marking out a location *within*\n     * an attribute value or HTML content.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by binding directives.\n     */\n    createInterpolationPlaceholder(index) {\n        return `${_interpolationStart}${index}${_interpolationEnd}`;\n    },\n    /**\n     * Creates a placeholder that manifests itself as an attribute on an\n     * element.\n     * @param attributeName - The name of the custom attribute.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by attribute directives such as `ref`, `slotted`, and `children`.\n     */\n    createCustomAttributePlaceholder(attributeName, index) {\n        return `${attributeName}=\"${this.createInterpolationPlaceholder(index)}\"`;\n    },\n    /**\n     * Creates a placeholder that manifests itself as a marker within the DOM structure.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by structural directives such as `repeat`.\n     */\n    createBlockPlaceholder(index) {\n        return `<!--${marker}:${index}-->`;\n    },\n    /**\n     * Schedules DOM update work in the next async batch.\n     * @param callable - The callable function or object to queue.\n     */\n    queueUpdate: updateQueue.enqueue,\n    /**\n     * Immediately processes all work previously scheduled\n     * through queueUpdate.\n     * @remarks\n     * This also forces nextUpdate promises\n     * to resolve.\n     */\n    processUpdates: updateQueue.process,\n    /**\n     * Resolves with the next DOM update.\n     */\n    nextUpdate() {\n        return new Promise(updateQueue.enqueue);\n    },\n    /**\n     * Sets an attribute value on an element.\n     * @param element - The element to set the attribute value on.\n     * @param attributeName - The attribute name to set.\n     * @param value - The value of the attribute to set.\n     * @remarks\n     * If the value is `null` or `undefined`, the attribute is removed, otherwise\n     * it is set to the provided value using the standard `setAttribute` API.\n     */\n    setAttribute(element, attributeName, value) {\n        if (value === null || value === undefined) {\n            element.removeAttribute(attributeName);\n        }\n        else {\n            element.setAttribute(attributeName, value);\n        }\n    },\n    /**\n     * Sets a boolean attribute value.\n     * @param element - The element to set the boolean attribute value on.\n     * @param attributeName - The attribute name to set.\n     * @param value - The value of the attribute to set.\n     * @remarks\n     * If the value is true, the attribute is added; otherwise it is removed.\n     */\n    setBooleanAttribute(element, attributeName, value) {\n        value\n            ? element.setAttribute(attributeName, \"\")\n            : element.removeAttribute(attributeName);\n    },\n    /**\n     * Removes all the child nodes of the provided parent node.\n     * @param parent - The node to remove the children from.\n     */\n    removeChildNodes(parent) {\n        for (let child = parent.firstChild; child !== null; child = parent.firstChild) {\n            parent.removeChild(child);\n        }\n    },\n    /**\n     * Creates a TreeWalker configured to walk a template fragment.\n     * @param fragment - The fragment to walk.\n     */\n    createTemplateWalker(fragment) {\n        return document.createTreeWalker(fragment, 133, // element, text, comment\n        null, false);\n    },\n});\n","/**\n * An implementation of {@link Notifier} that efficiently keeps track of\n * subscribers interested in a specific change notification on an\n * observable source.\n *\n * @remarks\n * This set is optimized for the most common scenario of 1 or 2 subscribers.\n * With this in mind, it can store a subscriber in an internal field, allowing it to avoid Array#push operations.\n * If the set ever exceeds two subscribers, it upgrades to an array automatically.\n * @public\n */\nexport class SubscriberSet {\n    /**\n     * Creates an instance of SubscriberSet for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     * @param initialSubscriber - An initial subscriber to changes.\n     */\n    constructor(source, initialSubscriber) {\n        this.sub1 = void 0;\n        this.sub2 = void 0;\n        this.spillover = void 0;\n        this.source = source;\n        this.sub1 = initialSubscriber;\n    }\n    /**\n     * Checks whether the provided subscriber has been added to this set.\n     * @param subscriber - The subscriber to test for inclusion in this set.\n     */\n    has(subscriber) {\n        return this.spillover === void 0\n            ? this.sub1 === subscriber || this.sub2 === subscriber\n            : this.spillover.indexOf(subscriber) !== -1;\n    }\n    /**\n     * Subscribes to notification of changes in an object's state.\n     * @param subscriber - The object that is subscribing for change notification.\n     */\n    subscribe(subscriber) {\n        const spillover = this.spillover;\n        if (spillover === void 0) {\n            if (this.has(subscriber)) {\n                return;\n            }\n            if (this.sub1 === void 0) {\n                this.sub1 = subscriber;\n                return;\n            }\n            if (this.sub2 === void 0) {\n                this.sub2 = subscriber;\n                return;\n            }\n            this.spillover = [this.sub1, this.sub2, subscriber];\n            this.sub1 = void 0;\n            this.sub2 = void 0;\n        }\n        else {\n            const index = spillover.indexOf(subscriber);\n            if (index === -1) {\n                spillover.push(subscriber);\n            }\n        }\n    }\n    /**\n     * Unsubscribes from notification of changes in an object's state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     */\n    unsubscribe(subscriber) {\n        const spillover = this.spillover;\n        if (spillover === void 0) {\n            if (this.sub1 === subscriber) {\n                this.sub1 = void 0;\n            }\n            else if (this.sub2 === subscriber) {\n                this.sub2 = void 0;\n            }\n        }\n        else {\n            const index = spillover.indexOf(subscriber);\n            if (index !== -1) {\n                spillover.splice(index, 1);\n            }\n        }\n    }\n    /**\n     * Notifies all subscribers.\n     * @param args - Data passed along to subscribers during notification.\n     */\n    notify(args) {\n        const spillover = this.spillover;\n        const source = this.source;\n        if (spillover === void 0) {\n            const sub1 = this.sub1;\n            const sub2 = this.sub2;\n            if (sub1 !== void 0) {\n                sub1.handleChange(source, args);\n            }\n            if (sub2 !== void 0) {\n                sub2.handleChange(source, args);\n            }\n        }\n        else {\n            for (let i = 0, ii = spillover.length; i < ii; ++i) {\n                spillover[i].handleChange(source, args);\n            }\n        }\n    }\n}\n/**\n * An implementation of Notifier that allows subscribers to be notified\n * of individual property changes on an object.\n * @public\n */\nexport class PropertyChangeNotifier {\n    /**\n     * Creates an instance of PropertyChangeNotifier for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     */\n    constructor(source) {\n        this.subscribers = {};\n        this.sourceSubscribers = null;\n        this.source = source;\n    }\n    /**\n     * Notifies all subscribers, based on the specified property.\n     * @param propertyName - The property name, passed along to subscribers during notification.\n     */\n    notify(propertyName) {\n        var _a;\n        const subscribers = this.subscribers[propertyName];\n        if (subscribers !== void 0) {\n            subscribers.notify(propertyName);\n        }\n        (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.notify(propertyName);\n    }\n    /**\n     * Subscribes to notification of changes in an object's state.\n     * @param subscriber - The object that is subscribing for change notification.\n     * @param propertyToWatch - The name of the property that the subscriber is interested in watching for changes.\n     */\n    subscribe(subscriber, propertyToWatch) {\n        var _a;\n        if (propertyToWatch) {\n            let subscribers = this.subscribers[propertyToWatch];\n            if (subscribers === void 0) {\n                this.subscribers[propertyToWatch] = subscribers = new SubscriberSet(this.source);\n            }\n            subscribers.subscribe(subscriber);\n        }\n        else {\n            this.sourceSubscribers =\n                (_a = this.sourceSubscribers) !== null && _a !== void 0 ? _a : new SubscriberSet(this.source);\n            this.sourceSubscribers.subscribe(subscriber);\n        }\n    }\n    /**\n     * Unsubscribes from notification of changes in an object's state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     * @param propertyToUnwatch - The name of the property that the subscriber is no longer interested in watching.\n     */\n    unsubscribe(subscriber, propertyToUnwatch) {\n        var _a;\n        if (propertyToUnwatch) {\n            const subscribers = this.subscribers[propertyToUnwatch];\n            if (subscribers !== void 0) {\n                subscribers.unsubscribe(subscriber);\n            }\n        }\n        else {\n            (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.unsubscribe(subscriber);\n        }\n    }\n}\n","import { DOM } from \"../dom.js\";\nimport { createMetadataLocator, FAST } from \"../platform.js\";\nimport { PropertyChangeNotifier, SubscriberSet } from \"./notifier.js\";\n/**\n * Common Observable APIs.\n * @public\n */\nexport const Observable = FAST.getById(2 /* observable */, () => {\n    const volatileRegex = /(:|&&|\\|\\||if)/;\n    const notifierLookup = new WeakMap();\n    const queueUpdate = DOM.queueUpdate;\n    let watcher = void 0;\n    let createArrayObserver = (array) => {\n        throw new Error(\"Must call enableArrayObservation before observing arrays.\");\n    };\n    function getNotifier(source) {\n        let found = source.$fastController || notifierLookup.get(source);\n        if (found === void 0) {\n            if (Array.isArray(source)) {\n                found = createArrayObserver(source);\n            }\n            else {\n                notifierLookup.set(source, (found = new PropertyChangeNotifier(source)));\n            }\n        }\n        return found;\n    }\n    const getAccessors = createMetadataLocator();\n    class DefaultObservableAccessor {\n        constructor(name) {\n            this.name = name;\n            this.field = `_${name}`;\n            this.callback = `${name}Changed`;\n        }\n        getValue(source) {\n            if (watcher !== void 0) {\n                watcher.watch(source, this.name);\n            }\n            return source[this.field];\n        }\n        setValue(source, newValue) {\n            const field = this.field;\n            const oldValue = source[field];\n            if (oldValue !== newValue) {\n                source[field] = newValue;\n                const callback = source[this.callback];\n                if (typeof callback === \"function\") {\n                    callback.call(source, oldValue, newValue);\n                }\n                getNotifier(source).notify(this.name);\n            }\n        }\n    }\n    class BindingObserverImplementation extends SubscriberSet {\n        constructor(binding, initialSubscriber, isVolatileBinding = false) {\n            super(binding, initialSubscriber);\n            this.binding = binding;\n            this.isVolatileBinding = isVolatileBinding;\n            this.needsRefresh = true;\n            this.needsQueue = true;\n            this.first = this;\n            this.last = null;\n            this.propertySource = void 0;\n            this.propertyName = void 0;\n            this.notifier = void 0;\n            this.next = void 0;\n        }\n        observe(source, context) {\n            if (this.needsRefresh && this.last !== null) {\n                this.disconnect();\n            }\n            const previousWatcher = watcher;\n            watcher = this.needsRefresh ? this : void 0;\n            this.needsRefresh = this.isVolatileBinding;\n            const result = this.binding(source, context);\n            watcher = previousWatcher;\n            return result;\n        }\n        disconnect() {\n            if (this.last !== null) {\n                let current = this.first;\n                while (current !== void 0) {\n                    current.notifier.unsubscribe(this, current.propertyName);\n                    current = current.next;\n                }\n                this.last = null;\n                this.needsRefresh = this.needsQueue = true;\n            }\n        }\n        watch(propertySource, propertyName) {\n            const prev = this.last;\n            const notifier = getNotifier(propertySource);\n            const current = prev === null ? this.first : {};\n            current.propertySource = propertySource;\n            current.propertyName = propertyName;\n            current.notifier = notifier;\n            notifier.subscribe(this, propertyName);\n            if (prev !== null) {\n                if (!this.needsRefresh) {\n                    // Declaring the variable prior to assignment below circumvents\n                    // a bug in Angular's optimization process causing infinite recursion\n                    // of this watch() method. Details https://github.com/microsoft/fast/issues/4969\n                    let prevValue;\n                    watcher = void 0;\n                    /* eslint-disable-next-line */\n                    prevValue = prev.propertySource[prev.propertyName];\n                    /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n                    watcher = this;\n                    if (propertySource === prevValue) {\n                        this.needsRefresh = true;\n                    }\n                }\n                prev.next = current;\n            }\n            this.last = current;\n        }\n        handleChange() {\n            if (this.needsQueue) {\n                this.needsQueue = false;\n                queueUpdate(this);\n            }\n        }\n        call() {\n            if (this.last !== null) {\n                this.needsQueue = true;\n                this.notify(this);\n            }\n        }\n        records() {\n            let next = this.first;\n            return {\n                next: () => {\n                    const current = next;\n                    if (current === undefined) {\n                        return { value: void 0, done: true };\n                    }\n                    else {\n                        next = next.next;\n                        return {\n                            value: current,\n                            done: false,\n                        };\n                    }\n                },\n                [Symbol.iterator]: function () {\n                    return this;\n                },\n            };\n        }\n    }\n    return Object.freeze({\n        /**\n         * @internal\n         * @param factory - The factory used to create array observers.\n         */\n        setArrayObserverFactory(factory) {\n            createArrayObserver = factory;\n        },\n        /**\n         * Gets a notifier for an object or Array.\n         * @param source - The object or Array to get the notifier for.\n         */\n        getNotifier,\n        /**\n         * Records a property change for a source object.\n         * @param source - The object to record the change against.\n         * @param propertyName - The property to track as changed.\n         */\n        track(source, propertyName) {\n            if (watcher !== void 0) {\n                watcher.watch(source, propertyName);\n            }\n        },\n        /**\n         * Notifies watchers that the currently executing property getter or function is volatile\n         * with respect to its observable dependencies.\n         */\n        trackVolatile() {\n            if (watcher !== void 0) {\n                watcher.needsRefresh = true;\n            }\n        },\n        /**\n         * Notifies subscribers of a source object of changes.\n         * @param source - the object to notify of changes.\n         * @param args - The change args to pass to subscribers.\n         */\n        notify(source, args) {\n            getNotifier(source).notify(args);\n        },\n        /**\n         * Defines an observable property on an object or prototype.\n         * @param target - The target object to define the observable on.\n         * @param nameOrAccessor - The name of the property to define as observable;\n         * or a custom accessor that specifies the property name and accessor implementation.\n         */\n        defineProperty(target, nameOrAccessor) {\n            if (typeof nameOrAccessor === \"string\") {\n                nameOrAccessor = new DefaultObservableAccessor(nameOrAccessor);\n            }\n            getAccessors(target).push(nameOrAccessor);\n            Reflect.defineProperty(target, nameOrAccessor.name, {\n                enumerable: true,\n                get: function () {\n                    return nameOrAccessor.getValue(this);\n                },\n                set: function (newValue) {\n                    nameOrAccessor.setValue(this, newValue);\n                },\n            });\n        },\n        /**\n         * Finds all the observable accessors defined on the target,\n         * including its prototype chain.\n         * @param target - The target object to search for accessor on.\n         */\n        getAccessors,\n        /**\n         * Creates a {@link BindingObserver} that can watch the\n         * provided {@link Binding} for changes.\n         * @param binding - The binding to observe.\n         * @param initialSubscriber - An initial subscriber to changes in the binding value.\n         * @param isVolatileBinding - Indicates whether the binding's dependency list must be re-evaluated on every value evaluation.\n         */\n        binding(binding, initialSubscriber, isVolatileBinding = this.isVolatileBinding(binding)) {\n            return new BindingObserverImplementation(binding, initialSubscriber, isVolatileBinding);\n        },\n        /**\n         * Determines whether a binding expression is volatile and needs to have its dependency list re-evaluated\n         * on every evaluation of the value.\n         * @param binding - The binding to inspect.\n         */\n        isVolatileBinding(binding) {\n            return volatileRegex.test(binding.toString());\n        },\n    });\n});\n/**\n * Decorator: Defines an observable property on the target.\n * @param target - The target to define the observable on.\n * @param nameOrAccessor - The property name or accessor to define the observable as.\n * @public\n */\nexport function observable(target, nameOrAccessor) {\n    Observable.defineProperty(target, nameOrAccessor);\n}\n/**\n * Decorator: Marks a property getter as having volatile observable dependencies.\n * @param target - The target that the property is defined on.\n * @param name - The property name.\n * @param name - The existing descriptor.\n * @public\n */\nexport function volatile(target, name, descriptor) {\n    return Object.assign({}, descriptor, {\n        get: function () {\n            Observable.trackVolatile();\n            return descriptor.get.apply(this);\n        },\n    });\n}\nconst contextEvent = FAST.getById(3 /* contextEvent */, () => {\n    let current = null;\n    return {\n        get() {\n            return current;\n        },\n        set(event) {\n            current = event;\n        },\n    };\n});\n/**\n * Provides additional contextual information available to behaviors and expressions.\n * @public\n */\nexport class ExecutionContext {\n    constructor() {\n        /**\n         * The index of the current item within a repeat context.\n         */\n        this.index = 0;\n        /**\n         * The length of the current collection within a repeat context.\n         */\n        this.length = 0;\n        /**\n         * The parent data object within a repeat context.\n         */\n        this.parent = null;\n        /**\n         * The parent execution context when in nested context scenarios.\n         */\n        this.parentContext = null;\n    }\n    /**\n     * The current event within an event handler.\n     */\n    get event() {\n        return contextEvent.get();\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * has an even index.\n     */\n    get isEven() {\n        return this.index % 2 === 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * has an odd index.\n     */\n    get isOdd() {\n        return this.index % 2 !== 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is the first item in the collection.\n     */\n    get isFirst() {\n        return this.index === 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is somewhere in the middle of the collection.\n     */\n    get isInMiddle() {\n        return !this.isFirst && !this.isLast;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is the last item in the collection.\n     */\n    get isLast() {\n        return this.index === this.length - 1;\n    }\n    /**\n     * Sets the event for the current execution context.\n     * @param event - The event to set.\n     * @internal\n     */\n    static setEvent(event) {\n        contextEvent.set(event);\n    }\n}\nObservable.defineProperty(ExecutionContext.prototype, \"index\");\nObservable.defineProperty(ExecutionContext.prototype, \"length\");\n/**\n * The default execution context used in binding expressions.\n * @public\n */\nexport const defaultExecutionContext = Object.seal(new ExecutionContext());\n","import { DOM } from \"../dom.js\";\n/**\n * Instructs the template engine to apply behavior to a node.\n * @public\n */\nexport class HTMLDirective {\n    constructor() {\n        /**\n         * The index of the DOM node to which the created behavior will apply.\n         */\n        this.targetIndex = 0;\n    }\n}\n/**\n * A {@link HTMLDirective} that targets a named attribute or property on a node.\n * @public\n */\nexport class TargetedHTMLDirective extends HTMLDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * Creates a placeholder string based on the directive's index within the template.\n         * @param index - The index of the directive within the template.\n         */\n        this.createPlaceholder = DOM.createInterpolationPlaceholder;\n    }\n}\n/**\n * A directive that attaches special behavior to an element via a custom attribute.\n * @public\n */\nexport class AttachedBehaviorHTMLDirective extends HTMLDirective {\n    /**\n     *\n     * @param name - The name of the behavior; used as a custom attribute on the element.\n     * @param behavior - The behavior to instantiate and attach to the element.\n     * @param options - Options to pass to the behavior during creation.\n     */\n    constructor(name, behavior, options) {\n        super();\n        this.name = name;\n        this.behavior = behavior;\n        this.options = options;\n    }\n    /**\n     * Creates a placeholder string based on the directive's index within the template.\n     * @param index - The index of the directive within the template.\n     * @remarks\n     * Creates a custom attribute placeholder.\n     */\n    createPlaceholder(index) {\n        return DOM.createCustomAttributePlaceholder(this.name, index);\n    }\n    /**\n     * Creates a behavior for the provided target node.\n     * @param target - The node instance to create the behavior for.\n     * @remarks\n     * Creates an instance of the `behavior` type this directive was constructed with\n     * and passes the target and options to that `behavior`'s constructor.\n     */\n    createBehavior(target) {\n        return new this.behavior(target, this.options);\n    }\n}\n","import { DOM } from \"../dom.js\";\nimport { ExecutionContext, Observable, } from \"../observation/observable.js\";\nimport { TargetedHTMLDirective } from \"./html-directive.js\";\nfunction normalBind(source, context) {\n    this.source = source;\n    this.context = context;\n    if (this.bindingObserver === null) {\n        this.bindingObserver = Observable.binding(this.binding, this, this.isBindingVolatile);\n    }\n    this.updateTarget(this.bindingObserver.observe(source, context));\n}\nfunction triggerBind(source, context) {\n    this.source = source;\n    this.context = context;\n    this.target.addEventListener(this.targetName, this);\n}\nfunction normalUnbind() {\n    this.bindingObserver.disconnect();\n    this.source = null;\n    this.context = null;\n}\nfunction contentUnbind() {\n    this.bindingObserver.disconnect();\n    this.source = null;\n    this.context = null;\n    const view = this.target.$fastView;\n    if (view !== void 0 && view.isComposed) {\n        view.unbind();\n        view.needsBindOnly = true;\n    }\n}\nfunction triggerUnbind() {\n    this.target.removeEventListener(this.targetName, this);\n    this.source = null;\n    this.context = null;\n}\nfunction updateAttributeTarget(value) {\n    DOM.setAttribute(this.target, this.targetName, value);\n}\nfunction updateBooleanAttributeTarget(value) {\n    DOM.setBooleanAttribute(this.target, this.targetName, value);\n}\nfunction updateContentTarget(value) {\n    // If there's no actual value, then this equates to the\n    // empty string for the purposes of content bindings.\n    if (value === null || value === undefined) {\n        value = \"\";\n    }\n    // If the value has a \"create\" method, then it's a template-like.\n    if (value.create) {\n        this.target.textContent = \"\";\n        let view = this.target.$fastView;\n        // If there's no previous view that we might be able to\n        // reuse then create a new view from the template.\n        if (view === void 0) {\n            view = value.create();\n        }\n        else {\n            // If there is a previous view, but it wasn't created\n            // from the same template as the new value, then we\n            // need to remove the old view if it's still in the DOM\n            // and create a new view from the template.\n            if (this.target.$fastTemplate !== value) {\n                if (view.isComposed) {\n                    view.remove();\n                    view.unbind();\n                }\n                view = value.create();\n            }\n        }\n        // It's possible that the value is the same as the previous template\n        // and that there's actually no need to compose it.\n        if (!view.isComposed) {\n            view.isComposed = true;\n            view.bind(this.source, this.context);\n            view.insertBefore(this.target);\n            this.target.$fastView = view;\n            this.target.$fastTemplate = value;\n        }\n        else if (view.needsBindOnly) {\n            view.needsBindOnly = false;\n            view.bind(this.source, this.context);\n        }\n    }\n    else {\n        const view = this.target.$fastView;\n        // If there is a view and it's currently composed into\n        // the DOM, then we need to remove it.\n        if (view !== void 0 && view.isComposed) {\n            view.isComposed = false;\n            view.remove();\n            if (view.needsBindOnly) {\n                view.needsBindOnly = false;\n            }\n            else {\n                view.unbind();\n            }\n        }\n        this.target.textContent = value;\n    }\n}\nfunction updatePropertyTarget(value) {\n    this.target[this.targetName] = value;\n}\nfunction updateClassTarget(value) {\n    const classVersions = this.classVersions || Object.create(null);\n    const target = this.target;\n    let version = this.version || 0;\n    // Add the classes, tracking the version at which they were added.\n    if (value !== null && value !== undefined && value.length) {\n        const names = value.split(/\\s+/);\n        for (let i = 0, ii = names.length; i < ii; ++i) {\n            const currentName = names[i];\n            if (currentName === \"\") {\n                continue;\n            }\n            classVersions[currentName] = version;\n            target.classList.add(currentName);\n        }\n    }\n    this.classVersions = classVersions;\n    this.version = version + 1;\n    // If this is the first call to add classes, there's no need to remove old ones.\n    if (version === 0) {\n        return;\n    }\n    // Remove classes from the previous version.\n    version -= 1;\n    for (const name in classVersions) {\n        if (classVersions[name] === version) {\n            target.classList.remove(name);\n        }\n    }\n}\n/**\n * A directive that configures data binding to element content and attributes.\n * @public\n */\nexport class HTMLBindingDirective extends TargetedHTMLDirective {\n    /**\n     * Creates an instance of BindingDirective.\n     * @param binding - A binding that returns the data used to update the DOM.\n     */\n    constructor(binding) {\n        super();\n        this.binding = binding;\n        this.bind = normalBind;\n        this.unbind = normalUnbind;\n        this.updateTarget = updateAttributeTarget;\n        this.isBindingVolatile = Observable.isVolatileBinding(this.binding);\n    }\n    /**\n     * Gets/sets the name of the attribute or property that this\n     * binding is targeting.\n     */\n    get targetName() {\n        return this.originalTargetName;\n    }\n    set targetName(value) {\n        this.originalTargetName = value;\n        if (value === void 0) {\n            return;\n        }\n        switch (value[0]) {\n            case \":\":\n                this.cleanedTargetName = value.substr(1);\n                this.updateTarget = updatePropertyTarget;\n                if (this.cleanedTargetName === \"innerHTML\") {\n                    const binding = this.binding;\n                    this.binding = (s, c) => DOM.createHTML(binding(s, c));\n                }\n                break;\n            case \"?\":\n                this.cleanedTargetName = value.substr(1);\n                this.updateTarget = updateBooleanAttributeTarget;\n                break;\n            case \"@\":\n                this.cleanedTargetName = value.substr(1);\n                this.bind = triggerBind;\n                this.unbind = triggerUnbind;\n                break;\n            default:\n                this.cleanedTargetName = value;\n                if (value === \"class\") {\n                    this.updateTarget = updateClassTarget;\n                }\n                break;\n        }\n    }\n    /**\n     * Makes this binding target the content of an element rather than\n     * a particular attribute or property.\n     */\n    targetAtContent() {\n        this.updateTarget = updateContentTarget;\n        this.unbind = contentUnbind;\n    }\n    /**\n     * Creates the runtime BindingBehavior instance based on the configuration\n     * information stored in the BindingDirective.\n     * @param target - The target node that the binding behavior should attach to.\n     */\n    createBehavior(target) {\n        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n        return new BindingBehavior(target, this.binding, this.isBindingVolatile, this.bind, this.unbind, this.updateTarget, this.cleanedTargetName);\n    }\n}\n/**\n * A behavior that updates content and attributes based on a configured\n * BindingDirective.\n * @public\n */\nexport class BindingBehavior {\n    /**\n     * Creates an instance of BindingBehavior.\n     * @param target - The target of the data updates.\n     * @param binding - The binding that returns the latest value for an update.\n     * @param isBindingVolatile - Indicates whether the binding has volatile dependencies.\n     * @param bind - The operation to perform during binding.\n     * @param unbind - The operation to perform during unbinding.\n     * @param updateTarget - The operation to perform when updating.\n     * @param targetName - The name of the target attribute or property to update.\n     */\n    constructor(target, binding, isBindingVolatile, bind, unbind, updateTarget, targetName) {\n        /** @internal */\n        this.source = null;\n        /** @internal */\n        this.context = null;\n        /** @internal */\n        this.bindingObserver = null;\n        this.target = target;\n        this.binding = binding;\n        this.isBindingVolatile = isBindingVolatile;\n        this.bind = bind;\n        this.unbind = unbind;\n        this.updateTarget = updateTarget;\n        this.targetName = targetName;\n    }\n    /** @internal */\n    handleChange() {\n        this.updateTarget(this.bindingObserver.observe(this.source, this.context));\n    }\n    /** @internal */\n    handleEvent(event) {\n        ExecutionContext.setEvent(event);\n        const result = this.binding(this.source, this.context);\n        ExecutionContext.setEvent(null);\n        if (result !== true) {\n            event.preventDefault();\n        }\n    }\n}\n","import { _interpolationEnd, _interpolationStart, DOM } from \"../dom.js\";\nimport { HTMLBindingDirective } from \"./binding.js\";\nlet sharedContext = null;\nclass CompilationContext {\n    addFactory(factory) {\n        factory.targetIndex = this.targetIndex;\n        this.behaviorFactories.push(factory);\n    }\n    captureContentBinding(directive) {\n        directive.targetAtContent();\n        this.addFactory(directive);\n    }\n    reset() {\n        this.behaviorFactories = [];\n        this.targetIndex = -1;\n    }\n    release() {\n        /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n        sharedContext = this;\n    }\n    static borrow(directives) {\n        const shareable = sharedContext || new CompilationContext();\n        shareable.directives = directives;\n        shareable.reset();\n        sharedContext = null;\n        return shareable;\n    }\n}\nfunction createAggregateBinding(parts) {\n    if (parts.length === 1) {\n        return parts[0];\n    }\n    let targetName;\n    const partCount = parts.length;\n    const finalParts = parts.map((x) => {\n        if (typeof x === \"string\") {\n            return () => x;\n        }\n        targetName = x.targetName || targetName;\n        return x.binding;\n    });\n    const binding = (scope, context) => {\n        let output = \"\";\n        for (let i = 0; i < partCount; ++i) {\n            output += finalParts[i](scope, context);\n        }\n        return output;\n    };\n    const directive = new HTMLBindingDirective(binding);\n    directive.targetName = targetName;\n    return directive;\n}\nconst interpolationEndLength = _interpolationEnd.length;\nfunction parseContent(context, value) {\n    const valueParts = value.split(_interpolationStart);\n    if (valueParts.length === 1) {\n        return null;\n    }\n    const bindingParts = [];\n    for (let i = 0, ii = valueParts.length; i < ii; ++i) {\n        const current = valueParts[i];\n        const index = current.indexOf(_interpolationEnd);\n        let literal;\n        if (index === -1) {\n            literal = current;\n        }\n        else {\n            const directiveIndex = parseInt(current.substring(0, index));\n            bindingParts.push(context.directives[directiveIndex]);\n            literal = current.substring(index + interpolationEndLength);\n        }\n        if (literal !== \"\") {\n            bindingParts.push(literal);\n        }\n    }\n    return bindingParts;\n}\nfunction compileAttributes(context, node, includeBasicValues = false) {\n    const attributes = node.attributes;\n    for (let i = 0, ii = attributes.length; i < ii; ++i) {\n        const attr = attributes[i];\n        const attrValue = attr.value;\n        const parseResult = parseContent(context, attrValue);\n        let result = null;\n        if (parseResult === null) {\n            if (includeBasicValues) {\n                result = new HTMLBindingDirective(() => attrValue);\n                result.targetName = attr.name;\n            }\n        }\n        else {\n            result = createAggregateBinding(parseResult);\n        }\n        if (result !== null) {\n            node.removeAttributeNode(attr);\n            i--;\n            ii--;\n            context.addFactory(result);\n        }\n    }\n}\nfunction compileContent(context, node, walker) {\n    const parseResult = parseContent(context, node.textContent);\n    if (parseResult !== null) {\n        let lastNode = node;\n        for (let i = 0, ii = parseResult.length; i < ii; ++i) {\n            const currentPart = parseResult[i];\n            const currentNode = i === 0\n                ? node\n                : lastNode.parentNode.insertBefore(document.createTextNode(\"\"), lastNode.nextSibling);\n            if (typeof currentPart === \"string\") {\n                currentNode.textContent = currentPart;\n            }\n            else {\n                currentNode.textContent = \" \";\n                context.captureContentBinding(currentPart);\n            }\n            lastNode = currentNode;\n            context.targetIndex++;\n            if (currentNode !== node) {\n                walker.nextNode();\n            }\n        }\n        context.targetIndex--;\n    }\n}\n/**\n * Compiles a template and associated directives into a raw compilation\n * result which include a cloneable DocumentFragment and factories capable\n * of attaching runtime behavior to nodes within the fragment.\n * @param template - The template to compile.\n * @param directives - The directives referenced by the template.\n * @remarks\n * The template that is provided for compilation is altered in-place\n * and cannot be compiled again. If the original template must be preserved,\n * it is recommended that you clone the original and pass the clone to this API.\n * @public\n */\nexport function compileTemplate(template, directives) {\n    const fragment = template.content;\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1111864\n    document.adoptNode(fragment);\n    const context = CompilationContext.borrow(directives);\n    compileAttributes(context, template, true);\n    const hostBehaviorFactories = context.behaviorFactories;\n    context.reset();\n    const walker = DOM.createTemplateWalker(fragment);\n    let node;\n    while ((node = walker.nextNode())) {\n        context.targetIndex++;\n        switch (node.nodeType) {\n            case 1: // element node\n                compileAttributes(context, node);\n                break;\n            case 3: // text node\n                compileContent(context, node, walker);\n                break;\n            case 8: // comment\n                if (DOM.isMarker(node)) {\n                    context.addFactory(directives[DOM.extractDirectiveIndexFromMarker(node)]);\n                }\n        }\n    }\n    let targetOffset = 0;\n    if (\n    // If the first node in a fragment is a marker, that means it's an unstable first node,\n    // because something like a when, repeat, etc. could add nodes before the marker.\n    // To mitigate this, we insert a stable first node. However, if we insert a node,\n    // that will alter the result of the TreeWalker. So, we also need to offset the target index.\n    DOM.isMarker(fragment.firstChild) ||\n        // Or if there is only one node and a directive, it means the template's content\n        // is *only* the directive. In that case, HTMLView.dispose() misses any nodes inserted by\n        // the directive. Inserting a new node ensures proper disposal of nodes added by the directive.\n        (fragment.childNodes.length === 1 && directives.length)) {\n        fragment.insertBefore(document.createComment(\"\"), fragment.firstChild);\n        targetOffset = -1;\n    }\n    const viewBehaviorFactories = context.behaviorFactories;\n    context.release();\n    return {\n        fragment,\n        viewBehaviorFactories,\n        hostBehaviorFactories,\n        targetOffset,\n    };\n}\n","// A singleton Range instance used to efficiently remove ranges of DOM nodes.\n// See the implementation of HTMLView below for further details.\nconst range = document.createRange();\n/**\n * The standard View implementation, which also implements ElementView and SyntheticView.\n * @public\n */\nexport class HTMLView {\n    /**\n     * Constructs an instance of HTMLView.\n     * @param fragment - The html fragment that contains the nodes for this view.\n     * @param behaviors - The behaviors to be applied to this view.\n     */\n    constructor(fragment, behaviors) {\n        this.fragment = fragment;\n        this.behaviors = behaviors;\n        /**\n         * The data that the view is bound to.\n         */\n        this.source = null;\n        /**\n         * The execution context the view is running within.\n         */\n        this.context = null;\n        this.firstChild = fragment.firstChild;\n        this.lastChild = fragment.lastChild;\n    }\n    /**\n     * Appends the view's DOM nodes to the referenced node.\n     * @param node - The parent node to append the view's DOM nodes to.\n     */\n    appendTo(node) {\n        node.appendChild(this.fragment);\n    }\n    /**\n     * Inserts the view's DOM nodes before the referenced node.\n     * @param node - The node to insert the view's DOM before.\n     */\n    insertBefore(node) {\n        if (this.fragment.hasChildNodes()) {\n            node.parentNode.insertBefore(this.fragment, node);\n        }\n        else {\n            const end = this.lastChild;\n            if (node.previousSibling === end)\n                return;\n            const parentNode = node.parentNode;\n            let current = this.firstChild;\n            let next;\n            while (current !== end) {\n                next = current.nextSibling;\n                parentNode.insertBefore(current, node);\n                current = next;\n            }\n            parentNode.insertBefore(end, node);\n        }\n    }\n    /**\n     * Removes the view's DOM nodes.\n     * The nodes are not disposed and the view can later be re-inserted.\n     */\n    remove() {\n        const fragment = this.fragment;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            fragment.appendChild(current);\n            current = next;\n        }\n        fragment.appendChild(end);\n    }\n    /**\n     * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.\n     * Once a view has been disposed, it cannot be inserted or bound again.\n     */\n    dispose() {\n        const parent = this.firstChild.parentNode;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            parent.removeChild(current);\n            current = next;\n        }\n        parent.removeChild(end);\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n    }\n    /**\n     * Binds a view's behaviors to its binding source.\n     * @param source - The binding source for the view's binding behaviors.\n     * @param context - The execution context to run the behaviors within.\n     */\n    bind(source, context) {\n        const behaviors = this.behaviors;\n        if (this.source === source) {\n            return;\n        }\n        else if (this.source !== null) {\n            const oldSource = this.source;\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                const current = behaviors[i];\n                current.unbind(oldSource);\n                current.bind(source, context);\n            }\n        }\n        else {\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                behaviors[i].bind(source, context);\n            }\n        }\n    }\n    /**\n     * Unbinds a view's behaviors from its binding source.\n     */\n    unbind() {\n        if (this.source === null) {\n            return;\n        }\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n        this.source = null;\n    }\n    /**\n     * Efficiently disposes of a contiguous range of synthetic view instances.\n     * @param views - A contiguous range of views to be disposed.\n     */\n    static disposeContiguousBatch(views) {\n        if (views.length === 0) {\n            return;\n        }\n        range.setStartBefore(views[0].firstChild);\n        range.setEndAfter(views[views.length - 1].lastChild);\n        range.deleteContents();\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n            const view = views[i];\n            const behaviors = view.behaviors;\n            const oldSource = view.source;\n            for (let j = 0, jj = behaviors.length; j < jj; ++j) {\n                behaviors[j].unbind(oldSource);\n            }\n        }\n    }\n}\n","import { DOM } from \"../dom.js\";\nimport { defaultExecutionContext } from \"../observation/observable.js\";\nimport { compileTemplate } from \"./compiler.js\";\nimport { HTMLView } from \"./view.js\";\nimport { HTMLDirective, TargetedHTMLDirective, } from \"./html-directive.js\";\nimport { HTMLBindingDirective } from \"./binding.js\";\n/**\n * A template capable of creating HTMLView instances or rendering directly to DOM.\n * @public\n */\n/* eslint-disable-next-line @typescript-eslint/no-unused-vars */\nexport class ViewTemplate {\n    /**\n     * Creates an instance of ViewTemplate.\n     * @param html - The html representing what this template will instantiate, including placeholders for directives.\n     * @param directives - The directives that will be connected to placeholders in the html.\n     */\n    constructor(html, directives) {\n        this.behaviorCount = 0;\n        this.hasHostBehaviors = false;\n        this.fragment = null;\n        this.targetOffset = 0;\n        this.viewBehaviorFactories = null;\n        this.hostBehaviorFactories = null;\n        this.html = html;\n        this.directives = directives;\n    }\n    /**\n     * Creates an HTMLView instance based on this template definition.\n     * @param hostBindingTarget - The element that host behaviors will be bound to.\n     */\n    create(hostBindingTarget) {\n        if (this.fragment === null) {\n            let template;\n            const html = this.html;\n            if (typeof html === \"string\") {\n                template = document.createElement(\"template\");\n                template.innerHTML = DOM.createHTML(html);\n                const fec = template.content.firstElementChild;\n                if (fec !== null && fec.tagName === \"TEMPLATE\") {\n                    template = fec;\n                }\n            }\n            else {\n                template = html;\n            }\n            const result = compileTemplate(template, this.directives);\n            this.fragment = result.fragment;\n            this.viewBehaviorFactories = result.viewBehaviorFactories;\n            this.hostBehaviorFactories = result.hostBehaviorFactories;\n            this.targetOffset = result.targetOffset;\n            this.behaviorCount =\n                this.viewBehaviorFactories.length + this.hostBehaviorFactories.length;\n            this.hasHostBehaviors = this.hostBehaviorFactories.length > 0;\n        }\n        const fragment = this.fragment.cloneNode(true);\n        const viewFactories = this.viewBehaviorFactories;\n        const behaviors = new Array(this.behaviorCount);\n        const walker = DOM.createTemplateWalker(fragment);\n        let behaviorIndex = 0;\n        let targetIndex = this.targetOffset;\n        let node = walker.nextNode();\n        for (let ii = viewFactories.length; behaviorIndex < ii; ++behaviorIndex) {\n            const factory = viewFactories[behaviorIndex];\n            const factoryIndex = factory.targetIndex;\n            while (node !== null) {\n                if (targetIndex === factoryIndex) {\n                    behaviors[behaviorIndex] = factory.createBehavior(node);\n                    break;\n                }\n                else {\n                    node = walker.nextNode();\n                    targetIndex++;\n                }\n            }\n        }\n        if (this.hasHostBehaviors) {\n            const hostFactories = this.hostBehaviorFactories;\n            for (let i = 0, ii = hostFactories.length; i < ii; ++i, ++behaviorIndex) {\n                behaviors[behaviorIndex] = hostFactories[i].createBehavior(hostBindingTarget);\n            }\n        }\n        return new HTMLView(fragment, behaviors);\n    }\n    /**\n     * Creates an HTMLView from this template, binds it to the source, and then appends it to the host.\n     * @param source - The data source to bind the template to.\n     * @param host - The Element where the template will be rendered.\n     * @param hostBindingTarget - An HTML element to target the host bindings at if different from the\n     * host that the template is being attached to.\n     */\n    render(source, host, hostBindingTarget) {\n        if (typeof host === \"string\") {\n            host = document.getElementById(host);\n        }\n        if (hostBindingTarget === void 0) {\n            hostBindingTarget = host;\n        }\n        const view = this.create(hostBindingTarget);\n        view.bind(source, defaultExecutionContext);\n        view.appendTo(host);\n        return view;\n    }\n}\n// Much thanks to LitHTML for working this out!\nconst lastAttributeNameRegex = \n/* eslint-disable-next-line no-control-regex */\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n/**\n * Transforms a template literal string into a renderable ViewTemplate.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The html helper supports interpolation of strings, numbers, binding expressions,\n * other template instances, and Directive instances.\n * @public\n */\nexport function html(strings, ...values) {\n    const directives = [];\n    let html = \"\";\n    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n        const currentString = strings[i];\n        let value = values[i];\n        html += currentString;\n        if (value instanceof ViewTemplate) {\n            const template = value;\n            value = () => template;\n        }\n        if (typeof value === \"function\") {\n            value = new HTMLBindingDirective(value);\n        }\n        if (value instanceof TargetedHTMLDirective) {\n            const match = lastAttributeNameRegex.exec(currentString);\n            if (match !== null) {\n                value.targetName = match[2];\n            }\n        }\n        if (value instanceof HTMLDirective) {\n            // Since not all values are directives, we can't use i\n            // as the index for the placeholder. Instead, we need to\n            // use directives.length to get the next index.\n            html += value.createPlaceholder(directives.length);\n            directives.push(value);\n        }\n        else {\n            html += value;\n        }\n    }\n    html += strings[strings.length - 1];\n    return new ViewTemplate(html, directives);\n}\n","import { DOM } from \"../dom.js\";\n/**\n * Represents styles that can be applied to a custom element.\n * @public\n */\nexport class ElementStyles {\n    constructor() {\n        this.targets = new WeakSet();\n    }\n    /** @internal */\n    addStylesTo(target) {\n        this.targets.add(target);\n    }\n    /** @internal */\n    removeStylesFrom(target) {\n        this.targets.delete(target);\n    }\n    /** @internal */\n    isAttachedTo(target) {\n        return this.targets.has(target);\n    }\n    /**\n     * Associates behaviors with this set of styles.\n     * @param behaviors - The behaviors to associate.\n     */\n    withBehaviors(...behaviors) {\n        this.behaviors =\n            this.behaviors === null ? behaviors : this.behaviors.concat(behaviors);\n        return this;\n    }\n}\n/**\n * Create ElementStyles from ComposableStyles.\n */\nElementStyles.create = (() => {\n    if (DOM.supportsAdoptedStyleSheets) {\n        const styleSheetCache = new Map();\n        return (styles) => \n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new AdoptedStyleSheetsStyles(styles, styleSheetCache);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return (styles) => new StyleElementStyles(styles);\n})();\nfunction reduceStyles(styles) {\n    return styles\n        .map((x) => x instanceof ElementStyles ? reduceStyles(x.styles) : [x])\n        .reduce((prev, curr) => prev.concat(curr), []);\n}\nfunction reduceBehaviors(styles) {\n    return styles\n        .map((x) => (x instanceof ElementStyles ? x.behaviors : null))\n        .reduce((prev, curr) => {\n        if (curr === null) {\n            return prev;\n        }\n        if (prev === null) {\n            prev = [];\n        }\n        return prev.concat(curr);\n    }, null);\n}\nlet addAdoptedStyleSheets = (target, sheets) => {\n    target.adoptedStyleSheets = [...target.adoptedStyleSheets, ...sheets];\n};\nlet removeAdoptedStyleSheets = (target, sheets) => {\n    target.adoptedStyleSheets = target.adoptedStyleSheets.filter((x) => sheets.indexOf(x) === -1);\n};\nif (DOM.supportsAdoptedStyleSheets) {\n    try {\n        // Test if browser implementation uses FrozenArray.\n        // If not, use push / splice to alter the stylesheets\n        // in place. This circumvents a bug in Safari 16.4 where\n        // periodically, assigning the array would previously\n        // cause sheets to be removed.\n        document.adoptedStyleSheets.push();\n        document.adoptedStyleSheets.splice();\n        addAdoptedStyleSheets = (target, sheets) => {\n            target.adoptedStyleSheets.push(...sheets);\n        };\n        removeAdoptedStyleSheets = (target, sheets) => {\n            for (const sheet of sheets) {\n                const index = target.adoptedStyleSheets.indexOf(sheet);\n                if (index !== -1) {\n                    target.adoptedStyleSheets.splice(index, 1);\n                }\n            }\n        };\n    }\n    catch (e) {\n        // Do nothing if an error is thrown, the default\n        // case handles FrozenArray.\n    }\n}\n/**\n * https://wicg.github.io/construct-stylesheets/\n * https://developers.google.com/web/updates/2019/02/constructable-stylesheets\n *\n * @internal\n */\nexport class AdoptedStyleSheetsStyles extends ElementStyles {\n    constructor(styles, styleSheetCache) {\n        super();\n        this.styles = styles;\n        this.styleSheetCache = styleSheetCache;\n        this._styleSheets = void 0;\n        this.behaviors = reduceBehaviors(styles);\n    }\n    get styleSheets() {\n        if (this._styleSheets === void 0) {\n            const styles = this.styles;\n            const styleSheetCache = this.styleSheetCache;\n            this._styleSheets = reduceStyles(styles).map((x) => {\n                if (x instanceof CSSStyleSheet) {\n                    return x;\n                }\n                let sheet = styleSheetCache.get(x);\n                if (sheet === void 0) {\n                    sheet = new CSSStyleSheet();\n                    sheet.replaceSync(x);\n                    styleSheetCache.set(x, sheet);\n                }\n                return sheet;\n            });\n        }\n        return this._styleSheets;\n    }\n    addStylesTo(target) {\n        addAdoptedStyleSheets(target, this.styleSheets);\n        super.addStylesTo(target);\n    }\n    removeStylesFrom(target) {\n        removeAdoptedStyleSheets(target, this.styleSheets);\n        super.removeStylesFrom(target);\n    }\n}\nlet styleClassId = 0;\nfunction getNextStyleClass() {\n    return `fast-style-class-${++styleClassId}`;\n}\n/**\n * @internal\n */\nexport class StyleElementStyles extends ElementStyles {\n    constructor(styles) {\n        super();\n        this.styles = styles;\n        this.behaviors = null;\n        this.behaviors = reduceBehaviors(styles);\n        this.styleSheets = reduceStyles(styles);\n        this.styleClass = getNextStyleClass();\n    }\n    addStylesTo(target) {\n        const styleSheets = this.styleSheets;\n        const styleClass = this.styleClass;\n        target = this.normalizeTarget(target);\n        for (let i = 0; i < styleSheets.length; i++) {\n            const element = document.createElement(\"style\");\n            element.innerHTML = styleSheets[i];\n            element.className = styleClass;\n            target.append(element);\n        }\n        super.addStylesTo(target);\n    }\n    removeStylesFrom(target) {\n        target = this.normalizeTarget(target);\n        const styles = target.querySelectorAll(`.${this.styleClass}`);\n        for (let i = 0, ii = styles.length; i < ii; ++i) {\n            target.removeChild(styles[i]);\n        }\n        super.removeStylesFrom(target);\n    }\n    isAttachedTo(target) {\n        return super.isAttachedTo(this.normalizeTarget(target));\n    }\n    normalizeTarget(target) {\n        return target === document ? document.body : target;\n    }\n}\n","import { Observable } from \"../observation/observable.js\";\nimport { DOM } from \"../dom.js\";\nimport { createMetadataLocator } from \"../platform.js\";\n/**\n * Metadata used to configure a custom attribute's behavior.\n * @public\n */\nexport const AttributeConfiguration = Object.freeze({\n    /**\n     * Locates all attribute configurations associated with a type.\n     */\n    locate: createMetadataLocator(),\n});\n/**\n * A {@link ValueConverter} that converts to and from `boolean` values.\n * @remarks\n * Used automatically when the `boolean` {@link AttributeMode} is selected.\n * @public\n */\nexport const booleanConverter = {\n    toView(value) {\n        return value ? \"true\" : \"false\";\n    },\n    fromView(value) {\n        if (value === null ||\n            value === void 0 ||\n            value === \"false\" ||\n            value === false ||\n            value === 0) {\n            return false;\n        }\n        return true;\n    },\n};\n/**\n * A {@link ValueConverter} that converts to and from `number` values.\n * @remarks\n * This converter allows for nullable numbers, returning `null` if the\n * input was `null`, `undefined`, or `NaN`.\n * @public\n */\nexport const nullableNumberConverter = {\n    toView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number.toString();\n    },\n    fromView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number;\n    },\n};\n/**\n * An implementation of {@link Accessor} that supports reactivity,\n * change callbacks, attribute reflection, and type conversion for\n * custom elements.\n * @public\n */\nexport class AttributeDefinition {\n    /**\n     * Creates an instance of AttributeDefinition.\n     * @param Owner - The class constructor that owns this attribute.\n     * @param name - The name of the property associated with the attribute.\n     * @param attribute - The name of the attribute in HTML.\n     * @param mode - The {@link AttributeMode} that describes the behavior of this attribute.\n     * @param converter - A {@link ValueConverter} that integrates with the property getter/setter\n     * to convert values to and from a DOM string.\n     */\n    constructor(Owner, name, attribute = name.toLowerCase(), mode = \"reflect\", converter) {\n        this.guards = new Set();\n        this.Owner = Owner;\n        this.name = name;\n        this.attribute = attribute;\n        this.mode = mode;\n        this.converter = converter;\n        this.fieldName = `_${name}`;\n        this.callbackName = `${name}Changed`;\n        this.hasCallback = this.callbackName in Owner.prototype;\n        if (mode === \"boolean\" && converter === void 0) {\n            this.converter = booleanConverter;\n        }\n    }\n    /**\n     * Sets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     * @param value - The value to set the attribute/property to.\n     */\n    setValue(source, newValue) {\n        const oldValue = source[this.fieldName];\n        const converter = this.converter;\n        if (converter !== void 0) {\n            newValue = converter.fromView(newValue);\n        }\n        if (oldValue !== newValue) {\n            source[this.fieldName] = newValue;\n            this.tryReflectToAttribute(source);\n            if (this.hasCallback) {\n                source[this.callbackName](oldValue, newValue);\n            }\n            source.$fastController.notify(this.name);\n        }\n    }\n    /**\n     * Gets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     */\n    getValue(source) {\n        Observable.track(source, this.name);\n        return source[this.fieldName];\n    }\n    /** @internal */\n    onAttributeChangedCallback(element, value) {\n        if (this.guards.has(element)) {\n            return;\n        }\n        this.guards.add(element);\n        this.setValue(element, value);\n        this.guards.delete(element);\n    }\n    tryReflectToAttribute(element) {\n        const mode = this.mode;\n        const guards = this.guards;\n        if (guards.has(element) || mode === \"fromView\") {\n            return;\n        }\n        DOM.queueUpdate(() => {\n            guards.add(element);\n            const latestValue = element[this.fieldName];\n            switch (mode) {\n                case \"reflect\":\n                    const converter = this.converter;\n                    DOM.setAttribute(element, this.attribute, converter !== void 0 ? converter.toView(latestValue) : latestValue);\n                    break;\n                case \"boolean\":\n                    DOM.setBooleanAttribute(element, this.attribute, latestValue);\n                    break;\n            }\n            guards.delete(element);\n        });\n    }\n    /**\n     * Collects all attribute definitions associated with the owner.\n     * @param Owner - The class constructor to collect attribute for.\n     * @param attributeLists - Any existing attributes to collect and merge with those associated with the owner.\n     * @internal\n     */\n    static collect(Owner, ...attributeLists) {\n        const attributes = [];\n        attributeLists.push(AttributeConfiguration.locate(Owner));\n        for (let i = 0, ii = attributeLists.length; i < ii; ++i) {\n            const list = attributeLists[i];\n            if (list === void 0) {\n                continue;\n            }\n            for (let j = 0, jj = list.length; j < jj; ++j) {\n                const config = list[j];\n                if (typeof config === \"string\") {\n                    attributes.push(new AttributeDefinition(Owner, config));\n                }\n                else {\n                    attributes.push(new AttributeDefinition(Owner, config.property, config.attribute, config.mode, config.converter));\n                }\n            }\n        }\n        return attributes;\n    }\n}\nexport function attr(configOrTarget, prop) {\n    let config;\n    function decorator($target, $prop) {\n        if (arguments.length > 1) {\n            // Non invocation:\n            // - @attr\n            // Invocation with or w/o opts:\n            // - @attr()\n            // - @attr({...opts})\n            config.property = $prop;\n        }\n        AttributeConfiguration.locate($target.constructor).push(config);\n    }\n    if (arguments.length > 1) {\n        // Non invocation:\n        // - @attr\n        config = {};\n        decorator(configOrTarget, prop);\n        return;\n    }\n    // Invocation with or w/o opts:\n    // - @attr()\n    // - @attr({...opts})\n    config = configOrTarget === void 0 ? {} : configOrTarget;\n    return decorator;\n}\n","import { FAST } from \"../platform.js\";\nimport { Observable } from \"../observation/observable.js\";\nimport { ElementStyles } from \"../styles/element-styles.js\";\nimport { AttributeDefinition } from \"./attributes.js\";\nconst defaultShadowOptions = { mode: \"open\" };\nconst defaultElementOptions = {};\nconst fastRegistry = FAST.getById(4 /* elementRegistry */, () => {\n    const typeToDefinition = new Map();\n    return Object.freeze({\n        register(definition) {\n            if (typeToDefinition.has(definition.type)) {\n                return false;\n            }\n            typeToDefinition.set(definition.type, definition);\n            return true;\n        },\n        getByType(key) {\n            return typeToDefinition.get(key);\n        },\n    });\n});\n/**\n * Defines metadata for a FASTElement.\n * @public\n */\nexport class FASTElementDefinition {\n    /**\n     * Creates an instance of FASTElementDefinition.\n     * @param type - The type this definition is being created for.\n     * @param nameOrConfig - The name of the element to define or a config object\n     * that describes the element to define.\n     */\n    constructor(type, nameOrConfig = type.definition) {\n        if (typeof nameOrConfig === \"string\") {\n            nameOrConfig = { name: nameOrConfig };\n        }\n        this.type = type;\n        this.name = nameOrConfig.name;\n        this.template = nameOrConfig.template;\n        const attributes = AttributeDefinition.collect(type, nameOrConfig.attributes);\n        const observedAttributes = new Array(attributes.length);\n        const propertyLookup = {};\n        const attributeLookup = {};\n        for (let i = 0, ii = attributes.length; i < ii; ++i) {\n            const current = attributes[i];\n            observedAttributes[i] = current.attribute;\n            propertyLookup[current.name] = current;\n            attributeLookup[current.attribute] = current;\n        }\n        this.attributes = attributes;\n        this.observedAttributes = observedAttributes;\n        this.propertyLookup = propertyLookup;\n        this.attributeLookup = attributeLookup;\n        this.shadowOptions =\n            nameOrConfig.shadowOptions === void 0\n                ? defaultShadowOptions\n                : nameOrConfig.shadowOptions === null\n                    ? void 0\n                    : Object.assign(Object.assign({}, defaultShadowOptions), nameOrConfig.shadowOptions);\n        this.elementOptions =\n            nameOrConfig.elementOptions === void 0\n                ? defaultElementOptions\n                : Object.assign(Object.assign({}, defaultElementOptions), nameOrConfig.elementOptions);\n        this.styles =\n            nameOrConfig.styles === void 0\n                ? void 0\n                : Array.isArray(nameOrConfig.styles)\n                    ? ElementStyles.create(nameOrConfig.styles)\n                    : nameOrConfig.styles instanceof ElementStyles\n                        ? nameOrConfig.styles\n                        : ElementStyles.create([nameOrConfig.styles]);\n    }\n    /**\n     * Indicates if this element has been defined in at least one registry.\n     */\n    get isDefined() {\n        return !!fastRegistry.getByType(this.type);\n    }\n    /**\n     * Defines a custom element based on this definition.\n     * @param registry - The element registry to define the element in.\n     */\n    define(registry = customElements) {\n        const type = this.type;\n        if (fastRegistry.register(this)) {\n            const attributes = this.attributes;\n            const proto = type.prototype;\n            for (let i = 0, ii = attributes.length; i < ii; ++i) {\n                Observable.defineProperty(proto, attributes[i]);\n            }\n            Reflect.defineProperty(type, \"observedAttributes\", {\n                value: this.observedAttributes,\n                enumerable: true,\n            });\n        }\n        if (!registry.get(this.name)) {\n            registry.define(this.name, type, this.elementOptions);\n        }\n        return this;\n    }\n}\n/**\n * Gets the element definition associated with the specified type.\n * @param type - The custom element type to retrieve the definition for.\n */\nFASTElementDefinition.forType = fastRegistry.getByType;\n","import { DOM } from \"../dom.js\";\nimport { PropertyChangeNotifier } from \"../observation/notifier.js\";\nimport { defaultExecutionContext, Observable } from \"../observation/observable.js\";\nimport { FASTElementDefinition } from \"./fast-definitions.js\";\nconst shadowRoots = new WeakMap();\nconst defaultEventOptions = {\n    bubbles: true,\n    composed: true,\n    cancelable: true,\n};\nfunction getShadowRoot(element) {\n    return element.shadowRoot || shadowRoots.get(element) || null;\n}\n/**\n * Controls the lifecycle and rendering of a `FASTElement`.\n * @public\n */\nexport class Controller extends PropertyChangeNotifier {\n    /**\n     * Creates a Controller to control the specified element.\n     * @param element - The element to be controlled by this controller.\n     * @param definition - The element definition metadata that instructs this\n     * controller in how to handle rendering and other platform integrations.\n     * @internal\n     */\n    constructor(element, definition) {\n        super(element);\n        this.boundObservables = null;\n        this.behaviors = null;\n        this.needsInitialization = true;\n        this._template = null;\n        this._styles = null;\n        this._isConnected = false;\n        /**\n         * This allows Observable.getNotifier(...) to return the Controller\n         * when the notifier for the Controller itself is being requested. The\n         * result is that the Observable system does not need to create a separate\n         * instance of Notifier for observables on the Controller. The component and\n         * the controller will now share the same notifier, removing one-object construct\n         * per web component instance.\n         */\n        this.$fastController = this;\n        /**\n         * The view associated with the custom element.\n         * @remarks\n         * If `null` then the element is managing its own rendering.\n         */\n        this.view = null;\n        this.element = element;\n        this.definition = definition;\n        const shadowOptions = definition.shadowOptions;\n        if (shadowOptions !== void 0) {\n            const shadowRoot = element.attachShadow(shadowOptions);\n            if (shadowOptions.mode === \"closed\") {\n                shadowRoots.set(element, shadowRoot);\n            }\n        }\n        // Capture any observable values that were set by the binding engine before\n        // the browser upgraded the element. Then delete the property since it will\n        // shadow the getter/setter that is required to make the observable operate.\n        // Later, in the connect callback, we'll re-apply the values.\n        const accessors = Observable.getAccessors(element);\n        if (accessors.length > 0) {\n            const boundObservables = (this.boundObservables = Object.create(null));\n            for (let i = 0, ii = accessors.length; i < ii; ++i) {\n                const propertyName = accessors[i].name;\n                const value = element[propertyName];\n                if (value !== void 0) {\n                    delete element[propertyName];\n                    boundObservables[propertyName] = value;\n                }\n            }\n        }\n    }\n    /**\n     * Indicates whether or not the custom element has been\n     * connected to the document.\n     */\n    get isConnected() {\n        Observable.track(this, \"isConnected\");\n        return this._isConnected;\n    }\n    setIsConnected(value) {\n        this._isConnected = value;\n        Observable.notify(this, \"isConnected\");\n    }\n    /**\n     * Gets/sets the template used to render the component.\n     * @remarks\n     * This value can only be accurately read after connect but can be set at any time.\n     */\n    get template() {\n        return this._template;\n    }\n    set template(value) {\n        if (this._template === value) {\n            return;\n        }\n        this._template = value;\n        if (!this.needsInitialization) {\n            this.renderTemplate(value);\n        }\n    }\n    /**\n     * Gets/sets the primary styles used for the component.\n     * @remarks\n     * This value can only be accurately read after connect but can be set at any time.\n     */\n    get styles() {\n        return this._styles;\n    }\n    set styles(value) {\n        if (this._styles === value) {\n            return;\n        }\n        if (this._styles !== null) {\n            this.removeStyles(this._styles);\n        }\n        this._styles = value;\n        if (!this.needsInitialization && value !== null) {\n            this.addStyles(value);\n        }\n    }\n    /**\n     * Adds styles to this element. Providing an HTMLStyleElement will attach the element instance to the shadowRoot.\n     * @param styles - The styles to add.\n     */\n    addStyles(styles) {\n        const target = getShadowRoot(this.element) ||\n            this.element.getRootNode();\n        if (styles instanceof HTMLStyleElement) {\n            target.append(styles);\n        }\n        else if (!styles.isAttachedTo(target)) {\n            const sourceBehaviors = styles.behaviors;\n            styles.addStylesTo(target);\n            if (sourceBehaviors !== null) {\n                this.addBehaviors(sourceBehaviors);\n            }\n        }\n    }\n    /**\n     * Removes styles from this element. Providing an HTMLStyleElement will detach the element instance from the shadowRoot.\n     * @param styles - the styles to remove.\n     */\n    removeStyles(styles) {\n        const target = getShadowRoot(this.element) ||\n            this.element.getRootNode();\n        if (styles instanceof HTMLStyleElement) {\n            target.removeChild(styles);\n        }\n        else if (styles.isAttachedTo(target)) {\n            const sourceBehaviors = styles.behaviors;\n            styles.removeStylesFrom(target);\n            if (sourceBehaviors !== null) {\n                this.removeBehaviors(sourceBehaviors);\n            }\n        }\n    }\n    /**\n     * Adds behaviors to this element.\n     * @param behaviors - The behaviors to add.\n     */\n    addBehaviors(behaviors) {\n        const targetBehaviors = this.behaviors || (this.behaviors = new Map());\n        const length = behaviors.length;\n        const behaviorsToBind = [];\n        for (let i = 0; i < length; ++i) {\n            const behavior = behaviors[i];\n            if (targetBehaviors.has(behavior)) {\n                targetBehaviors.set(behavior, targetBehaviors.get(behavior) + 1);\n            }\n            else {\n                targetBehaviors.set(behavior, 1);\n                behaviorsToBind.push(behavior);\n            }\n        }\n        if (this._isConnected) {\n            const element = this.element;\n            for (let i = 0; i < behaviorsToBind.length; ++i) {\n                behaviorsToBind[i].bind(element, defaultExecutionContext);\n            }\n        }\n    }\n    /**\n     * Removes behaviors from this element.\n     * @param behaviors - The behaviors to remove.\n     * @param force - Forces unbinding of behaviors.\n     */\n    removeBehaviors(behaviors, force = false) {\n        const targetBehaviors = this.behaviors;\n        if (targetBehaviors === null) {\n            return;\n        }\n        const length = behaviors.length;\n        const behaviorsToUnbind = [];\n        for (let i = 0; i < length; ++i) {\n            const behavior = behaviors[i];\n            if (targetBehaviors.has(behavior)) {\n                const count = targetBehaviors.get(behavior) - 1;\n                count === 0 || force\n                    ? targetBehaviors.delete(behavior) && behaviorsToUnbind.push(behavior)\n                    : targetBehaviors.set(behavior, count);\n            }\n        }\n        if (this._isConnected) {\n            const element = this.element;\n            for (let i = 0; i < behaviorsToUnbind.length; ++i) {\n                behaviorsToUnbind[i].unbind(element);\n            }\n        }\n    }\n    /**\n     * Runs connected lifecycle behavior on the associated element.\n     */\n    onConnectedCallback() {\n        if (this._isConnected) {\n            return;\n        }\n        const element = this.element;\n        if (this.needsInitialization) {\n            this.finishInitialization();\n        }\n        else if (this.view !== null) {\n            this.view.bind(element, defaultExecutionContext);\n        }\n        const behaviors = this.behaviors;\n        if (behaviors !== null) {\n            for (const [behavior] of behaviors) {\n                behavior.bind(element, defaultExecutionContext);\n            }\n        }\n        this.setIsConnected(true);\n    }\n    /**\n     * Runs disconnected lifecycle behavior on the associated element.\n     */\n    onDisconnectedCallback() {\n        if (!this._isConnected) {\n            return;\n        }\n        this.setIsConnected(false);\n        const view = this.view;\n        if (view !== null) {\n            view.unbind();\n        }\n        const behaviors = this.behaviors;\n        if (behaviors !== null) {\n            const element = this.element;\n            for (const [behavior] of behaviors) {\n                behavior.unbind(element);\n            }\n        }\n    }\n    /**\n     * Runs the attribute changed callback for the associated element.\n     * @param name - The name of the attribute that changed.\n     * @param oldValue - The previous value of the attribute.\n     * @param newValue - The new value of the attribute.\n     */\n    onAttributeChangedCallback(name, oldValue, newValue) {\n        const attrDef = this.definition.attributeLookup[name];\n        if (attrDef !== void 0) {\n            attrDef.onAttributeChangedCallback(this.element, newValue);\n        }\n    }\n    /**\n     * Emits a custom HTML event.\n     * @param type - The type name of the event.\n     * @param detail - The event detail object to send with the event.\n     * @param options - The event options. By default bubbles and composed.\n     * @remarks\n     * Only emits events if connected.\n     */\n    emit(type, detail, options) {\n        if (this._isConnected) {\n            return this.element.dispatchEvent(new CustomEvent(type, Object.assign(Object.assign({ detail }, defaultEventOptions), options)));\n        }\n        return false;\n    }\n    finishInitialization() {\n        const element = this.element;\n        const boundObservables = this.boundObservables;\n        // If we have any observables that were bound, re-apply their values.\n        if (boundObservables !== null) {\n            const propertyNames = Object.keys(boundObservables);\n            for (let i = 0, ii = propertyNames.length; i < ii; ++i) {\n                const propertyName = propertyNames[i];\n                element[propertyName] = boundObservables[propertyName];\n            }\n            this.boundObservables = null;\n        }\n        const definition = this.definition;\n        // 1. Template overrides take top precedence.\n        if (this._template === null) {\n            if (this.element.resolveTemplate) {\n                // 2. Allow for element instance overrides next.\n                this._template = this.element.resolveTemplate();\n            }\n            else if (definition.template) {\n                // 3. Default to the static definition.\n                this._template = definition.template || null;\n            }\n        }\n        // If we have a template after the above process, render it.\n        // If there's no template, then the element author has opted into\n        // custom rendering and they will managed the shadow root's content themselves.\n        if (this._template !== null) {\n            this.renderTemplate(this._template);\n        }\n        // 1. Styles overrides take top precedence.\n        if (this._styles === null) {\n            if (this.element.resolveStyles) {\n                // 2. Allow for element instance overrides next.\n                this._styles = this.element.resolveStyles();\n            }\n            else if (definition.styles) {\n                // 3. Default to the static definition.\n                this._styles = definition.styles || null;\n            }\n        }\n        // If we have styles after the above process, add them.\n        if (this._styles !== null) {\n            this.addStyles(this._styles);\n        }\n        this.needsInitialization = false;\n    }\n    renderTemplate(template) {\n        const element = this.element;\n        // When getting the host to render to, we start by looking\n        // up the shadow root. If there isn't one, then that means\n        // we're doing a Light DOM render to the element's direct children.\n        const host = getShadowRoot(element) || element;\n        if (this.view !== null) {\n            // If there's already a view, we need to unbind and remove through dispose.\n            this.view.dispose();\n            this.view = null;\n        }\n        else if (!this.needsInitialization) {\n            // If there was previous custom rendering, we need to clear out the host.\n            DOM.removeChildNodes(host);\n        }\n        if (template) {\n            // If a new template was provided, render it.\n            this.view = template.render(element, host, element);\n        }\n    }\n    /**\n     * Locates or creates a controller for the specified element.\n     * @param element - The element to return the controller for.\n     * @remarks\n     * The specified element must have a {@link FASTElementDefinition}\n     * registered either through the use of the {@link customElement}\n     * decorator or a call to `FASTElement.define`.\n     */\n    static forCustomElement(element) {\n        const controller = element.$fastController;\n        if (controller !== void 0) {\n            return controller;\n        }\n        const definition = FASTElementDefinition.forType(element.constructor);\n        if (definition === void 0) {\n            throw new Error(\"Missing FASTElement definition.\");\n        }\n        return (element.$fastController = new Controller(element, definition));\n    }\n}\n","import { Controller } from \"./controller.js\";\nimport { FASTElementDefinition, } from \"./fast-definitions.js\";\n/* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */\nfunction createFASTElement(BaseType) {\n    return class extends BaseType {\n        constructor() {\n            /* eslint-disable-next-line */\n            super();\n            Controller.forCustomElement(this);\n        }\n        $emit(type, detail, options) {\n            return this.$fastController.emit(type, detail, options);\n        }\n        connectedCallback() {\n            this.$fastController.onConnectedCallback();\n        }\n        disconnectedCallback() {\n            this.$fastController.onDisconnectedCallback();\n        }\n        attributeChangedCallback(name, oldValue, newValue) {\n            this.$fastController.onAttributeChangedCallback(name, oldValue, newValue);\n        }\n    };\n}\n/**\n * A minimal base class for FASTElements that also provides\n * static helpers for working with FASTElements.\n * @public\n */\nexport const FASTElement = Object.assign(createFASTElement(HTMLElement), {\n    /**\n     * Creates a new FASTElement base class inherited from the\n     * provided base type.\n     * @param BaseType - The base element type to inherit from.\n     */\n    from(BaseType) {\n        return createFASTElement(BaseType);\n    },\n    /**\n     * Defines a platform custom element based on the provided type and definition.\n     * @param type - The custom element type to define.\n     * @param nameOrDef - The name of the element to define or a definition object\n     * that describes the element to define.\n     */\n    define(type, nameOrDef) {\n        return new FASTElementDefinition(type, nameOrDef).define().type;\n    },\n});\n/**\n * Decorator: Defines a platform custom element based on `FASTElement`.\n * @param nameOrDef - The name of the element to define or a definition object\n * that describes the element to define.\n * @public\n */\nexport function customElement(nameOrDef) {\n    /* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */\n    return function (type) {\n        new FASTElementDefinition(type, nameOrDef).define();\n    };\n}\n","/**\n * Directive for use in {@link css}.\n *\n * @public\n */\nexport class CSSDirective {\n    /**\n     * Creates a CSS fragment to interpolate into the CSS document.\n     * @returns - the string to interpolate into CSS\n     */\n    createCSS() {\n        return \"\";\n    }\n    /**\n     * Creates a behavior to bind to the host element.\n     * @returns - the behavior to bind to the host element, or undefined.\n     */\n    createBehavior() {\n        return undefined;\n    }\n}\n","import { CSSDirective } from \"./css-directive.js\";\nimport { ElementStyles } from \"./element-styles.js\";\nfunction collectStyles(strings, values) {\n    const styles = [];\n    let cssString = \"\";\n    const behaviors = [];\n    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n        cssString += strings[i];\n        let value = values[i];\n        if (value instanceof CSSDirective) {\n            const behavior = value.createBehavior();\n            value = value.createCSS();\n            if (behavior) {\n                behaviors.push(behavior);\n            }\n        }\n        if (value instanceof ElementStyles || value instanceof CSSStyleSheet) {\n            if (cssString.trim() !== \"\") {\n                styles.push(cssString);\n                cssString = \"\";\n            }\n            styles.push(value);\n        }\n        else {\n            cssString += value;\n        }\n    }\n    cssString += strings[strings.length - 1];\n    if (cssString.trim() !== \"\") {\n        styles.push(cssString);\n    }\n    return {\n        styles,\n        behaviors,\n    };\n}\n/**\n * Transforms a template literal string into styles.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The css helper supports interpolation of strings and ElementStyle instances.\n * @public\n */\nexport function css(strings, ...values) {\n    const { styles, behaviors } = collectStyles(strings, values);\n    const elementStyles = ElementStyles.create(styles);\n    if (behaviors.length) {\n        elementStyles.withBehaviors(...behaviors);\n    }\n    return elementStyles;\n}\nclass CSSPartial extends CSSDirective {\n    constructor(styles, behaviors) {\n        super();\n        this.behaviors = behaviors;\n        this.css = \"\";\n        const stylesheets = styles.reduce((accumulated, current) => {\n            if (typeof current === \"string\") {\n                this.css += current;\n            }\n            else {\n                accumulated.push(current);\n            }\n            return accumulated;\n        }, []);\n        if (stylesheets.length) {\n            this.styles = ElementStyles.create(stylesheets);\n        }\n    }\n    createBehavior() {\n        return this;\n    }\n    createCSS() {\n        return this.css;\n    }\n    bind(el) {\n        if (this.styles) {\n            el.$fastController.addStyles(this.styles);\n        }\n        if (this.behaviors.length) {\n            el.$fastController.addBehaviors(this.behaviors);\n        }\n    }\n    unbind(el) {\n        if (this.styles) {\n            el.$fastController.removeStyles(this.styles);\n        }\n        if (this.behaviors.length) {\n            el.$fastController.removeBehaviors(this.behaviors);\n        }\n    }\n}\n/**\n * Transforms a template literal string into partial CSS.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @public\n */\nexport function cssPartial(strings, ...values) {\n    const { styles, behaviors } = collectStyles(strings, values);\n    return new CSSPartial(styles, behaviors);\n}\n","import { emptyArray } from \"../platform.js\";\n/** @internal */\nexport function newSplice(index, removed, addedCount) {\n    return {\n        index: index,\n        removed: removed,\n        addedCount: addedCount,\n    };\n}\nconst EDIT_LEAVE = 0;\nconst EDIT_UPDATE = 1;\nconst EDIT_ADD = 2;\nconst EDIT_DELETE = 3;\n// Note: This function is *based* on the computation of the Levenshtein\n// \"edit\" distance. The one change is that \"updates\" are treated as two\n// edits - not one. With Array splices, an update is really a delete\n// followed by an add. By retaining this, we optimize for \"keeping\" the\n// maximum array items in the original array. For example:\n//\n//   'xxxx123' -> '123yyyy'\n//\n// With 1-edit updates, the shortest path would be just to update all seven\n// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n// leaves the substring '123' intact.\nfunction calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n    // \"Deletion\" columns\n    const rowCount = oldEnd - oldStart + 1;\n    const columnCount = currentEnd - currentStart + 1;\n    const distances = new Array(rowCount);\n    let north;\n    let west;\n    // \"Addition\" rows. Initialize null column.\n    for (let i = 0; i < rowCount; ++i) {\n        distances[i] = new Array(columnCount);\n        distances[i][0] = i;\n    }\n    // Initialize null row\n    for (let j = 0; j < columnCount; ++j) {\n        distances[0][j] = j;\n    }\n    for (let i = 1; i < rowCount; ++i) {\n        for (let j = 1; j < columnCount; ++j) {\n            if (current[currentStart + j - 1] === old[oldStart + i - 1]) {\n                distances[i][j] = distances[i - 1][j - 1];\n            }\n            else {\n                north = distances[i - 1][j] + 1;\n                west = distances[i][j - 1] + 1;\n                distances[i][j] = north < west ? north : west;\n            }\n        }\n    }\n    return distances;\n}\n// This starts at the final weight, and walks \"backward\" by finding\n// the minimum previous weight recursively until the origin of the weight\n// matrix.\nfunction spliceOperationsFromEditDistances(distances) {\n    let i = distances.length - 1;\n    let j = distances[0].length - 1;\n    let current = distances[i][j];\n    const edits = [];\n    while (i > 0 || j > 0) {\n        if (i === 0) {\n            edits.push(EDIT_ADD);\n            j--;\n            continue;\n        }\n        if (j === 0) {\n            edits.push(EDIT_DELETE);\n            i--;\n            continue;\n        }\n        const northWest = distances[i - 1][j - 1];\n        const west = distances[i - 1][j];\n        const north = distances[i][j - 1];\n        let min;\n        if (west < north) {\n            min = west < northWest ? west : northWest;\n        }\n        else {\n            min = north < northWest ? north : northWest;\n        }\n        if (min === northWest) {\n            if (northWest === current) {\n                edits.push(EDIT_LEAVE);\n            }\n            else {\n                edits.push(EDIT_UPDATE);\n                current = northWest;\n            }\n            i--;\n            j--;\n        }\n        else if (min === west) {\n            edits.push(EDIT_DELETE);\n            i--;\n            current = west;\n        }\n        else {\n            edits.push(EDIT_ADD);\n            j--;\n            current = north;\n        }\n    }\n    edits.reverse();\n    return edits;\n}\nfunction sharedPrefix(current, old, searchLength) {\n    for (let i = 0; i < searchLength; ++i) {\n        if (current[i] !== old[i]) {\n            return i;\n        }\n    }\n    return searchLength;\n}\nfunction sharedSuffix(current, old, searchLength) {\n    let index1 = current.length;\n    let index2 = old.length;\n    let count = 0;\n    while (count < searchLength && current[--index1] === old[--index2]) {\n        count++;\n    }\n    return count;\n}\nfunction intersect(start1, end1, start2, end2) {\n    // Disjoint\n    if (end1 < start2 || end2 < start1) {\n        return -1;\n    }\n    // Adjacent\n    if (end1 === start2 || end2 === start1) {\n        return 0;\n    }\n    // Non-zero intersect, span1 first\n    if (start1 < start2) {\n        if (end1 < end2) {\n            return end1 - start2; // Overlap\n        }\n        return end2 - start2; // Contained\n    }\n    // Non-zero intersect, span2 first\n    if (end2 < end1) {\n        return end2 - start1; // Overlap\n    }\n    return end1 - start1; // Contained\n}\n/**\n * Splice Projection functions:\n *\n * A splice map is a representation of how a previous array of items\n * was transformed into a new array of items. Conceptually it is a list of\n * tuples of\n *\n *   <index, removed, addedCount>\n *\n * which are kept in ascending index order of. The tuple represents that at\n * the |index|, |removed| sequence of items were removed, and counting forward\n * from |index|, |addedCount| items were added.\n */\n/**\n * @internal\n * @remarks\n * Lacking individual splice mutation information, the minimal set of\n * splices can be synthesized given the previous state and final state of an\n * array. The basic approach is to calculate the edit distance matrix and\n * choose the shortest path through it.\n *\n * Complexity: O(l * p)\n *   l: The length of the current array\n *   p: The length of the old array\n */\nexport function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n    let prefixCount = 0;\n    let suffixCount = 0;\n    const minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n    if (currentStart === 0 && oldStart === 0) {\n        prefixCount = sharedPrefix(current, old, minLength);\n    }\n    if (currentEnd === current.length && oldEnd === old.length) {\n        suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n    }\n    currentStart += prefixCount;\n    oldStart += prefixCount;\n    currentEnd -= suffixCount;\n    oldEnd -= suffixCount;\n    if (currentEnd - currentStart === 0 && oldEnd - oldStart === 0) {\n        return emptyArray;\n    }\n    if (currentStart === currentEnd) {\n        const splice = newSplice(currentStart, [], 0);\n        while (oldStart < oldEnd) {\n            splice.removed.push(old[oldStart++]);\n        }\n        return [splice];\n    }\n    else if (oldStart === oldEnd) {\n        return [newSplice(currentStart, [], currentEnd - currentStart)];\n    }\n    const ops = spliceOperationsFromEditDistances(calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));\n    const splices = [];\n    let splice = void 0;\n    let index = currentStart;\n    let oldIndex = oldStart;\n    for (let i = 0; i < ops.length; ++i) {\n        switch (ops[i]) {\n            case EDIT_LEAVE:\n                if (splice !== void 0) {\n                    splices.push(splice);\n                    splice = void 0;\n                }\n                index++;\n                oldIndex++;\n                break;\n            case EDIT_UPDATE:\n                if (splice === void 0) {\n                    splice = newSplice(index, [], 0);\n                }\n                splice.addedCount++;\n                index++;\n                splice.removed.push(old[oldIndex]);\n                oldIndex++;\n                break;\n            case EDIT_ADD:\n                if (splice === void 0) {\n                    splice = newSplice(index, [], 0);\n                }\n                splice.addedCount++;\n                index++;\n                break;\n            case EDIT_DELETE:\n                if (splice === void 0) {\n                    splice = newSplice(index, [], 0);\n                }\n                splice.removed.push(old[oldIndex]);\n                oldIndex++;\n                break;\n            // no default\n        }\n    }\n    if (splice !== void 0) {\n        splices.push(splice);\n    }\n    return splices;\n}\nconst $push = Array.prototype.push;\nfunction mergeSplice(splices, index, removed, addedCount) {\n    const splice = newSplice(index, removed, addedCount);\n    let inserted = false;\n    let insertionOffset = 0;\n    for (let i = 0; i < splices.length; i++) {\n        const current = splices[i];\n        current.index += insertionOffset;\n        if (inserted) {\n            continue;\n        }\n        const intersectCount = intersect(splice.index, splice.index + splice.removed.length, current.index, current.index + current.addedCount);\n        if (intersectCount >= 0) {\n            // Merge the two splices\n            splices.splice(i, 1);\n            i--;\n            insertionOffset -= current.addedCount - current.removed.length;\n            splice.addedCount += current.addedCount - intersectCount;\n            const deleteCount = splice.removed.length + current.removed.length - intersectCount;\n            if (!splice.addedCount && !deleteCount) {\n                // merged splice is a noop. discard.\n                inserted = true;\n            }\n            else {\n                let currentRemoved = current.removed;\n                if (splice.index < current.index) {\n                    // some prefix of splice.removed is prepended to current.removed.\n                    const prepend = splice.removed.slice(0, current.index - splice.index);\n                    $push.apply(prepend, currentRemoved);\n                    currentRemoved = prepend;\n                }\n                if (splice.index + splice.removed.length >\n                    current.index + current.addedCount) {\n                    // some suffix of splice.removed is appended to current.removed.\n                    const append = splice.removed.slice(current.index + current.addedCount - splice.index);\n                    $push.apply(currentRemoved, append);\n                }\n                splice.removed = currentRemoved;\n                if (current.index < splice.index) {\n                    splice.index = current.index;\n                }\n            }\n        }\n        else if (splice.index < current.index) {\n            // Insert splice here.\n            inserted = true;\n            splices.splice(i, 0, splice);\n            i++;\n            const offset = splice.addedCount - splice.removed.length;\n            current.index += offset;\n            insertionOffset += offset;\n        }\n    }\n    if (!inserted) {\n        splices.push(splice);\n    }\n}\nfunction createInitialSplices(changeRecords) {\n    const splices = [];\n    for (let i = 0, ii = changeRecords.length; i < ii; i++) {\n        const record = changeRecords[i];\n        mergeSplice(splices, record.index, record.removed, record.addedCount);\n    }\n    return splices;\n}\n/** @internal */\nexport function projectArraySplices(array, changeRecords) {\n    let splices = [];\n    const initialSplices = createInitialSplices(changeRecords);\n    for (let i = 0, ii = initialSplices.length; i < ii; ++i) {\n        const splice = initialSplices[i];\n        if (splice.addedCount === 1 && splice.removed.length === 1) {\n            if (splice.removed[0] !== array[splice.index]) {\n                splices.push(splice);\n            }\n            continue;\n        }\n        splices = splices.concat(calcSplices(array, splice.index, splice.index + splice.addedCount, splice.removed, 0, splice.removed.length));\n    }\n    return splices;\n}\n","import { DOM } from \"../dom.js\";\nimport { calcSplices, newSplice, projectArraySplices } from \"./array-change-records.js\";\nimport { SubscriberSet } from \"./notifier.js\";\nimport { Observable } from \"./observable.js\";\nlet arrayObservationEnabled = false;\nfunction adjustIndex(changeRecord, array) {\n    let index = changeRecord.index;\n    const arrayLength = array.length;\n    if (index > arrayLength) {\n        index = arrayLength - changeRecord.addedCount;\n    }\n    else if (index < 0) {\n        index =\n            arrayLength + changeRecord.removed.length + index - changeRecord.addedCount;\n    }\n    if (index < 0) {\n        index = 0;\n    }\n    changeRecord.index = index;\n    return changeRecord;\n}\nclass ArrayObserver extends SubscriberSet {\n    constructor(source) {\n        super(source);\n        this.oldCollection = void 0;\n        this.splices = void 0;\n        this.needsQueue = true;\n        this.call = this.flush;\n        Reflect.defineProperty(source, \"$fastController\", {\n            value: this,\n            enumerable: false,\n        });\n    }\n    subscribe(subscriber) {\n        this.flush();\n        super.subscribe(subscriber);\n    }\n    addSplice(splice) {\n        if (this.splices === void 0) {\n            this.splices = [splice];\n        }\n        else {\n            this.splices.push(splice);\n        }\n        if (this.needsQueue) {\n            this.needsQueue = false;\n            DOM.queueUpdate(this);\n        }\n    }\n    reset(oldCollection) {\n        this.oldCollection = oldCollection;\n        if (this.needsQueue) {\n            this.needsQueue = false;\n            DOM.queueUpdate(this);\n        }\n    }\n    flush() {\n        const splices = this.splices;\n        const oldCollection = this.oldCollection;\n        if (splices === void 0 && oldCollection === void 0) {\n            return;\n        }\n        this.needsQueue = true;\n        this.splices = void 0;\n        this.oldCollection = void 0;\n        const finalSplices = oldCollection === void 0\n            ? projectArraySplices(this.source, splices)\n            : calcSplices(this.source, 0, this.source.length, oldCollection, 0, oldCollection.length);\n        this.notify(finalSplices);\n    }\n}\n/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/**\n * Enables the array observation mechanism.\n * @remarks\n * Array observation is enabled automatically when using the\n * {@link RepeatDirective}, so calling this API manually is\n * not typically necessary.\n * @public\n */\nexport function enableArrayObservation() {\n    if (arrayObservationEnabled) {\n        return;\n    }\n    arrayObservationEnabled = true;\n    Observable.setArrayObserverFactory((collection) => {\n        return new ArrayObserver(collection);\n    });\n    const proto = Array.prototype;\n    // Don't patch Array if it has already been patched\n    // by another copy of fast-element.\n    if (proto.$fastPatch) {\n        return;\n    }\n    Reflect.defineProperty(proto, \"$fastPatch\", {\n        value: 1,\n        enumerable: false,\n    });\n    const pop = proto.pop;\n    const push = proto.push;\n    const reverse = proto.reverse;\n    const shift = proto.shift;\n    const sort = proto.sort;\n    const splice = proto.splice;\n    const unshift = proto.unshift;\n    proto.pop = function () {\n        const notEmpty = this.length > 0;\n        const methodCallResult = pop.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0 && notEmpty) {\n            o.addSplice(newSplice(this.length, [methodCallResult], 0));\n        }\n        return methodCallResult;\n    };\n    proto.push = function () {\n        const methodCallResult = push.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(this.length - arguments.length, [], arguments.length), this));\n        }\n        return methodCallResult;\n    };\n    proto.reverse = function () {\n        let oldArray;\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.flush();\n            oldArray = this.slice();\n        }\n        const methodCallResult = reverse.apply(this, arguments);\n        if (o !== void 0) {\n            o.reset(oldArray);\n        }\n        return methodCallResult;\n    };\n    proto.shift = function () {\n        const notEmpty = this.length > 0;\n        const methodCallResult = shift.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0 && notEmpty) {\n            o.addSplice(newSplice(0, [methodCallResult], 0));\n        }\n        return methodCallResult;\n    };\n    proto.sort = function () {\n        let oldArray;\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.flush();\n            oldArray = this.slice();\n        }\n        const methodCallResult = sort.apply(this, arguments);\n        if (o !== void 0) {\n            o.reset(oldArray);\n        }\n        return methodCallResult;\n    };\n    proto.splice = function () {\n        const methodCallResult = splice.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(+arguments[0], methodCallResult, arguments.length > 2 ? arguments.length - 2 : 0), this));\n        }\n        return methodCallResult;\n    };\n    proto.unshift = function () {\n        const methodCallResult = unshift.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(0, [], arguments.length), this));\n        }\n        return methodCallResult;\n    };\n}\n/* eslint-enable prefer-rest-params */\n/* eslint-enable @typescript-eslint/explicit-function-return-type */\n","import { AttachedBehaviorHTMLDirective } from \"./html-directive.js\";\n/**\n * The runtime behavior for template references.\n * @public\n */\nexport class RefBehavior {\n    /**\n     * Creates an instance of RefBehavior.\n     * @param target - The element to reference.\n     * @param propertyName - The name of the property to assign the reference to.\n     */\n    constructor(target, propertyName) {\n        this.target = target;\n        this.propertyName = propertyName;\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source) {\n        source[this.propertyName] = this.target;\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    /* eslint-disable-next-line @typescript-eslint/no-empty-function */\n    unbind() { }\n}\n/**\n * A directive that observes the updates a property with a reference to the element.\n * @param propertyName - The name of the property to assign the reference to.\n * @public\n */\nexport function ref(propertyName) {\n    return new AttachedBehaviorHTMLDirective(\"fast-ref\", RefBehavior, propertyName);\n}\n","/**\n * Determines whether or not an object is a function.\n * @public\n */\nexport const isFunction = (object) => typeof object === \"function\";\n","import { isFunction } from \"../interfaces.js\";\nconst noTemplate = () => null;\nfunction normalizeBinding(value) {\n    return value === undefined ? noTemplate : isFunction(value) ? value : () => value;\n}\n/**\n * A directive that enables basic conditional rendering in a template.\n * @param binding - The condition to test for rendering.\n * @param templateOrTemplateBinding - The template or a binding that gets\n * the template to render when the condition is true.\n * @param elseTemplateOrTemplateBinding - Optional template or binding that that\n * gets the template to render when the conditional is false.\n * @public\n */\nexport function when(binding, templateOrTemplateBinding, elseTemplateOrTemplateBinding) {\n    const dataBinding = isFunction(binding) ? binding : () => binding;\n    const templateBinding = normalizeBinding(templateOrTemplateBinding);\n    const elseBinding = normalizeBinding(elseTemplateOrTemplateBinding);\n    return (source, context) => dataBinding(source, context)\n        ? templateBinding(source, context)\n        : elseBinding(source, context);\n}\n","import { DOM } from \"../dom.js\";\nimport { Observable, } from \"../observation/observable.js\";\nimport { enableArrayObservation } from \"../observation/array-observer.js\";\nimport { emptyArray } from \"../platform.js\";\nimport { HTMLDirective } from \"./html-directive.js\";\nimport { HTMLView } from \"./view.js\";\nconst defaultRepeatOptions = Object.freeze({\n    positioning: false,\n    recycle: true,\n});\nfunction bindWithoutPositioning(view, items, index, context) {\n    view.bind(items[index], context);\n}\nfunction bindWithPositioning(view, items, index, context) {\n    const childContext = Object.create(context);\n    childContext.index = index;\n    childContext.length = items.length;\n    view.bind(items[index], childContext);\n}\n/**\n * A behavior that renders a template for each item in an array.\n * @public\n */\nexport class RepeatBehavior {\n    /**\n     * Creates an instance of RepeatBehavior.\n     * @param location - The location in the DOM to render the repeat.\n     * @param itemsBinding - The array to render.\n     * @param isItemsBindingVolatile - Indicates whether the items binding has volatile dependencies.\n     * @param templateBinding - The template to render for each item.\n     * @param isTemplateBindingVolatile - Indicates whether the template binding has volatile dependencies.\n     * @param options - Options used to turn on special repeat features.\n     */\n    constructor(location, itemsBinding, isItemsBindingVolatile, templateBinding, isTemplateBindingVolatile, options) {\n        this.location = location;\n        this.itemsBinding = itemsBinding;\n        this.templateBinding = templateBinding;\n        this.options = options;\n        this.source = null;\n        this.views = [];\n        this.items = null;\n        this.itemsObserver = null;\n        this.originalContext = void 0;\n        this.childContext = void 0;\n        this.bindView = bindWithoutPositioning;\n        this.itemsBindingObserver = Observable.binding(itemsBinding, this, isItemsBindingVolatile);\n        this.templateBindingObserver = Observable.binding(templateBinding, this, isTemplateBindingVolatile);\n        if (options.positioning) {\n            this.bindView = bindWithPositioning;\n        }\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source, context) {\n        this.source = source;\n        this.originalContext = context;\n        this.childContext = Object.create(context);\n        this.childContext.parent = source;\n        this.childContext.parentContext = this.originalContext;\n        this.items = this.itemsBindingObserver.observe(source, this.originalContext);\n        this.template = this.templateBindingObserver.observe(source, this.originalContext);\n        this.observeItems(true);\n        this.refreshAllViews();\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    unbind() {\n        this.source = null;\n        this.items = null;\n        if (this.itemsObserver !== null) {\n            this.itemsObserver.unsubscribe(this);\n        }\n        this.unbindAllViews();\n        this.itemsBindingObserver.disconnect();\n        this.templateBindingObserver.disconnect();\n    }\n    /** @internal */\n    handleChange(source, args) {\n        if (source === this.itemsBinding) {\n            this.items = this.itemsBindingObserver.observe(this.source, this.originalContext);\n            this.observeItems();\n            this.refreshAllViews();\n        }\n        else if (source === this.templateBinding) {\n            this.template = this.templateBindingObserver.observe(this.source, this.originalContext);\n            this.refreshAllViews(true);\n        }\n        else {\n            this.updateViews(args);\n        }\n    }\n    observeItems(force = false) {\n        if (!this.items) {\n            this.items = emptyArray;\n            return;\n        }\n        const oldObserver = this.itemsObserver;\n        const newObserver = (this.itemsObserver = Observable.getNotifier(this.items));\n        const hasNewObserver = oldObserver !== newObserver;\n        if (hasNewObserver && oldObserver !== null) {\n            oldObserver.unsubscribe(this);\n        }\n        if (hasNewObserver || force) {\n            newObserver.subscribe(this);\n        }\n    }\n    updateViews(splices) {\n        const childContext = this.childContext;\n        const views = this.views;\n        const bindView = this.bindView;\n        const items = this.items;\n        const template = this.template;\n        const recycle = this.options.recycle;\n        const leftoverViews = [];\n        let leftoverIndex = 0;\n        let availableViews = 0;\n        for (let i = 0, ii = splices.length; i < ii; ++i) {\n            const splice = splices[i];\n            const removed = splice.removed;\n            let removeIndex = 0;\n            let addIndex = splice.index;\n            const end = addIndex + splice.addedCount;\n            const removedViews = views.splice(splice.index, removed.length);\n            const totalAvailableViews = (availableViews =\n                leftoverViews.length + removedViews.length);\n            for (; addIndex < end; ++addIndex) {\n                const neighbor = views[addIndex];\n                const location = neighbor ? neighbor.firstChild : this.location;\n                let view;\n                if (recycle && availableViews > 0) {\n                    if (removeIndex <= totalAvailableViews && removedViews.length > 0) {\n                        view = removedViews[removeIndex];\n                        removeIndex++;\n                    }\n                    else {\n                        view = leftoverViews[leftoverIndex];\n                        leftoverIndex++;\n                    }\n                    availableViews--;\n                }\n                else {\n                    view = template.create();\n                }\n                views.splice(addIndex, 0, view);\n                bindView(view, items, addIndex, childContext);\n                view.insertBefore(location);\n            }\n            if (removedViews[removeIndex]) {\n                leftoverViews.push(...removedViews.slice(removeIndex));\n            }\n        }\n        for (let i = leftoverIndex, ii = leftoverViews.length; i < ii; ++i) {\n            leftoverViews[i].dispose();\n        }\n        if (this.options.positioning) {\n            for (let i = 0, ii = views.length; i < ii; ++i) {\n                const currentContext = views[i].context;\n                currentContext.length = ii;\n                currentContext.index = i;\n            }\n        }\n    }\n    refreshAllViews(templateChanged = false) {\n        const items = this.items;\n        const childContext = this.childContext;\n        const template = this.template;\n        const location = this.location;\n        const bindView = this.bindView;\n        let itemsLength = items.length;\n        let views = this.views;\n        let viewsLength = views.length;\n        if (itemsLength === 0 || templateChanged || !this.options.recycle) {\n            // all views need to be removed\n            HTMLView.disposeContiguousBatch(views);\n            viewsLength = 0;\n        }\n        if (viewsLength === 0) {\n            // all views need to be created\n            this.views = views = new Array(itemsLength);\n            for (let i = 0; i < itemsLength; ++i) {\n                const view = template.create();\n                bindView(view, items, i, childContext);\n                views[i] = view;\n                view.insertBefore(location);\n            }\n        }\n        else {\n            // attempt to reuse existing views with new data\n            let i = 0;\n            for (; i < itemsLength; ++i) {\n                if (i < viewsLength) {\n                    const view = views[i];\n                    bindView(view, items, i, childContext);\n                }\n                else {\n                    const view = template.create();\n                    bindView(view, items, i, childContext);\n                    views.push(view);\n                    view.insertBefore(location);\n                }\n            }\n            const removed = views.splice(i, viewsLength - i);\n            for (i = 0, itemsLength = removed.length; i < itemsLength; ++i) {\n                removed[i].dispose();\n            }\n        }\n    }\n    unbindAllViews() {\n        const views = this.views;\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n            views[i].unbind();\n        }\n    }\n}\n/**\n * A directive that configures list rendering.\n * @public\n */\nexport class RepeatDirective extends HTMLDirective {\n    /**\n     * Creates an instance of RepeatDirective.\n     * @param itemsBinding - The binding that provides the array to render.\n     * @param templateBinding - The template binding used to obtain a template to render for each item in the array.\n     * @param options - Options used to turn on special repeat features.\n     */\n    constructor(itemsBinding, templateBinding, options) {\n        super();\n        this.itemsBinding = itemsBinding;\n        this.templateBinding = templateBinding;\n        this.options = options;\n        /**\n         * Creates a placeholder string based on the directive's index within the template.\n         * @param index - The index of the directive within the template.\n         */\n        this.createPlaceholder = DOM.createBlockPlaceholder;\n        enableArrayObservation();\n        this.isItemsBindingVolatile = Observable.isVolatileBinding(itemsBinding);\n        this.isTemplateBindingVolatile = Observable.isVolatileBinding(templateBinding);\n    }\n    /**\n     * Creates a behavior for the provided target node.\n     * @param target - The node instance to create the behavior for.\n     */\n    createBehavior(target) {\n        return new RepeatBehavior(target, this.itemsBinding, this.isItemsBindingVolatile, this.templateBinding, this.isTemplateBindingVolatile, this.options);\n    }\n}\n/**\n * A directive that enables list rendering.\n * @param itemsBinding - The array to render.\n * @param templateOrTemplateBinding - The template or a template binding used obtain a template\n * to render for each item in the array.\n * @param options - Options used to turn on special repeat features.\n * @public\n */\nexport function repeat(itemsBinding, templateOrTemplateBinding, options = defaultRepeatOptions) {\n    const templateBinding = typeof templateOrTemplateBinding === \"function\"\n        ? templateOrTemplateBinding\n        : () => templateOrTemplateBinding;\n    return new RepeatDirective(itemsBinding, templateBinding, Object.assign(Object.assign({}, defaultRepeatOptions), options));\n}\n","import { Observable } from \"../observation/observable.js\";\nimport { emptyArray } from \"../platform.js\";\n/**\n * Creates a function that can be used to filter a Node array, selecting only elements.\n * @param selector - An optional selector to restrict the filter to.\n * @public\n */\nexport function elements(selector) {\n    if (selector) {\n        return function (value, index, array) {\n            return value.nodeType === 1 && value.matches(selector);\n        };\n    }\n    return function (value, index, array) {\n        return value.nodeType === 1;\n    };\n}\n/**\n * A base class for node observation.\n * @internal\n */\nexport class NodeObservationBehavior {\n    /**\n     * Creates an instance of NodeObservationBehavior.\n     * @param target - The target to assign the nodes property on.\n     * @param options - The options to use in configuring node observation.\n     */\n    constructor(target, options) {\n        this.target = target;\n        this.options = options;\n        this.source = null;\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source) {\n        const name = this.options.property;\n        this.shouldUpdate = Observable.getAccessors(source).some((x) => x.name === name);\n        this.source = source;\n        this.updateTarget(this.computeNodes());\n        if (this.shouldUpdate) {\n            this.observe();\n        }\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    unbind() {\n        this.updateTarget(emptyArray);\n        this.source = null;\n        if (this.shouldUpdate) {\n            this.disconnect();\n        }\n    }\n    /** @internal */\n    handleEvent() {\n        this.updateTarget(this.computeNodes());\n    }\n    computeNodes() {\n        let nodes = this.getNodes();\n        if (this.options.filter !== void 0) {\n            nodes = nodes.filter(this.options.filter);\n        }\n        return nodes;\n    }\n    updateTarget(value) {\n        this.source[this.options.property] = value;\n    }\n}\n","import { AttachedBehaviorHTMLDirective } from \"./html-directive.js\";\nimport { NodeObservationBehavior } from \"./node-observation.js\";\n/**\n * The runtime behavior for slotted node observation.\n * @public\n */\nexport class SlottedBehavior extends NodeObservationBehavior {\n    /**\n     * Creates an instance of SlottedBehavior.\n     * @param target - The slot element target to observe.\n     * @param options - The options to use when observing the slot.\n     */\n    constructor(target, options) {\n        super(target, options);\n    }\n    /**\n     * Begins observation of the nodes.\n     */\n    observe() {\n        this.target.addEventListener(\"slotchange\", this);\n    }\n    /**\n     * Disconnects observation of the nodes.\n     */\n    disconnect() {\n        this.target.removeEventListener(\"slotchange\", this);\n    }\n    /**\n     * Retrieves the nodes that should be assigned to the target.\n     */\n    getNodes() {\n        return this.target.assignedNodes(this.options);\n    }\n}\n/**\n * A directive that observes the `assignedNodes()` of a slot and updates a property\n * whenever they change.\n * @param propertyOrOptions - The options used to configure slotted node observation.\n * @public\n */\nexport function slotted(propertyOrOptions) {\n    if (typeof propertyOrOptions === \"string\") {\n        propertyOrOptions = { property: propertyOrOptions };\n    }\n    return new AttachedBehaviorHTMLDirective(\"fast-slotted\", SlottedBehavior, propertyOrOptions);\n}\n","import { AttachedBehaviorHTMLDirective } from \"./html-directive.js\";\nimport { NodeObservationBehavior } from \"./node-observation.js\";\n/**\n * The runtime behavior for child node observation.\n * @public\n */\nexport class ChildrenBehavior extends NodeObservationBehavior {\n    /**\n     * Creates an instance of ChildrenBehavior.\n     * @param target - The element target to observe children on.\n     * @param options - The options to use when observing the element children.\n     */\n    constructor(target, options) {\n        super(target, options);\n        this.observer = null;\n        options.childList = true;\n    }\n    /**\n     * Begins observation of the nodes.\n     */\n    observe() {\n        if (this.observer === null) {\n            this.observer = new MutationObserver(this.handleEvent.bind(this));\n        }\n        this.observer.observe(this.target, this.options);\n    }\n    /**\n     * Disconnects observation of the nodes.\n     */\n    disconnect() {\n        this.observer.disconnect();\n    }\n    /**\n     * Retrieves the nodes that should be assigned to the target.\n     */\n    getNodes() {\n        if (\"subtree\" in this.options) {\n            return Array.from(this.target.querySelectorAll(this.options.selector));\n        }\n        return Array.from(this.target.childNodes);\n    }\n}\n/**\n * A directive that observes the `childNodes` of an element and updates a property\n * whenever they change.\n * @param propertyOrOptions - The options used to configure child node observation.\n * @public\n */\nexport function children(propertyOrOptions) {\n    if (typeof propertyOrOptions === \"string\") {\n        propertyOrOptions = {\n            property: propertyOrOptions,\n        };\n    }\n    return new AttachedBehaviorHTMLDirective(\"fast-children\", ChildrenBehavior, propertyOrOptions);\n}\n"],"names":["$global","globalThis","g","self","window","Function","_a","trustedTypes","createPolicy","n","r","propConfig","configurable","enumerable","writable","FAST","Reflect","defineProperty","Object","assign","value","create","getById","storage","id","initialize","found","emptyArray","freeze","createMetadataLocator","metadataLookup","WeakMap","target","metadata","get","currentTarget","getPrototypeOf","slice","set","updateQueue","tasks","pendingErrors","throwFirstError","length","shift","tryRunTask","task","call","error","push","setTimeout","process","index","scan","newLength","enqueue","callable","requestAnimationFrame","fastHTMLPolicy","createHTML","html","htmlPolicy","marker","Math","random","toString","substring","_interpolationStart","_interpolationEnd","DOM","supportsAdoptedStyleSheets","Array","isArray","document","adoptedStyleSheets","CSSStyleSheet","prototype","setHTMLPolicy","policy","Error","isMarker","node","nodeType","data","startsWith","extractDirectiveIndexFromMarker","parseInt","replace","createInterpolationPlaceholder","createCustomAttributePlaceholder","attributeName","this","createBlockPlaceholder","queueUpdate","processUpdates","nextUpdate","Promise","setAttribute","element","removeAttribute","setBooleanAttribute","removeChildNodes","parent","child","firstChild","removeChild","createTemplateWalker","fragment","createTreeWalker","SubscriberSet","constructor","source","initialSubscriber","sub1","sub2","spillover","has","subscriber","indexOf","subscribe","unsubscribe","splice","notify","args","handleChange","i","ii","PropertyChangeNotifier","subscribers","sourceSubscribers","propertyName","propertyToWatch","propertyToUnwatch","Observable","volatileRegex","notifierLookup","watcher","createArrayObserver","array","getNotifier","$fastController","getAccessors","DefaultObservableAccessor","name","field","callback","getValue","watch","setValue","newValue","oldValue","BindingObserverImplementation","binding","isVolatileBinding","super","needsRefresh","needsQueue","first","last","propertySource","notifier","next","observe","context","disconnect","previousWatcher","result","current","prev","prevValue","records","undefined","done","Symbol","iterator","setArrayObserverFactory","factory","track","trackVolatile","nameOrAccessor","test","observable","descriptor","apply","contextEvent","event","ExecutionContext","parentContext","isEven","isOdd","isFirst","isInMiddle","isLast","setEvent","defaultExecutionContext","seal","HTMLDirective","targetIndex","TargetedHTMLDirective","arguments","createPlaceholder","AttachedBehaviorHTMLDirective","behavior","options","createBehavior","normalBind","bindingObserver","isBindingVolatile","updateTarget","triggerBind","addEventListener","targetName","normalUnbind","contentUnbind","view","$fastView","isComposed","unbind","needsBindOnly","triggerUnbind","removeEventListener","updateAttributeTarget","updateBooleanAttributeTarget","updateContentTarget","textContent","$fastTemplate","remove","bind","insertBefore","updatePropertyTarget","updateClassTarget","classVersions","version","names","split","currentName","classList","add","HTMLBindingDirective","originalTargetName","cleanedTargetName","substr","s","c","targetAtContent","BindingBehavior","handleEvent","preventDefault","sharedContext","CompilationContext","addFactory","behaviorFactories","captureContentBinding","directive","reset","release","borrow","directives","shareable","createAggregateBinding","parts","partCount","finalParts","map","x","scope","output","interpolationEndLength","parseContent","valueParts","bindingParts","literal","directiveIndex","compileAttributes","includeBasicValues","attributes","attr","attrValue","parseResult","removeAttributeNode","compileContent","walker","lastNode","currentPart","currentNode","parentNode","createTextNode","nextSibling","nextNode","compileTemplate","template","content","adoptNode","hostBehaviorFactories","targetOffset","childNodes","createComment","viewBehaviorFactories","range","createRange","HTMLView","behaviors","lastChild","appendTo","appendChild","hasChildNodes","end","previousSibling","dispose","oldSource","disposeContiguousBatch","views","setStartBefore","setEndAfter","deleteContents","j","jj","ViewTemplate","behaviorCount","hasHostBehaviors","hostBindingTarget","createElement","innerHTML","fec","firstElementChild","tagName","cloneNode","viewFactories","behaviorIndex","factoryIndex","hostFactories","render","host","getElementById","lastAttributeNameRegex","strings","values","currentString","match","exec","ElementStyles","targets","WeakSet","addStylesTo","removeStylesFrom","delete","isAttachedTo","withBehaviors","concat","reduceStyles","styles","reduce","curr","reduceBehaviors","styleSheetCache","Map","AdoptedStyleSheetsStyles","StyleElementStyles","addAdoptedStyleSheets","sheets","removeAdoptedStyleSheets","filter","sheet","e","_styleSheets","styleSheets","replaceSync","styleClassId","styleClass","normalizeTarget","className","append","querySelectorAll","body","AttributeConfiguration","locate","booleanConverter","toView","fromView","nullableNumberConverter","number","isNaN","AttributeDefinition","Owner","attribute","toLowerCase","mode","converter","guards","Set","fieldName","callbackName","hasCallback","tryReflectToAttribute","onAttributeChangedCallback","latestValue","collect","attributeLists","list","config","property","configOrTarget","prop","decorator","$target","$prop","defaultShadowOptions","defaultElementOptions","fastRegistry","typeToDefinition","register","definition","type","getByType","key","FASTElementDefinition","nameOrConfig","observedAttributes","propertyLookup","attributeLookup","shadowOptions","elementOptions","isDefined","define","registry","customElements","proto","forType","shadowRoots","defaultEventOptions","bubbles","composed","cancelable","getShadowRoot","shadowRoot","Controller","boundObservables","needsInitialization","_template","_styles","_isConnected","attachShadow","accessors","isConnected","setIsConnected","renderTemplate","removeStyles","addStyles","getRootNode","HTMLStyleElement","sourceBehaviors","addBehaviors","removeBehaviors","targetBehaviors","behaviorsToBind","force","behaviorsToUnbind","count","onConnectedCallback","finishInitialization","onDisconnectedCallback","attrDef","emit","detail","dispatchEvent","CustomEvent","propertyNames","keys","resolveTemplate","resolveStyles","forCustomElement","controller","createFASTElement","BaseType","$emit","connectedCallback","disconnectedCallback","attributeChangedCallback","FASTElement","HTMLElement","from","nameOrDef","customElement","CSSDirective","createCSS","collectStyles","cssString","trim","css","elementStyles","CSSPartial","stylesheets","accumulated","el","cssPartial","newSplice","removed","addedCount","EDIT_LEAVE","EDIT_UPDATE","EDIT_ADD","EDIT_DELETE","calcSplices","currentStart","currentEnd","old","oldStart","oldEnd","prefixCount","suffixCount","minLength","min","searchLength","sharedPrefix","index1","index2","sharedSuffix","ops","distances","edits","northWest","west","north","reverse","spliceOperationsFromEditDistances","rowCount","columnCount","calcEditDistances","splices","oldIndex","$push","mergeSplice","inserted","insertionOffset","intersectCount","start1","end1","start2","end2","deleteCount","currentRemoved","prepend","offset","arrayObservationEnabled","adjustIndex","changeRecord","arrayLength","ArrayObserver","oldCollection","flush","addSplice","finalSplices","changeRecords","initialSplices","record","createInitialSplices","projectArraySplices","enableArrayObservation","collection","$fastPatch","pop","sort","unshift","notEmpty","methodCallResult","o","oldArray","RefBehavior","ref","isFunction","object","noTemplate","normalizeBinding","when","templateOrTemplateBinding","elseTemplateOrTemplateBinding","dataBinding","templateBinding","elseBinding","defaultRepeatOptions","positioning","recycle","bindWithoutPositioning","items","bindWithPositioning","childContext","RepeatBehavior","location","itemsBinding","isItemsBindingVolatile","isTemplateBindingVolatile","itemsObserver","originalContext","bindView","itemsBindingObserver","templateBindingObserver","observeItems","refreshAllViews","unbindAllViews","updateViews","oldObserver","newObserver","hasNewObserver","leftoverViews","leftoverIndex","availableViews","removeIndex","addIndex","removedViews","totalAvailableViews","neighbor","currentContext","templateChanged","itemsLength","viewsLength","RepeatDirective","repeat","selector","matches","NodeObservationBehavior","shouldUpdate","some","computeNodes","nodes","getNodes","SlottedBehavior","assignedNodes","slotted","propertyOrOptions","ChildrenBehavior","observer","childList","MutationObserver","children"],"sourceRoot":""}