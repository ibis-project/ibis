{"version":3,"file":"5261.2a76287.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/crelt/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@codemirror/search/dist/index.js"],"sourcesContent":["export default function crelt() {\n  var elt = arguments[0]\n  if (typeof elt == \"string\") elt = document.createElement(elt)\n  var i = 1, next = arguments[1]\n  if (next && typeof next == \"object\" && next.nodeType == null && !Array.isArray(next)) {\n    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {\n      var value = next[name]\n      if (typeof value == \"string\") elt.setAttribute(name, value)\n      else if (value != null) elt[name] = value\n    }\n    i++\n  }\n  for (; i < arguments.length; i++) add(elt, arguments[i])\n  return elt\n}\n\nfunction add(elt, child) {\n  if (typeof child == \"string\") {\n    elt.appendChild(document.createTextNode(child))\n  } else if (child == null) {\n  } else if (child.nodeType != null) {\n    elt.appendChild(child)\n  } else if (Array.isArray(child)) {\n    for (var i = 0; i < child.length; i++) add(elt, child[i])\n  } else {\n    throw new RangeError(\"Unsupported child node: \" + child)\n  }\n}\n","import { showPanel, EditorView, getPanel, Decoration, ViewPlugin, runScopeHandlers } from '@codemirror/view';\nimport { codePointAt, fromCodePoint, codePointSize, StateEffect, StateField, EditorSelection, Facet, combineConfig, CharCategory, RangeSetBuilder, Prec, EditorState, findClusterBreak } from '@codemirror/state';\nimport elt from 'crelt';\n\nconst basicNormalize = typeof String.prototype.normalize == \"function\"\n    ? x => x.normalize(\"NFKD\") : x => x;\n/**\nA search cursor provides an iterator over text matches in a\ndocument.\n*/\nclass SearchCursor {\n    /**\n    Create a text cursor. The query is the search string, `from` to\n    `to` provides the region to search.\n    \n    When `normalize` is given, it will be called, on both the query\n    string and the content it is matched against, before comparing.\n    You can, for example, create a case-insensitive search by\n    passing `s => s.toLowerCase()`.\n    \n    Text is always normalized with\n    [`.normalize(\"NFKD\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n    (when supported).\n    */\n    constructor(text, query, from = 0, to = text.length, normalize, test) {\n        this.test = test;\n        /**\n        The current match (only holds a meaningful value after\n        [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when\n        `done` is false).\n        */\n        this.value = { from: 0, to: 0 };\n        /**\n        Whether the end of the iterated region has been reached.\n        */\n        this.done = false;\n        this.matches = [];\n        this.buffer = \"\";\n        this.bufferPos = 0;\n        this.iter = text.iterRange(from, to);\n        this.bufferStart = from;\n        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;\n        this.query = this.normalize(query);\n    }\n    peek() {\n        if (this.bufferPos == this.buffer.length) {\n            this.bufferStart += this.buffer.length;\n            this.iter.next();\n            if (this.iter.done)\n                return -1;\n            this.bufferPos = 0;\n            this.buffer = this.iter.value;\n        }\n        return codePointAt(this.buffer, this.bufferPos);\n    }\n    /**\n    Look for the next match. Updates the iterator's\n    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and\n    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called\n    at least once before using the cursor.\n    */\n    next() {\n        while (this.matches.length)\n            this.matches.pop();\n        return this.nextOverlapping();\n    }\n    /**\n    The `next` method will ignore matches that partially overlap a\n    previous match. This method behaves like `next`, but includes\n    such matches.\n    */\n    nextOverlapping() {\n        for (;;) {\n            let next = this.peek();\n            if (next < 0) {\n                this.done = true;\n                return this;\n            }\n            let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;\n            this.bufferPos += codePointSize(next);\n            let norm = this.normalize(str);\n            for (let i = 0, pos = start;; i++) {\n                let code = norm.charCodeAt(i);\n                let match = this.match(code, pos);\n                if (match) {\n                    this.value = match;\n                    return this;\n                }\n                if (i == norm.length - 1)\n                    break;\n                if (pos == start && i < str.length && str.charCodeAt(i) == code)\n                    pos++;\n            }\n        }\n    }\n    match(code, pos) {\n        let match = null;\n        for (let i = 0; i < this.matches.length; i += 2) {\n            let index = this.matches[i], keep = false;\n            if (this.query.charCodeAt(index) == code) {\n                if (index == this.query.length - 1) {\n                    match = { from: this.matches[i + 1], to: pos + 1 };\n                }\n                else {\n                    this.matches[i]++;\n                    keep = true;\n                }\n            }\n            if (!keep) {\n                this.matches.splice(i, 2);\n                i -= 2;\n            }\n        }\n        if (this.query.charCodeAt(0) == code) {\n            if (this.query.length == 1)\n                match = { from: pos, to: pos + 1 };\n            else\n                this.matches.push(1, pos);\n        }\n        if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferPos))\n            match = null;\n        return match;\n    }\n}\nif (typeof Symbol != \"undefined\")\n    SearchCursor.prototype[Symbol.iterator] = function () { return this; };\n\nconst empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec(\"\") };\nconst baseFlags = \"gm\" + (/x/.unicode == null ? \"\" : \"u\");\n/**\nThis class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)\nbut searches for a regular expression pattern instead of a plain\nstring.\n*/\nclass RegExpCursor {\n    /**\n    Create a cursor that will search the given range in the given\n    document. `query` should be the raw pattern (as you'd pass it to\n    `new RegExp`).\n    */\n    constructor(text, query, options, from = 0, to = text.length) {\n        this.text = text;\n        this.to = to;\n        this.curLine = \"\";\n        /**\n        Set to `true` when the cursor has reached the end of the search\n        range.\n        */\n        this.done = false;\n        /**\n        Will contain an object with the extent of the match and the\n        match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)\n        sucessfully finds a match.\n        */\n        this.value = empty;\n        if (/\\\\[sWDnr]|\\n|\\r|\\[\\^/.test(query))\n            return new MultilineRegExpCursor(text, query, options, from, to);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.iter = text.iter();\n        let startLine = text.lineAt(from);\n        this.curLineStart = startLine.from;\n        this.matchPos = toCharEnd(text, from);\n        this.getLine(this.curLineStart);\n    }\n    getLine(skip) {\n        this.iter.next(skip);\n        if (this.iter.lineBreak) {\n            this.curLine = \"\";\n        }\n        else {\n            this.curLine = this.iter.value;\n            if (this.curLineStart + this.curLine.length > this.to)\n                this.curLine = this.curLine.slice(0, this.to - this.curLineStart);\n            this.iter.next();\n        }\n    }\n    nextLine() {\n        this.curLineStart = this.curLineStart + this.curLine.length + 1;\n        if (this.curLineStart > this.to)\n            this.curLine = \"\";\n        else\n            this.getLine(0);\n    }\n    /**\n    Move to the next match, if there is one.\n    */\n    next() {\n        for (let off = this.matchPos - this.curLineStart;;) {\n            this.re.lastIndex = off;\n            let match = this.matchPos <= this.to && this.re.exec(this.curLine);\n            if (match) {\n                let from = this.curLineStart + match.index, to = from + match[0].length;\n                this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                if (from == this.curLineStart + this.curLine.length)\n                    this.nextLine();\n                if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    return this;\n                }\n                off = this.matchPos - this.curLineStart;\n            }\n            else if (this.curLineStart + this.curLine.length < this.to) {\n                this.nextLine();\n                off = 0;\n            }\n            else {\n                this.done = true;\n                return this;\n            }\n        }\n    }\n}\nconst flattened = /*@__PURE__*/new WeakMap();\n// Reusable (partially) flattened document strings\nclass FlattenedDoc {\n    constructor(from, text) {\n        this.from = from;\n        this.text = text;\n    }\n    get to() { return this.from + this.text.length; }\n    static get(doc, from, to) {\n        let cached = flattened.get(doc);\n        if (!cached || cached.from >= to || cached.to <= from) {\n            let flat = new FlattenedDoc(from, doc.sliceString(from, to));\n            flattened.set(doc, flat);\n            return flat;\n        }\n        if (cached.from == from && cached.to == to)\n            return cached;\n        let { text, from: cachedFrom } = cached;\n        if (cachedFrom > from) {\n            text = doc.sliceString(from, cachedFrom) + text;\n            cachedFrom = from;\n        }\n        if (cached.to < to)\n            text += doc.sliceString(cached.to, to);\n        flattened.set(doc, new FlattenedDoc(cachedFrom, text));\n        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));\n    }\n}\nclass MultilineRegExpCursor {\n    constructor(text, query, options, from, to) {\n        this.text = text;\n        this.to = to;\n        this.done = false;\n        this.value = empty;\n        this.matchPos = toCharEnd(text, from);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Base */));\n    }\n    chunkEnd(pos) {\n        return pos >= this.to ? this.to : this.text.lineAt(pos).to;\n    }\n    next() {\n        for (;;) {\n            let off = this.re.lastIndex = this.matchPos - this.flat.from;\n            let match = this.re.exec(this.flat.text);\n            // Skip empty matches directly after the last match\n            if (match && !match[0] && match.index == off) {\n                this.re.lastIndex = off + 1;\n                match = this.re.exec(this.flat.text);\n            }\n            if (match) {\n                let from = this.flat.from + match.index, to = from + match[0].length;\n                // If a match goes almost to the end of a noncomplete chunk, try\n                // again, since it'll likely be able to match more\n                if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&\n                    (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                    return this;\n                }\n            }\n            if (this.flat.to == this.to) {\n                this.done = true;\n                return this;\n            }\n            // Grow the flattened doc\n            this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));\n        }\n    }\n}\nif (typeof Symbol != \"undefined\") {\n    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =\n        function () { return this; };\n}\nfunction validRegExp(source) {\n    try {\n        new RegExp(source, baseFlags);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction toCharEnd(text, pos) {\n    if (pos >= text.length)\n        return pos;\n    let line = text.lineAt(pos), next;\n    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)\n        pos++;\n    return pos;\n}\n\nfunction createLineDialog(view) {\n    let input = elt(\"input\", { class: \"cm-textfield\", name: \"line\" });\n    let dom = elt(\"form\", {\n        class: \"cm-gotoLine\",\n        onkeydown: (event) => {\n            if (event.keyCode == 27) { // Escape\n                event.preventDefault();\n                view.dispatch({ effects: dialogEffect.of(false) });\n                view.focus();\n            }\n            else if (event.keyCode == 13) { // Enter\n                event.preventDefault();\n                go();\n            }\n        },\n        onsubmit: (event) => {\n            event.preventDefault();\n            go();\n        }\n    }, elt(\"label\", view.state.phrase(\"Go to line\"), \": \", input), \" \", elt(\"button\", { class: \"cm-button\", type: \"submit\" }, view.state.phrase(\"go\")));\n    function go() {\n        let match = /^([+-])?(\\d+)?(:\\d+)?(%)?$/.exec(input.value);\n        if (!match)\n            return;\n        let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);\n        let [, sign, ln, cl, percent] = match;\n        let col = cl ? +cl.slice(1) : 0;\n        let line = ln ? +ln : startLine.number;\n        if (ln && percent) {\n            let pc = line / 100;\n            if (sign)\n                pc = pc * (sign == \"-\" ? -1 : 1) + (startLine.number / state.doc.lines);\n            line = Math.round(state.doc.lines * pc);\n        }\n        else if (ln && sign) {\n            line = line * (sign == \"-\" ? -1 : 1) + startLine.number;\n        }\n        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));\n        view.dispatch({\n            effects: dialogEffect.of(false),\n            selection: EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),\n            scrollIntoView: true\n        });\n        view.focus();\n    }\n    return { dom };\n}\nconst dialogEffect = /*@__PURE__*/StateEffect.define();\nconst dialogField = /*@__PURE__*/StateField.define({\n    create() { return true; },\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(dialogEffect))\n                value = e.value;\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val ? createLineDialog : null)\n});\n/**\nCommand that shows a dialog asking the user for a line number, and\nwhen a valid position is provided, moves the cursor to that line.\n\nSupports line numbers, relative line offsets prefixed with `+` or\n`-`, document percentages suffixed with `%`, and an optional\ncolumn position by adding `:` and a second number after the line\nnumber.\n*/\nconst gotoLine = view => {\n    let panel = getPanel(view, createLineDialog);\n    if (!panel) {\n        let effects = [dialogEffect.of(true)];\n        if (view.state.field(dialogField, false) == null)\n            effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));\n        view.dispatch({ effects });\n        panel = getPanel(view, createLineDialog);\n    }\n    if (panel)\n        panel.dom.querySelector(\"input\").focus();\n    return true;\n};\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-gotoLine\": {\n        padding: \"2px 6px 4px\",\n        \"& label\": { fontSize: \"80%\" }\n    }\n});\n\nconst defaultHighlightOptions = {\n    highlightWordAroundCursor: false,\n    minSelectionLength: 1,\n    maxMatches: 100,\n    wholeWords: false\n};\nconst highlightConfig = /*@__PURE__*/Facet.define({\n    combine(options) {\n        return combineConfig(options, defaultHighlightOptions, {\n            highlightWordAroundCursor: (a, b) => a || b,\n            minSelectionLength: Math.min,\n            maxMatches: Math.min\n        });\n    }\n});\n/**\nThis extension highlights text that matches the selection. It uses\nthe `\"cm-selectionMatch\"` class for the highlighting. When\n`highlightWordAroundCursor` is enabled, the word at the cursor\nitself will be highlighted with `\"cm-selectionMatch-main\"`.\n*/\nfunction highlightSelectionMatches(options) {\n    let ext = [defaultTheme, matchHighlighter];\n    if (options)\n        ext.push(highlightConfig.of(options));\n    return ext;\n}\nconst matchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch\" });\nconst mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch cm-selectionMatch-main\" });\n// Whether the characters directly outside the given positions are non-word characters\nfunction insideWordBoundaries(check, state, from, to) {\n    return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&\n        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);\n}\n// Whether the characters directly at the given positions are word characters\nfunction insideWord(check, state, from, to) {\n    return check(state.sliceDoc(from, from + 1)) == CharCategory.Word\n        && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;\n}\nconst matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.decorations = this.getDeco(view);\n    }\n    update(update) {\n        if (update.selectionSet || update.docChanged || update.viewportChanged)\n            this.decorations = this.getDeco(update.view);\n    }\n    getDeco(view) {\n        let conf = view.state.facet(highlightConfig);\n        let { state } = view, sel = state.selection;\n        if (sel.ranges.length > 1)\n            return Decoration.none;\n        let range = sel.main, query, check = null;\n        if (range.empty) {\n            if (!conf.highlightWordAroundCursor)\n                return Decoration.none;\n            let word = state.wordAt(range.head);\n            if (!word)\n                return Decoration.none;\n            check = state.charCategorizer(range.head);\n            query = state.sliceDoc(word.from, word.to);\n        }\n        else {\n            let len = range.to - range.from;\n            if (len < conf.minSelectionLength || len > 200)\n                return Decoration.none;\n            if (conf.wholeWords) {\n                query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?\n                check = state.charCategorizer(range.head);\n                if (!(insideWordBoundaries(check, state, range.from, range.to)\n                    && insideWord(check, state, range.from, range.to)))\n                    return Decoration.none;\n            }\n            else {\n                query = state.sliceDoc(range.from, range.to).trim();\n                if (!query)\n                    return Decoration.none;\n            }\n        }\n        let deco = [];\n        for (let part of view.visibleRanges) {\n            let cursor = new SearchCursor(state.doc, query, part.from, part.to);\n            while (!cursor.next().done) {\n                let { from, to } = cursor.value;\n                if (!check || insideWordBoundaries(check, state, from, to)) {\n                    if (range.empty && from <= range.from && to >= range.to)\n                        deco.push(mainMatchDeco.range(from, to));\n                    else if (from >= range.to || to <= range.from)\n                        deco.push(matchDeco.range(from, to));\n                    if (deco.length > conf.maxMatches)\n                        return Decoration.none;\n                }\n            }\n        }\n        return Decoration.set(deco);\n    }\n}, {\n    decorations: v => v.decorations\n});\nconst defaultTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-selectionMatch\": { backgroundColor: \"#99ff7780\" },\n    \".cm-searchMatch .cm-selectionMatch\": { backgroundColor: \"transparent\" }\n});\n// Select the words around the cursors.\nconst selectWord = ({ state, dispatch }) => {\n    let { selection } = state;\n    let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);\n    if (newSel.eq(selection))\n        return false;\n    dispatch(state.update({ selection: newSel }));\n    return true;\n};\n// Find next occurrence of query relative to last cursor. Wrap around\n// the document if there are no more matches.\nfunction findNextOccurrence(state, query) {\n    let { main, ranges } = state.selection;\n    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;\n    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {\n        cursor.next();\n        if (cursor.done) {\n            if (cycled)\n                return null;\n            cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));\n            cycled = true;\n        }\n        else {\n            if (cycled && ranges.some(r => r.from == cursor.value.from))\n                continue;\n            if (fullWord) {\n                let word = state.wordAt(cursor.value.from);\n                if (!word || word.from != cursor.value.from || word.to != cursor.value.to)\n                    continue;\n            }\n            return cursor.value;\n        }\n    }\n}\n/**\nSelect next occurrence of the current selection. Expand selection\nto the surrounding word when the selection is empty.\n*/\nconst selectNextOccurrence = ({ state, dispatch }) => {\n    let { ranges } = state.selection;\n    if (ranges.some(sel => sel.from === sel.to))\n        return selectWord({ state, dispatch });\n    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);\n    if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))\n        return false;\n    let range = findNextOccurrence(state, searchedText);\n    if (!range)\n        return false;\n    dispatch(state.update({\n        selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),\n        effects: EditorView.scrollIntoView(range.to)\n    }));\n    return true;\n};\n\nconst searchConfigFacet = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            top: false,\n            caseSensitive: false,\n            literal: false,\n            regexp: false,\n            wholeWord: false,\n            createPanel: view => new SearchPanel(view),\n            scrollToMatch: range => EditorView.scrollIntoView(range)\n        });\n    }\n});\n/**\nAdd search state to the editor configuration, and optionally\nconfigure the search extension.\n([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically\nenable this if it isn't already on).\n*/\nfunction search(config) {\n    return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;\n}\n/**\nA search query. Part of the editor's search state.\n*/\nclass SearchQuery {\n    /**\n    Create a query object.\n    */\n    constructor(config) {\n        this.search = config.search;\n        this.caseSensitive = !!config.caseSensitive;\n        this.literal = !!config.literal;\n        this.regexp = !!config.regexp;\n        this.replace = config.replace || \"\";\n        this.valid = !!this.search && (!this.regexp || validRegExp(this.search));\n        this.unquoted = this.unquote(this.search);\n        this.wholeWord = !!config.wholeWord;\n    }\n    /**\n    @internal\n    */\n    unquote(text) {\n        return this.literal ? text :\n            text.replace(/\\\\([nrt\\\\])/g, (_, ch) => ch == \"n\" ? \"\\n\" : ch == \"r\" ? \"\\r\" : ch == \"t\" ? \"\\t\" : \"\\\\\");\n    }\n    /**\n    Compare this query to another query.\n    */\n    eq(other) {\n        return this.search == other.search && this.replace == other.replace &&\n            this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&\n            this.wholeWord == other.wholeWord;\n    }\n    /**\n    @internal\n    */\n    create() {\n        return this.regexp ? new RegExpQuery(this) : new StringQuery(this);\n    }\n    /**\n    Get a search cursor for this query, searching through the given\n    range in the given state.\n    */\n    getCursor(state, from = 0, to) {\n        let st = state.doc ? state : EditorState.create({ doc: state });\n        if (to == null)\n            to = st.doc.length;\n        return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);\n    }\n}\nclass QueryType {\n    constructor(spec) {\n        this.spec = spec;\n    }\n}\nfunction stringCursor(spec, state, from, to) {\n    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);\n}\nfunction stringWordTest(doc, categorizer) {\n    return (from, to, buf, bufPos) => {\n        if (bufPos > from || bufPos + buf.length < to) {\n            bufPos = Math.max(0, from - 2);\n            buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));\n        }\n        return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word ||\n            categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) &&\n            (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word ||\n                categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);\n    };\n}\nclass StringQuery extends QueryType {\n    constructor(spec) {\n        super(spec);\n    }\n    nextMatch(state, curFrom, curTo) {\n        let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();\n        if (cursor.done)\n            cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();\n        return cursor.done ? null : cursor.value;\n    }\n    // Searching in reverse is, rather than implementing an inverted search\n    // cursor, done by scanning chunk after chunk forward.\n    prevMatchInRange(state, from, to) {\n        for (let pos = to;;) {\n            let start = Math.max(from, pos - 10000 /* ChunkSize */ - this.spec.unquoted.length);\n            let cursor = stringCursor(this.spec, state, start, pos), range = null;\n            while (!cursor.nextOverlapping().done)\n                range = cursor.value;\n            if (range)\n                return range;\n            if (start == from)\n                return null;\n            pos -= 10000 /* ChunkSize */;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(_result) { return this.spec.unquote(this.spec.replace); }\n    matchAll(state, limit) {\n        let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\nfunction regexpCursor(spec, state, from, to) {\n    return new RegExpCursor(state.doc, spec.search, {\n        ignoreCase: !spec.caseSensitive,\n        test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined\n    }, from, to);\n}\nfunction charBefore(str, index) {\n    return str.slice(findClusterBreak(str, index, false), index);\n}\nfunction charAfter(str, index) {\n    return str.slice(index, findClusterBreak(str, index));\n}\nfunction regexpWordTest(categorizer) {\n    return (_from, _to, match) => !match[0].length ||\n        (categorizer(charBefore(match.input, match.index)) != CharCategory.Word ||\n            categorizer(charAfter(match.input, match.index)) != CharCategory.Word) &&\n            (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word ||\n                categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);\n}\nclass RegExpQuery extends QueryType {\n    nextMatch(state, curFrom, curTo) {\n        let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();\n        if (cursor.done)\n            cursor = regexpCursor(this.spec, state, 0, curFrom).next();\n        return cursor.done ? null : cursor.value;\n    }\n    prevMatchInRange(state, from, to) {\n        for (let size = 1;; size++) {\n            let start = Math.max(from, to - size * 10000 /* ChunkSize */);\n            let cursor = regexpCursor(this.spec, state, start, to), range = null;\n            while (!cursor.next().done)\n                range = cursor.value;\n            if (range && (start == from || range.from > start + 10))\n                return range;\n            if (start == from)\n                return null;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(result) {\n        return this.spec.unquote(this.spec.replace.replace(/\\$([$&\\d+])/g, (m, i) => i == \"$\" ? \"$\"\n            : i == \"&\" ? result.match[0]\n                : i != \"0\" && +i < result.match.length ? result.match[i]\n                    : m));\n    }\n    matchAll(state, limit) {\n        let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* HighlightMargin */), Math.min(to + 250 /* HighlightMargin */, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\n/**\nA state effect that updates the current search query. Note that\nthis only has an effect if the search state has been initialized\n(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or\nby running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least\nonce).\n*/\nconst setSearchQuery = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst searchState = /*@__PURE__*/StateField.define({\n    create(state) {\n        return new SearchState(defaultQuery(state).create(), null);\n    },\n    update(value, tr) {\n        for (let effect of tr.effects) {\n            if (effect.is(setSearchQuery))\n                value = new SearchState(effect.value.create(), value.panel);\n            else if (effect.is(togglePanel))\n                value = new SearchState(value.query, effect.value ? createSearchPanel : null);\n        }\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val.panel)\n});\n/**\nGet the current search query from an editor state.\n*/\nfunction getSearchQuery(state) {\n    let curState = state.field(searchState, false);\n    return curState ? curState.query.spec : defaultQuery(state);\n}\n/**\nQuery whether the search panel is open in the given editor state.\n*/\nfunction searchPanelOpen(state) {\n    var _a;\n    return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;\n}\nclass SearchState {\n    constructor(query, panel) {\n        this.query = query;\n        this.panel = panel;\n    }\n}\nconst matchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch\" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch cm-searchMatch-selected\" });\nconst searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.decorations = this.highlight(view.state.field(searchState));\n    }\n    update(update) {\n        let state = update.state.field(searchState);\n        if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)\n            this.decorations = this.highlight(state);\n    }\n    highlight({ query, panel }) {\n        if (!panel || !query.spec.valid)\n            return Decoration.none;\n        let { view } = this;\n        let builder = new RangeSetBuilder();\n        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\n            let { from, to } = ranges[i];\n            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* HighlightMargin */)\n                to = ranges[++i].to;\n            query.highlight(view.state, from, to, (from, to) => {\n                let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);\n                builder.add(from, to, selected ? selectedMatchMark : matchMark);\n            });\n        }\n        return builder.finish();\n    }\n}, {\n    decorations: v => v.decorations\n});\nfunction searchCommand(f) {\n    return view => {\n        let state = view.state.field(searchState, false);\n        return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);\n    };\n}\n/**\nOpen the search panel if it isn't already open, and move the\nselection to the first match after the current main selection.\nWill wrap around to the start of the document when it reaches the\nend.\n*/\nconst findNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { to } = view.state.selection.main;\n    let next = query.nextMatch(view.state, to, to);\n    if (!next)\n        return false;\n    let selection = EditorSelection.single(next.from, next.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nMove the selection to the previous instance of the search query,\nbefore the current main selection. Will wrap past the start\nof the document to start searching at the end again.\n*/\nconst findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from } = state.selection.main;\n    let prev = query.prevMatch(state, from, from);\n    if (!prev)\n        return false;\n    let selection = EditorSelection.single(prev.from, prev.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nSelect all instances of the search query.\n*/\nconst selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {\n    let ranges = query.matchAll(view.state, 1000);\n    if (!ranges || !ranges.length)\n        return false;\n    view.dispatch({\n        selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),\n        userEvent: \"select.search.matches\"\n    });\n    return true;\n});\n/**\nSelect all instances of the currently selected text.\n*/\nconst selectSelectionMatches = ({ state, dispatch }) => {\n    let sel = state.selection;\n    if (sel.ranges.length > 1 || sel.main.empty)\n        return false;\n    let { from, to } = sel.main;\n    let ranges = [], main = 0;\n    for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {\n        if (ranges.length > 1000)\n            return false;\n        if (cur.value.from == from)\n            main = ranges.length;\n        ranges.push(EditorSelection.range(cur.value.from, cur.value.to));\n    }\n    dispatch(state.update({\n        selection: EditorSelection.create(ranges, main),\n        userEvent: \"select.search.matches\"\n    }));\n    return true;\n};\n/**\nReplace the current match of the search query.\n*/\nconst replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from, to } = state.selection.main;\n    if (state.readOnly)\n        return false;\n    let next = query.nextMatch(state, from, from);\n    if (!next)\n        return false;\n    let changes = [], selection, replacement;\n    let effects = [];\n    if (next.from == from && next.to == to) {\n        replacement = state.toText(query.getReplacement(next));\n        changes.push({ from: next.from, to: next.to, insert: replacement });\n        next = query.nextMatch(state, next.from, next.to);\n        effects.push(EditorView.announce.of(state.phrase(\"replaced match on line $\", state.doc.lineAt(from).number) + \".\"));\n    }\n    if (next) {\n        let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;\n        selection = EditorSelection.single(next.from - off, next.to - off);\n        effects.push(announceMatch(view, next));\n        effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));\n    }\n    view.dispatch({\n        changes, selection, effects,\n        userEvent: \"input.replace\"\n    });\n    return true;\n});\n/**\nReplace all instances of the search query with the given\nreplacement.\n*/\nconst replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {\n    if (view.state.readOnly)\n        return false;\n    let changes = query.matchAll(view.state, 1e9).map(match => {\n        let { from, to } = match;\n        return { from, to, insert: query.getReplacement(match) };\n    });\n    if (!changes.length)\n        return false;\n    let announceText = view.state.phrase(\"replaced $ matches\", changes.length) + \".\";\n    view.dispatch({\n        changes,\n        effects: EditorView.announce.of(announceText),\n        userEvent: \"input.replace.all\"\n    });\n    return true;\n});\nfunction createSearchPanel(view) {\n    return view.state.facet(searchConfigFacet).createPanel(view);\n}\nfunction defaultQuery(state, fallback) {\n    var _a, _b, _c, _d, _e;\n    let sel = state.selection.main;\n    let selText = sel.empty || sel.to > sel.from + 100 ? \"\" : state.sliceDoc(sel.from, sel.to);\n    if (fallback && !selText)\n        return fallback;\n    let config = state.facet(searchConfigFacet);\n    return new SearchQuery({\n        search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\\n/g, \"\\\\n\"),\n        caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,\n        literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,\n        regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,\n        wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord\n    });\n}\nfunction getSearchInput(view) {\n    let panel = getPanel(view, createSearchPanel);\n    return panel && panel.dom.querySelector(\"[main-field]\");\n}\nfunction selectSearchInput(view) {\n    let input = getSearchInput(view);\n    if (input && input == view.root.activeElement)\n        input.select();\n}\n/**\nMake sure the search panel is open and focused.\n*/\nconst openSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (state && state.panel) {\n        let searchInput = getSearchInput(view);\n        if (searchInput && searchInput != view.root.activeElement) {\n            let query = defaultQuery(view.state, state.query.spec);\n            if (query.valid)\n                view.dispatch({ effects: setSearchQuery.of(query) });\n            searchInput.focus();\n            searchInput.select();\n        }\n    }\n    else {\n        view.dispatch({ effects: [\n                togglePanel.of(true),\n                state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)\n            ] });\n    }\n    return true;\n};\n/**\nClose the search panel.\n*/\nconst closeSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (!state || !state.panel)\n        return false;\n    let panel = getPanel(view, createSearchPanel);\n    if (panel && panel.dom.contains(view.root.activeElement))\n        view.focus();\n    view.dispatch({ effects: togglePanel.of(false) });\n    return true;\n};\n/**\nDefault search-related key bindings.\n\n - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)\n - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)\n - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)\n - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)\n - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)\n*/\nconst searchKeymap = [\n    { key: \"Mod-f\", run: openSearchPanel, scope: \"editor search-panel\" },\n    { key: \"F3\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Mod-g\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Escape\", run: closeSearchPanel, scope: \"editor search-panel\" },\n    { key: \"Mod-Shift-l\", run: selectSelectionMatches },\n    { key: \"Alt-g\", run: gotoLine },\n    { key: \"Mod-d\", run: selectNextOccurrence, preventDefault: true },\n];\nclass SearchPanel {\n    constructor(view) {\n        this.view = view;\n        let query = this.query = view.state.field(searchState).query.spec;\n        this.commit = this.commit.bind(this);\n        this.searchField = elt(\"input\", {\n            value: query.search,\n            placeholder: phrase(view, \"Find\"),\n            \"aria-label\": phrase(view, \"Find\"),\n            class: \"cm-textfield\",\n            name: \"search\",\n            form: \"\",\n            \"main-field\": \"true\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.replaceField = elt(\"input\", {\n            value: query.replace,\n            placeholder: phrase(view, \"Replace\"),\n            \"aria-label\": phrase(view, \"Replace\"),\n            class: \"cm-textfield\",\n            name: \"replace\",\n            form: \"\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.caseField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"case\",\n            form: \"\",\n            checked: query.caseSensitive,\n            onchange: this.commit\n        });\n        this.reField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"re\",\n            form: \"\",\n            checked: query.regexp,\n            onchange: this.commit\n        });\n        this.wordField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"word\",\n            form: \"\",\n            checked: query.wholeWord,\n            onchange: this.commit\n        });\n        function button(name, onclick, content) {\n            return elt(\"button\", { class: \"cm-button\", name, onclick, type: \"button\" }, content);\n        }\n        this.dom = elt(\"div\", { onkeydown: (e) => this.keydown(e), class: \"cm-search\" }, [\n            this.searchField,\n            button(\"next\", () => findNext(view), [phrase(view, \"next\")]),\n            button(\"prev\", () => findPrevious(view), [phrase(view, \"previous\")]),\n            button(\"select\", () => selectMatches(view), [phrase(view, \"all\")]),\n            elt(\"label\", null, [this.caseField, phrase(view, \"match case\")]),\n            elt(\"label\", null, [this.reField, phrase(view, \"regexp\")]),\n            elt(\"label\", null, [this.wordField, phrase(view, \"by word\")]),\n            ...view.state.readOnly ? [] : [\n                elt(\"br\"),\n                this.replaceField,\n                button(\"replace\", () => replaceNext(view), [phrase(view, \"replace\")]),\n                button(\"replaceAll\", () => replaceAll(view), [phrase(view, \"replace all\")])\n            ],\n            elt(\"button\", {\n                name: \"close\",\n                onclick: () => closeSearchPanel(view),\n                \"aria-label\": phrase(view, \"close\"),\n                type: \"button\"\n            }, [\"×\"])\n        ]);\n    }\n    commit() {\n        let query = new SearchQuery({\n            search: this.searchField.value,\n            caseSensitive: this.caseField.checked,\n            regexp: this.reField.checked,\n            wholeWord: this.wordField.checked,\n            replace: this.replaceField.value,\n        });\n        if (!query.eq(this.query)) {\n            this.query = query;\n            this.view.dispatch({ effects: setSearchQuery.of(query) });\n        }\n    }\n    keydown(e) {\n        if (runScopeHandlers(this.view, e, \"search-panel\")) {\n            e.preventDefault();\n        }\n        else if (e.keyCode == 13 && e.target == this.searchField) {\n            e.preventDefault();\n            (e.shiftKey ? findPrevious : findNext)(this.view);\n        }\n        else if (e.keyCode == 13 && e.target == this.replaceField) {\n            e.preventDefault();\n            replaceNext(this.view);\n        }\n    }\n    update(update) {\n        for (let tr of update.transactions)\n            for (let effect of tr.effects) {\n                if (effect.is(setSearchQuery) && !effect.value.eq(this.query))\n                    this.setQuery(effect.value);\n            }\n    }\n    setQuery(query) {\n        this.query = query;\n        this.searchField.value = query.search;\n        this.replaceField.value = query.replace;\n        this.caseField.checked = query.caseSensitive;\n        this.reField.checked = query.regexp;\n        this.wordField.checked = query.wholeWord;\n    }\n    mount() {\n        this.searchField.select();\n    }\n    get pos() { return 80; }\n    get top() { return this.view.state.facet(searchConfigFacet).top; }\n}\nfunction phrase(view, phrase) { return view.state.phrase(phrase); }\nconst AnnounceMargin = 30;\nconst Break = /[\\s\\.,:;?!]/;\nfunction announceMatch(view, { from, to }) {\n    let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;\n    let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);\n    let text = view.state.sliceDoc(start, end);\n    if (start != line.from) {\n        for (let i = 0; i < AnnounceMargin; i++)\n            if (!Break.test(text[i + 1]) && Break.test(text[i])) {\n                text = text.slice(i);\n                break;\n            }\n    }\n    if (end != lineEnd) {\n        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)\n            if (!Break.test(text[i - 1]) && Break.test(text[i])) {\n                text = text.slice(0, i);\n                break;\n            }\n    }\n    return EditorView.announce.of(`${view.state.phrase(\"current match\")}. ${text} ${view.state.phrase(\"on line\")} ${line.number}.`);\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-search\": {\n        padding: \"2px 6px 4px\",\n        position: \"relative\",\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"4px\",\n            backgroundColor: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        },\n        \"& input, & button, & label\": {\n            margin: \".2em .6em .2em 0\"\n        },\n        \"& input[type=checkbox]\": {\n            marginRight: \".2em\"\n        },\n        \"& label\": {\n            fontSize: \"80%\",\n            whiteSpace: \"pre\"\n        }\n    },\n    \"&light .cm-searchMatch\": { backgroundColor: \"#ffff0054\" },\n    \"&dark .cm-searchMatch\": { backgroundColor: \"#00ffff8a\" },\n    \"&light .cm-searchMatch-selected\": { backgroundColor: \"#ff6a0054\" },\n    \"&dark .cm-searchMatch-selected\": { backgroundColor: \"#ff00ff8a\" }\n});\nconst searchExtensions = [\n    searchState,\n    /*@__PURE__*/Prec.lowest(searchHighlighter),\n    baseTheme\n];\n\nexport { RegExpCursor, SearchCursor, SearchQuery, closeSearchPanel, findNext, findPrevious, getSearchQuery, gotoLine, highlightSelectionMatches, openSearchPanel, replaceAll, replaceNext, search, searchKeymap, searchPanelOpen, selectMatches, selectNextOccurrence, selectSelectionMatches, setSearchQuery };\n"],"names":["crelt","elt","arguments","document","createElement","i","next","nodeType","Array","isArray","name","Object","prototype","hasOwnProperty","call","value","setAttribute","length","add","child","appendChild","createTextNode","RangeError","basicNormalize","String","normalize","x","SearchCursor","constructor","text","query","from","to","test","this","done","matches","buffer","bufferPos","iter","iterRange","bufferStart","peek","codePointAt","pop","nextOverlapping","str","fromCodePoint","start","codePointSize","norm","pos","code","charCodeAt","match","index","keep","splice","push","Symbol","iterator","empty","exec","baseFlags","unicode","RegExpCursor","options","curLine","MultilineRegExpCursor","re","RegExp","ignoreCase","startLine","lineAt","curLineStart","matchPos","toCharEnd","getLine","skip","lineBreak","slice","nextLine","off","lastIndex","flattened","WeakMap","FlattenedDoc","get","doc","cached","flat","sliceString","set","cachedFrom","chunkEnd","line","createLineDialog","view","input","class","go","state","selection","main","head","sign","ln","cl","percent","col","number","pc","lines","Math","round","docLine","max","min","dispatch","effects","dialogEffect","of","EditorSelection","cursor","scrollIntoView","focus","dom","onkeydown","event","keyCode","preventDefault","onsubmit","phrase","type","StateEffect","define","dialogField","StateField","create","update","tr","e","is","provide","f","showPanel","val","gotoLine","panel","getPanel","field","appendConfig","baseTheme$1","querySelector","EditorView","baseTheme","padding","fontSize","defaultHighlightOptions","highlightWordAroundCursor","minSelectionLength","maxMatches","wholeWords","highlightConfig","Facet","combine","combineConfig","a","b","highlightSelectionMatches","ext","defaultTheme","matchHighlighter","matchDeco","Decoration","mark","mainMatchDeco","insideWordBoundaries","check","sliceDoc","CharCategory","Word","ViewPlugin","fromClass","decorations","getDeco","selectionSet","docChanged","viewportChanged","conf","facet","sel","ranges","none","range","word","wordAt","charCategorizer","len","insideWord","trim","deco","part","visibleRanges","v","backgroundColor","selectNextOccurrence","some","newSel","map","mainIndex","eq","selectWord","searchedText","r","fullWord","cycled","findNextOccurrence","addRange","searchConfigFacet","configs","top","caseSensitive","literal","regexp","wholeWord","createPanel","SearchPanel","scrollToMatch","search","config","searchExtensions","SearchQuery","replace","valid","source","_a","validRegExp","unquoted","unquote","_","ch","other","RegExpQuery","StringQuery","getCursor","st","EditorState","regexpCursor","stringCursor","QueryType","spec","undefined","toLowerCase","categorizer","buf","bufPos","charBefore","charAfter","super","nextMatch","curFrom","curTo","prevMatchInRange","prevMatch","getReplacement","_result","matchAll","limit","highlight","_from","_to","findClusterBreak","size","result","m","setSearchQuery","togglePanel","searchState","SearchState","defaultQuery","effect","createSearchPanel","getSearchQuery","curState","searchPanelOpen","matchMark","selectedMatchMark","searchHighlighter","startState","builder","RangeSetBuilder","l","selected","finish","searchCommand","openSearchPanel","findNext","single","announceMatch","userEvent","selectSearchInput","findPrevious","prev","selectMatches","selectSelectionMatches","cur","replaceNext","readOnly","replacement","changes","toText","insert","announce","replaceAll","announceText","fallback","_b","_c","_d","_e","selText","getSearchInput","root","activeElement","select","searchInput","closeSearchPanel","contains","searchKeymap","key","run","scope","shift","button","onclick","content","commit","bind","searchField","placeholder","form","onchange","onkeyup","replaceField","caseField","checked","reField","wordField","keydown","runScopeHandlers","target","shiftKey","transactions","setQuery","mount","AnnounceMargin","Break","lineEnd","end","position","right","border","font","margin","marginRight","whiteSpace","Prec","lowest"],"sourceRoot":""}