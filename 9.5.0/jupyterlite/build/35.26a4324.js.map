{"version":3,"file":"35.26a4324.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter/ydoc/lib/utils.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/awareness.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter/ydoc/lib/ydocument.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter/ydoc/lib/yfile.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter/ydoc/lib/ycell.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter/ydoc/lib/ynotebook.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/array.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/function.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/map.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/math.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/object.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/observable.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/set.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/time.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nexport function convertYMapEventToMapChange(event) {\n    let changes = new Map();\n    event.changes.keys.forEach((event, key) => {\n        changes.set(key, {\n            action: event.action,\n            oldValue: event.oldValue,\n            newValue: this.ymeta.get(key)\n        });\n    });\n    return changes;\n}\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n */\nexport const createMutex = () => {\n    let token = true;\n    return (f) => {\n        if (token) {\n            token = false;\n            try {\n                f();\n            }\n            finally {\n                token = true;\n            }\n        }\n    };\n};\n//# sourceMappingURL=utils.js.map","/**\n * @module awareness-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as time from 'lib0/time'\nimport * as math from 'lib0/math'\nimport { Observable } from 'lib0/observable'\nimport * as f from 'lib0/function'\nimport * as Y from 'yjs' // eslint-disable-line\n\nexport const outdatedTimeout = 30000\n\n/**\n * @typedef {Object} MetaClientState\n * @property {number} MetaClientState.clock\n * @property {number} MetaClientState.lastUpdated unix timestamp\n */\n\n/**\n * The Awareness class implements a simple shared state protocol that can be used for non-persistent data like awareness information\n * (cursor, username, status, ..). Each client can update its own local state and listen to state changes of\n * remote clients. Every client may set a state of a remote peer to `null` to mark the client as offline.\n *\n * Each client is identified by a unique client id (something we borrow from `doc.clientID`). A client can override\n * its own state by propagating a message with an increasing timestamp (`clock`). If such a message is received, it is\n * applied if the known state of that client is older than the new state (`clock < newClock`). If a client thinks that\n * a remote client is offline, it may propagate a message with\n * `{ clock: currentClientClock, state: null, client: remoteClient }`. If such a\n * message is received, and the known clock of that client equals the received clock, it will override the state with `null`.\n *\n * Before a client disconnects, it should propagate a `null` state with an updated clock.\n *\n * Awareness states must be updated every 30 seconds. Otherwise the Awareness instance will delete the client state.\n *\n * @extends {Observable<string>}\n */\nexport class Awareness extends Observable {\n  /**\n   * @param {Y.Doc} doc\n   */\n  constructor (doc) {\n    super()\n    this.doc = doc\n    /**\n     * @type {number}\n     */\n    this.clientID = doc.clientID\n    /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */\n    this.states = new Map()\n    /**\n     * @type {Map<number, MetaClientState>}\n     */\n    this.meta = new Map()\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      const now = time.getUnixTime()\n      if (this.getLocalState() !== null && (outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */ (this.meta.get(this.clientID)).lastUpdated)) {\n        // renew local clock\n        this.setLocalState(this.getLocalState())\n      }\n      /**\n       * @type {Array<number>}\n       */\n      const remove = []\n      this.meta.forEach((meta, clientid) => {\n        if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {\n          remove.push(clientid)\n        }\n      })\n      if (remove.length > 0) {\n        removeAwarenessStates(this, remove, 'timeout')\n      }\n    }, math.floor(outdatedTimeout / 10)))\n    doc.on('destroy', () => {\n      this.destroy()\n    })\n    this.setLocalState({})\n  }\n\n  destroy () {\n    this.emit('destroy', [this])\n    this.setLocalState(null)\n    super.destroy()\n    clearInterval(this._checkInterval)\n  }\n\n  /**\n   * @return {Object<string,any>|null}\n   */\n  getLocalState () {\n    return this.states.get(this.clientID) || null\n  }\n\n  /**\n   * @param {Object<string,any>|null} state\n   */\n  setLocalState (state) {\n    const clientID = this.clientID\n    const currLocalMeta = this.meta.get(clientID)\n    const clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1\n    const prevState = this.states.get(clientID)\n    if (state === null) {\n      this.states.delete(clientID)\n    } else {\n      this.states.set(clientID, state)\n    }\n    this.meta.set(clientID, {\n      clock,\n      lastUpdated: time.getUnixTime()\n    })\n    const added = []\n    const updated = []\n    const filteredUpdated = []\n    const removed = []\n    if (state === null) {\n      removed.push(clientID)\n    } else if (prevState == null) {\n      if (state != null) {\n        added.push(clientID)\n      }\n    } else {\n      updated.push(clientID)\n      if (!f.equalityDeep(prevState, state)) {\n        filteredUpdated.push(clientID)\n      }\n    }\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n      this.emit('change', [{ added, updated: filteredUpdated, removed }, 'local'])\n    }\n    this.emit('update', [{ added, updated, removed }, 'local'])\n  }\n\n  /**\n   * @param {string} field\n   * @param {any} value\n   */\n  setLocalStateField (field, value) {\n    const state = this.getLocalState()\n    if (state !== null) {\n      this.setLocalState({\n        ...state,\n        [field]: value\n      })\n    }\n  }\n\n  /**\n   * @return {Map<number,Object<string,any>>}\n   */\n  getStates () {\n    return this.states\n  }\n}\n\n/**\n * Mark (remote) clients as inactive and remove them from the list of active peers.\n * This change will be propagated to remote clients.\n *\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @param {any} origin\n */\nexport const removeAwarenessStates = (awareness, clients, origin) => {\n  const removed = []\n  for (let i = 0; i < clients.length; i++) {\n    const clientID = clients[i]\n    if (awareness.states.has(clientID)) {\n      awareness.states.delete(clientID)\n      if (clientID === awareness.clientID) {\n        const curMeta = /** @type {MetaClientState} */ (awareness.meta.get(clientID))\n        awareness.meta.set(clientID, {\n          clock: curMeta.clock + 1,\n          lastUpdated: time.getUnixTime()\n        })\n      }\n      removed.push(clientID)\n    }\n  }\n  if (removed.length > 0) {\n    awareness.emit('change', [{ added: [], updated: [], removed }, origin])\n    awareness.emit('update', [{ added: [], updated: [], removed }, origin])\n  }\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @return {Uint8Array}\n */\nexport const encodeAwarenessUpdate = (awareness, clients, states = awareness.states) => {\n  const len = clients.length\n  const encoder = encoding.createEncoder()\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = clients[i]\n    const state = states.get(clientID) || null\n    const clock = /** @type {MetaClientState} */ (awareness.meta.get(clientID)).clock\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(state))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Modify the content of an awareness update before re-encoding it to an awareness update.\n *\n * This might be useful when you have a central server that wants to ensure that clients\n * cant hijack somebody elses identity.\n *\n * @param {Uint8Array} update\n * @param {function(any):any} modify\n * @return {Uint8Array}\n */\nexport const modifyAwarenessUpdate = (update, modify) => {\n  const decoder = decoding.createDecoder(update)\n  const encoder = encoding.createEncoder()\n  const len = decoding.readVarUint(decoder)\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    const clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const modifiedState = modify(state)\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(modifiedState))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Uint8Array} update\n * @param {any} origin This will be added to the emitted change event\n */\nexport const applyAwarenessUpdate = (awareness, update, origin) => {\n  const decoder = decoding.createDecoder(update)\n  const timestamp = time.getUnixTime()\n  const added = []\n  const updated = []\n  const filteredUpdated = []\n  const removed = []\n  const len = decoding.readVarUint(decoder)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    let clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const clientMeta = awareness.meta.get(clientID)\n    const prevState = awareness.states.get(clientID)\n    const currClock = clientMeta === undefined ? 0 : clientMeta.clock\n    if (currClock < clock || (currClock === clock && state === null && awareness.states.has(clientID))) {\n      if (state === null) {\n        // never let a remote client remove this local state\n        if (clientID === awareness.clientID && awareness.getLocalState() != null) {\n          // remote client removed the local state. Do not remote state. Broadcast a message indicating\n          // that this client still exists by increasing the clock\n          clock++\n        } else {\n          awareness.states.delete(clientID)\n        }\n      } else {\n        awareness.states.set(clientID, state)\n      }\n      awareness.meta.set(clientID, {\n        clock,\n        lastUpdated: timestamp\n      })\n      if (clientMeta === undefined && state !== null) {\n        added.push(clientID)\n      } else if (clientMeta !== undefined && state === null) {\n        removed.push(clientID)\n      } else if (state !== null) {\n        if (!f.equalityDeep(state, prevState)) {\n          filteredUpdated.push(clientID)\n        }\n        updated.push(clientID)\n      }\n    }\n  }\n  if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n    awareness.emit('change', [{\n      added, updated: filteredUpdated, removed\n    }, origin])\n  }\n  if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n    awareness.emit('update', [{\n      added, updated, removed\n    }, origin])\n  }\n}\n","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { Awareness } from 'y-protocols/awareness';\nimport * as Y from 'yjs';\n/**\n * Generic shareable document.\n */\nexport class YDocument {\n    constructor(options) {\n        var _a;\n        /**\n         * Handle a change to the ystate.\n         */\n        this.onStateChanged = (event) => {\n            const stateChange = new Array();\n            event.keysChanged.forEach(key => {\n                const change = event.changes.keys.get(key);\n                if (change) {\n                    stateChange.push({\n                        name: key,\n                        oldValue: change.oldValue,\n                        newValue: this.ystate.get(key)\n                    });\n                }\n            });\n            this._changed.emit({ stateChange });\n        };\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._ydoc = (_a = options === null || options === void 0 ? void 0 : options.ydoc) !== null && _a !== void 0 ? _a : new Y.Doc();\n        this._ystate = this._ydoc.getMap('state');\n        this._undoManager = new Y.UndoManager([], {\n            trackedOrigins: new Set([this]),\n            doc: this._ydoc\n        });\n        this._awareness = new Awareness(this._ydoc);\n        this._ystate.observe(this.onStateChanged);\n    }\n    /**\n     * YJS document.\n     */\n    get ydoc() {\n        return this._ydoc;\n    }\n    /**\n     * Shared state\n     */\n    get ystate() {\n        return this._ystate;\n    }\n    /**\n     * YJS document undo manager\n     */\n    get undoManager() {\n        return this._undoManager;\n    }\n    /**\n     * Shared awareness\n     */\n    get awareness() {\n        return this._awareness;\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * A signal emitted when the document is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Whether the document is disposed or not.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Document state\n     */\n    get state() {\n        return JSONExt.deepCopy(this.ystate.toJSON());\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    canUndo() {\n        return this.undoManager.undoStack.length > 0;\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    canRedo() {\n        return this.undoManager.redoStack.length > 0;\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.ystate.unobserve(this.onStateChanged);\n        this.awareness.destroy();\n        this.undoManager.destroy();\n        this.ydoc.destroy();\n        this._disposed.emit();\n        Signal.clearData(this);\n    }\n    /**\n     * Get the value for a state attribute\n     *\n     * @param key Key to get\n     */\n    getState(key) {\n        const value = this.ystate.get(key);\n        return typeof value === 'undefined'\n            ? value\n            : JSONExt.deepCopy(value);\n    }\n    /**\n     * Set the value of a state attribute\n     *\n     * @param key Key to set\n     * @param value New attribute value\n     */\n    setState(key, value) {\n        if (!JSONExt.deepEqual(this.ystate.get(key), value)) {\n            this.ystate.set(key, value);\n        }\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        this.undoManager.undo();\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        this.undoManager.redo();\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndoHistory() {\n        this.undoManager.clear();\n    }\n    /**\n     * Perform a transaction. While the function f is called, all changes to the shared\n     * document are bundled into a single event.\n     */\n    transact(f, undoable = true) {\n        this.ydoc.transact(f, undoable ? this : null);\n    }\n}\n//# sourceMappingURL=ydocument.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { YDocument } from './ydocument.js';\n/**\n * Shareable text file.\n */\nexport class YFile extends YDocument {\n    /**\n     * Create a new file\n     *\n     * #### Notes\n     * The document is empty and must be populated\n     */\n    constructor() {\n        super();\n        /**\n         * Document version\n         */\n        this.version = '1.0.0';\n        /**\n         * YJS file text.\n         */\n        this.ysource = this.ydoc.getText('source');\n        /**\n         * Handle a change to the ymodel.\n         */\n        this._modelObserver = (event) => {\n            this._changed.emit({ sourceChange: event.changes.delta });\n        };\n        this.undoManager.addToScope(this.ysource);\n        this.ysource.observe(this._modelObserver);\n    }\n    /**\n     * Creates a standalone YFile\n     */\n    static create() {\n        return new YFile();\n    }\n    /**\n     * File text\n     */\n    get source() {\n        return this.getSource();\n    }\n    set source(v) {\n        this.setSource(v);\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this.ysource.unobserve(this._modelObserver);\n        super.dispose();\n    }\n    /**\n     * Get the file text.\n     *\n     * @returns File text.\n     */\n    getSource() {\n        return this.ysource.toString();\n    }\n    /**\n     * Set the file text.\n     *\n     * @param value New text\n     */\n    setSource(value) {\n        this.transact(() => {\n            const ytext = this.ysource;\n            ytext.delete(0, ytext.length);\n            ytext.insert(0, value);\n        });\n    }\n    /**\n     * Replace content from `start' to `end` with `value`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     * @param end: The end index of the range to replace (exclusive).\n     * @param value: New source (optional).\n     */\n    updateSource(start, end, value = '') {\n        this.transact(() => {\n            const ysource = this.ysource;\n            // insert and then delete.\n            // This ensures that the cursor position is adjusted after the replaced content.\n            ysource.insert(start, value);\n            ysource.delete(start + value.length, end - start);\n        });\n    }\n}\n//# sourceMappingURL=yfile.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { JSONExt, UUID } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { Awareness } from 'y-protocols/awareness';\nimport * as Y from 'yjs';\n/**\n * Create a new shared cell model given the YJS shared type.\n */\nexport const createCellModelFromSharedType = (type, options = {}) => {\n    switch (type.get('cell_type')) {\n        case 'code':\n            return new YCodeCell(type, type.get('source'), type.get('outputs'), options);\n        case 'markdown':\n            return new YMarkdownCell(type, type.get('source'), options);\n        case 'raw':\n            return new YRawCell(type, type.get('source'), options);\n        default:\n            throw new Error('Found unknown cell type');\n    }\n};\n/**\n * Create a new cell that can be inserted in an existing shared model.\n *\n * If no notebook is specified the cell will be standalone.\n *\n * @param cell Cell JSON representation\n * @param notebook Notebook to which the cell will be added\n */\nexport const createCell = (cell, notebook) => {\n    var _a, _b;\n    const ymodel = new Y.Map();\n    const ysource = new Y.Text();\n    const ymetadata = new Y.Map();\n    ymodel.set('source', ysource);\n    ymodel.set('metadata', ymetadata);\n    ymodel.set('cell_type', cell.cell_type);\n    ymodel.set('id', (_a = cell.id) !== null && _a !== void 0 ? _a : UUID.uuid4());\n    let ycell;\n    switch (cell.cell_type) {\n        case 'markdown': {\n            ycell = new YMarkdownCell(ymodel, ysource, { notebook }, ymetadata);\n            if (cell.attachments != null) {\n                ycell.setAttachments(cell.attachments);\n            }\n            break;\n        }\n        case 'code': {\n            const youtputs = new Y.Array();\n            ymodel.set('outputs', youtputs);\n            ycell = new YCodeCell(ymodel, ysource, youtputs, {\n                notebook\n            }, ymetadata);\n            const cCell = cell;\n            ycell.execution_count = (_b = cCell.execution_count) !== null && _b !== void 0 ? _b : null;\n            if (cCell.outputs) {\n                ycell.setOutputs(cCell.outputs);\n            }\n            break;\n        }\n        default: {\n            // raw\n            ycell = new YRawCell(ymodel, ysource, { notebook }, ymetadata);\n            if (cell.attachments) {\n                ycell.setAttachments(cell.attachments);\n            }\n            break;\n        }\n    }\n    if (cell.metadata != null) {\n        ycell.setMetadata(cell.metadata);\n    }\n    if (cell.source != null) {\n        ycell.setSource(typeof cell.source === 'string' ? cell.source : cell.source.join(''));\n    }\n    return ycell;\n};\n/**\n * Create a new cell that cannot be inserted in an existing shared model.\n *\n * @param cell Cell JSON representation\n */\nexport const createStandaloneCell = (cell) => createCell(cell);\nexport class YBaseCell {\n    /**\n     * Create a new YCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static create(id) {\n        return createCell({ id, cell_type: this.prototype.cell_type });\n    }\n    /**\n     * Base cell constructor\n     *\n     * ### Notes\n     * Don't use the constructor directly - prefer using ``YNotebook.insertCell``\n     *\n     * The ``ysource`` is needed because ``ymodel.get('source')`` will\n     * not return the real source if the model is not yet attached to\n     * a document. Requesting it explicitly allows to introspect a non-empty\n     * source before the cell is attached to the document.\n     *\n     * @param ymodel Cell map\n     * @param ysource Cell source\n     * @param options \\{ notebook?: The notebook the cell is attached to \\}\n     * @param ymetadata Cell metadata\n     */\n    constructor(ymodel, ysource, options = {}, ymetadata) {\n        /**\n         * Handle a change to the ymodel.\n         */\n        this._modelObserver = (events) => {\n            this._changed.emit(this.getChanges(events));\n        };\n        this._metadataChanged = new Signal(this);\n        /**\n         * The notebook that this cell belongs to.\n         */\n        this._notebook = null;\n        this._changed = new Signal(this);\n        this._disposed = new Signal(this);\n        this._isDisposed = false;\n        this._undoManager = null;\n        this.ymodel = ymodel;\n        this._ysource = ysource;\n        this._ymetadata = ymetadata !== null && ymetadata !== void 0 ? ymetadata : this.ymodel.get('metadata');\n        this._prevSourceLength = ysource ? ysource.length : 0;\n        this._notebook = null;\n        this._awareness = null;\n        this._undoManager = null;\n        if (options.notebook) {\n            this._notebook = options.notebook;\n            // We cannot create a undo manager with the cell not yet attached in the notebook\n            // so we defer that to the notebook insertCell method\n        }\n        else {\n            // Standalone cell\n            const doc = new Y.Doc();\n            doc.getArray().insert(0, [this.ymodel]);\n            this._awareness = new Awareness(doc);\n            this._undoManager = new Y.UndoManager([this.ymodel], {\n                trackedOrigins: new Set([this])\n            });\n        }\n        this.ymodel.observeDeep(this._modelObserver);\n    }\n    /**\n     * Cell notebook awareness or null if the cell is standalone.\n     */\n    get awareness() {\n        var _a, _b, _c;\n        return (_c = (_a = this._awareness) !== null && _a !== void 0 ? _a : (_b = this.notebook) === null || _b === void 0 ? void 0 : _b.awareness) !== null && _c !== void 0 ? _c : null;\n    }\n    /**\n     * The type of the cell.\n     */\n    get cell_type() {\n        throw new Error('A YBaseCell must not be constructed');\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Signal emitted when the cell is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Cell id\n     */\n    get id() {\n        return this.getId();\n    }\n    /**\n     * Whether the model has been disposed or not.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Whether the cell is standalone or not.\n     *\n     * If the cell is standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    get isStandalone() {\n        return this._notebook !== null;\n    }\n    /**\n     * Cell metadata.\n     *\n     * #### Notes\n     * You should prefer to access and modify the specific key of interest.\n     */\n    get metadata() {\n        return this.getMetadata();\n    }\n    set metadata(v) {\n        this.setMetadata(v);\n    }\n    /**\n     * Signal triggered when the cell metadata changes.\n     */\n    get metadataChanged() {\n        return this._metadataChanged;\n    }\n    /**\n     * The notebook that this cell belongs to.\n     */\n    get notebook() {\n        return this._notebook;\n    }\n    /**\n     * Cell input content.\n     */\n    get source() {\n        return this.getSource();\n    }\n    set source(v) {\n        this.setSource(v);\n    }\n    /**\n     * The cell undo manager.\n     */\n    get undoManager() {\n        var _a;\n        if (!this.notebook) {\n            return this._undoManager;\n        }\n        return ((_a = this.notebook) === null || _a === void 0 ? void 0 : _a.disableDocumentWideUndoRedo)\n            ? this._undoManager\n            : this.notebook.undoManager;\n    }\n    /**\n     * Defer setting the undo manager as it requires the\n     * cell to be attached to the notebook Y document.\n     */\n    setUndoManager() {\n        if (this._undoManager) {\n            throw new Error('The cell undo manager is already set.');\n        }\n        if (this._notebook && this._notebook.disableDocumentWideUndoRedo) {\n            this._undoManager = new Y.UndoManager([this.ymodel], {\n                trackedOrigins: new Set([this])\n            });\n        }\n    }\n    get ysource() {\n        return this._ysource;\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    canUndo() {\n        return !!this.undoManager && this.undoManager.undoStack.length > 0;\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    canRedo() {\n        return !!this.undoManager && this.undoManager.redoStack.length > 0;\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndoHistory() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.clear();\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.undo();\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.redo();\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        var _a;\n        if (this._isDisposed)\n            return;\n        this._isDisposed = true;\n        this.ymodel.unobserveDeep(this._modelObserver);\n        if (this._awareness) {\n            // A new document is created for standalone cell.\n            const doc = this._awareness.doc;\n            this._awareness.destroy();\n            doc.destroy();\n        }\n        if (this._undoManager) {\n            // Be sure to not destroy the document undo manager.\n            if (this._undoManager === ((_a = this.notebook) === null || _a === void 0 ? void 0 : _a.undoManager)) {\n                this._undoManager = null;\n            }\n            else {\n                this._undoManager.destroy();\n            }\n        }\n        this._disposed.emit();\n        Signal.clearData(this);\n    }\n    /**\n     * Get cell id.\n     *\n     * @returns Cell id\n     */\n    getId() {\n        return this.ymodel.get('id');\n    }\n    /**\n     * Gets cell's source.\n     *\n     * @returns Cell's source.\n     */\n    getSource() {\n        return this.ysource.toString();\n    }\n    /**\n     * Sets cell's source.\n     *\n     * @param value: New source.\n     */\n    setSource(value) {\n        this.transact(() => {\n            this.ysource.delete(0, this.ysource.length);\n            this.ysource.insert(0, value);\n        });\n        // @todo Do we need proper replace semantic? This leads to issues in editor bindings because they don't switch source.\n        // this.ymodel.set('source', new Y.Text(value));\n    }\n    /**\n     * Replace content from `start' to `end` with `value`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     *\n     * @param end: The end index of the range to replace (exclusive).\n     *\n     * @param value: New source (optional).\n     */\n    updateSource(start, end, value = '') {\n        this.transact(() => {\n            const ysource = this.ysource;\n            // insert and then delete.\n            // This ensures that the cursor position is adjusted after the replaced content.\n            ysource.insert(start, value);\n            ysource.delete(start + value.length, end - start);\n        });\n    }\n    /**\n     * Delete a metadata cell.\n     *\n     * @param key The key to delete\n     */\n    deleteMetadata(key) {\n        if (typeof this.getMetadata(key) === 'undefined') {\n            return;\n        }\n        this.transact(() => {\n            this._ymetadata.delete(key);\n            const jupyter = this.getMetadata('jupyter');\n            if (key === 'collapsed' && jupyter) {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const { outputs_hidden, ...others } = jupyter;\n                if (Object.keys(others).length === 0) {\n                    this._ymetadata.delete('jupyter');\n                }\n                else {\n                    this._ymetadata.set('jupyter', others);\n                }\n            }\n            else if (key === 'jupyter') {\n                this._ymetadata.delete('collapsed');\n            }\n        }, false);\n    }\n    getMetadata(key) {\n        const metadata = this._ymetadata;\n        // Transiently the metadata can be missing - like during destruction\n        if (metadata === undefined) {\n            return undefined;\n        }\n        if (typeof key === 'string') {\n            const value = metadata.get(key);\n            return typeof value === 'undefined'\n                ? undefined // undefined is converted to `{}` by `JSONExt.deepCopy`\n                : JSONExt.deepCopy(metadata.get(key));\n        }\n        else {\n            return JSONExt.deepCopy(metadata.toJSON());\n        }\n    }\n    setMetadata(metadata, value) {\n        var _a, _b;\n        if (typeof metadata === 'string') {\n            if (typeof value === 'undefined') {\n                throw new TypeError(`Metadata value for ${metadata} cannot be 'undefined'; use deleteMetadata.`);\n            }\n            const key = metadata;\n            // Only set metadata if we change something to avoid infinite\n            // loop of signal changes.\n            if (JSONExt.deepEqual((_a = this.getMetadata(key)) !== null && _a !== void 0 ? _a : null, value)) {\n                return;\n            }\n            this.transact(() => {\n                var _a;\n                this._ymetadata.set(key, value);\n                if (key === 'collapsed') {\n                    const jupyter = ((_a = this.getMetadata('jupyter')) !== null && _a !== void 0 ? _a : {});\n                    if (jupyter.outputs_hidden !== value) {\n                        this.setMetadata('jupyter', {\n                            ...jupyter,\n                            outputs_hidden: value\n                        });\n                    }\n                }\n                else if (key === 'jupyter') {\n                    const isHidden = value['outputs_hidden'];\n                    if (typeof isHidden !== 'undefined') {\n                        if (this.getMetadata('collapsed') !== isHidden) {\n                            this.setMetadata('collapsed', isHidden);\n                        }\n                    }\n                    else {\n                        this.deleteMetadata('collapsed');\n                    }\n                }\n            }, false);\n        }\n        else {\n            const clone = JSONExt.deepCopy(metadata);\n            if (clone.collapsed != null) {\n                clone.jupyter = clone.jupyter || {};\n                clone.jupyter.outputs_hidden = clone.collapsed;\n            }\n            else if (((_b = clone === null || clone === void 0 ? void 0 : clone.jupyter) === null || _b === void 0 ? void 0 : _b.outputs_hidden) != null) {\n                clone.collapsed = clone.jupyter.outputs_hidden;\n            }\n            if (!JSONExt.deepEqual(clone, this.getMetadata())) {\n                this.transact(() => {\n                    for (const [key, value] of Object.entries(clone)) {\n                        this._ymetadata.set(key, value);\n                    }\n                }, false);\n            }\n        }\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: this.cell_type,\n            source: this.getSource(),\n            metadata: this.getMetadata()\n        };\n    }\n    /**\n     * Perform a transaction. While the function f is called, all changes to the shared\n     * document are bundled into a single event.\n     *\n     * @param f Transaction to execute\n     * @param undoable Whether to track the change in the action history or not (default `true`)\n     */\n    transact(f, undoable = true) {\n        !this.notebook || this.notebook.disableDocumentWideUndoRedo\n            ? this.ymodel.doc == null\n                ? f()\n                : this.ymodel.doc.transact(f, undoable ? this : null)\n            : this.notebook.transact(f, undoable);\n    }\n    /**\n     * Extract changes from YJS events\n     *\n     * @param events YJS events\n     * @returns Cell changes\n     */\n    getChanges(events) {\n        const changes = {};\n        const sourceEvent = events.find(event => event.target === this.ymodel.get('source'));\n        if (sourceEvent) {\n            changes.sourceChange = sourceEvent.changes.delta;\n        }\n        const metadataEvents = events.find(event => event.target === this._ymetadata);\n        if (metadataEvents) {\n            changes.metadataChange = metadataEvents.changes.keys;\n            metadataEvents.changes.keys.forEach((change, key) => {\n                switch (change.action) {\n                    case 'add':\n                        this._metadataChanged.emit({\n                            key,\n                            newValue: this._ymetadata.get(key),\n                            type: 'add'\n                        });\n                        break;\n                    case 'delete':\n                        this._metadataChanged.emit({\n                            key,\n                            oldValue: change.oldValue,\n                            type: 'remove'\n                        });\n                        break;\n                    case 'update':\n                        {\n                            const newValue = this._ymetadata.get(key);\n                            const oldValue = change.oldValue;\n                            let equal = true;\n                            if (typeof oldValue == 'object' && typeof newValue == 'object') {\n                                equal = JSONExt.deepEqual(oldValue, newValue);\n                            }\n                            else {\n                                equal = oldValue === newValue;\n                            }\n                            if (!equal) {\n                                this._metadataChanged.emit({\n                                    key,\n                                    type: 'change',\n                                    oldValue,\n                                    newValue\n                                });\n                            }\n                        }\n                        break;\n                }\n            });\n        }\n        const modelEvent = events.find(event => event.target === this.ymodel);\n        // The model allows us to replace the complete source with a new string. We express this in the Delta format\n        // as a replace of the complete string.\n        const ysource = this.ymodel.get('source');\n        if (modelEvent && modelEvent.keysChanged.has('source')) {\n            changes.sourceChange = [\n                { delete: this._prevSourceLength },\n                { insert: ysource.toString() }\n            ];\n        }\n        this._prevSourceLength = ysource.length;\n        return changes;\n    }\n}\n/**\n * Shareable code cell.\n */\nexport class YCodeCell extends YBaseCell {\n    /**\n     * Create a new YCodeCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static create(id) {\n        return super.create(id);\n    }\n    /**\n     * Code cell constructor\n     *\n     * ### Notes\n     * Don't use the constructor directly - prefer using ``YNotebook.insertCell``\n     *\n     * The ``ysource`` is needed because ``ymodel.get('source')`` will\n     * not return the real source if the model is not yet attached to\n     * a document. Requesting it explicitly allows to introspect a non-empty\n     * source before the cell is attached to the document.\n     *\n     * @param ymodel Cell map\n     * @param ysource Cell source\n     * @param youtputs Code cell outputs\n     * @param options \\{ notebook?: The notebook the cell is attached to \\}\n     * @param ymetadata Cell metadata\n     */\n    constructor(ymodel, ysource, youtputs, options = {}, ymetadata) {\n        super(ymodel, ysource, options, ymetadata);\n        this._youtputs = youtputs;\n    }\n    /**\n     * The type of the cell.\n     */\n    get cell_type() {\n        return 'code';\n    }\n    /**\n     * The code cell's prompt number. Will be null if the cell has not been run.\n     */\n    get execution_count() {\n        return this.ymodel.get('execution_count') || null;\n    }\n    set execution_count(count) {\n        // Do not use `this.execution_count`. When initializing the\n        // cell, we need to set execution_count to `null` if we compare\n        // using `this.execution_count` it will return `null` and we will\n        // never initialize it\n        if (this.ymodel.get('execution_count') !== count) {\n            this.transact(() => {\n                this.ymodel.set('execution_count', count);\n            }, false);\n        }\n    }\n    /**\n     * Cell outputs.\n     */\n    get outputs() {\n        return this.getOutputs();\n    }\n    set outputs(v) {\n        this.setOutputs(v);\n    }\n    /**\n     * Execution, display, or stream outputs.\n     */\n    getOutputs() {\n        return JSONExt.deepCopy(this._youtputs.toArray());\n    }\n    /**\n     * Replace all outputs.\n     */\n    setOutputs(outputs) {\n        this.transact(() => {\n            this._youtputs.delete(0, this._youtputs.length);\n            this._youtputs.insert(0, outputs);\n        }, false);\n    }\n    /**\n     * Replace content from `start' to `end` with `outputs`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     *\n     * @param end: The end index of the range to replace (exclusive).\n     *\n     * @param outputs: New outputs (optional).\n     */\n    updateOutputs(start, end, outputs = []) {\n        const fin = end < this._youtputs.length ? end - start : this._youtputs.length - start;\n        this.transact(() => {\n            this._youtputs.delete(start, fin);\n            this._youtputs.insert(start, outputs);\n        }, false);\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            outputs: this.getOutputs(),\n            execution_count: this.execution_count\n        };\n    }\n    /**\n     * Extract changes from YJS events\n     *\n     * @param events YJS events\n     * @returns Cell changes\n     */\n    getChanges(events) {\n        const changes = super.getChanges(events);\n        const outputEvent = events.find(event => event.target === this.ymodel.get('outputs'));\n        if (outputEvent) {\n            changes.outputsChange = outputEvent.changes.delta;\n        }\n        const modelEvent = events.find(event => event.target === this.ymodel);\n        if (modelEvent && modelEvent.keysChanged.has('execution_count')) {\n            const change = modelEvent.changes.keys.get('execution_count');\n            changes.executionCountChange = {\n                oldValue: change.oldValue,\n                newValue: this.ymodel.get('execution_count')\n            };\n        }\n        return changes;\n    }\n}\nclass YAttachmentCell extends YBaseCell {\n    /**\n     * Cell attachments\n     */\n    get attachments() {\n        return this.getAttachments();\n    }\n    set attachments(v) {\n        this.setAttachments(v);\n    }\n    /**\n     * Gets the cell attachments.\n     *\n     * @returns The cell attachments.\n     */\n    getAttachments() {\n        return this.ymodel.get('attachments');\n    }\n    /**\n     * Sets the cell attachments\n     *\n     * @param attachments: The cell attachments.\n     */\n    setAttachments(attachments) {\n        this.transact(() => {\n            if (attachments == null) {\n                this.ymodel.delete('attachments');\n            }\n            else {\n                this.ymodel.set('attachments', attachments);\n            }\n        }, false);\n    }\n    /**\n     * Extract changes from YJS events\n     *\n     * @param events YJS events\n     * @returns Cell changes\n     */\n    getChanges(events) {\n        const changes = super.getChanges(events);\n        const modelEvent = events.find(event => event.target === this.ymodel);\n        if (modelEvent && modelEvent.keysChanged.has('attachments')) {\n            const change = modelEvent.changes.keys.get('attachments');\n            changes.executionCountChange = {\n                oldValue: change.oldValue,\n                newValue: this.ymodel.get('attachments')\n            };\n        }\n        return changes;\n    }\n}\n/**\n * Shareable raw cell.\n */\nexport class YRawCell extends YAttachmentCell {\n    /**\n     * Create a new YRawCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static create(id) {\n        return super.create(id);\n    }\n    /**\n     * String identifying the type of cell.\n     */\n    get cell_type() {\n        return 'raw';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: 'raw',\n            source: this.getSource(),\n            metadata: this.getMetadata(),\n            attachments: this.getAttachments()\n        };\n    }\n}\n/**\n * Shareable markdown cell.\n */\nexport class YMarkdownCell extends YAttachmentCell {\n    /**\n     * Create a new YMarkdownCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static create(id) {\n        return super.create(id);\n    }\n    /**\n     * String identifying the type of cell.\n     */\n    get cell_type() {\n        return 'markdown';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: 'markdown',\n            source: this.getSource(),\n            metadata: this.getMetadata(),\n            attachments: this.getAttachments()\n        };\n    }\n}\n//# sourceMappingURL=ycell.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport * as Y from 'yjs';\nimport { YDocument } from './ydocument.js';\nimport { createCell, createCellModelFromSharedType } from './ycell.js';\n/**\n * Shared implementation of the Shared Document types.\n *\n * Shared cells can be inserted into a SharedNotebook.\n * Shared cells only start emitting events when they are connected to a SharedNotebook.\n *\n * \"Standalone\" cells must not be inserted into a (Shared)Notebook.\n * Standalone cells emit events immediately after they have been created, but they must not\n * be included into a (Shared)Notebook.\n */\nexport class YNotebook extends YDocument {\n    /**\n     * Create a new notebook\n     *\n     * #### Notes\n     * The document is empty and must be populated\n     *\n     * @param options\n     */\n    constructor(options = {}) {\n        var _a;\n        super();\n        /**\n         * Document version\n         */\n        this.version = '1.0.0';\n        /**\n         * YJS map for the notebook metadata\n         */\n        this.ymeta = this.ydoc.getMap('meta');\n        /**\n         * Handle a change to the ystate.\n         */\n        this._onMetaChanged = (events) => {\n            const metadataEvents = events.find(event => event.target === this.ymeta.get('metadata'));\n            if (metadataEvents) {\n                const metadataChange = metadataEvents.changes.keys;\n                const ymetadata = this.ymeta.get('metadata');\n                metadataEvents.changes.keys.forEach((change, key) => {\n                    switch (change.action) {\n                        case 'add':\n                            this._metadataChanged.emit({\n                                key,\n                                type: 'add',\n                                newValue: ymetadata.get(key)\n                            });\n                            break;\n                        case 'delete':\n                            this._metadataChanged.emit({\n                                key,\n                                type: 'remove',\n                                oldValue: change.oldValue\n                            });\n                            break;\n                        case 'update':\n                            {\n                                const newValue = ymetadata.get(key);\n                                const oldValue = change.oldValue;\n                                let equal = true;\n                                if (typeof oldValue == 'object' && typeof newValue == 'object') {\n                                    equal = JSONExt.deepEqual(oldValue, newValue);\n                                }\n                                else {\n                                    equal = oldValue === newValue;\n                                }\n                                if (!equal) {\n                                    this._metadataChanged.emit({\n                                        key,\n                                        type: 'change',\n                                        oldValue,\n                                        newValue\n                                    });\n                                }\n                            }\n                            break;\n                    }\n                });\n                this._changed.emit({ metadataChange });\n            }\n            const metaEvent = events.find(event => event.target === this.ymeta);\n            if (!metaEvent) {\n                return;\n            }\n            if (metaEvent.keysChanged.has('metadata')) {\n                // Handle metadata change when adding/removing the YMap\n                const change = metaEvent.changes.keys.get('metadata');\n                if ((change === null || change === void 0 ? void 0 : change.action) === 'add' && !change.oldValue) {\n                    const metadataChange = new Map();\n                    for (const key of Object.keys(this.metadata)) {\n                        metadataChange.set(key, {\n                            action: 'add',\n                            oldValue: undefined\n                        });\n                        this._metadataChanged.emit({\n                            key,\n                            type: 'add',\n                            newValue: this.getMetadata(key)\n                        });\n                    }\n                    this._changed.emit({ metadataChange });\n                }\n            }\n            if (metaEvent.keysChanged.has('nbformat')) {\n                const change = metaEvent.changes.keys.get('nbformat');\n                const nbformatChanged = {\n                    key: 'nbformat',\n                    oldValue: (change === null || change === void 0 ? void 0 : change.oldValue) ? change.oldValue : undefined,\n                    newValue: this.nbformat\n                };\n                this._changed.emit({ nbformatChanged });\n            }\n            if (metaEvent.keysChanged.has('nbformat_minor')) {\n                const change = metaEvent.changes.keys.get('nbformat_minor');\n                const nbformatChanged = {\n                    key: 'nbformat_minor',\n                    oldValue: (change === null || change === void 0 ? void 0 : change.oldValue) ? change.oldValue : undefined,\n                    newValue: this.nbformat_minor\n                };\n                this._changed.emit({ nbformatChanged });\n            }\n        };\n        /**\n         * Handle a change to the list of cells.\n         */\n        this._onYCellsChanged = (event) => {\n            // update the type cell mapping by iterating through the added/removed types\n            event.changes.added.forEach(item => {\n                const type = item.content.type;\n                if (!this._ycellMapping.has(type)) {\n                    const c = createCellModelFromSharedType(type, { notebook: this });\n                    c.setUndoManager();\n                    this._ycellMapping.set(type, c);\n                }\n            });\n            event.changes.deleted.forEach(item => {\n                const type = item.content.type;\n                const model = this._ycellMapping.get(type);\n                if (model) {\n                    model.dispose();\n                    this._ycellMapping.delete(type);\n                }\n            });\n            let index = 0;\n            // this reflects the event.changes.delta, but replaces the content of delta.insert with ycells\n            const cellsChange = [];\n            event.changes.delta.forEach((d) => {\n                if (d.insert != null) {\n                    const insertedCells = d.insert.map((ycell) => this._ycellMapping.get(ycell));\n                    cellsChange.push({ insert: insertedCells });\n                    this.cells.splice(index, 0, ...insertedCells);\n                    index += d.insert.length;\n                }\n                else if (d.delete != null) {\n                    cellsChange.push(d);\n                    this.cells.splice(index, d.delete);\n                }\n                else if (d.retain != null) {\n                    cellsChange.push(d);\n                    index += d.retain;\n                }\n            });\n            this._changed.emit({\n                cellsChange: cellsChange\n            });\n        };\n        this._metadataChanged = new Signal(this);\n        /**\n         * Internal Yjs cells list\n         */\n        this._ycells = this.ydoc.getArray('cells');\n        this._ycellMapping = new WeakMap();\n        this._disableDocumentWideUndoRedo =\n            (_a = options.disableDocumentWideUndoRedo) !== null && _a !== void 0 ? _a : false;\n        this.cells = this._ycells.toArray().map(ycell => {\n            if (!this._ycellMapping.has(ycell)) {\n                this._ycellMapping.set(ycell, createCellModelFromSharedType(ycell, { notebook: this }));\n            }\n            return this._ycellMapping.get(ycell);\n        });\n        this.undoManager.addToScope(this._ycells);\n        this._ycells.observe(this._onYCellsChanged);\n        this.ymeta.observeDeep(this._onMetaChanged);\n    }\n    /**\n     * Creates a standalone YNotebook\n     *\n     * Note: This method is useful when we need to initialize\n     * the YNotebook from the JavaScript side.\n     */\n    static create(options = {}) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const ynotebook = new YNotebook({\n            disableDocumentWideUndoRedo: (_a = options.disableDocumentWideUndoRedo) !== null && _a !== void 0 ? _a : false\n        });\n        const data = {\n            cells: (_c = (_b = options.data) === null || _b === void 0 ? void 0 : _b.cells) !== null && _c !== void 0 ? _c : [],\n            nbformat: (_e = (_d = options.data) === null || _d === void 0 ? void 0 : _d.nbformat) !== null && _e !== void 0 ? _e : 4,\n            nbformat_minor: (_g = (_f = options.data) === null || _f === void 0 ? void 0 : _f.nbformat_minor) !== null && _g !== void 0 ? _g : 5,\n            metadata: (_j = (_h = options.data) === null || _h === void 0 ? void 0 : _h.metadata) !== null && _j !== void 0 ? _j : {}\n        };\n        ynotebook.fromJSON(data);\n        return ynotebook;\n    }\n    /**\n     * Wether the undo/redo logic should be\n     * considered on the full document across all cells.\n     *\n     * Default: false\n     */\n    get disableDocumentWideUndoRedo() {\n        return this._disableDocumentWideUndoRedo;\n    }\n    /**\n     * Notebook metadata\n     */\n    get metadata() {\n        return this.getMetadata();\n    }\n    set metadata(v) {\n        this.setMetadata(v);\n    }\n    /**\n     * Signal triggered when a metadata changes.\n     */\n    get metadataChanged() {\n        return this._metadataChanged;\n    }\n    /**\n     * nbformat major version\n     */\n    get nbformat() {\n        return this.ymeta.get('nbformat');\n    }\n    set nbformat(value) {\n        this.transact(() => {\n            this.ymeta.set('nbformat', value);\n        }, false);\n    }\n    /**\n     * nbformat minor version\n     */\n    get nbformat_minor() {\n        return this.ymeta.get('nbformat_minor');\n    }\n    set nbformat_minor(value) {\n        this.transact(() => {\n            this.ymeta.set('nbformat_minor', value);\n        }, false);\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._ycells.unobserve(this._onYCellsChanged);\n        this.ymeta.unobserveDeep(this._onMetaChanged);\n        super.dispose();\n    }\n    /**\n     * Get a shared cell by index.\n     *\n     * @param index: Cell's position.\n     *\n     * @returns The requested shared cell.\n     */\n    getCell(index) {\n        return this.cells[index];\n    }\n    /**\n     * Add a shared cell at the notebook bottom.\n     *\n     * @param cell Cell to add.\n     *\n     * @returns The added cell.\n     */\n    addCell(cell) {\n        return this.insertCell(this._ycells.length, cell);\n    }\n    /**\n     * Insert a shared cell into a specific position.\n     *\n     * @param index: Cell's position.\n     * @param cell: Cell to insert.\n     *\n     * @returns The inserted cell.\n     */\n    insertCell(index, cell) {\n        return this.insertCells(index, [cell])[0];\n    }\n    /**\n     * Insert a list of shared cells into a specific position.\n     *\n     * @param index: Position to insert the cells.\n     * @param cells: Array of shared cells to insert.\n     *\n     * @returns The inserted cells.\n     */\n    insertCells(index, cells) {\n        const yCells = cells.map(c => {\n            const cell = createCell(c, this);\n            this._ycellMapping.set(cell.ymodel, cell);\n            return cell;\n        });\n        this.transact(() => {\n            this._ycells.insert(index, yCells.map(cell => cell.ymodel));\n        });\n        yCells.forEach(c => {\n            c.setUndoManager();\n        });\n        return yCells;\n    }\n    /**\n     * Move a cell.\n     *\n     * @param fromIndex: Index of the cell to move.\n     * @param toIndex: New position of the cell.\n     */\n    moveCell(fromIndex, toIndex) {\n        this.moveCells(fromIndex, toIndex);\n    }\n    /**\n     * Move cells.\n     *\n     * @param fromIndex: Index of the first cells to move.\n     * @param toIndex: New position of the first cell (in the current array).\n     * @param n: Number of cells to move (default 1)\n     */\n    moveCells(fromIndex, toIndex, n = 1) {\n        // FIXME we need to use yjs move feature to preserve undo history\n        const clones = new Array(n)\n            .fill(true)\n            .map((_, idx) => this.getCell(fromIndex + idx).toJSON());\n        this.transact(() => {\n            this._ycells.delete(fromIndex, n);\n            this._ycells.insert(fromIndex > toIndex ? toIndex : toIndex - n + 1, clones.map(clone => createCell(clone, this).ymodel));\n        });\n    }\n    /**\n     * Remove a cell.\n     *\n     * @param index: Index of the cell to remove.\n     */\n    deleteCell(index) {\n        this.deleteCellRange(index, index + 1);\n    }\n    /**\n     * Remove a range of cells.\n     *\n     * @param from: The start index of the range to remove (inclusive).\n     * @param to: The end index of the range to remove (exclusive).\n     */\n    deleteCellRange(from, to) {\n        // Cells will be removed from the mapping in the model event listener.\n        this.transact(() => {\n            this._ycells.delete(from, to - from);\n        });\n    }\n    /**\n     * Delete a metadata notebook.\n     *\n     * @param key The key to delete\n     */\n    deleteMetadata(key) {\n        if (typeof this.getMetadata(key) === 'undefined') {\n            return;\n        }\n        const allMetadata = this.metadata;\n        delete allMetadata[key];\n        this.setMetadata(allMetadata);\n    }\n    getMetadata(key) {\n        const ymetadata = this.ymeta.get('metadata');\n        // Transiently the metadata can be missing - like during destruction\n        if (ymetadata === undefined) {\n            return undefined;\n        }\n        if (typeof key === 'string') {\n            const value = ymetadata.get(key);\n            return typeof value === 'undefined'\n                ? undefined // undefined is converted to `{}` by `JSONExt.deepCopy`\n                : JSONExt.deepCopy(value);\n        }\n        else {\n            return JSONExt.deepCopy(ymetadata.toJSON());\n        }\n    }\n    setMetadata(metadata, value) {\n        var _a;\n        if (typeof metadata === 'string') {\n            if (typeof value === 'undefined') {\n                throw new TypeError(`Metadata value for ${metadata} cannot be 'undefined'; use deleteMetadata.`);\n            }\n            if (JSONExt.deepEqual((_a = this.getMetadata(metadata)) !== null && _a !== void 0 ? _a : null, value)) {\n                return;\n            }\n            const update = {};\n            update[metadata] = value;\n            this.updateMetadata(update);\n        }\n        else {\n            if (!this.metadata || !JSONExt.deepEqual(this.metadata, metadata)) {\n                const clone = JSONExt.deepCopy(metadata);\n                const ymetadata = this.ymeta.get('metadata');\n                // Transiently the metadata can be missing - like during destruction\n                if (ymetadata === undefined) {\n                    return undefined;\n                }\n                this.transact(() => {\n                    ymetadata.clear();\n                    for (const [key, value] of Object.entries(clone)) {\n                        ymetadata.set(key, value);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Updates the metadata associated with the notebook.\n     *\n     * @param value: Metadata's attribute to update.\n     */\n    updateMetadata(value) {\n        // TODO: Maybe modify only attributes instead of replacing the whole metadata?\n        const clone = JSONExt.deepCopy(value);\n        const ymetadata = this.ymeta.get('metadata');\n        // Transiently the metadata can be missing - like during destruction\n        if (ymetadata === undefined) {\n            return undefined;\n        }\n        this.transact(() => {\n            for (const [key, value] of Object.entries(clone)) {\n                ymetadata.set(key, value);\n            }\n        });\n    }\n    /**\n     * Override the notebook with a JSON-serialized document.\n     *\n     * @param value The notebook\n     */\n    fromJSON(value) {\n        this.transact(() => {\n            this.nbformat = value.nbformat;\n            this.nbformat_minor = value.nbformat_minor;\n            const metadata = value.metadata;\n            if (metadata['orig_nbformat'] !== undefined) {\n                delete metadata['orig_nbformat'];\n            }\n            if (!this.metadata) {\n                const ymetadata = new Y.Map();\n                for (const [key, value] of Object.entries(metadata)) {\n                    ymetadata.set(key, value);\n                }\n                this.ymeta.set('metadata', ymetadata);\n            }\n            else {\n                this.metadata = metadata;\n            }\n            const useId = value.nbformat === 4 && value.nbformat_minor >= 5;\n            const ycells = value.cells.map(cell => {\n                if (!useId) {\n                    delete cell.id;\n                }\n                return cell;\n            });\n            this.insertCells(this.cells.length, ycells);\n            this.deleteCellRange(0, this.cells.length);\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        // strip cell ids if we have notebook format 4.0-4.4\n        const pruneCellId = this.nbformat === 4 && this.nbformat_minor <= 4;\n        return {\n            metadata: this.metadata,\n            nbformat_minor: this.nbformat_minor,\n            nbformat: this.nbformat,\n            cells: this.cells.map(c => {\n                const raw = c.toJSON();\n                if (pruneCellId) {\n                    delete raw.id;\n                }\n                return raw;\n            })\n        };\n    }\n}\n//# sourceMappingURL=ynotebook.js.map","/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\nimport * as set from './set.js'\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {ArrayLike<L>} arr\n * @return {L}\n */\nexport const last = arr => arr[arr.length - 1]\n\n/**\n * @template C\n * @return {Array<C>}\n */\nexport const create = () => /** @type {Array<C>} */ ([])\n\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\nexport const copy = a => /** @type {Array<D>} */ (a.slice())\n\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\nexport const appendTo = (dest, src) => {\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i])\n  }\n}\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport const from = Array.from\n\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n * @template {ArrayLike<ITEM>} ARR\n *\n * @param {ARR} arr\n * @param {function(ITEM, number, ARR):boolean} f\n * @return {boolean}\n */\nexport const every = (arr, f) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (!f(arr[i], i, arr)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @template {ArrayLike<S>} ARR\n * @param {ARR} arr\n * @param {function(S, number, ARR):boolean} f\n * @return {boolean}\n */\nexport const some = (arr, f) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (f(arr[i], i, arr)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * @template ELEM\n *\n * @param {ArrayLike<ELEM>} a\n * @param {ArrayLike<ELEM>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a.length === b.length && every(a, (item, index) => item === b[index])\n\n/**\n * @template ELEM\n * @param {Array<Array<ELEM>>} arr\n * @return {Array<ELEM>}\n */\nexport const flatten = arr => fold(arr, /** @type {Array<ELEM>} */ ([]), (acc, val) => acc.concat(val))\n\n/**\n * @template T\n * @param {number} len\n * @param {function(number, Array<T>):T} f\n * @return {Array<T>}\n */\nexport const unfold = (len, f) => {\n  const array = new Array(len)\n  for (let i = 0; i < len; i++) {\n    array[i] = f(i, array)\n  }\n  return array\n}\n\n/**\n * @template T\n * @template RESULT\n * @param {Array<T>} arr\n * @param {RESULT} seed\n * @param {function(RESULT, T, number):RESULT} folder\n */\nexport const fold = (arr, seed, folder) => arr.reduce(folder, seed)\n\nexport const isArray = Array.isArray\n\n/**\n * @template T\n * @param {Array<T>} arr\n * @return {Array<T>}\n */\nexport const unique = arr => from(set.from(arr))\n\n/**\n * @template T\n * @template M\n * @param {ArrayLike<T>} arr\n * @param {function(T):M} mapper\n * @return {Array<T>}\n */\nexport const uniqueBy = (arr, mapper) => {\n  /**\n   * @type {Set<M>}\n   */\n  const happened = set.create()\n  /**\n   * @type {Array<T>}\n   */\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const el = arr[i]\n    const mapped = mapper(el)\n    if (!happened.has(mapped)) {\n      happened.add(mapped)\n      result.push(el)\n    }\n  }\n  return result\n}\n","/**\n * Common functions and function call helpers.\n *\n * @module function\n */\n\nimport * as array from './array.js'\nimport * as object from './object.js'\n\n/**\n * Calls all functions in `fs` with args. Only throws after all functions were called.\n *\n * @param {Array<function>} fs\n * @param {Array<any>} args\n */\nexport const callAll = (fs, args, i = 0) => {\n  try {\n    for (; i < fs.length; i++) {\n      fs[i](...args)\n    }\n  } finally {\n    if (i < fs.length) {\n      callAll(fs, args, i + 1)\n    }\n  }\n}\n\nexport const nop = () => {}\n\n/**\n * @template T\n * @param {function():T} f\n * @return {T}\n */\nexport const apply = f => f()\n\n/**\n * @template A\n *\n * @param {A} a\n * @return {A}\n */\nexport const id = a => a\n\n/**\n * @template T\n *\n * @param {T} a\n * @param {T} b\n * @return {boolean}\n */\nexport const equalityStrict = (a, b) => a === b\n\n/**\n * @template T\n *\n * @param {Array<T>|object} a\n * @param {Array<T>|object} b\n * @return {boolean}\n */\nexport const equalityFlat = (a, b) => a === b || (a != null && b != null && a.constructor === b.constructor && ((array.isArray(a) && array.equalFlat(a, /** @type {Array<T>} */ (b))) || (typeof a === 'object' && object.equalFlat(a, b))))\n\n/* c8 ignore start */\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nexport const equalityDeep = (a, b) => {\n  if (a == null || b == null) {\n    return equalityStrict(a, b)\n  }\n  if (a.constructor !== b.constructor) {\n    return false\n  }\n  if (a === b) {\n    return true\n  }\n  switch (a.constructor) {\n    case ArrayBuffer:\n      a = new Uint8Array(a)\n      b = new Uint8Array(b)\n    // eslint-disable-next-line no-fallthrough\n    case Uint8Array: {\n      if (a.byteLength !== b.byteLength) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false\n        }\n      }\n      break\n    }\n    case Set: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const value of a) {\n        if (!b.has(value)) {\n          return false\n        }\n      }\n      break\n    }\n    case Map: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const key of a.keys()) {\n        if (!b.has(key) || !equalityDeep(a.get(key), b.get(key))) {\n          return false\n        }\n      }\n      break\n    }\n    case Object:\n      if (object.length(a) !== object.length(b)) {\n        return false\n      }\n      for (const key in a) {\n        if (!object.hasProperty(a, key) || !equalityDeep(a[key], b[key])) {\n          return false\n        }\n      }\n      break\n    case Array:\n      if (a.length !== b.length) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (!equalityDeep(a[i], b[i])) {\n          return false\n        }\n      }\n      break\n    default:\n      return false\n  }\n  return true\n}\n\n/**\n * @template V\n * @template {V} OPTS\n *\n * @param {V} value\n * @param {Array<OPTS>} options\n */\n// @ts-ignore\nexport const isOneOf = (value, options) => options.includes(value)\n/* c8 ignore stop */\n\nexport const isArray = array.isArray\n\n/**\n * @param {any} s\n * @return {s is String}\n */\nexport const isString = (s) => s && s.constructor === String\n\n/**\n * @param {any} n\n * @return {n is Number}\n */\nexport const isNumber = n => n != null && n.constructor === Number\n\n/**\n * @template {abstract new (...args: any) => any} TYPE\n * @param {any} n\n * @param {TYPE} T\n * @return {n is InstanceType<TYPE>}\n */\nexport const is = (n, T) => n && n.constructor === T\n\n/**\n * @template {abstract new (...args: any) => any} TYPE\n * @param {TYPE} T\n */\nexport const isTemplate = (T) =>\n  /**\n   * @param {any} n\n   * @return {n is InstanceType<TYPE>}\n   **/\n  n => n && n.constructor === T\n","/**\n * Utility module to work with key-value stores.\n *\n * @module map\n */\n\n/**\n * Creates a new Map instance.\n *\n * @function\n * @return {Map<any, any>}\n *\n * @function\n */\nexport const create = () => new Map()\n\n/**\n * Copy a Map object into a fresh Map object.\n *\n * @function\n * @template X,Y\n * @param {Map<X,Y>} m\n * @return {Map<X,Y>}\n */\nexport const copy = m => {\n  const r = create()\n  m.forEach((v, k) => { r.set(k, v) })\n  return r\n}\n\n/**\n * Get map property. Create T if property is undefined and set T on map.\n *\n * ```js\n * const listeners = map.setIfUndefined(events, 'eventName', set.create)\n * listeners.add(listener)\n * ```\n *\n * @function\n * @template V,K\n * @template {Map<K,V>} MAP\n * @param {MAP} map\n * @param {K} key\n * @param {function():V} createT\n * @return {V}\n */\nexport const setIfUndefined = (map, key, createT) => {\n  let set = map.get(key)\n  if (set === undefined) {\n    map.set(key, set = createT())\n  }\n  return set\n}\n\n/**\n * Creates an Array and populates it with the content of all key-value pairs using the `f(value, key)` function.\n *\n * @function\n * @template K\n * @template V\n * @template R\n * @param {Map<K,V>} m\n * @param {function(V,K):R} f\n * @return {Array<R>}\n */\nexport const map = (m, f) => {\n  const res = []\n  for (const [key, value] of m) {\n    res.push(f(value, key))\n  }\n  return res\n}\n\n/**\n * Tests whether any key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @todo should rename to some - similarly to Array.some\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const any = (m, f) => {\n  for (const [key, value] of m) {\n    if (f(value, key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Tests whether all key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const all = (m, f) => {\n  for (const [key, value] of m) {\n    if (!f(value, key)) {\n      return false\n    }\n  }\n  return true\n}\n","/**\n * Common Math expressions.\n *\n * @module math\n */\n\nexport const floor = Math.floor\nexport const ceil = Math.ceil\nexport const abs = Math.abs\nexport const imul = Math.imul\nexport const round = Math.round\nexport const log10 = Math.log10\nexport const log2 = Math.log2\nexport const log = Math.log\nexport const sqrt = Math.sqrt\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The sum of a and b\n */\nexport const add = (a, b) => a + b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The smaller element of a and b\n */\nexport const min = (a, b) => a < b ? a : b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The bigger element of a and b\n */\nexport const max = (a, b) => a > b ? a : b\n\nexport const isNaN = Number.isNaN\n\nexport const pow = Math.pow\n/**\n * Base 10 exponential function. Returns the value of 10 raised to the power of pow.\n *\n * @param {number} exp\n * @return {number}\n */\nexport const exp10 = exp => Math.pow(10, exp)\n\nexport const sign = Math.sign\n\n/**\n * @param {number} n\n * @return {boolean} Wether n is negative. This function also differentiates between -0 and +0\n */\nexport const isNegativeZero = n => n !== 0 ? n < 0 : 1 / n < 0\n","/**\n * Utility functions for working with EcmaScript objects.\n *\n * @module object\n */\n\n/**\n * @return {Object<string,any>} obj\n */\nexport const create = () => Object.create(null)\n\n/**\n * Object.assign\n */\nexport const assign = Object.assign\n\n/**\n * @param {Object<string,any>} obj\n */\nexport const keys = Object.keys\n\n/**\n * @template V\n * @param {{[k:string]:V}} obj\n * @param {function(V,string):any} f\n */\nexport const forEach = (obj, f) => {\n  for (const key in obj) {\n    f(obj[key], key)\n  }\n}\n\n/**\n * @todo implement mapToArray & map\n *\n * @template R\n * @param {Object<string,any>} obj\n * @param {function(any,string):R} f\n * @return {Array<R>}\n */\nexport const map = (obj, f) => {\n  const results = []\n  for (const key in obj) {\n    results.push(f(obj[key], key))\n  }\n  return results\n}\n\n/**\n * @param {Object<string,any>} obj\n * @return {number}\n */\nexport const length = obj => keys(obj).length\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const some = (obj, f) => {\n  for (const key in obj) {\n    if (f(obj[key], key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * @param {Object|undefined} obj\n */\nexport const isEmpty = obj => {\n  for (const _k in obj) {\n    return false\n  }\n  return true\n}\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const every = (obj, f) => {\n  for (const key in obj) {\n    if (!f(obj[key], key)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Calls `Object.prototype.hasOwnProperty`.\n *\n * @param {any} obj\n * @param {string|symbol} key\n * @return {boolean}\n */\nexport const hasProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key)\n\n/**\n * @param {Object<string,any>} a\n * @param {Object<string,any>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a === b || (length(a) === length(b) && every(a, (val, key) => (val !== undefined || hasProperty(b, key)) && b[key] === val))\n","/**\n * Observable class prototype.\n *\n * @module observable\n */\n\nimport * as map from './map.js'\nimport * as set from './set.js'\nimport * as array from './array.js'\n\n/**\n * Handles named events.\n *\n * @template N\n */\nexport class Observable {\n  constructor () {\n    /**\n     * Some desc.\n     * @type {Map<N, any>}\n     */\n    this._observers = map.create()\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  on (name, f) {\n    map.setIfUndefined(this._observers, name, set.create).add(f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  once (name, f) {\n    /**\n     * @param  {...any} args\n     */\n    const _f = (...args) => {\n      this.off(name, _f)\n      f(...args)\n    }\n    this.on(name, _f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  off (name, f) {\n    const observers = this._observers.get(name)\n    if (observers !== undefined) {\n      observers.delete(f)\n      if (observers.size === 0) {\n        this._observers.delete(name)\n      }\n    }\n  }\n\n  /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @param {N} name The event name.\n   * @param {Array<any>} args The arguments that are applied to the event listener.\n   */\n  emit (name, args) {\n    // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n    return array.from((this._observers.get(name) || map.create()).values()).forEach(f => f(...args))\n  }\n\n  destroy () {\n    this._observers = map.create()\n  }\n}\n","/**\n * Utility module to work with sets.\n *\n * @module set\n */\n\nexport const create = () => new Set()\n\n/**\n * @template T\n * @param {Set<T>} set\n * @return {Array<T>}\n */\nexport const toArray = set => Array.from(set)\n\n/**\n * @template T\n * @param {Set<T>} set\n * @return {T}\n */\nexport const first = set =>\n  set.values().next().value || undefined\n\n/**\n * @template T\n * @param {Iterable<T>} entries\n * @return {Set<T>}\n */\nexport const from = entries => new Set(entries)\n","/**\n * Utility module to work with time.\n *\n * @module time\n */\n\nimport * as metric from './metric.js'\nimport * as math from './math.js'\n\n/**\n * Return current time.\n *\n * @return {Date}\n */\nexport const getDate = () => new Date()\n\n/**\n * Return current unix time.\n *\n * @return {number}\n */\nexport const getUnixTime = Date.now\n\n/**\n * Transform time (in ms) to a human readable format. E.g. 1100 => 1.1s. 60s => 1min. .001 => 10μs.\n *\n * @param {number} d duration in milliseconds\n * @return {string} humanized approximation of time\n */\nexport const humanizeDuration = d => {\n  if (d < 60000) {\n    const p = metric.prefix(d, -1)\n    return math.round(p.n * 100) / 100 + p.prefix + 's'\n  }\n  d = math.floor(d / 1000)\n  const seconds = d % 60\n  const minutes = math.floor(d / 60) % 60\n  const hours = math.floor(d / 3600) % 24\n  const days = math.floor(d / 86400)\n  if (days > 0) {\n    return days + 'd' + ((hours > 0 || minutes > 30) ? ' ' + (minutes > 30 ? hours + 1 : hours) + 'h' : '')\n  }\n  if (hours > 0) {\n    /* c8 ignore next */\n    return hours + 'h' + ((minutes > 0 || seconds > 30) ? ' ' + (seconds > 30 ? minutes + 1 : minutes) + 'min' : '')\n  }\n  return minutes + 'min' + (seconds > 0 ? ' ' + seconds + 's' : '')\n}\n"],"names":["convertYMapEventToMapChange","event","changes","Map","keys","forEach","key","set","action","oldValue","newValue","this","ymeta","get","createMutex","token","f","Awareness","constructor","doc","super","clientID","states","meta","_checkInterval","setInterval","now","getLocalState","outdatedTimeout","lastUpdated","setLocalState","remove","clientid","has","push","length","removeAwarenessStates","math","on","destroy","emit","clearInterval","state","currLocalMeta","clock","undefined","prevState","delete","added","updated","filteredUpdated","removed","setLocalStateField","field","value","getStates","awareness","clients","origin","i","curMeta","YDocument","options","_a","onStateChanged","stateChange","Array","keysChanged","change","name","ystate","_changed","Signal","_isDisposed","_disposed","_ydoc","ydoc","_ystate","getMap","_undoManager","trackedOrigins","Set","_awareness","observe","undoManager","changed","disposed","isDisposed","JSONExt","deepCopy","toJSON","canUndo","undoStack","canRedo","redoStack","dispose","unobserve","clearData","getState","setState","deepEqual","undo","redo","clearUndoHistory","clear","transact","undoable","YFile","version","ysource","getText","_modelObserver","sourceChange","delta","addToScope","create","source","getSource","v","setSource","toString","ytext","insert","updateSource","start","end","createCellModelFromSharedType","type","YCodeCell","YMarkdownCell","YRawCell","Error","createCell","cell","notebook","_b","ymodel","ymetadata","ycell","cell_type","id","UUID","uuid4","attachments","setAttachments","youtputs","cCell","execution_count","outputs","setOutputs","metadata","setMetadata","join","createStandaloneCell","YBaseCell","prototype","events","getChanges","_metadataChanged","_notebook","_ysource","_ymetadata","_prevSourceLength","getArray","observeDeep","_c","getId","isStandalone","getMetadata","metadataChanged","disableDocumentWideUndoRedo","setUndoManager","unobserveDeep","deleteMetadata","jupyter","outputs_hidden","others","Object","TypeError","isHidden","clone","collapsed","entries","sourceEvent","find","target","metadataEvents","metadataChange","equal","modelEvent","_youtputs","count","getOutputs","toArray","updateOutputs","fin","outputEvent","outputsChange","executionCountChange","YAttachmentCell","getAttachments","YNotebook","_onMetaChanged","metaEvent","nbformatChanged","nbformat","nbformat_minor","_onYCellsChanged","item","content","_ycellMapping","c","deleted","model","index","cellsChange","d","insertedCells","map","cells","splice","retain","_ycells","WeakMap","_disableDocumentWideUndoRedo","_d","_e","_f","_g","_h","_j","ynotebook","data","fromJSON","getCell","addCell","insertCell","insertCells","yCells","moveCell","fromIndex","toIndex","moveCells","n","clones","fill","_","idx","deleteCell","deleteCellRange","from","to","allMetadata","update","updateMetadata","useId","ycells","pruneCellId","raw","last","arr","appendTo","dest","src","some","unfold","len","array","isArray","callAll","fs","args","a","equalityDeep","b","equalityStrict","ArrayBuffer","Uint8Array","byteLength","size","isOneOf","includes","copy","m","r","k","setIfUndefined","createT","res","any","floor","Math","abs","ceil","min","imul","round","log10","log2","log","sqrt","max","isNegativeZero","Number","isNaN","pow","sign","assign","obj","isEmpty","_k","hasProperty","hasOwnProperty","call","equalFlat","every","val","Observable","_observers","add","once","off","observers","values","getUnixTime","Date"],"sourceRoot":""}