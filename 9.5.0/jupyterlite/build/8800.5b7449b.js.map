{"version":3,"file":"8800.5b7449b.js","mappings":"4MAQO,MAAMA,EACT,WAAAC,GACIC,KAAKC,YAAc,EACvB,CAMA,SAAMC,CAAIC,GACN,MAAMC,EAAS,EAAAC,OAAOC,KAAK,EAAAC,WAAWC,aAAc,oBAAoBL,UACxE,IACI,MAAMM,QAAiBC,MAAMN,GACvBO,EAAOC,KAAKC,YAAYJ,EAASK,QACvC,GAlBA,QAkBId,KAAKC,aAlBT,QAkBgCE,EAAgB,CAK5C,MAAMY,EAAOf,KAAKC,YAClBU,EAAKK,KAAKD,GAAME,YAAcN,EAAKK,KAAKD,GAAMG,WACjC,OAATH,IACAJ,EAAKK,KAAS,GAAEC,YAAc,GAAGN,EAAKK,KAAS,GAAEE,uBAEzD,CAEA,OADAlB,KAAKC,YAAcE,EACZQ,CACX,CACA,MAAOQ,GACH,OAAIhB,EACO,CACHa,KAAM,CAAC,EACPI,QAAS,kBAAkBjB,qBAG5B,CACHa,KAAM,CACFK,GAAI,CAAEJ,YAAa,UAAWC,WAAY,YAE9CE,QAAS,GAEjB,CACJ,EC9CG,MAAME,EAAe,I,SAAIC,OAAM,wC","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/translation/lib/translation.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/translation/lib/tokens.js"],"sourcesContent":["import { PageConfig, URLExt } from '@jupyterlab/coreutils';\n/**\n * A fake locale to retrieve all the language packs.\n */\nconst ALL = 'all';\n/**\n * A class to handle requests to /api/translations\n */\nexport class Translation {\n    constructor() {\n        this._prevLocale = '';\n    }\n    /**\n     * Get the translation data for the given locale\n     * @param locale The locale\n     * @returns\n     */\n    async get(locale) {\n        const apiURL = URLExt.join(PageConfig.getBaseUrl(), `api/translations/${locale}.json`);\n        try {\n            const response = await fetch(apiURL);\n            const json = JSON.parse(await response.text());\n            if (this._prevLocale !== ALL && locale === ALL) {\n                // TODO: fix this logic upstream?\n                // the upstream translation plugin relies on the comparison between\n                // the display name and the native name to enable or disable the commands:\n                // https://github.com/jupyterlab/jupyterlab/blob/befa831ffef36321b87f352a48fbe2439df6c872/packages/translation-extension/src/index.ts#L117\n                const prev = this._prevLocale;\n                json.data[prev].displayName = json.data[prev].nativeName;\n                if (prev !== 'en') {\n                    json.data['en'].displayName = `${json.data['en'].nativeName} (default)`;\n                }\n            }\n            this._prevLocale = locale;\n            return json;\n        }\n        catch (e) {\n            if (locale) {\n                return {\n                    data: {},\n                    message: `Language pack '${locale}' not installed!`,\n                };\n            }\n            return {\n                data: {\n                    en: { displayName: 'English', nativeName: 'English' },\n                },\n                message: '',\n            };\n        }\n    }\n}\n//# sourceMappingURL=translation.js.map","import { Token } from '@lumino/coreutils';\n/**\n * The token for the settings service.\n */\nexport const ITranslation = new Token('@jupyterlite/translation:ITranslation');\n//# sourceMappingURL=tokens.js.map"],"names":["Translation","constructor","this","_prevLocale","get","locale","apiURL","URLExt","join","PageConfig","getBaseUrl","response","fetch","json","JSON","parse","text","prev","data","displayName","nativeName","e","message","en","ITranslation","Token"],"sourceRoot":""}