{"version":3,"file":"3154.5d8f80d.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/mermaid/dist/stateDiagram-v2-8daeecfe.js"],"sourcesContent":["import { D as DEFAULT_STATE_TYPE, a as DIVIDER_TYPE, S as STMT_RELATION, b as STMT_STATE, c as DEFAULT_NESTED_DOC_DIR, p as parser, d as db, s as styles } from \"./styles-401768ef.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { select } from \"d3\";\nimport { l as log, c as getConfig, u as utils, i as configureSvgSize, e as common } from \"./mermaid-04fb0060.js\";\nimport { r as render } from \"./index-0980fb80.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-5ec2587c.js\";\nimport \"./createText-a48a4c90.js\";\nimport \"mdast-util-from-markdown\";\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    cnf[key];\n  }\n};\nconst getClasses = function(text, diagramObj) {\n  diagramObj.db.extract(diagramObj.db.getRootDocV2());\n  return diagramObj.db.getClasses();\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === void 0 || dbInfoItem === null) {\n    return \"\";\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(\" \");\n    } else {\n      return \"\";\n    }\n  }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n  if (itemId !== \"root\") {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n      };\n    }\n    const newNode = nodeDb[itemId];\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n    if (!newNode.type && parsedItem.doc) {\n      log.info(\"Setting cluster for \", itemId, getDir(parsedItem));\n      newNode.type = \"group\";\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n    }\n    const nodeData = {\n      labelStyle: \"\",\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: \"\",\n      //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15\n      //getConfig().flowchart.padding\n    };\n    nodeData.centerLabel = true;\n    if (parsedItem.note) {\n      const noteData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: \"\",\n        // styles.style,\n        id: itemId + NOTE_ID + \"-\" + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15\n        //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: \"\",\n        // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: \"group\",\n        padding: 0\n        //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n      let from = itemId;\n      let to = noteData.id;\n      if (parsedItem.note.position === \"left of\") {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: \"none\",\n        arrowType: \"\",\n        style: G_EDGE_STYLE,\n        labelStyle: \"\",\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n  if (parent && parent.id !== \"root\") {\n    log.trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace(\"Adding nodes children \");\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  log.trace(\"items\", doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: \"edge\" + graphItemCount,\n            arrowhead: \"normal\",\n            arrowTypeEnd: \"arrow_barb\",\n            style: G_EDGE_STYLE,\n            labelStyle: \"\",\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === \"dir\") {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\nconst draw = async function(text, id, _version, diag) {\n  log.info(\"Drawing state diagram (v2)\", id);\n  nodeDb = {};\n  diag.db.getDirection();\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n  log.info(diag.db.getRootDocV2());\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n  const diagramStates = diag.db.getStates();\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: getDir(diag.db.getRootDocV2()),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"barb\"], CSS_DIAGRAM, id);\n  const padding = 8;\n  utils.insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  svg.attr(\"class\", CSS_DIAGRAM);\n  const svgBounds = svg.node().getBBox();\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr(\"viewBox\", vBox);\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    const dim = label.getBBox();\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n    rect.setAttribute(\"rx\", 0);\n    rect.setAttribute(\"ry\", 0);\n    rect.setAttribute(\"width\", dim.width);\n    rect.setAttribute(\"height\", dim.height);\n    label.insertBefore(rect, label.firstChild);\n  }\n};\nconst renderer = {\n  setConf,\n  getClasses,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["SHAPE_STATE","SHAPE_STATE_WITH_DESC","CSS_DIAGRAM","CSS_DIAGRAM_STATE","CSS_EDGE","CSS_EDGE_NOTE_EDGE","CSS_DIAGRAM_NOTE","CSS_DIAGRAM_CLUSTER","CSS_DIAGRAM_CLUSTER_ALT","PARENT","NOTE","DOMID_TYPE_SPACER","NOTE_ID","PARENT_ID","G_EDGE_STYLE","G_EDGE_ARROWHEADSTYLE","G_EDGE_LABELTYPE","G_EDGE_THICKNESS","nodeDb","graphItemCount","stateDomId","itemId","counter","type","typeSpacer","length","setupNode","g","parent","parsedItem","diagramStates","diagramDb","altFlag","id","classStr","dbInfoItem","classes","join","shape","start","D","description","sanitizeText","newNode","Array","isArray","push","sanitizeTextOrArray","doc","l","info","getDir","dir","nodeData","labelStyle","labelText","style","domId","padding","note","noteData","text","groupData","parentNodeId","setNode","setParent","from","to","position","setEdge","arrowhead","arrowType","arrowheadStyle","labelpos","labelType","thickness","trace","setupDoc","parentParsedItem","forEach","item","stmt","S","state1","state2","edgeData","arrowTypeEnd","label","defaultDir","i","parsedItemDoc","value","renderer","setConf","cnf","keys","Object","key","getClasses","diagramObj","db","extract","getRootDocV2","draw","async","_version","diag","getDirection","securityLevel","state","conf","nodeSpacing","rankSpacing","getStates","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","sandboxElement","root","nodes","contentDocument","body","svg","select","element","r","u","insertTitle","titleTopMargin","getDiagramTitle","bounds","node","getBBox","width","height","attr","svgBounds","useMaxWidth","vBox","x","y","debug","labels","document","querySelectorAll","dim","rect","createElementNS","setAttribute","insertBefore","firstChild","diagram","parser","styles","init","arrowMarkerAbsolute","d","clear"],"sourceRoot":""}