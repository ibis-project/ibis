{"version":3,"file":"125.4c6ac03.js","mappings":"qMAIO,MAAMA,EAAY,IAAI,EAAAC,MAAM,kC,0BCE5B,MAAMC,EAMT,WAAAC,CAAYC,GAERC,KAAKC,UAAY,GACjBD,KAAKE,SAAWH,EAAQI,OAC5B,CAMA,SAAMC,CAAIC,GACN,MAAMC,EAAUN,KAAKC,UAAUM,MAAMC,GAAMA,EAAEH,KAAOA,IACpD,IAAKC,EACD,MAAMG,MAAM,WAAWJ,eAE3B,OAAOC,CACX,CAIA,UAAMI,GACF,OAAOV,KAAKC,SAChB,CAUA,WAAMU,CAAMZ,GACR,MAAM,GAAEM,EAAE,KAAEO,EAAI,KAAEC,EAAI,OAAEC,GAAWf,EAC7BgB,EAAQf,KAAKC,UAAUe,WAAWR,GAAMA,EAAEH,KAAOA,IACjDC,EAAUN,KAAKC,UAAUc,GAC/B,IAAKT,EACD,MAAMG,MAAM,WAAWJ,eAE3B,MAAMY,EAAU,IACTX,EACHM,KAAMA,QAAmCA,EAAON,EAAQM,KACxDC,KAAMA,QAAmCA,EAAOP,EAAQO,MAE5D,GAAIC,EAEA,GAAIA,EAAOT,GAAI,CACX,MAAMC,EAAUN,KAAKC,UAAUM,MAAMD,IAAc,IAAIY,EAAI,OAAkC,QAAzBA,EAAKZ,EAAQQ,cAA2B,IAAPI,OAAgB,EAASA,EAAGb,OAASS,aAAuC,EAASA,EAAOT,GAAG,IAChMC,IACAW,EAAQH,OAASR,EAAQQ,OAEjC,MACK,GAAIA,EAAOD,KAAM,CAClB,MAAMM,QAAkBnB,KAAKE,SAASkB,SAAS,CAC3Cf,GAAI,EAAAgB,KAAKC,QACTT,KAAMC,EAAOD,KACbU,SAAU,EAAAC,QAAQC,QAAQR,EAAQL,QAElCO,IACAF,EAAQH,OAASK,GAGhBnB,KAAK0B,sBAAsB,CAC5BC,SAAUR,EAAUd,GACpBuB,UAAWtB,EAAQD,IAE3B,CAGJ,OADAL,KAAKC,UAAUc,GAASE,EACjBA,CACX,CAOA,cAAMG,CAASrB,GACX,IAAImB,EAAIW,EAAIC,EAAIC,EAChB,MAAM,KAAEnB,EAAI,KAAEC,GAASd,EACjBiC,EAAUhC,KAAKC,UAAUM,MAAMC,GAAMA,EAAEK,OAASA,IACtD,GAAImB,EACA,OAAOA,EAEX,MAAMC,EAA2F,QAA7EJ,EAA+B,QAAzBX,EAAKnB,EAAQe,cAA2B,IAAPI,OAAgB,EAASA,EAAGL,YAAyB,IAAPgB,EAAgBA,EAAK,GACxHxB,EAA2B,QAArByB,EAAK/B,EAAQM,UAAuB,IAAPyB,EAAgBA,EAAK,EAAAT,KAAKC,QAC7DY,EAAqC,QAAvBH,EAAKhC,EAAQc,YAAyB,IAAPkB,EAAgBA,EAAKhC,EAAQa,KAC1Ea,EAAU,EAAAD,QAAQC,QAAQ1B,EAAQc,OAAS,EAAAW,QAAQC,QAAQ1B,EAAQa,MAEnEuB,EADWD,EAAWE,SAAS,KACRF,EAAWG,MAAM,KAAK,GAAK,GAElDd,EAAWE,EAAQW,SAASD,GAAaV,EAAU,GAAGU,KAAaV,IACnEX,QAAed,KAAKE,SAASkB,SAAS,CACxCf,KACAQ,KAAMoB,EACNV,aAEEjB,EAAU,CACZD,KACAO,OACAC,KAAMA,QAAmCA,EAAOD,EAChD0B,KAAM,WACNxB,OAAQ,CACJT,GAAIS,EAAOT,GACXQ,KAAMC,EAAOD,OAMrB,OAHAb,KAAKC,UAAUsC,KAAKjC,GAEfN,KAAK0B,sBAAsB,CAAEC,SAAUtB,EAAIuB,UAAWtB,EAAQD,KAC5DC,CACX,CAMA,cAAMkC,CAASnC,GACX,IAAIa,EACJ,MAAMZ,EAAUN,KAAKC,UAAUM,MAAMC,GAAMA,EAAEH,KAAOA,IACpD,IAAKC,EACD,MAAMG,MAAM,WAAWJ,eAE3B,MAAMsB,EAAqC,QAAzBT,EAAKZ,EAAQQ,cAA2B,IAAPI,OAAgB,EAASA,EAAGb,GAC3EsB,SACM3B,KAAKE,SAASsC,SAASb,GAEjC,EAAAc,SAASC,cAAc1C,KAAKC,UAAWK,EAC3C,CAIA,2BAAMoB,EAAsB,SAAEC,EAAQ,UAAEC,IACpC,MAAMe,QAAsB3C,KAAKE,SAASE,IAAIuB,GAC1CgB,GACAA,EAAcC,SAASC,SAAQ,KAC3B7C,KAAKwC,SAASZ,EAAU,GAGpC,E","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/session/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/session/lib/sessions.js"],"sourcesContent":["import { Token } from '@lumino/coreutils';\n/**\n * The token for the sessions service.\n */\nexport const ISessions = new Token('@jupyterlite/session:ISessions');\n//# sourceMappingURL=tokens.js.map","import { PathExt } from '@jupyterlab/coreutils';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { UUID } from '@lumino/coreutils';\n/**\n * A class to handle requests to /api/sessions\n */\nexport class Sessions {\n    /**\n     * Construct a new Sessions.\n     *\n     * @param options The instantiation options for a Sessions.\n     */\n    constructor(options) {\n        // TODO: offload to a database\n        this._sessions = [];\n        this._kernels = options.kernels;\n    }\n    /**\n     * Get a session by id.\n     *\n     * @param id The id of the session.\n     */\n    async get(id) {\n        const session = this._sessions.find((s) => s.id === id);\n        if (!session) {\n            throw Error(`Session ${id} not found`);\n        }\n        return session;\n    }\n    /**\n     * List the running sessions\n     */\n    async list() {\n        return this._sessions;\n    }\n    /**\n     * Path an existing session.\n     * This can be used to rename a session.\n     *\n     * - path updates session to track renamed paths\n     * - kernel.name starts a new kernel with a given kernelspec\n     *\n     * @param options The options to patch the session.\n     */\n    async patch(options) {\n        const { id, path, name, kernel } = options;\n        const index = this._sessions.findIndex((s) => s.id === id);\n        const session = this._sessions[index];\n        if (!session) {\n            throw Error(`Session ${id} not found`);\n        }\n        const patched = {\n            ...session,\n            path: path !== null && path !== void 0 ? path : session.path,\n            name: name !== null && name !== void 0 ? name : session.name,\n        };\n        if (kernel) {\n            // Kernel id takes precedence over name.\n            if (kernel.id) {\n                const session = this._sessions.find((session) => { var _a; return ((_a = session.kernel) === null || _a === void 0 ? void 0 : _a.id) === (kernel === null || kernel === void 0 ? void 0 : kernel.id); });\n                if (session) {\n                    patched.kernel = session.kernel;\n                }\n            }\n            else if (kernel.name) {\n                const newKernel = await this._kernels.startNew({\n                    id: UUID.uuid4(),\n                    name: kernel.name,\n                    location: PathExt.dirname(patched.path),\n                });\n                if (newKernel) {\n                    patched.kernel = newKernel;\n                }\n                // clean up the session on kernel shutdown\n                void this._handleKernelShutdown({\n                    kernelId: newKernel.id,\n                    sessionId: session.id,\n                });\n            }\n        }\n        this._sessions[index] = patched;\n        return patched;\n    }\n    /**\n     * Start a new session\n     * TODO: read path and name\n     *\n     * @param options The options to start a new session.\n     */\n    async startNew(options) {\n        var _a, _b, _c, _d;\n        const { path, name } = options;\n        const running = this._sessions.find((s) => s.name === name);\n        if (running) {\n            return running;\n        }\n        const kernelName = (_b = (_a = options.kernel) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : '';\n        const id = (_c = options.id) !== null && _c !== void 0 ? _c : UUID.uuid4();\n        const nameOrPath = (_d = options.name) !== null && _d !== void 0 ? _d : options.path;\n        const dirname = PathExt.dirname(options.name) || PathExt.dirname(options.path);\n        const hasDrive = nameOrPath.includes(':');\n        const driveName = hasDrive ? nameOrPath.split(':')[0] : '';\n        // add drive name if missing (top level directory)\n        const location = dirname.includes(driveName) ? dirname : `${driveName}:${dirname}`;\n        const kernel = await this._kernels.startNew({\n            id,\n            name: kernelName,\n            location,\n        });\n        const session = {\n            id,\n            path,\n            name: name !== null && name !== void 0 ? name : path,\n            type: 'notebook',\n            kernel: {\n                id: kernel.id,\n                name: kernel.name,\n            },\n        };\n        this._sessions.push(session);\n        // clean up the session on kernel shutdown\n        void this._handleKernelShutdown({ kernelId: id, sessionId: session.id });\n        return session;\n    }\n    /**\n     * Shut down a session.\n     *\n     * @param id The id of the session to shut down.\n     */\n    async shutdown(id) {\n        var _a;\n        const session = this._sessions.find((s) => s.id === id);\n        if (!session) {\n            throw Error(`Session ${id} not found`);\n        }\n        const kernelId = (_a = session.kernel) === null || _a === void 0 ? void 0 : _a.id;\n        if (kernelId) {\n            await this._kernels.shutdown(kernelId);\n        }\n        ArrayExt.removeFirstOf(this._sessions, session);\n    }\n    /**\n     * Handle kernel shutdown\n     */\n    async _handleKernelShutdown({ kernelId, sessionId, }) {\n        const runningKernel = await this._kernels.get(kernelId);\n        if (runningKernel) {\n            runningKernel.disposed.connect(() => {\n                this.shutdown(sessionId);\n            });\n        }\n    }\n}\n//# sourceMappingURL=sessions.js.map"],"names":["ISessions","Token","Sessions","constructor","options","this","_sessions","_kernels","kernels","get","id","session","find","s","Error","list","patch","path","name","kernel","index","findIndex","patched","_a","newKernel","startNew","UUID","uuid4","location","PathExt","dirname","_handleKernelShutdown","kernelId","sessionId","_b","_c","_d","running","kernelName","nameOrPath","driveName","includes","split","type","push","shutdown","ArrayExt","removeFirstOf","runningKernel","disposed","connect"],"sourceRoot":""}