{"version":3,"file":"4039.2635132.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@codemirror/legacy-modes/mode/haxe.js"],"sourcesContent":["// Tokenizer\n\nfunction kw(type) {return {type: type, style: \"keyword\"};}\nvar A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\");\nvar operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"}, attribute = {type:\"attribute\", style: \"attribute\"};\nvar type = kw(\"typedef\");\nvar keywords = {\n  \"if\": A, \"while\": A, \"else\": B, \"do\": B, \"try\": B,\n  \"return\": C, \"break\": C, \"continue\": C, \"new\": C, \"throw\": C,\n  \"var\": kw(\"var\"), \"inline\":attribute, \"static\": attribute, \"using\":kw(\"import\"),\n  \"public\": attribute, \"private\": attribute, \"cast\": kw(\"cast\"), \"import\": kw(\"import\"), \"macro\": kw(\"macro\"),\n  \"function\": kw(\"function\"), \"catch\": kw(\"catch\"), \"untyped\": kw(\"untyped\"), \"callback\": kw(\"cb\"),\n  \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n  \"in\": operator, \"never\": kw(\"property_access\"), \"trace\":kw(\"trace\"),\n  \"class\": type, \"abstract\":type, \"enum\":type, \"interface\":type, \"typedef\":type, \"extends\":type, \"implements\":type, \"dynamic\":type,\n  \"true\": atom, \"false\": atom, \"null\": atom\n};\n\nvar isOperatorChar = /[+\\-*&%=<>!?|]/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction toUnescaped(stream, end) {\n  var escaped = false, next;\n  while ((next = stream.next()) != null) {\n    if (next == end && !escaped)\n      return true;\n    escaped = !escaped && next == \"\\\\\";\n  }\n}\n\n// Used as scratch variables to communicate multiple values without\n// consing up tons of objects.\nvar type, content;\nfunction ret(tp, style, cont) {\n  type = tp; content = cont;\n  return style;\n}\n\nfunction haxeTokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\") {\n    return chain(stream, state, haxeTokenString(ch));\n  } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    return ret(ch);\n  } else if (ch == \"0\" && stream.eat(/x/i)) {\n    stream.eatWhile(/[\\da-f]/i);\n    return ret(\"number\", \"number\");\n  } else if (/\\d/.test(ch) || ch == \"-\" && stream.eat(/\\d/)) {\n    stream.match(/^\\d*(?:\\.\\d*(?!\\.))?(?:[eE][+\\-]?\\d+)?/);\n    return ret(\"number\", \"number\");\n  } else if (state.reAllowed && (ch == \"~\" && stream.eat(/\\//))) {\n    toUnescaped(stream, \"/\");\n    stream.eatWhile(/[gimsu]/);\n    return ret(\"regexp\", \"string.special\");\n  } else if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      return chain(stream, state, haxeTokenComment);\n    } else if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return ret(\"comment\", \"comment\");\n    } else {\n      stream.eatWhile(isOperatorChar);\n      return ret(\"operator\", null, stream.current());\n    }\n  } else if (ch == \"#\") {\n    stream.skipToEnd();\n    return ret(\"conditional\", \"meta\");\n  } else if (ch == \"@\") {\n    stream.eat(/:/);\n    stream.eatWhile(/[\\w_]/);\n    return ret (\"metadata\", \"meta\");\n  } else if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return ret(\"operator\", null, stream.current());\n  } else {\n    var word;\n    if(/[A-Z]/.test(ch)) {\n      stream.eatWhile(/[\\w_<>]/);\n      word = stream.current();\n      return ret(\"type\", \"type\", word);\n    } else {\n      stream.eatWhile(/[\\w_]/);\n      var word = stream.current(), known = keywords.propertyIsEnumerable(word) && keywords[word];\n      return (known && state.kwAllowed) ? ret(known.type, known.style, word) :\n        ret(\"variable\", \"variable\", word);\n    }\n  }\n}\n\nfunction haxeTokenString(quote) {\n  return function(stream, state) {\n    if (toUnescaped(stream, quote))\n      state.tokenize = haxeTokenBase;\n    return ret(\"string\", \"string\");\n  };\n}\n\nfunction haxeTokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = haxeTokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return ret(\"comment\", \"comment\");\n}\n\n// Parser\n\nvar atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true};\n\nfunction HaxeLexical(indented, column, type, align, prev, info) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.prev = prev;\n  this.info = info;\n  if (align != null) this.align = align;\n}\n\nfunction inScope(state, varname) {\n  for (var v = state.localVars; v; v = v.next)\n    if (v.name == varname) return true;\n}\n\nfunction parseHaxe(state, style, type, content, stream) {\n  var cc = state.cc;\n  // Communicate our context to the combinators.\n  // (Less wasteful than consing up a hundred closures on every call.)\n  cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc;\n\n  if (!state.lexical.hasOwnProperty(\"align\"))\n    state.lexical.align = true;\n\n  while(true) {\n    var combinator = cc.length ? cc.pop() : statement;\n    if (combinator(type, content)) {\n      while(cc.length && cc[cc.length - 1].lex)\n        cc.pop()();\n      if (cx.marked) return cx.marked;\n      if (type == \"variable\" && inScope(state, content)) return \"variableName.local\";\n      if (type == \"variable\" && imported(state, content)) return \"variableName.special\";\n      return style;\n    }\n  }\n}\n\nfunction imported(state, typename) {\n  if (/[a-z]/.test(typename.charAt(0)))\n    return false;\n  var len = state.importedtypes.length;\n  for (var i = 0; i<len; i++)\n    if(state.importedtypes[i]==typename) return true;\n}\n\nfunction registerimport(importname) {\n  var state = cx.state;\n  for (var t = state.importedtypes; t; t = t.next)\n    if(t.name == importname) return;\n  state.importedtypes = { name: importname, next: state.importedtypes };\n}\n// Combinator utils\n\nvar cx = {state: null, column: null, marked: null, cc: null};\nfunction pass() {\n  for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n}\nfunction cont() {\n  pass.apply(null, arguments);\n  return true;\n}\nfunction inList(name, list) {\n  for (var v = list; v; v = v.next)\n    if (v.name == name) return true;\n  return false;\n}\nfunction register(varname) {\n  var state = cx.state;\n  if (state.context) {\n    cx.marked = \"def\";\n    if (inList(varname, state.localVars)) return;\n    state.localVars = {name: varname, next: state.localVars};\n  } else if (state.globalVars) {\n    if (inList(varname, state.globalVars)) return;\n    state.globalVars = {name: varname, next: state.globalVars};\n  }\n}\n\n// Combinators\n\nvar defaultVars = {name: \"this\", next: null};\nfunction pushcontext() {\n  if (!cx.state.context) cx.state.localVars = defaultVars;\n  cx.state.context = {prev: cx.state.context, vars: cx.state.localVars};\n}\nfunction popcontext() {\n  cx.state.localVars = cx.state.context.vars;\n  cx.state.context = cx.state.context.prev;\n}\npopcontext.lex = true;\nfunction pushlex(type, info) {\n  var result = function() {\n    var state = cx.state;\n    state.lexical = new HaxeLexical(state.indented, cx.stream.column(), type, null, state.lexical, info);\n  };\n  result.lex = true;\n  return result;\n}\nfunction poplex() {\n  var state = cx.state;\n  if (state.lexical.prev) {\n    if (state.lexical.type == \")\")\n      state.indented = state.lexical.indented;\n    state.lexical = state.lexical.prev;\n  }\n}\npoplex.lex = true;\n\nfunction expect(wanted) {\n  function f(type) {\n    if (type == wanted) return cont();\n    else if (wanted == \";\") return pass();\n    else return cont(f);\n  }\n  return f;\n}\n\nfunction statement(type) {\n  if (type == \"@\") return cont(metadef);\n  if (type == \"var\") return cont(pushlex(\"vardef\"), vardef1, expect(\";\"), poplex);\n  if (type == \"keyword a\") return cont(pushlex(\"form\"), expression, statement, poplex);\n  if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n  if (type == \"{\") return cont(pushlex(\"}\"), pushcontext, block, poplex, popcontext);\n  if (type == \";\") return cont();\n  if (type == \"attribute\") return cont(maybeattribute);\n  if (type == \"function\") return cont(functiondef);\n  if (type == \"for\") return cont(pushlex(\"form\"), expect(\"(\"), pushlex(\")\"), forspec1, expect(\")\"),\n                                 poplex, statement, poplex);\n  if (type == \"variable\") return cont(pushlex(\"stat\"), maybelabel);\n  if (type == \"switch\") return cont(pushlex(\"form\"), expression, pushlex(\"}\", \"switch\"), expect(\"{\"),\n                                    block, poplex, poplex);\n  if (type == \"case\") return cont(expression, expect(\":\"));\n  if (type == \"default\") return cont(expect(\":\"));\n  if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, expect(\"(\"), funarg, expect(\")\"),\n                                   statement, poplex, popcontext);\n  if (type == \"import\") return cont(importdef, expect(\";\"));\n  if (type == \"typedef\") return cont(typedef);\n  return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n}\nfunction expression(type) {\n  if (atomicTypes.hasOwnProperty(type)) return cont(maybeoperator);\n  if (type == \"type\" ) return cont(maybeoperator);\n  if (type == \"function\") return cont(functiondef);\n  if (type == \"keyword c\") return cont(maybeexpression);\n  if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeoperator);\n  if (type == \"operator\") return cont(expression);\n  if (type == \"[\") return cont(pushlex(\"]\"), commasep(maybeexpression, \"]\"), poplex, maybeoperator);\n  if (type == \"{\") return cont(pushlex(\"}\"), commasep(objprop, \"}\"), poplex, maybeoperator);\n  return cont();\n}\nfunction maybeexpression(type) {\n  if (type.match(/[;\\}\\)\\],]/)) return pass();\n  return pass(expression);\n}\n\nfunction maybeoperator(type, value) {\n  if (type == \"operator\" && /\\+\\+|--/.test(value)) return cont(maybeoperator);\n  if (type == \"operator\" || type == \":\") return cont(expression);\n  if (type == \";\") return;\n  if (type == \"(\") return cont(pushlex(\")\"), commasep(expression, \")\"), poplex, maybeoperator);\n  if (type == \".\") return cont(property, maybeoperator);\n  if (type == \"[\") return cont(pushlex(\"]\"), expression, expect(\"]\"), poplex, maybeoperator);\n}\n\nfunction maybeattribute(type) {\n  if (type == \"attribute\") return cont(maybeattribute);\n  if (type == \"function\") return cont(functiondef);\n  if (type == \"var\") return cont(vardef1);\n}\n\nfunction metadef(type) {\n  if(type == \":\") return cont(metadef);\n  if(type == \"variable\") return cont(metadef);\n  if(type == \"(\") return cont(pushlex(\")\"), commasep(metaargs, \")\"), poplex, statement);\n}\nfunction metaargs(type) {\n  if(type == \"variable\") return cont();\n}\n\nfunction importdef (type, value) {\n  if(type == \"variable\" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont(); }\n  else if(type == \"variable\" || type == \"property\" || type == \".\" || value == \"*\") return cont(importdef);\n}\n\nfunction typedef (type, value)\n{\n  if(type == \"variable\" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont(); }\n  else if (type == \"type\" && /[A-Z]/.test(value.charAt(0))) { return cont(); }\n}\n\nfunction maybelabel(type) {\n  if (type == \":\") return cont(poplex, statement);\n  return pass(maybeoperator, expect(\";\"), poplex);\n}\nfunction property(type) {\n  if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n}\nfunction objprop(type) {\n  if (type == \"variable\") cx.marked = \"property\";\n  if (atomicTypes.hasOwnProperty(type)) return cont(expect(\":\"), expression);\n}\nfunction commasep(what, end) {\n  function proceed(type) {\n    if (type == \",\") return cont(what, proceed);\n    if (type == end) return cont();\n    return cont(expect(end));\n  }\n  return function(type) {\n    if (type == end) return cont();\n    else return pass(what, proceed);\n  };\n}\nfunction block(type) {\n  if (type == \"}\") return cont();\n  return pass(statement, block);\n}\nfunction vardef1(type, value) {\n  if (type == \"variable\"){register(value); return cont(typeuse, vardef2);}\n  return cont();\n}\nfunction vardef2(type, value) {\n  if (value == \"=\") return cont(expression, vardef2);\n  if (type == \",\") return cont(vardef1);\n}\nfunction forspec1(type, value) {\n  if (type == \"variable\") {\n    register(value);\n    return cont(forin, expression)\n  } else {\n    return pass()\n  }\n}\nfunction forin(_type, value) {\n  if (value == \"in\") return cont();\n}\nfunction functiondef(type, value) {\n  //function names starting with upper-case letters are recognised as types, so cludging them together here.\n  if (type == \"variable\" || type == \"type\") {register(value); return cont(functiondef);}\n  if (value == \"new\") return cont(functiondef);\n  if (type == \"(\") return cont(pushlex(\")\"), pushcontext, commasep(funarg, \")\"), poplex, typeuse, statement, popcontext);\n}\nfunction typeuse(type) {\n  if(type == \":\") return cont(typestring);\n}\nfunction typestring(type) {\n  if(type == \"type\") return cont();\n  if(type == \"variable\") return cont();\n  if(type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\"), poplex);\n}\nfunction typeprop(type) {\n  if(type == \"variable\") return cont(typeuse);\n}\nfunction funarg(type, value) {\n  if (type == \"variable\") {register(value); return cont(typeuse);}\n}\n\n// Interface\nexport const haxe = {\n  name: \"haxe\",\n  startState: function(indentUnit) {\n    var defaulttypes = [\"Int\", \"Float\", \"String\", \"Void\", \"Std\", \"Bool\", \"Dynamic\", \"Array\"];\n    var state = {\n      tokenize: haxeTokenBase,\n      reAllowed: true,\n      kwAllowed: true,\n      cc: [],\n      lexical: new HaxeLexical(-indentUnit, 0, \"block\", false),\n      importedtypes: defaulttypes,\n      context: null,\n      indented: 0\n    };\n    return state;\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (!state.lexical.hasOwnProperty(\"align\"))\n        state.lexical.align = false;\n      state.indented = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    if (type == \"comment\") return style;\n    state.reAllowed = !!(type == \"operator\" || type == \"keyword c\" || type.match(/^[\\[{}\\(,;:]$/));\n    state.kwAllowed = type != '.';\n    return parseHaxe(state, style, type, content, stream);\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != haxeTokenBase) return 0;\n    var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical;\n    if (lexical.type == \"stat\" && firstChar == \"}\") lexical = lexical.prev;\n    var type = lexical.type, closing = firstChar == type;\n    if (type == \"vardef\") return lexical.indented + 4;\n    else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n    else if (type == \"stat\" || type == \"form\") return lexical.indented + cx.unit;\n    else if (lexical.info == \"switch\" && !closing)\n      return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? cx.unit : 2 * cx.unit);\n    else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n    else return lexical.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n\nexport const hxml = {\n  name: \"hxml\",\n  startState: function () {\n    return {\n      define: false,\n      inString: false\n    };\n  },\n  token: function (stream, state) {\n    var ch = stream.peek();\n    var sol = stream.sol();\n\n    ///* comments */\n    if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    if (sol && ch == \"-\") {\n      var style = \"variable-2\";\n\n      stream.eat(/-/);\n\n      if (stream.peek() == \"-\") {\n        stream.eat(/-/);\n        style = \"keyword a\";\n      }\n\n      if (stream.peek() == \"D\") {\n        stream.eat(/[D]/);\n        style = \"keyword c\";\n        state.define = true;\n      }\n\n      stream.eatWhile(/[A-Z]/i);\n      return style;\n    }\n\n    var ch = stream.peek();\n\n    if (state.inString == false && ch == \"'\") {\n      state.inString = true;\n      stream.next();\n    }\n\n    if (state.inString == true) {\n      if (stream.skipTo(\"'\")) {\n\n      } else {\n        stream.skipToEnd();\n      }\n\n      if (stream.peek() == \"'\") {\n        stream.next();\n        state.inString = false;\n      }\n\n      return \"string\";\n    }\n\n    stream.next();\n    return null;\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n}\n"],"names":["kw","type","style","content","A","B","C","operator","atom","attribute","keywords","isOperatorChar","chain","stream","state","f","tokenize","toUnescaped","end","next","escaped","ret","tp","cont","haxeTokenBase","ch","quote","test","eat","eatWhile","match","reAllowed","haxeTokenComment","skipToEnd","current","word","known","propertyIsEnumerable","kwAllowed","maybeEnd","atomicTypes","HaxeLexical","indented","column","align","prev","info","this","inScope","varname","v","localVars","name","imported","typename","charAt","len","importedtypes","length","i","registerimport","importname","cx","t","marked","cc","pass","arguments","push","apply","inList","list","register","context","globalVars","defaultVars","pushcontext","vars","popcontext","pushlex","result","lexical","lex","poplex","expect","wanted","statement","metadef","vardef1","expression","block","maybeattribute","functiondef","forspec1","maybelabel","funarg","importdef","typedef","hasOwnProperty","maybeoperator","maybeexpression","commasep","objprop","value","property","metaargs","what","proceed","typeuse","vardef2","forin","_type","typestring","typeprop","haxe","startState","indentUnit","token","sol","indentation","eatSpace","pop","parseHaxe","indent","textAfter","firstChar","closing","unit","languageData","indentOnInput","commentTokens","line","open","close","hxml","define","inString","peek","skipTo"],"sourceRoot":""}