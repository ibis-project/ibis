{"version":3,"file":"8579.7c15dcd.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IRouter, ILabShell, } from '@jupyterlab/application';\nimport { Clipboard, ICommandPalette, Dialog, showDialog, } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager, IDocumentWidgetOpener } from '@jupyterlab/docmanager';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { downloadIcon, linkIcon } from '@jupyterlab/ui-components';\nimport { liteIcon, liteWordmark } from '@jupyterlite/ui-components';\nimport { filter } from '@lumino/algorithm';\nimport { Widget } from '@lumino/widgets';\nimport { getParam } from 'lib0/environment';\nimport React from 'react';\n/**\n * A regular expression to match path to notebooks, documents and consoles\n */\nconst URL_PATTERN = new RegExp('/(lab|tree|notebooks|edit|consoles)\\\\/?');\n/**\n * The JupyterLab document manager plugin id.\n */\nconst JUPYTERLAB_DOCMANAGER_PLUGIN_ID = '@jupyterlab/docmanager-extension:plugin';\n/**\n * The command IDs used by the application extension.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.about = 'application:about';\n    CommandIDs.docmanagerDownload = 'docmanager:download';\n    CommandIDs.filebrowserDownload = 'filebrowser:download';\n    CommandIDs.copyShareableLink = 'filebrowser:share-main';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the translation bundle for internationalized strings.\n */\nconst I18N_BUNDLE = 'jupyterlite';\n/**\n * Add a command to show an About dialog.\n */\nconst about = {\n    id: '@jupyterlite/application-extension:about',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, translator, palette, menu) => {\n        const { commands } = app;\n        const trans = translator.load(I18N_BUNDLE);\n        const category = trans.__('Help');\n        commands.addCommand(CommandIDs.about, {\n            label: trans.__('About %1', app.name),\n            execute: () => {\n                const versionNumber = trans.__('Version %1', app.version);\n                const versionInfo = (React.createElement(\"span\", { className: \"jp-About-version-info\" },\n                    React.createElement(\"span\", { className: \"jp-About-version\" }, versionNumber)));\n                const title = (React.createElement(\"span\", { className: \"jp-About-header\" },\n                    React.createElement(\"div\", { className: \"jp-About-header-info\" },\n                        React.createElement(liteWordmark.react, { height: \"auto\", width: \"196px\" }),\n                        versionInfo)));\n                // Create the body of the about dialog\n                const jupyterliteURL = 'https://github.com/jupyterlite/jupyterlite';\n                const contributorsURL = 'https://github.com/jupyterlite/jupyterlite/graphs/contributors';\n                const externalLinks = (React.createElement(\"span\", { className: \"jp-About-externalLinks\" },\n                    React.createElement(\"a\", { href: contributorsURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('CONTRIBUTOR LIST')),\n                    React.createElement(\"a\", { href: jupyterliteURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('JUPYTERLITE ON GITHUB'))));\n                const copyright = (React.createElement(\"span\", { className: \"jp-About-copyright\" }, trans.__('© 2021-2022 JupyterLite Contributors')));\n                const body = (React.createElement(\"div\", { className: \"jp-About-body\" },\n                    externalLinks,\n                    copyright));\n                return showDialog({\n                    title,\n                    body,\n                    buttons: [\n                        Dialog.createButton({\n                            label: trans.__('Dismiss'),\n                            className: 'jp-About-button jp-mod-reject jp-mod-styled',\n                        }),\n                    ],\n                });\n            },\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.about, category });\n        }\n        if (menu) {\n            menu.helpMenu.addGroup([{ command: CommandIDs.about }], 0);\n        }\n    },\n};\n/**\n * A plugin providing download commands in the file menu and command palette.\n */\nconst downloadPlugin = {\n    id: '@jupyterlite/application-extension:download',\n    autoStart: true,\n    requires: [ITranslator, IDocumentManager],\n    optional: [ICommandPalette, IFileBrowserFactory],\n    activate: (app, translator, docManager, palette, factory) => {\n        const trans = translator.load(I18N_BUNDLE);\n        const { commands, serviceManager, shell } = app;\n        const { contents } = serviceManager;\n        const isEnabled = () => {\n            const { currentWidget } = shell;\n            return !!(currentWidget && docManager.contextForWidget(currentWidget));\n        };\n        const downloadContent = async (contentPath, fileName) => {\n            var _a, _b, _c;\n            const model = await contents.get(contentPath, { content: true });\n            const element = document.createElement('a');\n            if (model.type === 'notebook' || model.format === 'json') {\n                const mime = (_a = model.mimetype) !== null && _a !== void 0 ? _a : 'text/json';\n                const content = JSON.stringify(model.content, null, 2);\n                element.href = `data:${mime};charset=utf-8,${encodeURIComponent(content)}`;\n            }\n            else if (model.type === 'file') {\n                if (model.format === 'base64') {\n                    const mime = (_b = model.mimetype) !== null && _b !== void 0 ? _b : 'application/octet-stream';\n                    element.href = `data:${mime};base64,${model.content}`;\n                }\n                else {\n                    const mime = (_c = model.mimetype) !== null && _c !== void 0 ? _c : 'text/plain';\n                    element.href = `data:${mime};charset=utf-8,${encodeURIComponent(model.content)}`;\n                }\n            }\n            else {\n                throw new Error(`Content whose type is \"${model.type}\" cannot be downloaded`);\n            }\n            element.download = fileName;\n            document.body.appendChild(element);\n            element.click();\n            document.body.removeChild(element);\n        };\n        commands.addCommand(CommandIDs.docmanagerDownload, {\n            label: trans.__('Download'),\n            caption: trans.__('Download the file to your computer'),\n            isEnabled,\n            execute: async () => {\n                // Checks that shell.currentWidget is valid:\n                const current = shell.currentWidget;\n                if (!isEnabled() || !current) {\n                    return;\n                }\n                const context = docManager.contextForWidget(current);\n                if (!context) {\n                    return showDialog({\n                        title: trans.__('Cannot Download'),\n                        body: trans.__('No context found for current widget!'),\n                        buttons: [Dialog.okButton({ label: trans.__('OK') })],\n                    });\n                }\n                await context.save();\n                await downloadContent(context.path, context.path);\n            },\n        });\n        const category = trans.__('File Operations');\n        if (palette) {\n            palette.addItem({ command: CommandIDs.docmanagerDownload, category });\n        }\n        if (factory) {\n            const { tracker } = factory;\n            commands.addCommand(CommandIDs.filebrowserDownload, {\n                execute: async () => {\n                    const widget = tracker.currentWidget;\n                    if (!widget) {\n                        return;\n                    }\n                    const selected = Array.from(widget.selectedItems());\n                    selected.forEach(async (item) => {\n                        if (item.type !== 'directory') {\n                            await downloadContent(item.path, item.name);\n                        }\n                    });\n                },\n                icon: downloadIcon.bindprops({ stylesheet: 'menuItem' }),\n                label: trans.__('Download'),\n            });\n        }\n    },\n};\n/**\n * The main application icon.\n */\nconst liteLogo = {\n    id: '@jupyterlite/application-extension:logo',\n    // marking as optional to not throw errors in Notebook\n    optional: [ILabShell],\n    autoStart: true,\n    activate: (app, labShell) => {\n        if (!labShell) {\n            return;\n        }\n        const logo = new Widget();\n        liteIcon.element({\n            container: logo.node,\n            elementPosition: 'center',\n            margin: '2px 2px 2px 8px',\n            height: 'auto',\n            width: '16px',\n        });\n        logo.id = 'jp-MainLogo';\n        labShell.add(logo, 'top', { rank: 0 });\n    },\n};\n/**\n * A plugin to trigger a refresh of the commands when the shell layout changes.\n */\nconst notifyCommands = {\n    id: '@jupyterlite/application-extension:notify-commands',\n    autoStart: true,\n    optional: [ILabShell],\n    activate: (app, labShell) => {\n        if (labShell) {\n            labShell.layoutModified.connect(() => {\n                app.commands.notifyCommandChanged();\n            });\n        }\n    },\n};\n/**\n * A custom opener plugin to pass the path to documents as\n * query string parameters.\n */\nconst opener = {\n    id: '@jupyterlite/application-extension:opener',\n    autoStart: true,\n    requires: [IRouter, IDocumentManager],\n    optional: [ILabShell, ISettingRegistry],\n    activate: (app, router, docManager, labShell, settingRegistry) => {\n        const { commands, docRegistry } = app;\n        const command = 'router:tree';\n        commands.addCommand(command, {\n            execute: (args) => {\n                var _a;\n                const parsed = args;\n                // use request to do the matching\n                const { request, search } = parsed;\n                const matches = (_a = request.match(URL_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                if (!matches) {\n                    return;\n                }\n                const urlParams = new URLSearchParams(search);\n                const paths = urlParams.getAll('path');\n                if (paths.length === 0) {\n                    return;\n                }\n                const files = paths.map((path) => decodeURIComponent(path));\n                app.started.then(async () => {\n                    var _a;\n                    const page = PageConfig.getOption('notebookPage');\n                    const [file] = files;\n                    if (page === 'tree') {\n                        let appUrl = '/edit';\n                        // check if the file is a notebook\n                        const defaultFactory = docRegistry.defaultWidgetFactory(file);\n                        if (defaultFactory.name === 'Notebook') {\n                            appUrl = '/notebooks';\n                        }\n                        const baseUrl = PageConfig.getBaseUrl();\n                        const url = new URL(URLExt.join(baseUrl, appUrl, 'index.html'));\n                        url.searchParams.append('path', file);\n                        // redirect to the proper page\n                        window.location.href = url.toString();\n                        return;\n                    }\n                    else if (page === 'consoles') {\n                        commands.execute('console:create', { path: file });\n                        return;\n                    }\n                    else if (page === 'notebooks' || page === 'edit') {\n                        let defaultFactory = docRegistry.defaultWidgetFactory(file).name;\n                        // Explicitly get the default viewers from the settings because\n                        // JupyterLab might not have had the time to load the settings yet (race condition)\n                        // Relevant code: https://github.com/jupyterlab/jupyterlab/blob/d56ff811f39b3c10c6d8b6eb27a94624b753eb53/packages/docmanager-extension/src/index.tsx#L265-L293\n                        if (settingRegistry) {\n                            const settings = await settingRegistry.load(JUPYTERLAB_DOCMANAGER_PLUGIN_ID);\n                            const defaultViewers = settings.get('defaultViewers').composite;\n                            // get the file types for the path\n                            const types = docRegistry.getFileTypesForPath(file);\n                            // for each file type, check if there is a default viewer and if it\n                            // is available in the docRegistry. If it is the case, use it as the\n                            // default factory\n                            types.forEach((ft) => {\n                                if (defaultViewers[ft.name] !== undefined &&\n                                    docRegistry.getWidgetFactory(defaultViewers[ft.name])) {\n                                    defaultFactory = defaultViewers[ft.name];\n                                }\n                            });\n                        }\n                        const factory = (_a = urlParams.get('factory')) !== null && _a !== void 0 ? _a : defaultFactory;\n                        docManager.open(file, factory, undefined, {\n                            ref: '_noref',\n                        });\n                    }\n                    else {\n                        // open all files in the lab interface\n                        files.forEach((file) => docManager.open(file));\n                        const url = new URL(URLExt.join(PageConfig.getBaseUrl(), request));\n                        // only remove the path (to keep extra parameters like the RTC room)\n                        url.searchParams.delete('path');\n                        const { pathname, search } = url;\n                        router.navigate(`${pathname}${search}`, { skipRouting: true });\n                        if (labShell) {\n                            // open the folder where the files are located on startup\n                            const showInBrowser = () => {\n                                commands.execute('docmanager:show-in-file-browser');\n                                labShell.currentChanged.disconnect(showInBrowser);\n                            };\n                            labShell.currentChanged.connect(showInBrowser);\n                        }\n                    }\n                });\n            },\n        });\n        router.register({ command, pattern: URL_PATTERN });\n    },\n};\n/**\n * A plugin to patch the session context path so it includes the drive name.\n * TODO: investigate a better way for the kernel to be aware of the drive it is\n * associated with.\n */\nconst sessionContextPatch = {\n    id: '@jupyterlite/application-extension:session-context-patch',\n    autoStart: true,\n    requires: [IDocumentManager, IDocumentWidgetOpener],\n    activate: (app, docManager, widgetOpener) => {\n        const contents = app.serviceManager.contents;\n        widgetOpener.opened.connect((_, widget) => {\n            var _a;\n            const context = docManager.contextForWidget(widget);\n            const driveName = contents.driveName((_a = context === null || context === void 0 ? void 0 : context.path) !== null && _a !== void 0 ? _a : '');\n            if (driveName === '') {\n                // do nothing if this is the default drive\n                return;\n            }\n            const sessionContext = widget.context.sessionContext;\n            // Path the session context to include the drive name\n            // In JupyterLab 3 the path used to contain the drive name as prefix, which was\n            // also part of the /api/sessions requests. Which allowed for knowing the drive associated\n            // with a kernel.\n            // This was changed in JupyterLab 4 in https://github.com/jupyterlab/jupyterlab/pull/14519\n            // and is needed for the kernel to be aware of the drive it is associated with.\n            // This is a temporary fix until a better solution is found upstream in JupyterLab ideally.\n            // This also avoid having to patch the downstream kernels (e.g. xeus-python and pyodide)\n            sessionContext['_name'] = context === null || context === void 0 ? void 0 : context.path;\n            sessionContext['_path'] = context === null || context === void 0 ? void 0 : context.path;\n        });\n    },\n};\n/**\n * A custom plugin to share a link to a file.\n *\n * This url can be used to open a particular file in JupyterLab.\n * It also adds the corresponding room if RTC is enabled.\n *\n */\nconst shareFile = {\n    id: '@jupyterlite/application-extension:share-file',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const trans = translator.load(I18N_BUNDLE);\n        const { commands, docRegistry } = app;\n        const { tracker } = factory;\n        const roomName = getParam('--room', '').trim();\n        const collaborative = PageConfig.getOption('collaborative') === 'true' && roomName;\n        commands.addCommand(CommandIDs.copyShareableLink, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                const baseUrl = PageConfig.getBaseUrl();\n                let appUrl = PageConfig.getOption('appUrl');\n                const models = Array.from(filter(widget.selectedItems(), (item) => item.type !== 'directory'));\n                if (!models.length) {\n                    return;\n                }\n                // In the notebook application:\n                // - only copy the first element\n                // - open /notebooks if it's a notebook, /edit otherwise\n                if (appUrl === '/tree') {\n                    const [model] = models;\n                    const defaultFactory = docRegistry.defaultWidgetFactory(model.path);\n                    if (defaultFactory.name === 'Notebook') {\n                        appUrl = '/notebooks';\n                    }\n                    else {\n                        appUrl = '/edit';\n                    }\n                }\n                const url = new URL(URLExt.join(baseUrl, appUrl, 'index.html'));\n                models.forEach((model) => {\n                    url.searchParams.append('path', model.path);\n                });\n                if (collaborative) {\n                    url.searchParams.append('room', roomName);\n                }\n                Clipboard.copyToSystem(url.href);\n            },\n            isVisible: () => !!tracker.currentWidget &&\n                Array.from(tracker.currentWidget.selectedItems()).length >= 1,\n            icon: linkIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy Shareable Link'),\n        });\n    },\n};\nconst plugins = [\n    about,\n    downloadPlugin,\n    liteLogo,\n    notifyCommands,\n    opener,\n    sessionContextPatch,\n    shareFile,\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["URL_PATTERN","RegExp","CommandIDs","about","docmanagerDownload","filebrowserDownload","copyShareableLink","I18N_BUNDLE","id","autoStart","requires","ITranslator","optional","ICommandPalette","IMainMenu","activate","app","translator","palette","menu","commands","trans","load","category","__","addCommand","label","name","execute","versionNumber","version","versionInfo","className","title","liteWordmark","react","height","width","externalLinks","href","target","rel","copyright","body","showDialog","buttons","Dialog","createButton","addItem","command","helpMenu","addGroup","IDocumentManager","IFileBrowserFactory","docManager","factory","serviceManager","shell","contents","isEnabled","currentWidget","contextForWidget","downloadContent","async","contentPath","fileName","_a","_b","_c","model","get","content","element","document","createElement","type","format","mime","mimetype","JSON","stringify","encodeURIComponent","Error","download","appendChild","click","removeChild","caption","current","context","okButton","save","path","tracker","widget","Array","from","selectedItems","forEach","item","icon","downloadIcon","bindprops","stylesheet","ILabShell","labShell","logo","Widget","liteIcon","container","node","elementPosition","margin","add","rank","layoutModified","connect","notifyCommandChanged","IRouter","ISettingRegistry","router","settingRegistry","docRegistry","args","parsed","request","search","match","urlParams","URLSearchParams","paths","getAll","length","files","map","decodeURIComponent","started","then","page","PageConfig","getOption","file","appUrl","defaultWidgetFactory","baseUrl","getBaseUrl","url","URL","URLExt","join","searchParams","append","window","location","toString","defaultFactory","defaultViewers","composite","getFileTypesForPath","ft","undefined","getWidgetFactory","open","ref","delete","pathname","navigate","skipRouting","showInBrowser","currentChanged","disconnect","register","pattern","IDocumentWidgetOpener","widgetOpener","opened","_","driveName","sessionContext","roomName","trim","collaborative","models","filter","Clipboard","copyToSystem","isVisible","linkIcon"],"sourceRoot":""}