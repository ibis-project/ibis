{"version":3,"file":"2343.3cf0fe8.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@codemirror/legacy-modes/mode/dockerfile.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@codemirror/legacy-modes/mode/simple-mode.js"],"sourcesContent":["import {simpleMode} from \"./simple-mode.js\"\n\nvar from = \"from\";\nvar fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n\nvar shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\nvar shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n\nvar expose = \"expose\";\nvar exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n\nvar others = [\n  \"arg\", \"from\", \"maintainer\", \"label\", \"env\",\n  \"add\", \"copy\", \"volume\", \"user\",\n  \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"\n];\n\n// Collect all Dockerfile directives\nvar instructions = [from, expose].concat(shells).concat(others),\n    instructionRegex = \"(\" + instructions.join('|') + \")\",\n    instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n    instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n\nexport const dockerFile = simpleMode({\n  start: [\n    // Block comment: This is a line starting with a comment\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: fromRegex,\n      token: [null, \"keyword\"],\n      sol: true,\n      next: \"from\"\n    },\n    // Highlight an instruction without any arguments (for convenience)\n    {\n      regex: instructionOnlyLine,\n      token: [null, \"keyword\", null, \"error\"],\n      sol: true\n    },\n    {\n      regex: shellsAsArrayRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"array\"\n    },\n    {\n      regex: exposeRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"expose\"\n    },\n    // Highlight an instruction followed by arguments\n    {\n      regex: instructionWithArguments,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"arguments\"\n    },\n    {\n      regex: /./,\n      token: null\n    }\n  ],\n  from: [\n    {\n      regex: /\\s*$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      // Line comment without instruction arguments is an error\n      regex: /(\\s*)(#.*)$/,\n      token: [null, \"error\"],\n      next: \"start\"\n    },\n    {\n      regex: /(\\s*\\S+\\s+)(as)/i,\n      token: [null, \"keyword\"],\n      next: \"start\"\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  single: [\n    {\n      regex: /(?:[^\\\\']|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  double: [\n    {\n      regex: /(?:[^\\\\\"]|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  array: [\n    {\n      regex: /\\]/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }\n  ],\n  expose: [\n    {\n      regex: /\\d+$/,\n      token: \"number\",\n      next: \"start\"\n    },\n    {\n      regex: /[^\\d]+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\\d+/,\n      token: \"number\"\n    },\n    {\n      regex: /[^\\d]+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  arguments: [\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      push: \"double\"\n    },\n    {\n      regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      push: \"single\"\n    },\n    {\n      regex: /[^#\"']+[\\\\`]$/,\n      token: null\n    },\n    {\n      regex: /[^#\"']+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /[^#\"']+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n});\n\n","export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;\n  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n    var list = states_[state] = [], orig = states[state];\n    for (var i = 0; i < orig.length; i++) {\n      var data = orig[i];\n      list.push(new Rule(data, states));\n      if (data.indent || data.dedent) hasIndentation = true;\n    }\n  }\n  return {\n    name: meta.name,\n    startState: function() {\n      return {state: \"start\", pending: null, indent: hasIndentation ? [] : null};\n    },\n    copyState: function(state) {\n      var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};\n      if (state.stack)\n        s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    languageData: meta\n  }\n};\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name))\n    throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n  for (var i = 0; i < val.length; i++)\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function(stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent)\n          state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent)\n          state.indent.pop();\n        var token = rule.token\n        if (token && token.apply) token = token(matches)\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n          for (var j = 2; j < matches.length; j++)\n            if (matches[j])\n              state.pending.push({text: matches[j], token: rule.token[j - 1]});\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function(state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)\n      return null\n\n    var pos = state.indent.length - 1, rules = states[state.state];\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n      break;\n    }\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}\n"],"names":["from","fromRegex","RegExp","shells","shellsAsArrayRegex","join","expose","exposeRegex","instructionRegex","concat","instructionOnlyLine","instructionWithArguments","dockerFile","start","regex","sol","token","next","single","pop","double","array","arguments","push","languageData","commentTokens","line","simpleMode","states","ensureState","states_","meta","hasIndentation","state","hasOwnProperty","list","orig","i","length","data","Rule","indent","dedent","name","startState","pending","copyState","s","slice","stack","tokenFunction","indentFunction","Error","this","val","caret","flags","ignoreCase","source","String","toRegex","apply","replace","result","asToken","stream","pend","shift","pos","text","curState","rule","matches","match","indentation","indentUnit","j","backUp","textAfter","dontIndentStates","doneIndentState","indexOf","rules","scan","dedentIfLineStart","m","exec"],"sourceRoot":""}