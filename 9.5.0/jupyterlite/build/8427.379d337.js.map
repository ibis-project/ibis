{"version":3,"file":"8427.379d337.js","mappings":"gSAeA,MAAMA,EAAoB,CACtBC,GAAI,4CACJC,WAAW,EACXC,SAAU,EAAAC,aACVC,SAAWC,IACA,CAAEC,YAAW,OAMtBC,EAA0B,CAC5BP,GAAI,2DACJC,WAAW,EACXO,SAAU,CAAC,EAAAL,cACXC,SAAUK,MAAOJ,EAAKK,KACdC,KAAKC,MAAM,EAAAC,WAAWC,UAAU,wBAA0B,WAC1DC,QAAQC,KAAK,iFACP,IAAAC,qBAAoBP,EAAOJ,aACrC,GAOFY,EAA4B,CAC9BlB,GAAI,sDACJC,WAAW,EACXG,SAAWC,IACP,MAAMc,EAAW,CAAC,EAClBd,EAAIe,OAAOC,IAAI,oBAAoBZ,MAAOa,EAAKtB,KAC3C,IAAIuB,EACJ,MAAMC,EAAkC,QAAvBD,EAAKJ,EAASnB,UAAwB,IAAPuB,EAAgBA,EAAKZ,KAAKc,UAAU,CAAC,GACrF,OAAO,IAAIC,SAASF,EAAQ,IAEhCnB,EAAIe,OAAOO,MAAM,oBAAoBlB,MAAOa,EAAKtB,KAC7C,MAAM4B,EAAUN,EAAIO,KAEpB,OADAV,EAASnB,GAAM4B,EACR,IAAIF,SAASE,EAAQ,GAC9B,GAMJE,EAAiB,CACnB9B,GAAI,yCACJQ,SAAU,CAAC,EAAAL,cACXF,WAAW,EACXC,SAAU,EAAA6B,UACV3B,SAAU,CAACC,EAAKK,KACZ,MAAMsB,EAAc,EAAAnB,WAAWC,UAAU,uBACnCmB,EAAiBtB,KAAKC,MAAM,EAAAC,WAAWC,UAAU,2BAA6B,SAC9E,YAAER,GAAgBI,EAClBwB,EAAW,IAAI,EAAAC,SAAS,CAC1BH,cACAC,iBACA3B,gBAGJ,OADAD,EAAI+B,QAAQC,MAAK,IAAMH,EAASI,aAAaC,MAAMxB,QAAQC,QACpDkB,CAAQ,GAMjBM,EAAuB,CACzBxC,GAAI,gDACJC,WAAW,EACXO,SAAU,CAAC,EAAAuB,WACX3B,SAAU,CAACC,EAAK6B,KAEZ7B,EAAIe,OAAOC,IAAI,kCAAkCZ,MAAOa,EAAKmB,KACzD,MAAMC,QAAYR,EAASS,gBAAgBF,GAC3C,OAAO,IAAIf,SAASf,KAAKc,UAAUiB,GAAK,IAG5CrC,EAAIe,OAAOwB,KAAK,uCAAuCnC,MAAOa,EAAKmB,EAAUI,KACzE,MAAMH,QAAYR,EAASY,kBAAkBL,EAAUI,GACvD,OAAO,IAAInB,SAASf,KAAKc,UAAUiB,GAAM,CAAEK,OAAQ,KAAM,IAG7D1C,EAAIe,OAAOwB,KAAK,kCAAkCnC,MAAOa,EAAKmB,KAC1D,MAAMC,QAAYR,EAASc,iBAAiBP,GAC5C,OAAO,IAAIf,SAASf,KAAKc,UAAUiB,GAAM,CAAEK,OAAQ,KAAM,IAG7D1C,EAAIe,OAAO6B,OAAO,uCAAuCxC,MAAOa,EAAKmB,EAAUI,KAC3E,MAAMH,QAAYR,EAASgB,iBAAiBT,EAAUI,GACtD,OAAO,IAAInB,SAASf,KAAKc,UAAUiB,GAAM,CAAEK,OAAQ,KAAM,IAG7D1C,EAAIe,OAAOC,IAAI,qBAAqBZ,MAAOa,EAAKmB,KAC5C,IAAIlB,EACJ,MAAM4B,EAAU,CACZC,QAAgF,OAAjD,QAApB7B,EAAKD,EAAI+B,aAA0B,IAAP9B,OAAgB,EAASA,EAAG6B,UAEjEE,QAAWpB,EAASb,IAAIoB,EAAUU,GACxC,OAAKG,EAGE,IAAI5B,SAASf,KAAKc,UAAU6B,IAFxB,IAAI5B,SAAS,KAAM,CAAEqB,OAAQ,KAED,IAG3C1C,EAAIe,OAAOwB,KAAK,qBAAqBnC,MAAOa,EAAKiC,KAC7C,MAAMJ,EAAU7B,EAAIO,KACd2B,EAAWL,aAAyC,EAASA,EAAQM,UAC3E,IAAIC,EAOJ,OALIA,EADAF,QACatB,EAASyB,KAAKH,EAAUD,SAGxBrB,EAAS0B,YAAYT,GAEjCO,EAGE,IAAIhC,SAASf,KAAKc,UAAUiC,GAAO,CAAEX,OAAQ,MAFzC,IAAIrB,SAAS,KAAM,CAAEqB,OAAQ,KAEkB,IAG9D1C,EAAIe,OAAOO,MAAM,qBAAqBlB,MAAOa,EAAKmB,KAC9C,IAAIlB,EAAIsC,EACR,MAAMC,EAAkF,QAAvED,EAAyB,QAAnBtC,EAAKD,EAAIO,YAAyB,IAAPN,OAAgB,EAASA,EAAGgC,YAAyB,IAAPM,EAAgBA,EAAK,GACrHpB,EAA2B,MAAhBA,EAAS,GAAaA,EAASsB,MAAM,GAAKtB,EACrD,MAAMa,QAAWpB,EAAS8B,OAAOvB,EAAUqB,GAC3C,OAAO,IAAIpC,SAASf,KAAKc,UAAU6B,GAAI,IAG3CjD,EAAIe,OAAO6C,IAAI,sBAAsBxD,MAAOa,EAAKmB,KAC7C,MAAMZ,EAAOP,EAAIO,KACXyB,QAAWpB,EAASgC,KAAKzB,EAAUZ,GACzC,OAAO,IAAIH,SAASf,KAAKc,UAAU6B,GAAI,IAG3CjD,EAAIe,OAAO6B,OAAO,sBAAsBxC,MAAOa,EAAKmB,WAC1CP,EAASe,OAAOR,GACf,IAAIf,SAAS,KAAM,CAAEqB,OAAQ,QACtC,GAMJoB,EAAsB,CACxBnE,GAAI,+CACJC,WAAW,EACXC,SAAU,EAAAkE,sBACVhE,SAAWC,GACA,IAAI,EAAAgE,sBAuUnB,EAvBgB,CACZnD,EACAY,EACAU,EA7S+B,CAC/BxC,GAAI,sDACJC,WAAW,EACXqE,SAAU,CAAC,EAAAF,uBACXlE,SAAU,EAAAqE,yBACVnE,SAAU,CAACC,EAAKmE,KACZ,MAAM,SAAEtC,GAAa7B,EAAIoE,eACnBC,EAAc,IAAI,EAAAC,wBAAwB,CAAEzC,aAC5C0C,EAAO,6CACb,SAASC,EAAUC,EAAKC,GAChBA,GACAhE,QAAQC,KAAK+D,GAEbD,GACA/D,QAAQC,KAAK8D,GAEbC,GAAOD,EACP/D,QAAQC,KAAK,GAAG4D,wBAIhB7D,QAAQiE,KAAK,GAAGJ,mBAExB,CAcA,OAbKJ,EAIDA,EAAiCS,MAC5B5C,MAAK,KACNqC,EAAYQ,SACZL,GAAW,IAEVtC,OAAOwC,IACRF,EAAU,uDAAwDE,EAAI,IAT1EF,EAAU,2CAYPH,CAAW,GAMJ,CAClB1E,GAAI,wCACJC,WAAW,EACXC,SAAU,EAAAiF,SACV3E,SAAU,CAAC,EAAA4E,cACXhF,SAAU,CAACC,EAAKgF,IACL,IAAI,EAAAC,QAAQ,CAAED,iBAMD,CACxBrF,GAAI,+CACJC,WAAW,EACXO,SAAU,CAAC,EAAA2E,UACX/E,SAAU,CAACC,EAAKkF,KAEZlF,EAAIe,OAAOC,IAAI,gBAAgBZ,MAAOa,IAClC,MAAMoB,QAAY6C,EAAQC,OAC1B,OAAO,IAAI9D,SAASf,KAAKc,UAAUiB,GAAK,IAG5CrC,EAAIe,OAAOwB,KAAK,6BAA6BnC,MAAOa,EAAKmE,KACrD,MAAM/C,QAAY6C,EAAQG,QAAQD,GAClC,OAAO,IAAI/D,SAASf,KAAKc,UAAUiB,GAAK,IAG5CrC,EAAIe,OAAO6B,OAAO,qBAAqBxC,MAAOa,EAAKmE,KAC/C,MAAM/C,QAAY6C,EAAQI,SAASF,GACnC,OAAO,IAAI/D,SAASf,KAAKc,UAAUiB,GAAM,CAAEK,OAAQ,KAAM,GAC3D,GAMe,CACrB/C,GAAI,2CACJC,WAAW,EACXC,SAAU,EAAAkF,aACVhF,SAAWC,GACA,IAAI,EAAAuF,aAMY,CAC3B5F,GAAI,kDACJC,WAAW,EACXO,SAAU,CAAC,EAAA4E,cACXhF,SAAU,CAACC,EAAKgF,KACZhF,EAAIe,OAAOC,IAAI,oBAAoBZ,MAAOa,IACtC,MAAM,MAAEuE,GAAUR,EAClB,IAAKQ,EACD,OAAO,IAAInE,SAAS,MAGxB,MAAMoE,EAAiB,CAAC,EAClBC,EAAWF,EAAMR,YACvBW,OAAOC,KAAKF,GAAUG,SAASC,IAC3B,MAAMC,EAAOL,EAASI,IAChB,UAAEE,GAAcD,QAAmCA,EAAO,CAAC,EACjEN,EAAeK,GAAQ,CACnBA,OACAC,OACAC,YACH,IAEL,MAAM3D,EAAM,CACR4D,QAAST,EAAMS,QACfjB,YAAaS,GAEjB,OAAO,IAAIpE,SAASf,KAAKc,UAAUiB,GAAK,GAC1C,GAMa,CACnB1C,GAAI,yCACJC,WAAW,EACXC,SAAU,EAAAqG,UACVnG,SAAWC,GACA,IAAI,EAAAmG,UAMU,CACzBxG,GAAI,gDACJC,WAAW,EACXO,SAAU,CAAC,EAAA+F,WACX,QAAAnG,CAASC,EAAKoG,GACVpG,EAAIe,OAAOC,IAAI,iBAAiBZ,MAAOa,IACnC,MAAMoB,QAAY+D,EAASpF,MAC3B,OAAO,IAAIK,SAASf,KAAKc,UAAUiB,GAAK,GAEhD,GAqKAnC,EACAR,EAhKoB,CACpBC,GAAI,2CACJC,WAAW,EACXG,SAAWC,IACPA,EAAIe,OAAOC,IAAI,eAAeZ,MAAOa,GAC1B,IAAII,SAASf,KAAKc,UAAU,CAAEiF,QAAS,EAAGC,SAAU,CAAC,EAAGd,MAAO,CAAC,MACzE,GAOoB,CAC1B7F,GAAI,iDACJC,WAAW,EACXG,SAAWC,IACPA,EAAIe,OAAOC,IAAI,kBAAkBZ,MAAOa,GAC7B,IAAII,SAASf,KAAKc,UAAU,CAAC,KACtC,GAgJN0C,EA1ImB,CACnBnE,GAAI,yCACJC,WAAW,EACXC,SAAU,EAAA0G,UACVpG,SAAU,CAAC,EAAA2E,UACX/E,SAAU,CAACC,EAAKkF,IACL,IAAI,EAAAsB,SAAS,CAAEtB,aAMD,CACzBvF,GAAI,gDACJC,WAAW,EACXO,SAAU,CAAC,EAAAoG,WACXxG,SAAU,CAACC,EAAKsG,KAEZtG,EAAIe,OAAOC,IAAI,sBAAsBZ,MAAOa,EAAKtB,KAC7C,MAAM8G,QAAgBH,EAAStF,IAAIrB,GACnC,OAAO,IAAI0B,SAASf,KAAKc,UAAUqF,GAAU,CAAE/D,OAAQ,KAAM,IAGjE1C,EAAIe,OAAOC,IAAI,iBAAiBZ,MAAOa,IACnC,MAAMkE,QAAamB,EAASnB,OAC5B,OAAO,IAAI9D,SAASf,KAAKc,UAAU+D,GAAO,CAAEzC,OAAQ,KAAM,IAG9D1C,EAAIe,OAAOO,MAAM,qBAAqBlB,MAAOa,EAAKtB,KAC9C,MAAMmD,EAAU7B,EAAIO,KACdiF,QAAgBH,EAAShF,MAAMwB,GACrC,OAAO,IAAIzB,SAASf,KAAKc,UAAUqF,GAAU,CAAE/D,OAAQ,KAAM,IAGjE1C,EAAIe,OAAO6B,OAAO,sBAAsBxC,MAAOa,EAAKtB,WAC1C2G,EAAShB,SAAS3F,GACjB,IAAI0B,SAAS,KAAM,CAAEqB,OAAQ,SAGxC1C,EAAIe,OAAOwB,KAAK,iBAAiBnC,MAAOa,IACpC,MAAM6B,EAAU7B,EAAIO,KACdiF,QAAgBH,EAASI,SAAS5D,GACxC,OAAO,IAAIzB,SAASf,KAAKc,UAAUqF,GAAU,CAAE/D,OAAQ,KAAM,GAC/D,GAMa,CACnB/C,GAAI,yCACJC,WAAW,EACXO,SAAU,CAAC,EAAAL,cACXD,SAAU,EAAA8G,UACV5G,SAAU,CAACC,EAAKK,KACZ,MAAMsB,EAAc,EAAAnB,WAAWC,UAAU,uBACnCmB,EAAiBtB,KAAKC,MAAM,EAAAC,WAAWC,UAAU,2BAA6B,SAC9E,YAAER,GAAgBI,EAClBuG,EAAW,IAAI,EAAAC,SAAS,CAAElF,cAAaC,iBAAgB3B,gBAE7D,OADAD,EAAI+B,QAAQC,MAAK,IAAM4E,EAAS3E,aAAaC,MAAMxB,QAAQC,QACpDiG,CAAQ,GAMM,CACzBjH,GAAI,gDACJC,WAAW,EACXO,SAAU,CAAC,EAAAwG,WACX5G,SAAU,CAACC,EAAK4G,KAGZ,MAAME,EAAgB,qDACtB9G,EAAIe,OAAOC,IAAI8F,GAAe1G,MAAOa,EAAK8F,KACtC,MAAMC,QAAgBJ,EAAS5F,IAAI+F,GACnC,OAAO,IAAI1F,SAASf,KAAKc,UAAU4F,GAAS,IAEhDhH,EAAIe,OAAO6C,IAAIkD,GAAe1G,MAAOa,EAAK8F,KACtC,MAAMvF,EAAOP,EAAIO,MACX,IAAEyF,GAAQzF,EAEhB,aADMoF,EAAS/C,KAAKkD,EAAUE,GACvB,IAAI5F,SAAS,KAAM,CAAEqB,OAAQ,KAAM,IAE9C1C,EAAIe,OAAOC,IAAI,iBAAiBZ,MAAOa,IACnC,MAAMiG,QAAgBN,EAASO,SAC/B,OAAO,IAAI9F,SAASf,KAAKc,UAAU8F,GAAS,GAC9C,GAMgB,CACtBvH,GAAI,4CACJC,WAAW,EACXC,SAAU,EAAAuH,aACVrH,SAAWC,IACP,MAAMqH,EAAc,IAAI,EAAAC,YAQxB,OAPAtH,EAAIe,OAAOC,IAAI,2BAA2BZ,MAAOa,EAAKsG,KACnC,YAAXA,IACAA,EAAS,MAEb,MAAMC,QAAaH,EAAYrG,IAAIuG,GAAU,OAC7C,OAAO,IAAIlG,SAASf,KAAKc,UAAUoG,GAAM,IAEtCH,CAAW,GAMM,CAC5B1H,GAAI,mDACJC,WAAW,EACXO,SAAU,CAAC,EAAAiH,cACXrH,SAAU,CAACC,EAAKqH,KACZrH,EAAIe,OAAOC,IAAI,2BAA2BZ,MAAOa,EAAKsG,KAClD,MAAMC,QAAaH,EAAYrG,IAAIuG,GAAU,OAC7C,OAAO,IAAIlG,SAASf,KAAKc,UAAUoG,GAAM,GAC3C,G","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { BroadcastChannelWrapper, Contents, IContents, IBroadcastChannelWrapper, } from '@jupyterlite/contents';\nimport { IKernels, Kernels, IKernelSpecs, KernelSpecs } from '@jupyterlite/kernel';\nimport { ILicenses, Licenses } from '@jupyterlite/licenses';\nimport { IServiceWorkerManager, ServiceWorkerManager, } from '@jupyterlite/server';\nimport { ISessions, Sessions } from '@jupyterlite/session';\nimport { ISettings, Settings } from '@jupyterlite/settings';\nimport { ITranslation, Translation } from '@jupyterlite/translation';\nimport { ILocalForage, ensureMemoryStorage } from '@jupyterlite/localforage';\nimport localforage from 'localforage';\n/**\n * The localforage plugin\n */\nconst localforagePlugin = {\n    id: '@jupyterlite/server-extension:localforage',\n    autoStart: true,\n    provides: ILocalForage,\n    activate: (app) => {\n        return { localforage };\n    },\n};\n/**\n * The volatile localforage memory plugin\n */\nconst localforageMemoryPlugin = {\n    id: '@jupyterlite/server-extension:localforage-memory-storage',\n    autoStart: true,\n    requires: [ILocalForage],\n    activate: async (app, forage) => {\n        if (JSON.parse(PageConfig.getOption('enableMemoryStorage') || 'false')) {\n            console.warn('Memory storage fallback enabled: contents and settings may not be saved');\n            await ensureMemoryStorage(forage.localforage);\n        }\n    },\n};\n/**\n * A plugin providing the routes for the config section.\n * TODO: implement logic to persist the config sections?\n */\nconst configSectionRoutesPlugin = {\n    id: '@jupyterlite/server-extension:config-section-routes',\n    autoStart: true,\n    activate: (app) => {\n        const sections = {};\n        app.router.get('/api/config/(.*)', async (req, id) => {\n            var _a;\n            const section = (_a = sections[id]) !== null && _a !== void 0 ? _a : JSON.stringify({});\n            return new Response(section);\n        });\n        app.router.patch('/api/config/(.*)', async (req, id) => {\n            const payload = req.body;\n            sections[id] = payload;\n            return new Response(payload);\n        });\n    },\n};\n/**\n * The contents service plugin.\n */\nconst contentsPlugin = {\n    id: '@jupyterlite/server-extension:contents',\n    requires: [ILocalForage],\n    autoStart: true,\n    provides: IContents,\n    activate: (app, forage) => {\n        const storageName = PageConfig.getOption('contentsStorageName');\n        const storageDrivers = JSON.parse(PageConfig.getOption('contentsStorageDrivers') || 'null');\n        const { localforage } = forage;\n        const contents = new Contents({\n            storageName,\n            storageDrivers,\n            localforage,\n        });\n        app.started.then(() => contents.initialize().catch(console.warn));\n        return contents;\n    },\n};\n/**\n * A plugin providing the routes for the contents service.\n */\nconst contentsRoutesPlugin = {\n    id: '@jupyterlite/server-extension:contents-routes',\n    autoStart: true,\n    requires: [IContents],\n    activate: (app, contents) => {\n        // GET /api/contents/{path}/checkpoints - Get a list of checkpoints for a file\n        app.router.get('/api/contents/(.+)/checkpoints', async (req, filename) => {\n            const res = await contents.listCheckpoints(filename);\n            return new Response(JSON.stringify(res));\n        });\n        // POST /api/contents/{path}/checkpoints/{checkpoint_id} - Restore a file to a particular checkpointed state\n        app.router.post('/api/contents/(.+)/checkpoints/(.*)', async (req, filename, checkpoint) => {\n            const res = await contents.restoreCheckpoint(filename, checkpoint);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n        // POST /api/contents/{path}/checkpoints - Create a new checkpoint for a file\n        app.router.post('/api/contents/(.+)/checkpoints', async (req, filename) => {\n            const res = await contents.createCheckpoint(filename);\n            return new Response(JSON.stringify(res), { status: 201 });\n        });\n        // DELETE /api/contents/{path}/checkpoints/{checkpoint_id} - Delete a checkpoint\n        app.router.delete('/api/contents/(.+)/checkpoints/(.*)', async (req, filename, checkpoint) => {\n            const res = await contents.deleteCheckpoint(filename, checkpoint);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n        // GET /api/contents/{path} - Get contents of file or directory\n        app.router.get('/api/contents(.*)', async (req, filename) => {\n            var _a;\n            const options = {\n                content: ((_a = req.query) === null || _a === void 0 ? void 0 : _a.content) === '1',\n            };\n            const nb = await contents.get(filename, options);\n            if (!nb) {\n                return new Response(null, { status: 404 });\n            }\n            return new Response(JSON.stringify(nb));\n        });\n        // POST /api/contents/{path} - Create a new file in the specified path\n        app.router.post('/api/contents(.*)', async (req, path) => {\n            const options = req.body;\n            const copyFrom = options === null || options === void 0 ? void 0 : options.copy_from;\n            let file;\n            if (copyFrom) {\n                file = await contents.copy(copyFrom, path);\n            }\n            else {\n                file = await contents.newUntitled(options);\n            }\n            if (!file) {\n                return new Response(null, { status: 400 });\n            }\n            return new Response(JSON.stringify(file), { status: 201 });\n        });\n        // PATCH /api/contents/{path} - Rename a file or directory without re-uploading content\n        app.router.patch('/api/contents(.*)', async (req, filename) => {\n            var _a, _b;\n            const newPath = (_b = (_a = req.body) === null || _a === void 0 ? void 0 : _a.path) !== null && _b !== void 0 ? _b : '';\n            filename = filename[0] === '/' ? filename.slice(1) : filename;\n            const nb = await contents.rename(filename, newPath);\n            return new Response(JSON.stringify(nb));\n        });\n        // PUT /api/contents/{path} - Save or upload a file\n        app.router.put('/api/contents/(.+)', async (req, filename) => {\n            const body = req.body;\n            const nb = await contents.save(filename, body);\n            return new Response(JSON.stringify(nb));\n        });\n        // DELETE /api/contents/{path} - Delete a file in the given path\n        app.router.delete('/api/contents/(.+)', async (req, filename) => {\n            await contents.delete(filename);\n            return new Response(null, { status: 204 });\n        });\n    },\n};\n/**\n * A plugin installing the service worker.\n */\nconst serviceWorkerPlugin = {\n    id: '@jupyterlite/server-extension:service-worker',\n    autoStart: true,\n    provides: IServiceWorkerManager,\n    activate: (app) => {\n        return new ServiceWorkerManager();\n    },\n};\n/**\n * A plugin for handling communication with the Emscpriten file system.\n */\nconst emscriptenFileSystemPlugin = {\n    id: '@jupyterlite/server-extension:emscripten-filesystem',\n    autoStart: true,\n    optional: [IServiceWorkerManager],\n    provides: IBroadcastChannelWrapper,\n    activate: (app, serviceWorkerRegistrationWrapper) => {\n        const { contents } = app.serviceManager;\n        const broadcaster = new BroadcastChannelWrapper({ contents });\n        const what = 'Kernel filesystem and JupyterLite contents';\n        function logStatus(msg, err) {\n            if (err) {\n                console.warn(err);\n            }\n            if (msg) {\n                console.warn(msg);\n            }\n            if (err || msg) {\n                console.warn(`${what} will NOT be synced`);\n            }\n            else {\n                // eslint-disable-next-line no-console\n                console.info(`${what} will be synced`);\n            }\n        }\n        if (!serviceWorkerRegistrationWrapper) {\n            logStatus('JupyterLite ServiceWorker not available');\n        }\n        else {\n            serviceWorkerRegistrationWrapper.ready\n                .then(() => {\n                broadcaster.enable();\n                logStatus();\n            })\n                .catch((err) => {\n                logStatus('JupyterLite ServiceWorker failed to become available', err);\n            });\n        }\n        return broadcaster;\n    },\n};\n/**\n * The kernels service plugin.\n */\nconst kernelsPlugin = {\n    id: '@jupyterlite/server-extension:kernels',\n    autoStart: true,\n    provides: IKernels,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        return new Kernels({ kernelspecs });\n    },\n};\n/**\n * A plugin providing the routes for the kernels service\n */\nconst kernelsRoutesPlugin = {\n    id: '@jupyterlite/server-extension:kernels-routes',\n    autoStart: true,\n    requires: [IKernels],\n    activate: (app, kernels) => {\n        // GET /api/kernels - List the running kernels\n        app.router.get('/api/kernels', async (req) => {\n            const res = await kernels.list();\n            return new Response(JSON.stringify(res));\n        });\n        // POST /api/kernels/{kernel_id} - Restart a kernel\n        app.router.post('/api/kernels/(.*)/restart', async (req, kernelId) => {\n            const res = await kernels.restart(kernelId);\n            return new Response(JSON.stringify(res));\n        });\n        // DELETE /api/kernels/{kernel_id} - Kill a kernel and delete the kernel id\n        app.router.delete('/api/kernels/(.*)', async (req, kernelId) => {\n            const res = await kernels.shutdown(kernelId);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n    },\n};\n/**\n * The kernel spec service plugin.\n */\nconst kernelSpecPlugin = {\n    id: '@jupyterlite/server-extension:kernelspec',\n    autoStart: true,\n    provides: IKernelSpecs,\n    activate: (app) => {\n        return new KernelSpecs();\n    },\n};\n/**\n * A plugin providing the routes for the kernelspec service.\n */\nconst kernelSpecRoutesPlugin = {\n    id: '@jupyterlite/server-extension:kernelspec-routes',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        app.router.get('/api/kernelspecs', async (req) => {\n            const { specs } = kernelspecs;\n            if (!specs) {\n                return new Response(null);\n            }\n            // follow the same format as in Jupyter Server\n            const allKernelSpecs = {};\n            const allSpecs = specs.kernelspecs;\n            Object.keys(allSpecs).forEach((name) => {\n                const spec = allSpecs[name];\n                const { resources } = spec !== null && spec !== void 0 ? spec : {};\n                allKernelSpecs[name] = {\n                    name,\n                    spec,\n                    resources,\n                };\n            });\n            const res = {\n                default: specs.default,\n                kernelspecs: allKernelSpecs,\n            };\n            return new Response(JSON.stringify(res));\n        });\n    },\n};\n/**\n * The licenses service plugin\n */\nconst licensesPlugin = {\n    id: '@jupyterlite/server-extension:licenses',\n    autoStart: true,\n    provides: ILicenses,\n    activate: (app) => {\n        return new Licenses();\n    },\n};\n/**\n * A plugin providing the routes for the licenses service.\n */\nconst licensesRoutesPlugin = {\n    id: '@jupyterlite/server-extension:licenses-routes',\n    autoStart: true,\n    requires: [ILicenses],\n    activate(app, licenses) {\n        app.router.get('/api/licenses', async (req) => {\n            const res = await licenses.get();\n            return new Response(JSON.stringify(res));\n        });\n    },\n};\n/**\n * A plugin providing the routes for the lsp service.\n * TODO: provide the service in a separate plugin?\n */\nconst lspRoutesPlugin = {\n    id: '@jupyterlite/server-extension:lsp-routes',\n    autoStart: true,\n    activate: (app) => {\n        app.router.get('/lsp/status', async (req) => {\n            return new Response(JSON.stringify({ version: 2, sessions: {}, specs: {} }));\n        });\n    },\n};\n/**\n * A plugin providing the routes for the nbconvert service.\n * TODO: provide the service in a separate plugin?\n */\nconst nbconvertRoutesPlugin = {\n    id: '@jupyterlite/server-extension:nbconvert-routes',\n    autoStart: true,\n    activate: (app) => {\n        app.router.get('/api/nbconvert', async (req) => {\n            return new Response(JSON.stringify({}));\n        });\n    },\n};\n/**\n * The sessions service plugin.\n */\nconst sessionsPlugin = {\n    id: '@jupyterlite/server-extension:sessions',\n    autoStart: true,\n    provides: ISessions,\n    requires: [IKernels],\n    activate: (app, kernels) => {\n        return new Sessions({ kernels });\n    },\n};\n/**\n * A plugin providing the routes for the session service.\n */\nconst sessionsRoutesPlugin = {\n    id: '@jupyterlite/server-extension:sessions-routes',\n    autoStart: true,\n    requires: [ISessions],\n    activate: (app, sessions) => {\n        // GET /api/sessions/{session} - Get session\n        app.router.get('/api/sessions/(.+)', async (req, id) => {\n            const session = await sessions.get(id);\n            return new Response(JSON.stringify(session), { status: 200 });\n        });\n        // GET /api/sessions - List available sessions\n        app.router.get('/api/sessions', async (req) => {\n            const list = await sessions.list();\n            return new Response(JSON.stringify(list), { status: 200 });\n        });\n        // PATCH /api/sessions/{session} - This can be used to rename a session\n        app.router.patch('/api/sessions(.*)', async (req, id) => {\n            const options = req.body;\n            const session = await sessions.patch(options);\n            return new Response(JSON.stringify(session), { status: 200 });\n        });\n        // DELETE /api/sessions/{session} - Delete a session\n        app.router.delete('/api/sessions/(.+)', async (req, id) => {\n            await sessions.shutdown(id);\n            return new Response(null, { status: 204 });\n        });\n        // POST /api/sessions - Create a new session or return an existing session if a session of the same name already exists\n        app.router.post('/api/sessions', async (req) => {\n            const options = req.body;\n            const session = await sessions.startNew(options);\n            return new Response(JSON.stringify(session), { status: 201 });\n        });\n    },\n};\n/**\n * The settings service plugin.\n */\nconst settingsPlugin = {\n    id: '@jupyterlite/server-extension:settings',\n    autoStart: true,\n    requires: [ILocalForage],\n    provides: ISettings,\n    activate: (app, forage) => {\n        const storageName = PageConfig.getOption('settingsStorageName');\n        const storageDrivers = JSON.parse(PageConfig.getOption('settingsStorageDrivers') || 'null');\n        const { localforage } = forage;\n        const settings = new Settings({ storageName, storageDrivers, localforage });\n        app.started.then(() => settings.initialize().catch(console.warn));\n        return settings;\n    },\n};\n/**\n * A plugin providing the routes for the settings service.\n */\nconst settingsRoutesPlugin = {\n    id: '@jupyterlite/server-extension:settings-routes',\n    autoStart: true,\n    requires: [ISettings],\n    activate: (app, settings) => {\n        // TODO: improve the regex\n        // const pluginPattern = new RegExp(/(?:@([^/]+?)[/])?([^/]+?):(\\w+)/);\n        const pluginPattern = '/api/settings/((?:@([^/]+?)[/])?([^/]+?):([^:]+))$';\n        app.router.get(pluginPattern, async (req, pluginId) => {\n            const setting = await settings.get(pluginId);\n            return new Response(JSON.stringify(setting));\n        });\n        app.router.put(pluginPattern, async (req, pluginId) => {\n            const body = req.body;\n            const { raw } = body;\n            await settings.save(pluginId, raw);\n            return new Response(null, { status: 204 });\n        });\n        app.router.get('/api/settings', async (req) => {\n            const plugins = await settings.getAll();\n            return new Response(JSON.stringify(plugins));\n        });\n    },\n};\n/**\n * The translation service plugin.\n */\nconst translationPlugin = {\n    id: '@jupyterlite/server-extension:translation',\n    autoStart: true,\n    provides: ITranslation,\n    activate: (app) => {\n        const translation = new Translation();\n        app.router.get('/api/translations/?(.*)', async (req, locale) => {\n            if (locale === 'default') {\n                locale = 'en';\n            }\n            const data = await translation.get(locale || 'all');\n            return new Response(JSON.stringify(data));\n        });\n        return translation;\n    },\n};\n/**\n * A plugin providing the routes for the translation service.\n */\nconst translationRoutesPlugin = {\n    id: '@jupyterlite/server-extension:translation-routes',\n    autoStart: true,\n    requires: [ITranslation],\n    activate: (app, translation) => {\n        app.router.get('/api/translations/?(.*)', async (req, locale) => {\n            const data = await translation.get(locale || 'all');\n            return new Response(JSON.stringify(data));\n        });\n    },\n};\nconst plugins = [\n    configSectionRoutesPlugin,\n    contentsPlugin,\n    contentsRoutesPlugin,\n    emscriptenFileSystemPlugin,\n    kernelsPlugin,\n    kernelsRoutesPlugin,\n    kernelSpecPlugin,\n    kernelSpecRoutesPlugin,\n    licensesPlugin,\n    licensesRoutesPlugin,\n    localforageMemoryPlugin,\n    localforagePlugin,\n    lspRoutesPlugin,\n    nbconvertRoutesPlugin,\n    serviceWorkerPlugin,\n    sessionsPlugin,\n    sessionsRoutesPlugin,\n    settingsPlugin,\n    settingsRoutesPlugin,\n    translationPlugin,\n    translationRoutesPlugin,\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["localforagePlugin","id","autoStart","provides","ILocalForage","activate","app","localforage","localforageMemoryPlugin","requires","async","forage","JSON","parse","PageConfig","getOption","console","warn","ensureMemoryStorage","configSectionRoutesPlugin","sections","router","get","req","_a","section","stringify","Response","patch","payload","body","contentsPlugin","IContents","storageName","storageDrivers","contents","Contents","started","then","initialize","catch","contentsRoutesPlugin","filename","res","listCheckpoints","post","checkpoint","restoreCheckpoint","status","createCheckpoint","delete","deleteCheckpoint","options","content","query","nb","path","copyFrom","copy_from","file","copy","newUntitled","_b","newPath","slice","rename","put","save","serviceWorkerPlugin","IServiceWorkerManager","ServiceWorkerManager","optional","IBroadcastChannelWrapper","serviceWorkerRegistrationWrapper","serviceManager","broadcaster","BroadcastChannelWrapper","what","logStatus","msg","err","info","ready","enable","IKernels","IKernelSpecs","kernelspecs","Kernels","kernels","list","kernelId","restart","shutdown","KernelSpecs","specs","allKernelSpecs","allSpecs","Object","keys","forEach","name","spec","resources","default","ILicenses","Licenses","licenses","version","sessions","ISessions","Sessions","session","startNew","ISettings","settings","Settings","pluginPattern","pluginId","setting","raw","plugins","getAll","ITranslation","translation","Translation","locale","data"],"sourceRoot":""}