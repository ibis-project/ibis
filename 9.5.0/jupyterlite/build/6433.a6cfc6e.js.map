{"version":3,"file":"6433.a6cfc6e.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/async-mutex/index.mjs","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernels.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernelspecs.js"],"sourcesContent":["import { KernelMessage } from '@jupyterlab/services';\nimport { Signal } from '@lumino/signaling';\n/**\n * A base kernel class handling basic kernel messaging.\n */\nexport class BaseKernel {\n    /**\n     * Construct a new BaseKernel.\n     *\n     * @param options The instantiation options for a BaseKernel.\n     */\n    constructor(options) {\n        this._history = [];\n        this._executionCount = 0;\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._parentHeader = undefined;\n        this._parent = undefined;\n        const { id, name, location, sendMessage } = options;\n        this._id = id;\n        this._name = name;\n        this._location = location;\n        this._sendMessage = sendMessage;\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Return whether the kernel is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when the kernel is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Get the kernel id\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the name of the kernel\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The location in the virtual filesystem from which the kernel was started.\n     */\n    get location() {\n        return this._location;\n    }\n    /**\n     * The current execution count\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    /**\n     * Get the last parent header\n     */\n    get parentHeader() {\n        return this._parentHeader;\n    }\n    /**\n     * Get the last parent message (mimic ipykernel's get_parent)\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit(void 0);\n    }\n    /**\n     * Handle an incoming message from the client.\n     *\n     * @param msg The message to handle\n     */\n    async handleMessage(msg) {\n        this._busy(msg);\n        this._parent = msg;\n        const msgType = msg.header.msg_type;\n        switch (msgType) {\n            case 'kernel_info_request':\n                await this._kernelInfo(msg);\n                break;\n            case 'execute_request':\n                await this._execute(msg);\n                break;\n            case 'input_reply':\n                this.inputReply(msg.content);\n                break;\n            case 'inspect_request':\n                await this._inspect(msg);\n                break;\n            case 'is_complete_request':\n                await this._isCompleteRequest(msg);\n                break;\n            case 'complete_request':\n                await this._complete(msg);\n                break;\n            case 'history_request':\n                await this._historyRequest(msg);\n                break;\n            case 'comm_open':\n                await this.commOpen(msg);\n                break;\n            case 'comm_msg':\n                await this.commMsg(msg);\n                break;\n            case 'comm_close':\n                await this.commClose(msg);\n                break;\n            default:\n                break;\n        }\n        this._idle(msg);\n    }\n    /**\n     * Stream an event from the kernel\n     *\n     * @param parentHeader The parent header.\n     * @param content The stream content.\n     */\n    stream(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'stream',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `display_data` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The display_data content.\n     */\n    displayData(content, parentHeader = undefined) {\n        var _a, _b;\n        // Make sure metadata is always set\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        content.metadata = (_a = content.metadata) !== null && _a !== void 0 ? _a : {};\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'display_data',\n            // TODO: better handle this\n            session: (_b = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `input_request` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The input_request content.\n     */\n    inputRequest(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'stdin',\n            msgType: 'input_request',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_result` message.\n     *\n     * @param parentHeader The parent header.\n     * @param content The execute result content.\n     */\n    publishExecuteResult(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'execute_result',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `error` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The error content.\n     */\n    publishExecuteError(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'error',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `update_display_data` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The update_display_data content.\n     */\n    updateDisplayData(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'update_display_data',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `clear_output` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The clear_output content.\n     */\n    clearOutput(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'clear_output',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `comm` message to the client.\n     *\n     * @param .\n     */\n    handleComm(type, content, metadata, buffers, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: type,\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n            metadata,\n            buffers,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an 'idle' status message.\n     *\n     * @param parent The parent message\n     */\n    _idle(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'idle',\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a 'busy' status message.\n     *\n     * @param parent The parent message.\n     */\n    _busy(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'busy',\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a kernel_info_request message\n     *\n     * @param parent The parent message.\n     */\n    async _kernelInfo(parent) {\n        const content = await this.kernelInfoRequest();\n        const message = KernelMessage.createMessage({\n            msgType: 'kernel_info_reply',\n            channel: 'shell',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a `history_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _historyRequest(msg) {\n        const historyMsg = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'history_reply',\n            channel: 'shell',\n            parentHeader: historyMsg.header,\n            session: msg.header.session,\n            content: {\n                status: 'ok',\n                history: this._history,\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_input` message.\n     *\n     * @param msg The parent message.\n     */\n    _executeInput(msg) {\n        const parent = msg;\n        const code = parent.content.code;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_input',\n            parentHeader: parent.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                code,\n                execution_count: this._executionCount,\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an execute_request message.\n     *\n     * @param msg The parent message.\n     */\n    async _execute(msg) {\n        const executeMsg = msg;\n        const content = executeMsg.content;\n        if (content.store_history) {\n            this._executionCount++;\n        }\n        // TODO: handle differently\n        this._parentHeader = executeMsg.header;\n        this._executeInput(executeMsg);\n        if (content.store_history) {\n            this._history.push([0, 0, content.code]);\n        }\n        const reply = await this.executeRequest(executeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_reply',\n            channel: 'shell',\n            parentHeader: executeMsg.header,\n            session: msg.header.session,\n            content: reply,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _complete(msg) {\n        const completeMsg = msg;\n        const content = await this.completeRequest(completeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'complete_reply',\n            parentHeader: completeMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an inspect_request message\n     *\n     * @param msg The parent message.\n     */\n    async _inspect(msg) {\n        const inspectMsg = msg;\n        const content = await this.inspectRequest(inspectMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'inspect_reply',\n            parentHeader: inspectMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an is_complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _isCompleteRequest(msg) {\n        const isCompleteMsg = msg;\n        const content = await this.isCompleteRequest(isCompleteMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'is_complete_reply',\n            parentHeader: isCompleteMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content,\n        });\n        this._sendMessage(message);\n    }\n}\n//# sourceMappingURL=kernel.js.map","const E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nconst E_ALREADY_LOCKED = new Error('mutex already locked');\nconst E_CANCELED = new Error('request for lock canceled');\n\nvar __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Semaphore {\n    constructor(_maxConcurrency, _cancelError = E_CANCELED) {\n        this._maxConcurrency = _maxConcurrency;\n        this._cancelError = _cancelError;\n        this._queue = [];\n        this._waiters = [];\n        if (_maxConcurrency <= 0) {\n            throw new Error('semaphore must be initialized to a positive value');\n        }\n        this._value = _maxConcurrency;\n    }\n    acquire() {\n        const locked = this.isLocked();\n        const ticketPromise = new Promise((resolve, reject) => this._queue.push({ resolve, reject }));\n        if (!locked)\n            this._dispatch();\n        return ticketPromise;\n    }\n    runExclusive(callback) {\n        return __awaiter$2(this, void 0, void 0, function* () {\n            const [value, release] = yield this.acquire();\n            try {\n                return yield callback(value);\n            }\n            finally {\n                release();\n            }\n        });\n    }\n    waitForUnlock() {\n        return __awaiter$2(this, void 0, void 0, function* () {\n            if (!this.isLocked()) {\n                return Promise.resolve();\n            }\n            const waitPromise = new Promise((resolve) => this._waiters.push({ resolve }));\n            return waitPromise;\n        });\n    }\n    isLocked() {\n        return this._value <= 0;\n    }\n    /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n    release() {\n        if (this._maxConcurrency > 1) {\n            throw new Error('this method is unavailable on semaphores with concurrency > 1; use the scoped release returned by acquire instead');\n        }\n        if (this._currentReleaser) {\n            const releaser = this._currentReleaser;\n            this._currentReleaser = undefined;\n            releaser();\n        }\n    }\n    cancel() {\n        this._queue.forEach((ticket) => ticket.reject(this._cancelError));\n        this._queue = [];\n    }\n    _dispatch() {\n        const nextTicket = this._queue.shift();\n        if (!nextTicket)\n            return;\n        let released = false;\n        this._currentReleaser = () => {\n            if (released)\n                return;\n            released = true;\n            this._value++;\n            this._resolveWaiters();\n            this._dispatch();\n        };\n        nextTicket.resolve([this._value--, this._currentReleaser]);\n    }\n    _resolveWaiters() {\n        this._waiters.forEach((waiter) => waiter.resolve());\n        this._waiters = [];\n    }\n}\n\nvar __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Mutex {\n    constructor(cancelError) {\n        this._semaphore = new Semaphore(1, cancelError);\n    }\n    acquire() {\n        return __awaiter$1(this, void 0, void 0, function* () {\n            const [, releaser] = yield this._semaphore.acquire();\n            return releaser;\n        });\n    }\n    runExclusive(callback) {\n        return this._semaphore.runExclusive(() => callback());\n    }\n    isLocked() {\n        return this._semaphore.isLocked();\n    }\n    waitForUnlock() {\n        return this._semaphore.waitForUnlock();\n    }\n    /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n    release() {\n        this._semaphore.release();\n    }\n    cancel() {\n        return this._semaphore.cancel();\n    }\n}\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction withTimeout(sync, timeout, timeoutError = E_TIMEOUT) {\n    return {\n        acquire: () => new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n            let isTimeout = false;\n            const handle = setTimeout(() => {\n                isTimeout = true;\n                reject(timeoutError);\n            }, timeout);\n            try {\n                const ticket = yield sync.acquire();\n                if (isTimeout) {\n                    const release = Array.isArray(ticket) ? ticket[1] : ticket;\n                    release();\n                }\n                else {\n                    clearTimeout(handle);\n                    resolve(ticket);\n                }\n            }\n            catch (e) {\n                if (!isTimeout) {\n                    clearTimeout(handle);\n                    reject(e);\n                }\n            }\n        })),\n        runExclusive(callback) {\n            return __awaiter(this, void 0, void 0, function* () {\n                let release = () => undefined;\n                try {\n                    const ticket = yield this.acquire();\n                    if (Array.isArray(ticket)) {\n                        release = ticket[1];\n                        return yield callback(ticket[0]);\n                    }\n                    else {\n                        release = ticket;\n                        return yield callback();\n                    }\n                }\n                finally {\n                    release();\n                }\n            });\n        },\n        /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n        release() {\n            sync.release();\n        },\n        cancel() {\n            return sync.cancel();\n        },\n        waitForUnlock: () => sync.waitForUnlock(),\n        isLocked: () => sync.isLocked(),\n    };\n}\n\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError = E_ALREADY_LOCKED) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return withTimeout(sync, 0, alreadyAcquiredError);\n}\n\nexport { E_ALREADY_LOCKED, E_CANCELED, E_TIMEOUT, Mutex, Semaphore, tryAcquire, withTimeout };\n","import { ObservableMap } from '@jupyterlab/observables';\nimport { deserialize, serialize } from '@jupyterlab/services/lib/kernel/serialize';\nimport { supportedKernelWebSocketProtocols } from '@jupyterlab/services/lib/kernel/messages';\nimport { UUID } from '@lumino/coreutils';\nimport { Server as WebSocketServer } from 'mock-socket';\nimport { Mutex } from 'async-mutex';\nimport { PageConfig } from '@jupyterlab/coreutils';\n/**\n * Use the default kernel wire protocol.\n */\nconst KERNEL_WEBSOCKET_PROTOCOL = supportedKernelWebSocketProtocols.v1KernelWebsocketJupyterOrg;\n/**\n * A class to handle requests to /api/kernels\n */\nexport class Kernels {\n    /**\n     * Construct a new Kernels\n     *\n     * @param options The instantiation options\n     */\n    constructor(options) {\n        this._kernels = new ObservableMap();\n        this._clients = new ObservableMap();\n        this._kernelClients = new ObservableMap();\n        const { kernelspecs } = options;\n        this._kernelspecs = kernelspecs;\n    }\n    /**\n     * Start a new kernel.\n     *\n     * @param options The kernel start options.\n     */\n    async startNew(options) {\n        const { id, name, location } = options;\n        const factory = this._kernelspecs.factories.get(name);\n        // bail if there is no factory associated with the requested kernel\n        if (!factory) {\n            return { id, name };\n        }\n        // create a synchronization mechanism to allow only one message\n        // to be processed at a time\n        const mutex = new Mutex();\n        // hook a new client to a kernel\n        const hook = (kernelId, clientId, socket) => {\n            var _a;\n            const kernel = this._kernels.get(kernelId);\n            if (!kernel) {\n                throw Error(`No kernel ${kernelId}`);\n            }\n            this._clients.set(clientId, socket);\n            (_a = this._kernelClients.get(kernelId)) === null || _a === void 0 ? void 0 : _a.add(clientId);\n            const processMsg = async (msg) => {\n                await mutex.runExclusive(async () => {\n                    await kernel.ready;\n                    await kernel.handleMessage(msg);\n                });\n            };\n            socket.on('message', async (message) => {\n                let msg;\n                if (message instanceof ArrayBuffer) {\n                    message = new Uint8Array(message).buffer;\n                    msg = deserialize(message, KERNEL_WEBSOCKET_PROTOCOL);\n                }\n                else if (typeof message === 'string') {\n                    const encoder = new TextEncoder();\n                    const encodedData = encoder.encode(message);\n                    msg = deserialize(encodedData.buffer, KERNEL_WEBSOCKET_PROTOCOL);\n                }\n                else {\n                    return;\n                }\n                // TODO Find a better solution for this?\n                // input-reply is asynchronous, must not be processed like other messages\n                if (msg.header.msg_type === 'input_reply') {\n                    kernel.handleMessage(msg);\n                }\n                else {\n                    void processMsg(msg);\n                }\n            });\n            const removeClient = () => {\n                var _a;\n                this._clients.delete(clientId);\n                (_a = this._kernelClients.get(kernelId)) === null || _a === void 0 ? void 0 : _a.delete(clientId);\n            };\n            kernel.disposed.connect(removeClient);\n            // TODO: check whether this is called\n            // https://github.com/thoov/mock-socket/issues/298\n            // https://github.com/jupyterlab/jupyterlab/blob/6bc884a7a8ed73c615ce72ba097bdb790482b5bf/packages/services/src/kernel/default.ts#L1245\n            socket.onclose = removeClient;\n        };\n        // ensure kernel id\n        const kernelId = id !== null && id !== void 0 ? id : UUID.uuid4();\n        // There is one server per kernel which handles multiple clients\n        const kernelUrl = `${Kernels.WS_BASE_URL}api/kernels/${kernelId}/channels`;\n        const runningKernel = this._kernels.get(kernelId);\n        if (runningKernel) {\n            return {\n                id: runningKernel.id,\n                name: runningKernel.name,\n            };\n        }\n        // start the kernel\n        const sendMessage = (msg) => {\n            const clientId = msg.header.session;\n            const socket = this._clients.get(clientId);\n            if (!socket) {\n                console.warn(`Trying to send message on removed socket for kernel ${kernelId}`);\n                return;\n            }\n            const message = serialize(msg, KERNEL_WEBSOCKET_PROTOCOL);\n            // process iopub messages\n            if (msg.channel === 'iopub') {\n                const clients = this._kernelClients.get(kernelId);\n                clients === null || clients === void 0 ? void 0 : clients.forEach((id) => {\n                    var _a;\n                    (_a = this._clients.get(id)) === null || _a === void 0 ? void 0 : _a.send(message);\n                });\n                return;\n            }\n            socket.send(message);\n        };\n        const kernel = await factory({\n            id: kernelId,\n            sendMessage,\n            name,\n            location,\n        });\n        this._kernels.set(kernelId, kernel);\n        this._kernelClients.set(kernelId, new Set());\n        // create the websocket server for the kernel\n        const wsServer = new WebSocketServer(kernelUrl, {\n            mock: false,\n            selectProtocol: () => KERNEL_WEBSOCKET_PROTOCOL,\n        });\n        wsServer.on('connection', (socket) => {\n            var _a;\n            const url = new URL(socket.url);\n            const clientId = (_a = url.searchParams.get('session_id')) !== null && _a !== void 0 ? _a : '';\n            hook(kernelId, clientId, socket);\n        });\n        // clean up closed connection\n        wsServer.on('close', () => {\n            this._clients.keys().forEach((clientId) => {\n                var _a;\n                const socket = this._clients.get(clientId);\n                if ((socket === null || socket === void 0 ? void 0 : socket.readyState) === WebSocket.CLOSED) {\n                    this._clients.delete(clientId);\n                    (_a = this._kernelClients.get(kernelId)) === null || _a === void 0 ? void 0 : _a.delete(clientId);\n                }\n            });\n        });\n        // cleanup on kernel shutdown\n        kernel.disposed.connect(() => {\n            wsServer.close();\n            this._kernels.delete(kernelId);\n            this._kernelClients.delete(kernelId);\n        });\n        return {\n            id: kernel.id,\n            name: kernel.name,\n        };\n    }\n    /**\n     * Restart a kernel.\n     *\n     * @param kernelId The kernel id.\n     */\n    async restart(kernelId) {\n        const kernel = this._kernels.get(kernelId);\n        if (!kernel) {\n            throw Error(`Kernel ${kernelId} does not exist`);\n        }\n        const { id, name, location } = kernel;\n        kernel.dispose();\n        return this.startNew({ id, name, location });\n    }\n    /**\n     * List the running kernels.\n     */\n    async list() {\n        return [...this._kernels.values()].map((kernel) => ({\n            id: kernel.id,\n            name: kernel.name,\n        }));\n    }\n    /**\n     * Shut down a kernel.\n     *\n     * @param id The kernel id.\n     */\n    async shutdown(id) {\n        var _a;\n        (_a = this._kernels.delete(id)) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n    /**\n     * Get a kernel by id\n     */\n    async get(id) {\n        return this._kernels.get(id);\n    }\n}\n/**\n * A namespace for Kernels statics.\n */\n(function (Kernels) {\n    /**\n     * The base url for the Kernels manager\n     */\n    Kernels.WS_BASE_URL = PageConfig.getBaseUrl().replace(/^http/, 'ws');\n})(Kernels || (Kernels = {}));\n//# sourceMappingURL=kernels.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The token for the kernels service.\n */\nexport const IKernels = new Token('@jupyterlite/kernel:IKernels');\n/**\n * The kernel name of last resort.\n */\nexport const FALLBACK_KERNEL = 'javascript';\n/**\n * The token for the kernel spec service.\n */\nexport const IKernelSpecs = new Token('@jupyterlite/kernel:IKernelSpecs');\n//# sourceMappingURL=tokens.js.map","import { PageConfig } from '@jupyterlab/coreutils';\nimport { FALLBACK_KERNEL } from './tokens';\n/**\n * A class to handle requests to /api/kernelspecs\n */\nexport class KernelSpecs {\n    constructor() {\n        this._specs = new Map();\n        this._factories = new Map();\n    }\n    /**\n     * Get the kernel specs.\n     */\n    get specs() {\n        if (this._specs.size === 0) {\n            return null;\n        }\n        return {\n            default: this.defaultKernelName,\n            kernelspecs: Object.fromEntries(this._specs),\n        };\n    }\n    /**\n     * Get the default kernel name.\n     */\n    get defaultKernelName() {\n        let defaultKernelName = PageConfig.getOption('defaultKernelName');\n        if (!defaultKernelName && this._specs.size) {\n            const keys = Array.from(this._specs.keys());\n            keys.sort();\n            defaultKernelName = keys[0];\n        }\n        return defaultKernelName || FALLBACK_KERNEL;\n    }\n    /**\n     * Get the kernel factories for the current kernels.\n     */\n    get factories() {\n        return this._factories;\n    }\n    /**\n     * Register a new kernel.\n     *\n     * @param options The options to register a new kernel.\n     */\n    register(options) {\n        const { spec, create } = options;\n        this._specs.set(spec.name, spec);\n        this._factories.set(spec.name, create);\n    }\n}\n//# sourceMappingURL=kernelspecs.js.map"],"names":["BaseKernel","constructor","options","this","_history","_executionCount","_isDisposed","_disposed","Signal","_parentHeader","undefined","_parent","id","name","location","sendMessage","_id","_name","_location","_sendMessage","ready","Promise","resolve","isDisposed","disposed","executionCount","parentHeader","parent","dispose","emit","handleMessage","msg","_busy","header","msg_type","_kernelInfo","_execute","inputReply","content","_inspect","_isCompleteRequest","_complete","_historyRequest","commOpen","commMsg","commClose","_idle","stream","_a","parentHeaderValue","message","KernelMessage","createMessage","channel","msgType","session","displayData","_b","metadata","inputRequest","publishExecuteResult","publishExecuteError","updateDisplayData","clearOutput","handleComm","type","buffers","execution_state","kernelInfoRequest","historyMsg","status","history","_executeInput","code","execution_count","executeMsg","store_history","push","reply","executeRequest","completeMsg","completeRequest","inspectMsg","inspectRequest","isCompleteMsg","isCompleteRequest","Error","E_CANCELED","__awaiter$2","thisArg","_arguments","P","generator","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Semaphore","_maxConcurrency","_cancelError","_queue","_waiters","_value","acquire","locked","isLocked","ticketPromise","_dispatch","runExclusive","callback","release","waitForUnlock","_currentReleaser","releaser","cancel","forEach","ticket","nextTicket","shift","released","_resolveWaiters","waiter","Mutex","cancelError","_semaphore","KERNEL_WEBSOCKET_PROTOCOL","supportedKernelWebSocketProtocols","v1KernelWebsocketJupyterOrg","Kernels","_kernels","ObservableMap","_clients","_kernelClients","kernelspecs","_kernelspecs","startNew","factory","factories","get","mutex","hook","kernelId","clientId","socket","kernel","set","add","on","async","ArrayBuffer","Uint8Array","buffer","deserialize","encodedData","TextEncoder","encode","processMsg","removeClient","delete","connect","onclose","UUID","uuid4","kernelUrl","WS_BASE_URL","runningKernel","console","warn","serialize","send","clients","Set","wsServer","mock","selectProtocol","URL","url","searchParams","keys","readyState","WebSocket","CLOSED","close","restart","list","values","map","shutdown","PageConfig","getBaseUrl","replace","IKernels","Token","FALLBACK_KERNEL","IKernelSpecs","KernelSpecs","_specs","Map","_factories","specs","size","default","defaultKernelName","Object","fromEntries","getOption","Array","from","sort","register","spec","create"],"sourceRoot":""}