{"version":3,"file":"7125.4a0562f.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/localforage-memoryStorageDriver/dist/localforage-memoryStorageDriver.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/localforage/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/localforage/lib/memory.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.memoryStorageDriver = factory());\n}(this, function () { 'use strict';\n\n    function getSerializerPromise(localForageInstance) {\n        if (getSerializerPromise.result) {\n            return getSerializerPromise.result;\n        }\n        if (!localForageInstance || typeof localForageInstance.getSerializer !== 'function') {\n            Promise.reject(new Error('localforage.getSerializer() was not available! ' + 'localforage v1.4+ is required!'));\n        }\n        getSerializerPromise.result = localForageInstance.getSerializer();\n        return getSerializerPromise.result;\n    }\n\n    function executeCallback(promise, callback) {\n        if (callback) {\n            promise.then(function (result) {\n                callback(null, result);\n            }, function (error) {\n                callback(error);\n            });\n        }\n    }\n\n    var storageRepository = {};\n\n    // Config the localStorage backend, using options set in the config.\n    function _initStorage(options) {\n        var self = this;\n\n        var dbInfo = {};\n        if (options) {\n            for (var i in options) {\n                dbInfo[i] = options[i];\n            }\n        }\n\n        var database = storageRepository[dbInfo.name] = storageRepository[dbInfo.name] || {};\n        var table = database[dbInfo.storeName] = database[dbInfo.storeName] || {};\n        dbInfo.db = table;\n\n        self._dbInfo = dbInfo;\n\n        return getSerializerPromise(self).then(function (serializer) {\n            dbInfo.serializer = serializer;\n        });\n    }\n\n    function clear(callback) {\n        var self = this;\n        var promise = self.ready().then(function () {\n            var db = self._dbInfo.db;\n\n            for (var key in db) {\n                if (db.hasOwnProperty(key)) {\n                    delete db[key];\n                }\n            }\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function getItem(key, callback) {\n        var self = this;\n\n        // Cast the key to a string, as that's all we can set as a key.\n        if (typeof key !== 'string') {\n            console.warn(key + ' used as a key, but it is not a string.');\n            key = String(key);\n        }\n\n        var promise = self.ready().then(function () {\n            var db = self._dbInfo.db;\n            var result = db[key];\n\n            if (result) {\n                result = self._dbInfo.serializer.deserialize(result);\n            }\n\n            return result;\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function iterate(iterator, callback) {\n        var self = this;\n\n        var promise = self.ready().then(function () {\n            var db = self._dbInfo.db;\n\n            var iterationNumber = 1;\n            for (var key in db) {\n                if (db.hasOwnProperty(key)) {\n                    var value = db[key];\n\n                    if (value) {\n                        value = self._dbInfo.serializer.deserialize(value);\n                    }\n\n                    value = iterator(value, key, iterationNumber++);\n\n                    if (value !== void 0) {\n                        return value;\n                    }\n                }\n            }\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function key(n, callback) {\n        var self = this;\n        var promise = self.ready().then(function () {\n            var db = self._dbInfo.db;\n            var result = null;\n            var index = 0;\n\n            for (var key in db) {\n                if (db.hasOwnProperty(key)) {\n                    if (n === index) {\n                        result = key;\n                        break;\n                    }\n                    index++;\n                }\n            }\n\n            return result;\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function keys(callback) {\n        var self = this;\n        var promise = self.ready().then(function () {\n            var db = self._dbInfo.db;\n            var keys = [];\n\n            for (var key in db) {\n                if (db.hasOwnProperty(key)) {\n                    keys.push(key);\n                }\n            }\n\n            return keys;\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function length(callback) {\n        var self = this;\n        var promise = self.keys().then(function (keys) {\n            return keys.length;\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function removeItem(key, callback) {\n        var self = this;\n\n        // Cast the key to a string, as that's all we can set as a key.\n        if (typeof key !== 'string') {\n            console.warn(key + ' used as a key, but it is not a string.');\n            key = String(key);\n        }\n\n        var promise = self.ready().then(function () {\n            var db = self._dbInfo.db;\n            if (db.hasOwnProperty(key)) {\n                delete db[key];\n            }\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function setItem(key, value, callback) {\n        var self = this;\n\n        // Cast the key to a string, as that's all we can set as a key.\n        if (typeof key !== 'string') {\n            console.warn(key + ' used as a key, but it is not a string.');\n            key = String(key);\n        }\n\n        var promise = self.ready().then(function () {\n            // Convert undefined values to null.\n            // https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            function serializeAsync(value) {\n                return new Promise(function (resolve, reject) {\n                    self._dbInfo.serializer.serialize(value, function (value, error) {\n                        if (error) {\n                            reject(error);\n                        } else {\n                            resolve(value);\n                        }\n                    });\n                });\n            }\n\n            return serializeAsync(value).then(function (value) {\n                var db = self._dbInfo.db;\n                db[key] = value;\n                return originalValue;\n            });\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    var memoryStorageDriver = {\n        _driver: 'memoryStorageDriver',\n        _initStorage: _initStorage,\n        // _supports: function() { return true; }\n        iterate: iterate,\n        getItem: getItem,\n        setItem: setItem,\n        removeItem: removeItem,\n        clear: clear,\n        length: length,\n        key: key,\n        keys: keys\n    };\n\n    return memoryStorageDriver;\n\n}));","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The token for the localforage singleton.\n */\nexport const ILocalForage = new Token('@jupyterlite/localforge:ILocalForage');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport memoryStorageDriver from 'localforage-memoryStorageDriver';\n/**\n * Ensure a localforage singleton has had the memory storage driver installed\n */\nexport async function ensureMemoryStorage(theLocalforage) {\n    return await theLocalforage.defineDriver(memoryStorageDriver);\n}\n//# sourceMappingURL=memory.js.map"],"names":["module","exports","getSerializerPromise","localForageInstance","result","getSerializer","Promise","reject","Error","executeCallback","promise","callback","then","error","storageRepository","_driver","_initStorage","options","dbInfo","i","database","name","table","storeName","db","this","_dbInfo","serializer","iterate","iterator","self","ready","iterationNumber","key","hasOwnProperty","value","deserialize","getItem","console","warn","String","setItem","undefined","originalValue","resolve","serialize","serializeAsync","removeItem","clear","length","keys","n","index","push","factory","ILocalForage","Token","async","ensureMemoryStorage","theLocalforage","defineDriver"],"sourceRoot":""}