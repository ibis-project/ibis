{"version":3,"file":"3992.5a17c7b.js","mappings":"sNAUA,MA2EA,EADgB,CA1ED,CACXA,GAAI,gDACJC,WAAW,EACXC,SAAU,CAAC,EAAAC,oBAAqB,EAAAC,gBAChCC,SAAU,EAAAC,sBACVC,YAAa,sCACbC,SAAU,CAACC,EAAKC,EAAoBC,KAChC,MAAMC,EAAU,EAAAC,WAAWC,aACrBC,EAAcN,EAAIM,YAClBC,EAAaN,QAA+DA,EAAqB,EAAAO,0BACvG,IAAIjB,EAAK,EACT,OAAO,IAAI,MACP,WAAAkB,GACIC,KAAKC,QAAU,IAAI,EAAAC,OAAOF,KAC9B,CACA,UAAMG,CAAKC,EAAQC,GACf,IAAIC,EAAIC,EAAIC,EACZ,MAAMC,EAAuF,QAAzEH,EAAKD,aAAyC,EAASA,EAAQK,YAAyB,IAAPJ,EAAgBA,EAAK,GACpHK,EAAMN,aAAyC,EAASA,EAAQM,IAEhEC,EAA8K,QAA5JJ,EAAuG,QAAjGD,EAAKf,aAAqD,EAASA,EAAcqB,kBAA+B,IAAPN,OAAgB,EAASA,EAAGE,UAAgC,IAAPD,OAAgB,EAASA,EAAGM,KACxN,GAAY,WAARH,QAAuCI,IAAnBH,EAA8B,CAClD,MAAMI,EAAOZ,EAAOa,QAAQD,KACtBE,EAAM,EAAAC,QAAQC,QAAQJ,GAC5B,IAYIK,EAZAC,EAAQ,OAyBZ,OAxBoB,YAAfb,GAAoC,WAARS,GAC7BT,EAAWc,SAAS,eAGhBnB,EAAOa,QAAQO,eAAeC,iBAAiBC,YACzCtB,EAAOa,QAAQU,OAEzBL,EAAQ,aAKRb,IAFmBb,EAAYgC,qBAAqBZ,GAEtBU,OAC9BL,EAAe,IAAIQ,gBAAgB,CAC/BC,QAASrB,KAGjBZ,EAAWM,KAAK,CACZ4B,OAAQ,EAAAC,OAAOC,KAAKxC,EAAS6B,GAC7BN,OACAK,sBAGJjB,EAAO8B,SAEX,CAEK9B,EAAOvB,KACRuB,EAAOvB,GAAK,uBAAsBA,GAEtCuB,EAAO+B,MAAMC,QAAU,CACnB1B,KAAM,oBACHN,EAAO+B,MAAMC,SAEfhC,EAAOiC,YACR/C,EAAIgD,MAAMC,IAAInC,EAAQ,OAAQC,GAAW,CAAC,GAE9Cf,EAAIgD,MAAME,aAAapC,EAAOvB,IAC9BmB,KAAKC,QAAQwC,KAAKrC,EACtB,CACA,UAAIsC,GACA,OAAO1C,KAAKC,OAChB,EACA,G","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/docmanager-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig, PathExt, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentWidgetOpener } from '@jupyterlab/docmanager';\nimport { INotebookPathOpener, INotebookShell, defaultNotebookPathOpener, } from '@jupyter-notebook/application';\nimport { Signal } from '@lumino/signaling';\n/**\n * A plugin to open documents in a new browser tab.\n *\n */\nconst opener = {\n    id: '@jupyter-notebook/docmanager-extension:opener',\n    autoStart: true,\n    optional: [INotebookPathOpener, INotebookShell],\n    provides: IDocumentWidgetOpener,\n    description: 'Open documents in a new browser tab',\n    activate: (app, notebookPathOpener, notebookShell) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        const docRegistry = app.docRegistry;\n        const pathOpener = notebookPathOpener !== null && notebookPathOpener !== void 0 ? notebookPathOpener : defaultNotebookPathOpener;\n        let id = 0;\n        return new (class {\n            constructor() {\n                this._opened = new Signal(this);\n            }\n            async open(widget, options) {\n                var _a, _b, _c;\n                const widgetName = (_a = options === null || options === void 0 ? void 0 : options.type) !== null && _a !== void 0 ? _a : '';\n                const ref = options === null || options === void 0 ? void 0 : options.ref;\n                // check if there is an setting override and if it would add the widget in the main area\n                const userLayoutArea = (_c = (_b = notebookShell === null || notebookShell === void 0 ? void 0 : notebookShell.userLayout) === null || _b === void 0 ? void 0 : _b[widgetName]) === null || _c === void 0 ? void 0 : _c.area;\n                if (ref !== '_noref' && userLayoutArea === undefined) {\n                    const path = widget.context.path;\n                    const ext = PathExt.extname(path);\n                    let route = 'edit';\n                    if ((widgetName === 'default' && ext === '.ipynb') ||\n                        widgetName.includes('Notebook')) {\n                        // make sure to save the notebook before opening it in a new tab\n                        // so the kernel info is saved (if created from the New dropdown)\n                        if (widget.context.sessionContext.kernelPreference.name) {\n                            await widget.context.save();\n                        }\n                        route = 'notebooks';\n                    }\n                    // append ?factory only if it's not the default\n                    const defaultFactory = docRegistry.defaultWidgetFactory(path);\n                    let searchParams = undefined;\n                    if (widgetName !== defaultFactory.name) {\n                        searchParams = new URLSearchParams({\n                            factory: widgetName,\n                        });\n                    }\n                    pathOpener.open({\n                        prefix: URLExt.join(baseUrl, route),\n                        path,\n                        searchParams,\n                    });\n                    // dispose the widget since it is not used on this page\n                    widget.dispose();\n                    return;\n                }\n                // otherwise open the document on the current page\n                if (!widget.id) {\n                    widget.id = `document-manager-${++id}`;\n                }\n                widget.title.dataset = {\n                    type: 'document-title',\n                    ...widget.title.dataset,\n                };\n                if (!widget.isAttached) {\n                    app.shell.add(widget, 'main', options || {});\n                }\n                app.shell.activateById(widget.id);\n                this._opened.emit(widget);\n            }\n            get opened() {\n                return this._opened;\n            }\n        })();\n    },\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [opener];\nexport default plugins;\n"],"names":["id","autoStart","optional","INotebookPathOpener","INotebookShell","provides","IDocumentWidgetOpener","description","activate","app","notebookPathOpener","notebookShell","baseUrl","PageConfig","getBaseUrl","docRegistry","pathOpener","defaultNotebookPathOpener","constructor","this","_opened","Signal","open","widget","options","_a","_b","_c","widgetName","type","ref","userLayoutArea","userLayout","area","undefined","path","context","ext","PathExt","extname","searchParams","route","includes","sessionContext","kernelPreference","name","save","defaultWidgetFactory","URLSearchParams","factory","prefix","URLExt","join","dispose","title","dataset","isAttached","shell","add","activateById","emit","opened"],"sourceRoot":""}