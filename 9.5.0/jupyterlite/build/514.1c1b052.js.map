{"version":3,"file":"514.1c1b052.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/tree-extension/lib/fileactions.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/tree-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandToolbarButtonComponent, ReactWidget, } from '@jupyterlab/apputils';\nimport React from 'react';\nexport class FilesActionButtons {\n    /**\n     * The constructor of FilesActionButtons.\n     * @param options\n     */\n    constructor(options) {\n        /**\n         * Triggered when the selection change in file browser.\n         */\n        this._onSelectionChanged = () => {\n            var _a, _b, _c, _d, _e, _f;\n            const selectedItems = Array.from(this._browser.selectedItems());\n            const selection = selectedItems.length > 0;\n            const oneFolder = selectedItems.some((item) => item.type === 'directory');\n            (_a = this._widgets.get('placeholder')) === null || _a === void 0 ? void 0 : _a.setHidden(selection);\n            (_b = this._widgets.get('delete')) === null || _b === void 0 ? void 0 : _b.setHidden(!selection);\n            (_c = this._widgets.get('duplicate')) === null || _c === void 0 ? void 0 : _c.setHidden(!selection || oneFolder);\n            (_d = this._widgets.get('download')) === null || _d === void 0 ? void 0 : _d.setHidden(!selection || oneFolder);\n            (_e = this._widgets.get('open')) === null || _e === void 0 ? void 0 : _e.setHidden(!selection || oneFolder);\n            (_f = this._widgets.get('rename')) === null || _f === void 0 ? void 0 : _f.setHidden(selectedItems.length !== 1);\n        };\n        this._widgets = new Map();\n        this._browser = options.browser;\n        const { commands, selectionChanged, translator } = options;\n        const trans = translator.load('notebook');\n        // Placeholder, when no file is selected.\n        const placeholder = ReactWidget.create(React.createElement(\"div\", { key: 'placeholder' }, trans.__('Select items to perform actions on them.')));\n        placeholder.id = 'fileAction-placeholder';\n        this._widgets.set('placeholder', placeholder);\n        // The action buttons.\n        const actions = ['open', 'download', 'rename', 'duplicate', 'delete'];\n        actions.forEach((action) => {\n            const widget = ReactWidget.create(React.createElement(CommandToolbarButtonComponent, { key: action, commands: commands, id: `filebrowser:${action}`, args: { toolbar: true }, icon: undefined }));\n            widget.id = `fileAction-${action}`;\n            widget.addClass('jp-ToolbarButton');\n            widget.addClass('jp-FileAction');\n            this._widgets.set(action, widget);\n        });\n        selectionChanged.connect(this._onSelectionChanged, this);\n        this._onSelectionChanged();\n    }\n    /**\n     * Return an iterator with all the action widgets.\n     */\n    get widgets() {\n        return this._widgets.values();\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IToolbarWidgetRegistry, createToolbarFactory, setToolbar, } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Uploader, IDefaultFileBrowser, IFileBrowserFactory, } from '@jupyterlab/filebrowser';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IRunningSessionManagers, RunningSessions } from '@jupyterlab/running';\nimport { IJSONSettingEditorTracker, ISettingEditorTracker, } from '@jupyterlab/settingeditor';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { caretDownIcon, FilenameSearcher, folderIcon, runningIcon, } from '@jupyterlab/ui-components';\nimport { Signal } from '@lumino/signaling';\nimport { Menu, MenuBar } from '@lumino/widgets';\nimport { NotebookTreeWidget, INotebookTree } from '@jupyter-notebook/tree';\nimport { FilesActionButtons } from './fileactions';\n/**\n * The file browser factory.\n */\nconst FILE_BROWSER_FACTORY = 'FileBrowser';\n/**\n * The file browser plugin id.\n */\nconst FILE_BROWSER_PLUGIN_ID = '@jupyterlab/filebrowser-extension:browser';\n/**\n * The class name added to the filebrowser filterbox node.\n */\nconst FILTERBOX_CLASS = 'jp-FileBrowser-filterBox';\n/**\n * The namespace for command IDs.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    // The command to activate the filebrowser widget in tree view.\n    CommandIDs.activate = 'filebrowser:activate';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Plugin to add extra commands to the file browser to create\n * new notebooks, files, consoles and terminals\n */\nconst createNew = {\n    id: '@jupyter-notebook/tree-extension:new',\n    description: 'Plugin to add extra commands to the file browser to create new notebooks, files, consoles and terminals.',\n    requires: [ITranslator],\n    optional: [IToolbarWidgetRegistry],\n    autoStart: true,\n    activate: (app, translator, toolbarRegistry) => {\n        var _a;\n        const { commands, serviceManager } = app;\n        const trans = translator.load('notebook');\n        const overflowOptions = {\n            overflowMenuOptions: { isVisible: false },\n        };\n        const menubar = new MenuBar(overflowOptions);\n        const newMenu = new Menu({ commands });\n        newMenu.title.label = trans.__('New');\n        newMenu.title.icon = caretDownIcon;\n        menubar.addMenu(newMenu);\n        const populateNewMenu = () => {\n            var _a, _b;\n            // create an entry per kernel spec for creating a new notebook\n            const specs = (_b = (_a = serviceManager.kernelspecs) === null || _a === void 0 ? void 0 : _a.specs) === null || _b === void 0 ? void 0 : _b.kernelspecs;\n            for (const name in specs) {\n                newMenu.addItem({\n                    args: { kernelName: name, isLauncher: true },\n                    command: 'notebook:create-new',\n                });\n            }\n            const baseCommands = [\n                'terminal:create-new',\n                'console:create',\n                'filebrowser:create-new-file',\n                'filebrowser:create-new-directory',\n            ];\n            baseCommands.forEach((command) => {\n                newMenu.addItem({ command });\n            });\n        };\n        (_a = serviceManager.kernelspecs) === null || _a === void 0 ? void 0 : _a.specsChanged.connect(() => {\n            newMenu.clearItems();\n            populateNewMenu();\n        });\n        populateNewMenu();\n        if (toolbarRegistry) {\n            toolbarRegistry.addFactory(FILE_BROWSER_FACTORY, 'new-dropdown', (browser) => {\n                const menubar = new MenuBar(overflowOptions);\n                menubar.addMenu(newMenu);\n                menubar.addClass('jp-DropdownMenu');\n                return menubar;\n            });\n        }\n    },\n};\n/**\n * A plugin to add file browser actions to the file browser toolbar.\n */\nconst fileActions = {\n    id: '@jupyter-notebook/tree-extension:file-actions',\n    description: 'A plugin to add file browser actions to the file browser toolbar.',\n    autoStart: true,\n    requires: [IDefaultFileBrowser, IToolbarWidgetRegistry, ITranslator],\n    activate: (app, browser, toolbarRegistry, translator) => {\n        // TODO: use upstream signal when available to detect selection changes\n        // https://github.com/jupyterlab/jupyterlab/issues/14598\n        const selectionChanged = new Signal(browser);\n        const methods = [\n            '_selectItem',\n            '_handleMultiSelect',\n            'handleFileSelect',\n        ];\n        methods.forEach((method) => {\n            const original = browser['listing'][method];\n            browser['listing'][method] = (...args) => {\n                original.call(browser['listing'], ...args);\n                selectionChanged.emit(void 0);\n            };\n        });\n        // Create a toolbar item that adds buttons to the file browser toolbar\n        // to perform actions on the files\n        const { commands } = app;\n        const fileActions = new FilesActionButtons({\n            commands,\n            browser,\n            selectionChanged,\n            translator,\n        });\n        for (const widget of fileActions.widgets) {\n            toolbarRegistry.addFactory(FILE_BROWSER_FACTORY, widget.id, () => widget);\n        }\n    },\n};\n/**\n * Plugin to load the default plugins that are loaded on all the Notebook pages\n * (tree, edit, view, etc.) so they are visible in the settings editor.\n */\nconst loadPlugins = {\n    id: '@jupyter-notebook/tree-extension:load-plugins',\n    description: 'Plugin to load the default plugins that are loaded on all the Notebook pages (tree, edit, view, etc.) so they are visible in the settings editor.',\n    autoStart: true,\n    requires: [ISettingRegistry],\n    activate(app, settingRegistry) {\n        const { isDisabled } = PageConfig.Extension;\n        const connector = settingRegistry.connector;\n        const allPluginsOption = PageConfig.getOption('allPlugins');\n        if (!allPluginsOption) {\n            return;\n        }\n        // build the list of plugins shipped by default on the all the notebook pages\n        // this avoid explicitly loading `'all'` plugins such as the ones used\n        // in JupyterLab only\n        const allPlugins = JSON.parse(allPluginsOption);\n        const pluginsSet = new Set();\n        Object.keys(allPlugins).forEach((key) => {\n            const extensionsAndPlugins = allPlugins[key];\n            Object.keys(extensionsAndPlugins).forEach((plugin) => {\n                const value = extensionsAndPlugins[plugin];\n                if (typeof value === 'boolean' && value) {\n                    pluginsSet.add(plugin);\n                }\n                else if (Array.isArray(value)) {\n                    value.forEach((v) => {\n                        pluginsSet.add(v);\n                    });\n                }\n            });\n        });\n        app.restored.then(async () => {\n            const plugins = await connector.list('all');\n            plugins.ids.forEach(async (id) => {\n                const [extension] = id.split(':');\n                // load the plugin if it is built-in the notebook application explicitly\n                // either included as an extension or as a plugin directly\n                const hasPlugin = pluginsSet.has(extension) || pluginsSet.has(id);\n                if (!hasPlugin || isDisabled(id) || id in settingRegistry.plugins) {\n                    return;\n                }\n                try {\n                    await settingRegistry.load(id);\n                }\n                catch (error) {\n                    console.warn(`Settings failed to load for (${id})`, error);\n                }\n            });\n        });\n    },\n};\n/**\n * A plugin to add file browser commands for the tree view.\n */\nconst openFileBrowser = {\n    id: '@jupyter-notebook/tree-extension:open-file-browser',\n    description: 'A plugin to add file browser commands for the tree view.',\n    requires: [INotebookTree, IDefaultFileBrowser],\n    autoStart: true,\n    activate: (app, notebookTree, browser) => {\n        const { commands } = app;\n        commands.addCommand(CommandIDs.activate, {\n            execute: () => {\n                notebookTree.currentWidget = browser;\n            },\n        });\n    },\n};\n/**\n * A plugin to add the file browser widget to an INotebookShell\n */\nconst notebookTreeWidget = {\n    id: '@jupyter-notebook/tree-extension:widget',\n    description: 'A plugin to add the file browser widget to an INotebookShell.',\n    requires: [\n        IDefaultFileBrowser,\n        ITranslator,\n        ISettingRegistry,\n        IToolbarWidgetRegistry,\n        IFileBrowserFactory,\n    ],\n    optional: [\n        IRunningSessionManagers,\n        ISettingEditorTracker,\n        IJSONSettingEditorTracker,\n    ],\n    autoStart: true,\n    provides: INotebookTree,\n    activate: (app, browser, translator, settingRegistry, toolbarRegistry, factory, manager, settingEditorTracker, jsonSettingEditorTracker) => {\n        const nbTreeWidget = new NotebookTreeWidget();\n        const trans = translator.load('notebook');\n        browser.title.label = trans.__('Files');\n        browser.node.setAttribute('role', 'region');\n        browser.node.setAttribute('aria-label', trans.__('File Browser Section'));\n        browser.title.icon = folderIcon;\n        nbTreeWidget.addWidget(browser);\n        nbTreeWidget.tabBar.addTab(browser.title);\n        nbTreeWidget.tabsMovable = false;\n        toolbarRegistry.addFactory(FILE_BROWSER_FACTORY, 'uploader', (browser) => new Uploader({\n            model: browser.model,\n            translator,\n            label: trans.__('Upload'),\n        }));\n        toolbarRegistry.addFactory(FILE_BROWSER_FACTORY, 'fileNameSearcher', (browser) => {\n            const searcher = FilenameSearcher({\n                updateFilter: (filterFn, query) => {\n                    browser.model.setFilter((value) => {\n                        return filterFn(value.name.toLowerCase());\n                    });\n                },\n                useFuzzyFilter: true,\n                placeholder: trans.__('Filter files by name'),\n                forceRefresh: true,\n            });\n            searcher.addClass(FILTERBOX_CLASS);\n            return searcher;\n        });\n        setToolbar(browser, createToolbarFactory(toolbarRegistry, settingRegistry, FILE_BROWSER_FACTORY, notebookTreeWidget.id, translator));\n        if (manager) {\n            const running = new RunningSessions(manager, translator);\n            running.id = 'jp-running-sessions-tree';\n            running.title.label = trans.__('Running');\n            running.title.icon = runningIcon;\n            nbTreeWidget.addWidget(running);\n            nbTreeWidget.tabBar.addTab(running.title);\n        }\n        const settings = settingRegistry.load(FILE_BROWSER_PLUGIN_ID);\n        Promise.all([settings, app.restored])\n            .then(([settings]) => {\n            // Set Notebook 7 defaults if there is no user setting override\n            [\n                'showFileCheckboxes',\n                'showFileSizeColumn',\n                'sortNotebooksFirst',\n                'showFullPath',\n            ].forEach((setting) => {\n                if (settings.user[setting] === undefined) {\n                    void settings.set(setting, true);\n                }\n            });\n        })\n            .catch((reason) => {\n            console.error(reason.message);\n        });\n        app.shell.add(nbTreeWidget, 'main', { rank: 100 });\n        // add a separate tab for each setting editor\n        [settingEditorTracker, jsonSettingEditorTracker].forEach((editorTracker) => {\n            if (editorTracker) {\n                editorTracker.widgetAdded.connect((_, editor) => {\n                    nbTreeWidget.addWidget(editor);\n                    nbTreeWidget.tabBar.addTab(editor.title);\n                    nbTreeWidget.currentWidget = editor;\n                });\n            }\n        });\n        const { tracker } = factory;\n        // TODO: remove\n        // Workaround to force the focus on the default file browser\n        // See https://github.com/jupyterlab/jupyterlab/issues/15629 for more info\n        const setCurrentToDefaultBrower = () => {\n            tracker['_pool'].current = browser;\n        };\n        tracker.widgetAdded.connect((sender, widget) => setCurrentToDefaultBrower());\n        setCurrentToDefaultBrower();\n        return nbTreeWidget;\n    },\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    createNew,\n    fileActions,\n    loadPlugins,\n    openFileBrowser,\n    notebookTreeWidget,\n];\nexport default plugins;\n"],"names":["FilesActionButtons","constructor","options","this","_onSelectionChanged","_a","_b","_c","_d","_e","_f","selectedItems","Array","from","_browser","selection","length","oneFolder","some","item","type","_widgets","get","setHidden","Map","browser","commands","selectionChanged","translator","trans","load","placeholder","ReactWidget","create","key","__","id","set","forEach","action","widget","CommandToolbarButtonComponent","args","toolbar","icon","undefined","addClass","connect","widgets","values","FILE_BROWSER_FACTORY","CommandIDs","activate","createNew","description","requires","ITranslator","optional","IToolbarWidgetRegistry","autoStart","app","toolbarRegistry","serviceManager","overflowOptions","overflowMenuOptions","isVisible","menubar","MenuBar","newMenu","Menu","title","label","caretDownIcon","addMenu","populateNewMenu","specs","kernelspecs","name","addItem","kernelName","isLauncher","command","specsChanged","clearItems","addFactory","fileActions","IDefaultFileBrowser","Signal","method","original","call","emit","loadPlugins","ISettingRegistry","settingRegistry","isDisabled","PageConfig","Extension","connector","allPluginsOption","getOption","allPlugins","JSON","parse","pluginsSet","Set","Object","keys","extensionsAndPlugins","plugin","value","add","isArray","v","restored","then","async","list","ids","extension","split","has","plugins","error","console","warn","openFileBrowser","INotebookTree","notebookTree","addCommand","execute","currentWidget","notebookTreeWidget","IFileBrowserFactory","IRunningSessionManagers","ISettingEditorTracker","IJSONSettingEditorTracker","provides","factory","manager","settingEditorTracker","jsonSettingEditorTracker","nbTreeWidget","NotebookTreeWidget","node","setAttribute","folderIcon","addWidget","tabBar","addTab","tabsMovable","Uploader","model","searcher","FilenameSearcher","updateFilter","filterFn","query","setFilter","toLowerCase","useFuzzyFilter","forceRefresh","setToolbar","createToolbarFactory","running","RunningSessions","runningIcon","settings","Promise","all","setting","user","catch","reason","message","shell","rank","editorTracker","widgetAdded","_","editor","tracker","setCurrentToDefaultBrower","current","sender"],"sourceRoot":""}