{"version":3,"file":"4954.ac85606.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/router.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/app.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/service-manager.js"],"sourcesContent":["/**\n * A simple router.\n */\nexport class Router {\n    constructor() {\n        this._routes = [];\n    }\n    /**\n     * Add a new GET route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    get(pattern, callback) {\n        this._add('GET', pattern, callback);\n    }\n    /**\n     * Add a new PUT route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    put(pattern, callback) {\n        this._add('PUT', pattern, callback);\n    }\n    /**\n     * Add a new POST route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    post(pattern, callback) {\n        this._add('POST', pattern, callback);\n    }\n    /**\n     * Add a new PATCH route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    patch(pattern, callback) {\n        this._add('PATCH', pattern, callback);\n    }\n    /**\n     * Add a new DELETE route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    delete(pattern, callback) {\n        this._add('DELETE', pattern, callback);\n    }\n    /**\n     * Route a request.\n     *\n     * @param req The request to route.\n     */\n    async route(req) {\n        const url = new URL(req.url);\n        const { method } = req;\n        const { pathname } = url;\n        for (const r of this._routes) {\n            if (r.method !== method) {\n                continue;\n            }\n            const match = pathname.match(r.pattern);\n            if (!match) {\n                continue;\n            }\n            const matches = match.slice(1);\n            let body;\n            if (r.method === 'PATCH' || r.method === 'PUT' || r.method === 'POST') {\n                try {\n                    body = JSON.parse(await req.text());\n                }\n                catch {\n                    body = undefined;\n                }\n            }\n            return r.callback.call(null, {\n                pathname,\n                body,\n                query: Object.fromEntries(url.searchParams),\n            }, ...matches);\n        }\n        throw new Error('Cannot route ' + req.method + ' ' + req.url);\n    }\n    /**\n     * Add a new route.\n     *\n     * @param method The method\n     * @param pattern The pattern\n     * @param callback The callback\n     */\n    _add(method, pattern, callback) {\n        if (typeof pattern === 'string') {\n            pattern = new RegExp(pattern);\n        }\n        this._routes.push({\n            method,\n            pattern,\n            callback,\n        });\n    }\n}\n//# sourceMappingURL=router.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ServerConnection, ServiceManager } from '@jupyterlab/services';\nimport { Application } from '@lumino/application';\nimport { Stream } from '@lumino/signaling';\nimport { WebSocket } from 'mock-socket';\nimport { Router } from './router';\n/**\n * Mock the Event Manager for now\n */\nclass MockEventManager {\n    constructor(options) {\n        this._stream = new Stream(this);\n        this._serverSettings = options.serverSettings;\n    }\n    async emit(event) {\n        // no-op\n    }\n    dispose() {\n        // no-op\n    }\n    get isDisposed() {\n        return true;\n    }\n    get stream() {\n        return this._stream;\n    }\n    get serverSettings() {\n        return this._serverSettings;\n    }\n}\n/**\n * Server is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLiteServer extends Application {\n    /**\n     * Construct a new JupyterLite object.\n     *\n     * @param options The instantiation options for a JupyterLiteServer application.\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        /**\n         * The name of the application.\n         */\n        this.name = 'JupyterLite Server';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The version of the application.\n         */\n        this.version = 'unknown';\n        this._router = new Router();\n        const serverSettings = {\n            ...ServerConnection.makeSettings(),\n            WebSocket,\n            fetch: (_a = this.fetch.bind(this)) !== null && _a !== void 0 ? _a : undefined,\n        };\n        this._serviceManager = new ServiceManager({\n            standby: 'never',\n            serverSettings,\n            events: new MockEventManager({ serverSettings }),\n        });\n    }\n    /**\n     * Get the underlying `Router` instance.\n     */\n    get router() {\n        return this._router;\n    }\n    /**\n     * Get the underlying lite service manager for this app.\n     */\n    get serviceManager() {\n        return this._serviceManager;\n    }\n    /**\n     * Handle an incoming request from the client.\n     *\n     * @param req The incoming request\n     * @param init The optional init request\n     */\n    async fetch(req, init) {\n        if (!(req instanceof Request)) {\n            throw Error('Request info is not a Request');\n        }\n        return this._router.route(req);\n    }\n    /**\n     * Attach the application shell to the DOM.\n     *\n     * @param id - The id of the host node for the shell, or `''`.\n     *\n     * #### Notes\n     * For this server application there is no shell to attach\n     */\n    attachShell(id) {\n        // no-op\n    }\n    /**\n     * A method invoked on a window `'resize'` event.\n     *\n     * #### Notes\n     * For this server application there is no shell to update\n     */\n    evtResize(event) {\n        // no-op\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach((item) => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach((mod) => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n//# sourceMappingURL=app.js.map","import { Token } from '@lumino/coreutils';\nimport SW_URL from './service-worker?text';\n/**\n * The token for the ServiceWorker.\n */\nexport const IServiceWorkerManager = new Token('@jupyterlite/server-extension:IServiceWorkerManager');\nexport const WORKER_NAME = `${SW_URL}`.split('/').slice(-1)[0];\n//# sourceMappingURL=tokens.js.map","import { PromiseDelegate } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { WORKER_NAME } from './tokens';\nconst VERSION = PageConfig.getOption('appVersion');\nexport class ServiceWorkerManager {\n    constructor(options) {\n        var _a;\n        this.unregisterOldServiceWorkers = (scriptURL) => {\n            const versionKey = `${scriptURL}-version`;\n            // Check if we have an installed version. If we do, compare it to the current version\n            // and unregister all service workers if they are different.\n            const installedVersion = localStorage.getItem(versionKey);\n            if ((installedVersion && installedVersion !== VERSION) || !installedVersion) {\n                // eslint-disable-next-line no-console\n                console.info('New version, unregistering existing service workers.');\n                navigator.serviceWorker\n                    .getRegistrations()\n                    .then((registrations) => {\n                    for (const registration of registrations) {\n                        registration.unregister();\n                    }\n                })\n                    .then(() => {\n                    // eslint-disable-next-line no-console\n                    console.info('All existing service workers have been unregistered.');\n                });\n            }\n            localStorage.setItem(versionKey, VERSION);\n        };\n        this._registration = null;\n        this._registrationChanged = new Signal(this);\n        this._ready = new PromiseDelegate();\n        const workerUrl = (_a = options === null || options === void 0 ? void 0 : options.workerUrl) !== null && _a !== void 0 ? _a : URLExt.join(PageConfig.getBaseUrl(), WORKER_NAME);\n        const fullWorkerUrl = new URL(workerUrl, window.location.href);\n        const enableCache = PageConfig.getOption('enableServiceWorkerCache') || 'false';\n        fullWorkerUrl.searchParams.set('enableCache', enableCache);\n        void this.initialize(fullWorkerUrl.href).catch(console.warn);\n    }\n    /**\n     * A signal emitted when the registration changes.\n     */\n    get registrationChanged() {\n        return this._registrationChanged;\n    }\n    /**\n     * Whether the ServiceWorker is enabled or not.\n     */\n    get enabled() {\n        return this._registration !== null;\n    }\n    get ready() {\n        return this._ready.promise;\n    }\n    async initialize(workerUrl) {\n        const { serviceWorker } = navigator;\n        let registration = null;\n        if (!serviceWorker) {\n            console.warn('ServiceWorkers not supported in this browser');\n        }\n        else if (serviceWorker.controller) {\n            const scriptURL = serviceWorker.controller.scriptURL;\n            this.unregisterOldServiceWorkers(scriptURL);\n            registration = (await serviceWorker.getRegistration(scriptURL)) || null;\n            // eslint-disable-next-line no-console\n            console.info('JupyterLite ServiceWorker was already registered');\n        }\n        if (!registration && serviceWorker) {\n            try {\n                // eslint-disable-next-line no-console\n                console.info('Registering new JupyterLite ServiceWorker', workerUrl);\n                registration = await serviceWorker.register(workerUrl);\n                // eslint-disable-next-line no-console\n                console.info('JupyterLite ServiceWorker was sucessfully registered');\n            }\n            catch (err) {\n                console.warn(err);\n                console.warn(`JupyterLite ServiceWorker registration unexpectedly failed: ${err}`);\n            }\n        }\n        this._setRegistration(registration);\n        if (!registration) {\n            this._ready.reject(void 0);\n        }\n        else {\n            this._ready.resolve(void 0);\n        }\n    }\n    _setRegistration(registration) {\n        this._registration = registration;\n        this._registrationChanged.emit(this._registration);\n    }\n}\n//# sourceMappingURL=service-manager.js.map"],"names":["Router","constructor","this","_routes","get","pattern","callback","_add","put","post","patch","route","req","url","URL","method","pathname","r","match","matches","slice","body","JSON","parse","text","undefined","call","query","Object","fromEntries","searchParams","Error","RegExp","push","MockEventManager","options","_stream","Stream","_serverSettings","serverSettings","emit","event","dispose","isDisposed","stream","JupyterLiteServer","Application","_a","super","name","namespace","version","_router","ServerConnection","makeSettings","WebSocket","fetch","bind","_serviceManager","ServiceManager","standby","events","router","serviceManager","init","Request","attachShell","id","evtResize","registerPluginModule","mod","data","default","prototype","hasOwnProperty","Array","isArray","forEach","item","registerPlugin","error","console","registerPluginModules","mods","IServiceWorkerManager","Token","WORKER_NAME","split","VERSION","PageConfig","getOption","ServiceWorkerManager","unregisterOldServiceWorkers","scriptURL","versionKey","installedVersion","localStorage","getItem","info","navigator","serviceWorker","getRegistrations","then","registrations","registration","unregister","setItem","_registration","_registrationChanged","Signal","_ready","PromiseDelegate","workerUrl","URLExt","join","getBaseUrl","fullWorkerUrl","window","location","href","enableCache","set","initialize","catch","warn","registrationChanged","enabled","ready","promise","controller","getRegistration","register","err","_setRegistration","resolve","reject"],"sourceRoot":""}