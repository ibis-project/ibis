{"version":3,"file":"6271.c4952fd.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lezer/markdown/dist/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@codemirror/lang-markdown/dist/index.js"],"sourcesContent":["import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"URL\"] = 33] = \"URL\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n    /// @internal\n    constructor(\n    /// The start position of the block.\n    start, \n    /// The block's text content.\n    content) {\n        this.start = start;\n        this.content = content;\n        /// @internal\n        this.marks = [];\n        /// The block parsers active for this block.\n        this.parsers = [];\n    }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n    constructor() {\n        /// The line's full text.\n        this.text = \"\";\n        /// The base indent provided by the composite contexts (that have\n        /// been handled so far).\n        this.baseIndent = 0;\n        /// The string position corresponding to the base indent.\n        this.basePos = 0;\n        /// The number of contexts handled @internal\n        this.depth = 0;\n        /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        this.markers = [];\n        /// The position of the next non-whitespace character beyond any\n        /// list, blockquote, or other composite block markers.\n        this.pos = 0;\n        /// The column of the next non-whitespace character.\n        this.indent = 0;\n        /// The character code of the character after `pos`.\n        this.next = -1;\n    }\n    /// @internal\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /// @internal\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /// Skip whitespace after the given position, return the position of\n    /// the next non-space character or the end of the line if there's\n    /// only space after `from`.\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /// @internal\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /// Move the line's base position forward to the given position.\n    /// This should only be called by composite [block\n    /// parsers](#BlockParser.parse) or [markup skipping\n    /// functions](#NodeSpec.composite).\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /// Move the line's base position forward to the given _column_.\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /// Store a composite-block-level marker. Should be called from\n    /// [markup skipping functions](#NodeSpec.composite) when they\n    /// consume any non-whitespace characters.\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /// Find the column position at `to`, optionally starting at a given\n    /// position and column.\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /// Find the position corresponding to the given column.\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /// @internal\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* RefStage.Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* RefStage.Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* RefStage.Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* RefStage.Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* RefStage.Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* RefStage.Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* RefStage.Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* RefStage.Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n    /// @internal\n    constructor(\n    /// The parser configuration used.\n    parser, \n    /// @internal\n    input, fragments, \n    /// @internal\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /// For reused nodes on gaps, we can't directly put the original\n        /// node into the tree, since that may be bitter than its parent.\n        /// When this happens, we create a dummy tree that is replaced by\n        /// the proper node in `injectGaps` @internal\n        this.reusePlaceholders = new Map;\n        this.stoppedAt = null;\n        /// The range index that absoluteLineStart points into @internal\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            while (line.depth < this.stack.length)\n                this.finishContext();\n            for (let mark of line.markers)\n                this.addNode(mark.type, mark.from, mark.to);\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        this.absoluteLineStart += taken;\n        this.lineStart = toRelative(this.absoluteLineStart, this.ranges);\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /// The number of parent blocks surrounding the current block.\n    get depth() {\n        return this.stack.length;\n    }\n    /// Get the type of the parent block at the given depth. When no\n    /// depth is passed, return the type of the innermost parent.\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /// Move to the next input line. This should only be called by\n    /// (non-composite) [block parsers](#BlockParser.parse) that consume\n    /// the line directly, or leaf block parser\n    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    /// consume the current line (and return true).\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /// @internal\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /// @internal\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /// The end position of the previous line.\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /// @internal\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /// Start a composite block. Should only be called from [block\n    /// parser functions](#BlockParser.parse) that return null.\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /// @internal\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /// Add a block element. Can be called by [block\n    /// parsers](#BlockParser.parse).\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /// Add a block element from a [leaf parser](#LeafBlockParser). This\n    /// makes sure any extra composite block markup (such as blockquote\n    /// markers) inside the block are also added to the syntax tree.\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /// @internal\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ?\n            injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;\n    }\n    /// @internal\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /// @internal\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dummies) {\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node, reuse = dummies.get(ch.tree);\n        if (reuse) {\n            node = reuse;\n        }\n        else if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dummies);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n    /// @internal\n    constructor(\n    /// The parser's syntax [node\n    /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    nodeSet, \n    /// @internal\n    blockParsers, \n    /// @internal\n    leafBlockParsers, \n    /// @internal\n    blockNames, \n    /// @internal\n    endLeafBlock, \n    /// @internal\n    skipContextMarkup, \n    /// @internal\n    inlineParsers, \n    /// @internal\n    inlineNames, \n    /// @internal\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /// @internal\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Reconfigure the parser.\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /// @internal\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /// Parse the given piece of inline text at the given offset,\n    /// returning an array of [`Element`](#Element) objects representing\n    /// the inline content.\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]],\n        top: name == \"Document\"\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n    /// @internal\n    constructor(\n    /// The node's\n    /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    type, \n    /// The start of the node, as an offset from the start of the document.\n    from, \n    /// The end of the node.\n    to, \n    /// The node's child nodes @internal\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /// @internal\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /// @internal\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url)\n            return cx.append(elt(Type.URL, start, start + 1 + url[0].length));\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0) | (canClose ? 2 /* Mark.Close */ : 0)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n            if (title)\n                pos = cx.skipSpace(title.to);\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n    /// @internal\n    constructor(\n    /// The parser that is being used.\n    parser, \n    /// The text of this inline section.\n    text, \n    /// The starting offset of the section in the document.\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /// @internal\n        this.parts = [];\n    }\n    /// Get the character code at the given (document-relative)\n    /// position.\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /// The position of the end of this inline section.\n    get end() { return this.offset + this.text.length; }\n    /// Get a substring of this inline section. Again uses\n    /// document-relative positions.\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /// @internal\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /// Add a [delimiter](#DelimiterType) at this given position. `open`\n    /// and `close` indicate whether this delimiter is opening, closing,\n    /// or both. Returns the end of the delimiter, for convenient\n    /// returning from [parse functions](#InlineParser.parse).\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0) | (close ? 2 /* Mark.Close */ : 0)));\n    }\n    /// Add an inline element. Returns the end of the element.\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n    /// appropriate node and updating the content of this.parts. @internal\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Mark.Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Mark.Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Mark.Open */) || (part.side & 2 /* Mark.Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /// Find an opening delimiter of the given type. Returns `null` if\n    /// no delimiter is found, or an index that can be passed to\n    /// [`takeContent`](#InlineContext.takeContent) otherwise.\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /// Remove all inline elements and delimiters starting from the\n    /// given index (which you should get from\n    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    /// resolve delimiters inside of them, and return them as an array\n    /// of elements.\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /// Skip space after the given (document) position, returning either\n    /// the position of the next non-space character or the end of the\n    /// section.\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            let pos = toRelative(cur.from - off, cx.ranges);\n            if (cur.to - off <= cx.ranges[cx.rangeI].to) { // Fits in current range\n                cx.addNode(cur.tree, pos);\n            }\n            else {\n                let dummy = new Tree(cx.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx.block.hashProp);\n                cx.reusePlaceholders.set(dummy, cur.tree);\n                cx.addNode(dummy, pos);\n            }\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\n// Convert an input-stream-relative position to a\n// Markdown-doc-relative position by subtracting the size of all input\n// gaps before `abs`.\nfunction toRelative(abs, ranges) {\n    let pos = abs;\n    for (let i = 1; i < ranges.length; i++) {\n        let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;\n        if (gapFrom < abs)\n            pos -= gapTo - gapFrom;\n    }\n    return pos;\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    URL: tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\][ \\t]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList) and [`Strikethrough`](#Strikethrough).\nconst GFM = [Table, TaskList, Strikethrough];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n","import { EditorSelection, Prec, EditorState } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { defineLanguageFacet, foldNodeProp, indentNodeProp, languageDataProp, foldService, syntaxTree, Language, LanguageDescription, ParseContext, LanguageSupport } from '@codemirror/language';\nimport { CompletionContext } from '@codemirror/autocomplete';\nimport { parser, GFM, Subscript, Superscript, Emoji, MarkdownParser, parseCode } from '@lezer/markdown';\nimport { html, htmlCompletionSource } from '@codemirror/lang-html';\nimport { NodeProp } from '@lezer/common';\n\nconst data = /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: \"<!--\", close: \"-->\" } } });\nconst headingProp = /*@__PURE__*/new NodeProp();\nconst commonmark = /*@__PURE__*/parser.configure({\n    props: [\n        /*@__PURE__*/foldNodeProp.add(type => {\n            return !type.is(\"Block\") || type.is(\"Document\") || isHeading(type) != null ? undefined\n                : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        /*@__PURE__*/headingProp.add(isHeading),\n        /*@__PURE__*/indentNodeProp.add({\n            Document: () => null\n        }),\n        /*@__PURE__*/languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction isHeading(type) {\n    let match = /^(?:ATX|Setext)Heading(\\d)$/.exec(type.name);\n    return match ? +match[1] : undefined;\n}\nfunction findSectionEnd(headerNode, level) {\n    let last = headerNode;\n    for (;;) {\n        let next = last.nextSibling, heading;\n        if (!next || (heading = isHeading(next.type)) != null && heading <= level)\n            break;\n        last = next;\n    }\n    return last.to;\n}\nconst headerIndent = /*@__PURE__*/foldService.of((state, start, end) => {\n    for (let node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {\n        if (node.from < start)\n            break;\n        let heading = node.type.prop(headingProp);\n        if (heading == null)\n            continue;\n        let upto = findSectionEnd(node, heading);\n        if (upto > end)\n            return { from: end, to: upto };\n    }\n    return null;\n});\nfunction mkLang(parser) {\n    return new Language(data, parser, [headerIndent], \"markdown\");\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);\nconst extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = /*@__PURE__*/mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            // Strip anything after whitespace\n            info = /\\S*/.exec(info)[0];\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof LanguageDescription)\n                return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(maxWidth, trailing = true) {\n        let result = this.spaceBefore + (this.node.name == \"Blockquote\" ? \">\" : \"\");\n        if (maxWidth != null) {\n            while (result.length < maxWidth)\n                result += \" \";\n            return result;\n        }\n        else {\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n            return result + (trailing ? this.spaceAfter : \"\");\n        }\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, doc) {\n    let nodes = [];\n    for (let cur = node; cur && cur.name != \"Document\"; cur = cur.parent) {\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\" || cur.name == \"FencedCode\")\n            nodes.push(cur);\n    }\n    let context = [];\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match;\n        let line = doc.lineAt(node.from), startPos = node.from - line.from;\n        if (node.name == \"FencedCode\") {\n            context.push(new Context(node, startPos, startPos, \"\", \"\", \"\", null));\n        }\n        else if (node.name == \"Blockquote\" && (match = /^[ \\t]*>( ?)/.exec(line.text.slice(startPos)))) {\n            context.push(new Context(node, startPos, startPos + match[0].length, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^([ \\t]*)\\d+([.)])([ \\t]*)/.exec(line.text.slice(startPos)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^([ \\t]*)([-+*])([ \\t]{1,4}\\[[ xX]\\])?([ \\t]+)/.exec(line.text.slice(startPos)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state, dispatch }) => {\n    let tree = syntaxTree(state), { doc } = state;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            // First list item or blank line before: delete a level of markup\n            if (inner.node.firstChild.to >= pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move this line down\n                let insert = \"\";\n                for (let i = 0, e = context.length - 2; i <= e; i++) {\n                    insert += context[i].blank(i < e ? context[i + 1].from - insert.length : null, i < e);\n                }\n                insert += state.lineBreak;\n                return { range: EditorSelection.cursor(pos + insert.length), changes: { from: line.from, insert } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let continued = inner.item && inner.item.from < line.from;\n        let insert = \"\";\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++) {\n                insert += i == e && !continued ? context[i].marker(doc, 1)\n                    : context[i].blank(i < e ? context[i + 1].from - insert.length : null);\n            }\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        insert = state.lineBreak + insert;\n        changes.push({ from, to: pos, insert });\n        return { range: EditorSelection.cursor(from + insert.length), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state, dispatch }) => {\n    let tree = syntaxTree(state);\n    let dont = null, changes = state.changeByRange(range => {\n        let pos = range.from, { doc } = state;\n        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd &&\n                    // Only apply this if we're on the line that has the\n                    // construct's syntax, or there's only indentation in the\n                    // target range\n                    (!inner.item || line.from <= inner.item.from || !/\\S/.test(line.text.slice(0, inner.to)))) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to)))\n                        return { range, changes: { from: start, to: line.from + inner.to, insert: inner.blank(inner.to - inner.from) } };\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage, completeHTMLTags = true } = config;\n    if (!(parser instanceof MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlNoMatch.support], defaultCode;\n    if (defaultCodeLanguage instanceof LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));\n    if (addKeymap)\n        support.push(Prec.high(keymap.of(markdownKeymap)));\n    let lang = mkLang(parser.configure(extensions));\n    if (completeHTMLTags)\n        support.push(lang.data.of({ autocomplete: htmlTagCompletion }));\n    return new LanguageSupport(lang, support);\n}\nfunction htmlTagCompletion(context) {\n    let { state, pos } = context, m = /<[:\\-\\.\\w\\u00b7-\\uffff]*$/.exec(state.sliceDoc(pos - 25, pos));\n    if (!m)\n        return null;\n    let tree = syntaxTree(state).resolveInner(pos, -1);\n    while (tree && !tree.type.isTop) {\n        if (tree.name == \"CodeBlock\" || tree.name == \"FencedCode\" || tree.name == \"ProcessingInstructionBlock\" ||\n            tree.name == \"CommentBlock\" || tree.name == \"Link\" || tree.name == \"Image\")\n            return null;\n        tree = tree.parent;\n    }\n    return {\n        from: pos - m[0].length, to: pos,\n        options: htmlTagCompletions(),\n        validFor: /^<[:\\-\\.\\w\\u00b7-\\uffff]*$/\n    };\n}\nlet _tagCompletions = null;\nfunction htmlTagCompletions() {\n    if (_tagCompletions)\n        return _tagCompletions;\n    let result = htmlCompletionSource(new CompletionContext(EditorState.create({ extensions: htmlNoMatch }), 0, true));\n    return _tagCompletions = result ? result.options : [];\n}\n\nexport { commonmarkLanguage, deleteMarkupBackward, insertNewlineContinueMarkup, markdown, markdownKeymap, markdownLanguage };\n"],"names":["Type","CompositeBlock","create","type","value","from","parentHash","end","constructor","hash","children","positions","this","hashProp","NodeProp","contextHash","addChild","child","pos","prop","Tree","length","push","toTree","nodeSet","last","Math","max","types","balance","makeTree","NodeType","none","LeafBlock","start","content","marks","parsers","Line","text","baseIndent","basePos","depth","markers","indent","next","forward","forwardInner","newPos","skipSpace","countIndent","charCodeAt","reset","pop","moveBase","to","moveBaseColumn","findColumn","addMarker","elt","i","goal","scrub","result","slice","skipForList","bl","cx","line","block","stack","size","OrderedList","isOrderedList","isBulletList","BulletList","isHorizontalRule","DefaultSkipMarkup","Blockquote","QuoteMark","lineStart","space","ListItem","_cx","Document","ch","skipSpaceBack","isFencedCode","isBlockquote","breaking","count","isSetextUnderline","inList","isAtxHeading","EmptyLine","CommentEnd","ProcessingEnd","HTMLBlockStyle","isHTMLBlock","rest","e","test","getListIndent","indentAfter","indented","addCodeText","CodeText","DefaultBlockParsers","LinkReference","undefined","IndentedCode","base","pendingMarks","nextLine","m","codeStart","filter","concat","addNode","buffer","writeElements","finish","CodeBlock","FencedCode","fenceEnd","len","infoFrom","infoTo","CodeMark","CodeInfo","first","textStart","textEnd","prevLineEnd","startContext","HorizontalRule","newBase","ListMark","ATXHeading","off","endOfSpace","after","buf","write","HeaderMark","parser","parseInline","node","ATXHeading1","HTMLBlock","trailing","nodeType","CommentBlock","ProcessingInstructionBlock","SetextHeading","LinkReferenceParser","leaf","stage","elts","advance","complete","addLeafElement","nextStage","parseLinkLabel","LinkMark","skip","title","parseLinkTitle","titleEnd","lineEnd","parseURL","SetextHeadingParser","underline","underlineMark","SetextHeading1","SetextHeading2","DefaultLeafBlocks","_","DefaultEndLeaf","p","scanLineResult","BlockContext","input","fragments","ranges","atEnd","reusePlaceholders","Map","stoppedAt","rangeI","absoluteLineStart","absoluteLineEnd","FragmentCursor","readLine","parsedPos","finishContext","mark","reuseFragment","blockParsers","parse","leafBlockParsers","lines","stop","endLeafBlock","finishLeaf","stopAt","RangeError","moveTo","matches","taken","takeNodes","toRelative","moveRangeI","parentType","scanLine","r","lineChunkAt","textOffset","nextFrom","handler","skipContextMarkup","Error","chunk","lineChunks","eol","indexOf","startComposite","getNodeType","addElement","injectMarks","top","addGaps","tree","injectGaps","topNode","inline","Paragraph","TreeElement","Buffer","offset","dummies","rangeEnd","movePastNext","upto","inclusive","firstChild","nextSibling","reuse","get","propValues","MarkdownParser","Parser","blockNames","inlineParsers","inlineNames","wrappers","super","nodeTypes","Object","t","name","id","createParse","w","configure","spec","config","resolveConfig","nonEmpty","defineNodes","assign","styles","s","composite","style","some","group","define","props","Array","isArray","Tag","NodeSet","extend","styleTags","remove","rm","parseBlock","found","before","findName","splice","endLeaf","wrap","InlineContext","outer","char","token","resolveMarkers","a","conf","conc","b","wrapA","wrapB","inner","names","Escape","nodes","writeTo","build","reused","topID","Element","startOff","EmphasisUnderscore","resolve","EmphasisAsterisk","LinkStart","ImageStart","InlineDelimiter","side","Punctuation","RegExp","DefaultInline","escaped","Escapable","append","Entity","exec","InlineCode","curSize","HTMLTag","url","URL","comment","Comment","procInst","ProcessingInstruction","Emphasis","pBefore","pAfter","sBefore","sAfter","leftFlanking","rightFlanking","canOpen","canClose","HardBreak","Link","Image","LinkEnd","parts","part","takeContent","link","finishLink","j","startPos","endPos","unshift","dest","label","LinkTitle","requireNonWS","min","LinkLabel","addDelimiter","open","close","emp","closeSize","k","element","findOpeningDelimiter","startIndex","elements","eI","NotLast","fragment","fragmentEnd","cursor","nextFragment","read","c","rPos","parent","childAfter","cur","fragEnd","openEnd","blockI","prevEnd","prevI","isAnonymous","dummy","set","is","abs","gapFrom","gapTo","markdownHighlighting","tags","quote","contentSeparator","heading1","heading2","heading3","heading4","heading5","heading6","escape","character","emphasis","strong","list","monospace","processingInstruction","labelName","string","keys","map","n","leftOverSpace","nextPos","StrikethroughDelim","Strikethrough","strikethrough","parseRow","startI","cellStart","cellEnd","esc","parseCell","hasPipe","str","delimiterLine","TableParser","rows","lineText","firstRow","Table","heading","TaskParser","GFM","atom","parseSubSuper","Superscript","special","Subscript","Emoji","match","data","defineLanguageFacet","commentTokens","headingProp","commonmark","foldNodeProp","add","isHeading","state","doc","lineAt","indentNodeProp","languageDataProp","findSectionEnd","headerNode","level","headerIndent","foldService","of","syntaxTree","resolveInner","mkLang","Language","commonmarkLanguage","markdownLanguage","Context","spaceBefore","spaceAfter","item","blank","maxWidth","marker","number","String","itemNumber","getContext","context","replace","sliceString","renumberList","changes","prev","insert","insertNewlineContinueMarkup","dispatch","dont","changeByRange","range","empty","isActiveAt","emptyLine","delTo","EditorSelection","lineBreak","prevLine","quoted","index","continued","charAt","update","scrollIntoView","userEvent","isMark","deleteMarkupBackward","scan","childBefore","lastChild","contextNodeForDelete","spaceEnd","markdownKeymap","key","run","htmlNoMatch","html","matchClosingTags","markdown","codeLanguages","defaultCodeLanguage","addKeymap","completeHTMLTags","defaultCode","extensions","support","LanguageSupport","language","codeParser","languages","defaultLanguage","info","LanguageDescription","matchLanguageName","ParseContext","getSkippingParser","load","htmlParser","parseMixed","overlay","infoNode","getChild","parseCode","Prec","high","keymap","lang","autocomplete","htmlTagCompletion","sliceDoc","isTop","options","htmlTagCompletions","validFor","_tagCompletions","htmlCompletionSource","EditorState"],"sourceRoot":""}