{"version":3,"file":"8178.6647b58.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/application-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabStatus, IRouter, ITreePathUpdater, JupyterFrontEnd, } from '@jupyterlab/application';\nimport { DOMUtils, ICommandPalette, ISanitizer, ISplashScreen, IToolbarWidgetRegistry, } from '@jupyterlab/apputils';\nimport { ConsolePanel } from '@jupyterlab/console';\nimport { PageConfig, PathExt, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager, renameDialog } from '@jupyterlab/docmanager';\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ILatexTypesetter, IMarkdownParser, IRenderMimeRegistry, RenderMimeRegistry, standardRendererFactories, } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { NotebookApp, NotebookShell, INotebookShell, SidePanelPalette, INotebookPathOpener, defaultNotebookPathOpener, } from '@jupyter-notebook/application';\nimport { jupyterIcon } from '@jupyter-notebook/ui-components';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { DisposableDelegate, DisposableSet, } from '@lumino/disposable';\nimport { Menu, Widget } from '@lumino/widgets';\n/**\n * A regular expression to match path to notebooks and documents\n */\nconst TREE_PATTERN = new RegExp('/(notebooks|edit)/(.*)');\n/**\n * A regular expression to suppress the file extension from display for .ipynb files.\n */\nconst STRIP_IPYNB = /\\.ipynb$/;\n/**\n * The JupyterLab document manager plugin id.\n */\nconst JUPYTERLAB_DOCMANAGER_PLUGIN_ID = '@jupyterlab/docmanager-extension:plugin';\n/**\n * The command IDs used by the application plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Handle local links\n     */\n    CommandIDs.handleLink = 'application:handle-local-link';\n    /**\n     * Toggle Top Bar visibility\n     */\n    CommandIDs.toggleTop = 'application:toggle-top';\n    /**\n     * Toggle side panel visibility\n     */\n    CommandIDs.togglePanel = 'application:toggle-panel';\n    /**\n     * Toggle the Zen mode\n     */\n    CommandIDs.toggleZen = 'application:toggle-zen';\n    /**\n     * Open JupyterLab\n     */\n    CommandIDs.openLab = 'application:open-lab';\n    /**\n     * Open the tree page.\n     */\n    CommandIDs.openTree = 'application:open-tree';\n    /**\n     * Rename the current document\n     */\n    CommandIDs.rename = 'application:rename';\n    /**\n     * Resolve tree path\n     */\n    CommandIDs.resolveTree = 'application:resolve-tree';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Check if the application is dirty before closing the browser tab.\n */\nconst dirty = {\n    id: '@jupyter-notebook/application-extension:dirty',\n    description: 'Check if the application is dirty before closing the browser tab.',\n    autoStart: true,\n    requires: [ILabStatus, ITranslator],\n    activate: (app, status, translator) => {\n        if (!(app instanceof NotebookApp)) {\n            throw new Error(`${dirty.id} must be activated in Jupyter Notebook.`);\n        }\n        const trans = translator.load('notebook');\n        const message = trans.__('Are you sure you want to exit Jupyter Notebook?\\n\\nAny unsaved changes will be lost.');\n        window.addEventListener('beforeunload', (event) => {\n            if (app.status.isDirty) {\n                return (event.returnValue = message);\n            }\n        });\n    },\n};\n/**\n * The logo plugin.\n */\nconst logo = {\n    id: '@jupyter-notebook/application-extension:logo',\n    description: 'The logo plugin.',\n    autoStart: true,\n    activate: (app) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        const node = document.createElement('a');\n        node.href = `${baseUrl}tree`;\n        node.target = '_blank';\n        node.rel = 'noopener noreferrer';\n        const logo = new Widget({ node });\n        jupyterIcon.element({\n            container: node,\n            elementPosition: 'center',\n            padding: '2px 2px 2px 8px',\n            height: '28px',\n            width: 'auto',\n            cursor: 'pointer',\n            margin: 'auto',\n        });\n        logo.id = 'jp-NotebookLogo';\n        app.shell.add(logo, 'top', { rank: 0 });\n    },\n};\n/**\n * A plugin to open documents in the main area.\n */\nconst opener = {\n    id: '@jupyter-notebook/application-extension:opener',\n    description: 'A plugin to open documents in the main area.',\n    autoStart: true,\n    requires: [IRouter, IDocumentManager],\n    optional: [ISettingRegistry],\n    activate: (app, router, docManager, settingRegistry) => {\n        const { commands, docRegistry } = app;\n        const command = 'router:tree';\n        commands.addCommand(command, {\n            execute: (args) => {\n                var _a;\n                const parsed = args;\n                const matches = (_a = parsed.path.match(TREE_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                const [, , path] = matches;\n                if (!path) {\n                    return;\n                }\n                app.started.then(async () => {\n                    var _a;\n                    const file = decodeURIComponent(path);\n                    const urlParams = new URLSearchParams(parsed.search);\n                    let defaultFactory = docRegistry.defaultWidgetFactory(path).name;\n                    // Explicitly get the default viewers from the settings because\n                    // JupyterLab might not have had the time to load the settings yet (race condition)\n                    // Relevant code: https://github.com/jupyterlab/jupyterlab/blob/d56ff811f39b3c10c6d8b6eb27a94624b753eb53/packages/docmanager-extension/src/index.tsx#L265-L293\n                    if (settingRegistry) {\n                        const settings = await settingRegistry.load(JUPYTERLAB_DOCMANAGER_PLUGIN_ID);\n                        const defaultViewers = settings.get('defaultViewers').composite;\n                        // get the file types for the path\n                        const types = docRegistry.getFileTypesForPath(path);\n                        // for each file type, check if there is a default viewer and if it\n                        // is available in the docRegistry. If it is the case, use it as the\n                        // default factory\n                        types.forEach((ft) => {\n                            if (defaultViewers[ft.name] !== undefined &&\n                                docRegistry.getWidgetFactory(defaultViewers[ft.name])) {\n                                defaultFactory = defaultViewers[ft.name];\n                            }\n                        });\n                    }\n                    const factory = (_a = urlParams.get('factory')) !== null && _a !== void 0 ? _a : defaultFactory;\n                    docManager.open(file, factory, undefined, {\n                        ref: '_noref',\n                    });\n                });\n            },\n        });\n        router.register({ command, pattern: TREE_PATTERN });\n    },\n};\n/**\n * A plugin to customize menus\n */\nconst menus = {\n    id: '@jupyter-notebook/application-extension:menus',\n    description: 'A plugin to customize menus.',\n    requires: [IMainMenu],\n    autoStart: true,\n    activate: (app, menu) => {\n        // always disable the Tabs menu\n        menu.tabsMenu.dispose();\n        const page = PageConfig.getOption('notebookPage');\n        switch (page) {\n            case 'consoles':\n            case 'terminals':\n            case 'tree':\n                menu.editMenu.dispose();\n                menu.kernelMenu.dispose();\n                menu.runMenu.dispose();\n                break;\n            case 'edit':\n                menu.kernelMenu.dispose();\n                menu.runMenu.dispose();\n                break;\n            default:\n                break;\n        }\n    },\n};\n/**\n * A plugin to provide a spacer at rank 900 in the menu area\n */\nconst menuSpacer = {\n    id: '@jupyter-notebook/application-extension:menu-spacer',\n    description: 'A plugin to provide a spacer at rank 900 in the menu area.',\n    autoStart: true,\n    activate: (app) => {\n        const menu = new Widget();\n        menu.id = DOMUtils.createDomID();\n        menu.addClass('jp-NotebookSpacer');\n        app.shell.add(menu, 'menu', { rank: 900 });\n    },\n};\n/**\n * Add commands to open the tree and running pages.\n */\nconst pages = {\n    id: '@jupyter-notebook/application-extension:pages',\n    description: 'Add commands to open the tree and running pages.',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette],\n    activate: (app, translator, palette) => {\n        const trans = translator.load('notebook');\n        const baseUrl = PageConfig.getBaseUrl();\n        app.commands.addCommand(CommandIDs.openLab, {\n            label: trans.__('Open JupyterLab'),\n            execute: () => {\n                window.open(URLExt.join(baseUrl, 'lab'));\n            },\n        });\n        const page = PageConfig.getOption('notebookPage');\n        app.commands.addCommand(CommandIDs.openTree, {\n            label: trans.__('File Browser'),\n            execute: () => {\n                if (page === 'tree') {\n                    app.commands.execute('filebrowser:activate');\n                }\n                else {\n                    window.open(URLExt.join(baseUrl, 'tree'));\n                }\n            },\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.openLab, category: 'View' });\n            palette.addItem({ command: CommandIDs.openTree, category: 'View' });\n        }\n    },\n};\n/**\n * A plugin to open paths in new browser tabs.\n */\nconst pathOpener = {\n    id: '@jupyter-notebook/application-extension:path-opener',\n    description: 'A plugin to open paths in new browser tabs.',\n    autoStart: true,\n    provides: INotebookPathOpener,\n    activate: (app) => {\n        return defaultNotebookPathOpener;\n    },\n};\n/**\n * The default paths for a Jupyter Notebook app.\n */\nconst paths = {\n    id: '@jupyter-notebook/application-extension:paths',\n    description: 'The default paths for a Jupyter Notebook app.',\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths,\n    activate: (app) => {\n        if (!(app instanceof NotebookApp)) {\n            throw new Error(`${paths.id} must be activated in Jupyter Notebook.`);\n        }\n        return app.paths;\n    },\n};\n/**\n * A plugin providing a rendermime registry.\n */\nconst rendermime = {\n    id: '@jupyter-notebook/application-extension:rendermime',\n    description: 'A plugin providing a rendermime registry.',\n    autoStart: true,\n    provides: IRenderMimeRegistry,\n    optional: [\n        IDocumentManager,\n        ILatexTypesetter,\n        ISanitizer,\n        IMarkdownParser,\n        ITranslator,\n        INotebookPathOpener,\n    ],\n    activate: (app, docManager, latexTypesetter, sanitizer, markdownParser, translator, notebookPathOpener) => {\n        const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('jupyterlab');\n        const opener = notebookPathOpener !== null && notebookPathOpener !== void 0 ? notebookPathOpener : defaultNotebookPathOpener;\n        if (docManager) {\n            app.commands.addCommand(CommandIDs.handleLink, {\n                label: trans.__('Handle Local Link'),\n                execute: (args) => {\n                    const path = args['path'];\n                    if (path === undefined || path === null) {\n                        return;\n                    }\n                    return docManager.services.contents\n                        .get(path, { content: false })\n                        .then((model) => {\n                        const baseUrl = PageConfig.getBaseUrl();\n                        opener.open({\n                            prefix: URLExt.join(baseUrl, 'tree'),\n                            path: model.path,\n                            target: '_blank',\n                        });\n                    });\n                },\n            });\n        }\n        return new RenderMimeRegistry({\n            initialFactories: standardRendererFactories,\n            linkHandler: !docManager\n                ? undefined\n                : {\n                    handleLink: (node, path, id) => {\n                        // If node has the download attribute explicitly set, use the\n                        // default browser downloading behavior.\n                        if (node.tagName === 'A' && node.hasAttribute('download')) {\n                            return;\n                        }\n                        app.commandLinker.connectNode(node, CommandIDs.handleLink, {\n                            path,\n                            id,\n                        });\n                    },\n                },\n            latexTypesetter: latexTypesetter !== null && latexTypesetter !== void 0 ? latexTypesetter : undefined,\n            markdownParser: markdownParser !== null && markdownParser !== void 0 ? markdownParser : undefined,\n            translator: translator !== null && translator !== void 0 ? translator : undefined,\n            sanitizer: sanitizer !== null && sanitizer !== void 0 ? sanitizer : undefined,\n        });\n    },\n};\n/**\n * The default Jupyter Notebook application shell.\n */\nconst shell = {\n    id: '@jupyter-notebook/application-extension:shell',\n    description: 'The default Jupyter Notebook application shell.',\n    autoStart: true,\n    provides: INotebookShell,\n    optional: [ISettingRegistry],\n    activate: (app, settingRegistry) => {\n        if (!(app.shell instanceof NotebookShell)) {\n            throw new Error(`${shell.id} did not find a NotebookShell instance.`);\n        }\n        const notebookShell = app.shell;\n        if (settingRegistry) {\n            settingRegistry\n                .load(shell.id)\n                .then((settings) => {\n                // Add a layer of customization to support app shell mode\n                const customLayout = settings.composite['layout'];\n                // Restore the layout.\n                void notebookShell.restoreLayout(customLayout);\n            })\n                .catch((reason) => {\n                console.error('Fail to load settings for the layout restorer.');\n                console.error(reason);\n            });\n        }\n        return notebookShell;\n    },\n};\n/**\n * The default splash screen provider.\n */\nconst splash = {\n    id: '@jupyter-notebook/application-extension:splash',\n    description: 'Provides an empty splash screen.',\n    autoStart: true,\n    provides: ISplashScreen,\n    activate: (app) => {\n        const { restored } = app;\n        const splash = document.createElement('div');\n        splash.style.position = 'absolute';\n        splash.style.width = '100%';\n        splash.style.height = '100%';\n        splash.style.zIndex = '10';\n        return {\n            show: (light = true) => {\n                splash.style.backgroundColor = light ? 'white' : '#111111';\n                document.body.appendChild(splash);\n                return new DisposableDelegate(async () => {\n                    await restored;\n                    document.body.removeChild(splash);\n                });\n            },\n        };\n    },\n};\n/**\n * The default JupyterLab application status provider.\n */\nconst status = {\n    id: '@jupyter-notebook/application-extension:status',\n    description: 'The default JupyterLab application status provider.',\n    autoStart: true,\n    provides: ILabStatus,\n    activate: (app) => {\n        if (!(app instanceof NotebookApp)) {\n            throw new Error(`${status.id} must be activated in Jupyter Notebook.`);\n        }\n        return app.status;\n    },\n};\n/**\n * A plugin to display the document title in the browser tab title\n */\nconst tabTitle = {\n    id: '@jupyter-notebook/application-extension:tab-title',\n    description: 'A plugin to display the document title in the browser tab title.',\n    autoStart: true,\n    requires: [INotebookShell],\n    activate: (app, shell) => {\n        const setTabTitle = () => {\n            const current = shell.currentWidget;\n            if (current instanceof ConsolePanel) {\n                const update = () => {\n                    const title = current.sessionContext.path || current.sessionContext.name;\n                    const basename = PathExt.basename(title);\n                    // Strip the \".ipynb\" suffix from filenames for display in tab titles.\n                    document.title = basename.replace(STRIP_IPYNB, '');\n                };\n                current.sessionContext.sessionChanged.connect(update);\n                update();\n                return;\n            }\n            else if (current instanceof DocumentWidget) {\n                const update = () => {\n                    const basename = PathExt.basename(current.context.path);\n                    document.title = basename.replace(STRIP_IPYNB, '');\n                };\n                current.context.pathChanged.connect(update);\n                update();\n            }\n        };\n        shell.currentChanged.connect(setTabTitle);\n        setTabTitle();\n    },\n};\n/**\n * A plugin to display and rename the title of a file\n */\nconst title = {\n    id: '@jupyter-notebook/application-extension:title',\n    description: 'A plugin to display and rename the title of a file.',\n    autoStart: true,\n    requires: [INotebookShell, ITranslator],\n    optional: [IDocumentManager, IRouter, IToolbarWidgetRegistry],\n    activate: (app, shell, translator, docManager, router, toolbarRegistry) => {\n        const { commands } = app;\n        const trans = translator.load('notebook');\n        const node = document.createElement('div');\n        if (toolbarRegistry) {\n            toolbarRegistry.addFactory('TopBar', 'widgetTitle', (toolbar) => {\n                const widget = new Widget({ node });\n                widget.id = 'jp-title';\n                return widget;\n            });\n        }\n        const addTitle = async () => {\n            const current = shell.currentWidget;\n            if (!current || !(current instanceof DocumentWidget)) {\n                return;\n            }\n            if (node.children.length > 0) {\n                return;\n            }\n            const h = document.createElement('h1');\n            h.textContent = current.title.label.replace(STRIP_IPYNB, '');\n            node.appendChild(h);\n            node.style.marginLeft = '10px';\n            if (!docManager) {\n                return;\n            }\n            const isEnabled = () => {\n                const { currentWidget } = shell;\n                return !!(currentWidget && docManager.contextForWidget(currentWidget));\n            };\n            commands.addCommand(CommandIDs.rename, {\n                label: () => trans.__('Rename…'),\n                isEnabled,\n                execute: async () => {\n                    var _a;\n                    if (!isEnabled()) {\n                        return;\n                    }\n                    const result = await renameDialog(docManager, current.context);\n                    // activate the current widget to bring the focus\n                    if (current) {\n                        current.activate();\n                    }\n                    if (result === null) {\n                        return;\n                    }\n                    const newPath = current.context.path;\n                    const basename = PathExt.basename(newPath);\n                    h.textContent = basename.replace(STRIP_IPYNB, '');\n                    if (!router) {\n                        return;\n                    }\n                    const matches = (_a = router.current.path.match(TREE_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                    const [, route, path] = matches;\n                    if (!route || !path) {\n                        return;\n                    }\n                    const encoded = encodeURIComponent(newPath);\n                    router.navigate(`/${route}/${encoded}`, {\n                        skipRouting: true,\n                    });\n                },\n            });\n            node.onclick = async () => {\n                void commands.execute(CommandIDs.rename);\n            };\n        };\n        shell.currentChanged.connect(addTitle);\n        void addTitle();\n    },\n};\n/**\n * Plugin to toggle the top header visibility.\n */\nconst topVisibility = {\n    id: '@jupyter-notebook/application-extension:top',\n    description: 'Plugin to toggle the top header visibility.',\n    requires: [INotebookShell, ITranslator],\n    optional: [ISettingRegistry, ICommandPalette],\n    activate: (app, notebookShell, translator, settingRegistry, palette) => {\n        const trans = translator.load('notebook');\n        const top = notebookShell.top;\n        const pluginId = topVisibility.id;\n        app.commands.addCommand(CommandIDs.toggleTop, {\n            label: trans.__('Show Header'),\n            execute: () => {\n                top.setHidden(top.isVisible);\n                if (settingRegistry) {\n                    void settingRegistry.set(pluginId, 'visible', top.isVisible ? 'yes' : 'no');\n                }\n            },\n            isToggled: () => top.isVisible,\n        });\n        let adjustToScreen = false;\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(pluginId);\n            const updateSettings = (settings) => {\n                // 'visible' property from user preferences or default settings\n                let visible = settings.get('visible').composite;\n                if (settings.user.visible !== undefined) {\n                    visible = settings.user.visible;\n                }\n                top.setHidden(visible === 'no');\n                // adjust to screen from user preferences or default settings\n                adjustToScreen = visible === 'automatic';\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect((settings) => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n        if (palette) {\n            palette.addItem({ command: CommandIDs.toggleTop, category: 'View' });\n        }\n        const onChanged = () => {\n            if (!adjustToScreen) {\n                return;\n            }\n            if (app.format === 'desktop') {\n                notebookShell.expandTop();\n            }\n            else {\n                notebookShell.collapseTop();\n            }\n        };\n        // listen on format change (mobile and desktop) to make the view more compact\n        app.formatChanged.connect(onChanged);\n    },\n    autoStart: true,\n};\n/**\n * Plugin to toggle the left or right side panel's visibility.\n */\nconst sidePanelVisibility = {\n    id: '@jupyter-notebook/application-extension:sidepanel',\n    description: 'Plugin to toggle the visibility of left or right side panel.',\n    requires: [INotebookShell, ITranslator],\n    optional: [IMainMenu, ICommandPalette],\n    autoStart: true,\n    activate: (app, notebookShell, translator, menu, palette) => {\n        const trans = translator.load('notebook');\n        /* Arguments for togglePanel command:\n         * side, left or right area\n         * title, widget title to show in the menu\n         * id, widget ID to activate in the side panel\n         */\n        app.commands.addCommand(CommandIDs.togglePanel, {\n            label: (args) => args['title'],\n            caption: (args) => {\n                // We do not substitute the parameter into the string because the parameter is not\n                // localized (e.g., it is always 'left') even though the string is localized.\n                if (args['side'] === 'left') {\n                    return trans.__('Show %1 in the left sidebar', args['title']);\n                }\n                else if (args['side'] === 'right') {\n                    return trans.__('Show %1 in the right sidebar', args['title']);\n                }\n                return trans.__('Show %1 in the sidebar', args['title']);\n            },\n            execute: (args) => {\n                var _a, _b;\n                switch (args['side']) {\n                    case 'left':\n                        if (notebookShell.leftCollapsed) {\n                            notebookShell.expandLeft(args.id);\n                        }\n                        else if (((_a = notebookShell.leftHandler.currentWidget) === null || _a === void 0 ? void 0 : _a.id) !== args.id) {\n                            notebookShell.expandLeft(args.id);\n                        }\n                        else {\n                            notebookShell.collapseLeft();\n                            if (notebookShell.currentWidget) {\n                                notebookShell.activateById(notebookShell.currentWidget.id);\n                            }\n                        }\n                        break;\n                    case 'right':\n                        if (notebookShell.rightCollapsed) {\n                            notebookShell.expandRight(args.id);\n                        }\n                        else if (((_b = notebookShell.rightHandler.currentWidget) === null || _b === void 0 ? void 0 : _b.id) !== args.id) {\n                            notebookShell.expandRight(args.id);\n                        }\n                        else {\n                            notebookShell.collapseRight();\n                            if (notebookShell.currentWidget) {\n                                notebookShell.activateById(notebookShell.currentWidget.id);\n                            }\n                        }\n                        break;\n                }\n            },\n            isToggled: (args) => {\n                switch (args['side']) {\n                    case 'left': {\n                        if (notebookShell.leftCollapsed) {\n                            return false;\n                        }\n                        const currentWidget = notebookShell.leftHandler.currentWidget;\n                        if (!currentWidget) {\n                            return false;\n                        }\n                        return currentWidget.id === args['id'];\n                    }\n                    case 'right': {\n                        if (notebookShell.rightCollapsed) {\n                            return false;\n                        }\n                        const currentWidget = notebookShell.rightHandler.currentWidget;\n                        if (!currentWidget) {\n                            return false;\n                        }\n                        return currentWidget.id === args['id'];\n                    }\n                }\n                return false;\n            },\n        });\n        const sidePanelMenu = {\n            left: null,\n            right: null,\n        };\n        /**\n         * The function which adds entries to the View menu for each widget of a side panel.\n         *\n         * @param area - 'left' or 'right', the area of the side panel.\n         * @param entryLabel - the name of the main entry in the View menu for that side panel.\n         * @returns - The disposable menu added to the View menu or null.\n         */\n        const updateMenu = (area, entryLabel) => {\n            var _a;\n            if (menu === null) {\n                return null;\n            }\n            // Remove the previous menu entry for this side panel.\n            (_a = sidePanelMenu[area]) === null || _a === void 0 ? void 0 : _a.dispose();\n            // Creates a new menu entry and populates it with side panel widgets.\n            const newMenu = new Menu({ commands: app.commands });\n            newMenu.title.label = entryLabel;\n            const widgets = notebookShell.widgets(area);\n            let menuToAdd = false;\n            for (const widget of widgets) {\n                newMenu.addItem({\n                    command: CommandIDs.togglePanel,\n                    args: {\n                        side: area,\n                        title: `Show ${widget.title.caption}`,\n                        id: widget.id,\n                    },\n                });\n                menuToAdd = true;\n            }\n            // If there are widgets, add the menu to the main menu entry.\n            if (menuToAdd) {\n                sidePanelMenu[area] = menu.viewMenu.addItem({\n                    type: 'submenu',\n                    submenu: newMenu,\n                });\n            }\n        };\n        app.restored.then(() => {\n            // Create menu entries for the left and right panel.\n            if (menu) {\n                const getSidePanelLabel = (area) => {\n                    if (area === 'left') {\n                        return trans.__('Left Sidebar');\n                    }\n                    else {\n                        return trans.__('Right Sidebar');\n                    }\n                };\n                const leftArea = notebookShell.leftHandler.area;\n                const leftLabel = getSidePanelLabel(leftArea);\n                updateMenu(leftArea, leftLabel);\n                const rightArea = notebookShell.rightHandler.area;\n                const rightLabel = getSidePanelLabel(rightArea);\n                updateMenu(rightArea, rightLabel);\n                const handleSidePanelChange = (sidePanel, widget) => {\n                    const label = getSidePanelLabel(sidePanel.area);\n                    updateMenu(sidePanel.area, label);\n                };\n                notebookShell.leftHandler.widgetAdded.connect(handleSidePanelChange);\n                notebookShell.leftHandler.widgetRemoved.connect(handleSidePanelChange);\n                notebookShell.rightHandler.widgetAdded.connect(handleSidePanelChange);\n                notebookShell.rightHandler.widgetRemoved.connect(handleSidePanelChange);\n            }\n            // Add palette entries for side panels.\n            if (palette) {\n                const sidePanelPalette = new SidePanelPalette({\n                    commandPalette: palette,\n                    command: CommandIDs.togglePanel,\n                });\n                notebookShell.leftHandler.widgets.forEach((widget) => {\n                    sidePanelPalette.addItem(widget, notebookShell.leftHandler.area);\n                });\n                notebookShell.rightHandler.widgets.forEach((widget) => {\n                    sidePanelPalette.addItem(widget, notebookShell.rightHandler.area);\n                });\n                // Update menu and palette when widgets are added or removed from side panels.\n                notebookShell.leftHandler.widgetAdded.connect((sidePanel, widget) => {\n                    sidePanelPalette.addItem(widget, sidePanel.area);\n                });\n                notebookShell.leftHandler.widgetRemoved.connect((sidePanel, widget) => {\n                    sidePanelPalette.removeItem(widget, sidePanel.area);\n                });\n                notebookShell.rightHandler.widgetAdded.connect((sidePanel, widget) => {\n                    sidePanelPalette.addItem(widget, sidePanel.area);\n                });\n                notebookShell.rightHandler.widgetRemoved.connect((sidePanel, widget) => {\n                    sidePanelPalette.removeItem(widget, sidePanel.area);\n                });\n            }\n        });\n    },\n};\n/**\n * The default tree route resolver plugin.\n */\nconst tree = {\n    id: '@jupyter-notebook/application-extension:tree-resolver',\n    description: 'The default tree route resolver plugin.',\n    autoStart: true,\n    requires: [IRouter],\n    provides: JupyterFrontEnd.ITreeResolver,\n    activate: (app, router) => {\n        const { commands } = app;\n        const set = new DisposableSet();\n        const delegate = new PromiseDelegate();\n        const treePattern = new RegExp('/(/tree/.*)?');\n        set.add(commands.addCommand(CommandIDs.resolveTree, {\n            execute: (async (args) => {\n                var _a;\n                if (set.isDisposed) {\n                    return;\n                }\n                const query = URLExt.queryStringToObject((_a = args.search) !== null && _a !== void 0 ? _a : '');\n                const browser = query['file-browser-path'] || '';\n                // Remove the file browser path from the query string.\n                delete query['file-browser-path'];\n                // Clean up artifacts immediately upon routing.\n                set.dispose();\n                delegate.resolve({ browser, file: PageConfig.getOption('treePath') });\n            }),\n        }));\n        set.add(router.register({ command: CommandIDs.resolveTree, pattern: treePattern }));\n        // If a route is handled by the router without the tree command being\n        // invoked, resolve to `null` and clean up artifacts.\n        const listener = () => {\n            if (set.isDisposed) {\n                return;\n            }\n            set.dispose();\n            delegate.resolve(null);\n        };\n        router.routed.connect(listener);\n        set.add(new DisposableDelegate(() => {\n            router.routed.disconnect(listener);\n        }));\n        return { paths: delegate.promise };\n    },\n};\n/**\n * Plugin to update tree path.\n */\nconst treePathUpdater = {\n    id: '@jupyter-notebook/application-extension:tree-updater',\n    description: 'Plugin to update tree path.',\n    requires: [IRouter],\n    provides: ITreePathUpdater,\n    activate: (app, router) => {\n        function updateTreePath(treePath) {\n            if (treePath !== PageConfig.getOption('treePath')) {\n                const path = URLExt.join(PageConfig.getOption('baseUrl') || '/', 'tree', URLExt.encodeParts(treePath));\n                router.navigate(path, { skipRouting: true });\n                // Persist the new tree path to PageConfig as it is used elsewhere at runtime.\n                PageConfig.setOption('treePath', treePath);\n            }\n        }\n        return updateTreePath;\n    },\n    autoStart: true,\n};\n/**\n * Translator plugin\n */\nconst translator = {\n    id: '@jupyter-notebook/application-extension:translator',\n    description: 'Translator plugin',\n    requires: [INotebookShell, ITranslator],\n    autoStart: true,\n    activate: (app, notebookShell, translator) => {\n        notebookShell.translator = translator;\n    },\n};\n/**\n * Zen mode plugin\n */\nconst zen = {\n    id: '@jupyter-notebook/application-extension:zen',\n    description: 'Zen mode plugin.',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette, INotebookShell],\n    activate: (app, translator, palette, notebookShell) => {\n        const { commands } = app;\n        const elem = document.documentElement;\n        const trans = translator.load('notebook');\n        const toggleOn = () => {\n            notebookShell === null || notebookShell === void 0 ? void 0 : notebookShell.collapseTop();\n            notebookShell === null || notebookShell === void 0 ? void 0 : notebookShell.menu.setHidden(true);\n            zenModeEnabled = true;\n        };\n        const toggleOff = () => {\n            notebookShell === null || notebookShell === void 0 ? void 0 : notebookShell.expandTop();\n            notebookShell === null || notebookShell === void 0 ? void 0 : notebookShell.menu.setHidden(false);\n            zenModeEnabled = false;\n        };\n        let zenModeEnabled = false;\n        commands.addCommand(CommandIDs.toggleZen, {\n            label: trans.__('Toggle Zen Mode'),\n            execute: () => {\n                if (!zenModeEnabled) {\n                    elem.requestFullscreen();\n                    toggleOn();\n                }\n                else {\n                    document.exitFullscreen();\n                    toggleOff();\n                }\n            },\n        });\n        document.addEventListener('fullscreenchange', () => {\n            if (!document.fullscreenElement) {\n                toggleOff();\n            }\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.toggleZen, category: 'Mode' });\n        }\n    },\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    dirty,\n    logo,\n    menus,\n    menuSpacer,\n    opener,\n    pages,\n    pathOpener,\n    paths,\n    rendermime,\n    shell,\n    sidePanelVisibility,\n    splash,\n    status,\n    tabTitle,\n    title,\n    topVisibility,\n    tree,\n    treePathUpdater,\n    translator,\n    zen,\n];\nexport default plugins;\n"],"names":["TREE_PATTERN","RegExp","STRIP_IPYNB","CommandIDs","handleLink","toggleTop","togglePanel","toggleZen","openLab","openTree","rename","resolveTree","dirty","id","description","autoStart","requires","ILabStatus","ITranslator","activate","app","status","translator","NotebookApp","Error","message","load","__","window","addEventListener","event","isDirty","returnValue","logo","baseUrl","PageConfig","getBaseUrl","node","document","createElement","href","target","rel","Widget","jupyterIcon","element","container","elementPosition","padding","height","width","cursor","margin","shell","add","rank","opener","IRouter","IDocumentManager","optional","ISettingRegistry","router","docManager","settingRegistry","commands","docRegistry","command","addCommand","execute","args","_a","parsed","matches","path","match","started","then","async","file","decodeURIComponent","urlParams","URLSearchParams","search","defaultFactory","defaultWidgetFactory","name","defaultViewers","get","composite","getFileTypesForPath","forEach","ft","undefined","getWidgetFactory","factory","open","ref","register","pattern","menus","IMainMenu","menu","tabsMenu","dispose","getOption","editMenu","kernelMenu","runMenu","menuSpacer","DOMUtils","createDomID","addClass","pages","ICommandPalette","palette","trans","label","URLExt","join","page","addItem","category","pathOpener","provides","INotebookPathOpener","defaultNotebookPathOpener","paths","JupyterFrontEnd","IPaths","rendermime","IRenderMimeRegistry","ILatexTypesetter","ISanitizer","IMarkdownParser","latexTypesetter","sanitizer","markdownParser","notebookPathOpener","nullTranslator","services","contents","content","model","prefix","RenderMimeRegistry","initialFactories","standardRendererFactories","linkHandler","tagName","hasAttribute","commandLinker","connectNode","INotebookShell","NotebookShell","notebookShell","settings","customLayout","restoreLayout","catch","reason","console","error","splash","ISplashScreen","restored","style","position","zIndex","show","light","backgroundColor","body","appendChild","DisposableDelegate","removeChild","tabTitle","setTabTitle","current","currentWidget","ConsolePanel","update","title","sessionContext","basename","PathExt","replace","sessionChanged","connect","DocumentWidget","context","pathChanged","currentChanged","IToolbarWidgetRegistry","toolbarRegistry","addFactory","toolbar","widget","addTitle","children","length","h","textContent","marginLeft","isEnabled","contextForWidget","result","renameDialog","newPath","route","encoded","encodeURIComponent","navigate","skipRouting","onclick","topVisibility","top","pluginId","setHidden","isVisible","set","isToggled","adjustToScreen","loadSettings","updateSettings","visible","user","Promise","all","changed","formatChanged","format","expandTop","collapseTop","sidePanelVisibility","caption","_b","leftCollapsed","leftHandler","expandLeft","collapseLeft","activateById","rightCollapsed","rightHandler","expandRight","collapseRight","sidePanelMenu","left","right","updateMenu","area","entryLabel","newMenu","Menu","widgets","menuToAdd","side","viewMenu","type","submenu","getSidePanelLabel","leftArea","leftLabel","rightArea","rightLabel","handleSidePanelChange","sidePanel","widgetAdded","widgetRemoved","sidePanelPalette","SidePanelPalette","commandPalette","removeItem","tree","ITreeResolver","DisposableSet","delegate","PromiseDelegate","treePattern","isDisposed","query","queryStringToObject","browser","resolve","listener","routed","disconnect","promise","treePathUpdater","ITreePathUpdater","treePath","encodeParts","setOption","zen","elem","documentElement","toggleOff","zenModeEnabled","exitFullscreen","requestFullscreen","fullscreenElement"],"sourceRoot":""}