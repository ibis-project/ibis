{"version":3,"file":"8768.cd685a6.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/mermaid/dist/infoDiagram-98fa4f49.js"],"sourcesContent":["import { l as log, z as selectSvgElement, i as configureSvgSize } from \"./mermaid-04fb0060.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"d3\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function() {\n  var o = function(k, v, o2, l) {\n    for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)\n      ;\n    return o2;\n  }, $V0 = [6, 9, 10];\n  var parser2 = {\n    trace: function trace() {\n    },\n    yy: {},\n    symbols_: { \"error\": 2, \"start\": 3, \"info\": 4, \"document\": 5, \"EOF\": 6, \"line\": 7, \"statement\": 8, \"NL\": 9, \"showInfo\": 10, \"$accept\": 0, \"$end\": 1 },\n    terminals_: { 2: \"error\", 4: \"info\", 6: \"EOF\", 9: \"NL\", 10: \"showInfo\" },\n    productions_: [0, [3, 3], [5, 0], [5, 2], [7, 1], [7, 1], [8, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      $$.length - 1;\n      switch (yystate) {\n        case 1:\n          return yy;\n        case 4:\n          break;\n        case 6:\n          yy.setInfo(true);\n          break;\n      }\n    },\n    table: [{ 3: 1, 4: [1, 2] }, { 1: [3] }, o($V0, [2, 2], { 5: 3 }), { 6: [1, 4], 7: 5, 8: 6, 9: [1, 7], 10: [1, 8] }, { 1: [2, 1] }, o($V0, [2, 3]), o($V0, [2, 4]), o($V0, [2, 5]), o($V0, [2, 6])],\n    defaultActions: { 4: [2, 1] },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = { yy: {} };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol, state, action, r, yyval = {}, p, len, newState, expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ];\n            }\n            r = this.performAction.apply(yyval, [\n              yytext,\n              yyleng,\n              yylineno,\n              sharedState.yy,\n              action[1],\n              vstack,\n              lstack\n            ].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function() {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function() {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function(match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function() {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: { \"case-insensitive\": true },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            return 4;\n          case 1:\n            return 9;\n          case 2:\n            return \"space\";\n          case 3:\n            return 10;\n          case 4:\n            return 6;\n          case 5:\n            return \"TXT\";\n        }\n      },\n      rules: [/^(?:info\\b)/i, /^(?:[\\s\\n\\r]+)/i, /^(?:[\\s]+)/i, /^(?:showInfo\\b)/i, /^(?:$)/i, /^(?:.)/i],\n      conditions: { \"INITIAL\": { \"rules\": [0, 1, 2, 3, 4, 5], \"inclusive\": true } }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nconst DEFAULT_INFO_DB = {\n  info: false\n};\nlet info = DEFAULT_INFO_DB.info;\nconst setInfo = (toggle) => {\n  info = toggle;\n};\nconst getInfo = () => info;\nconst clear = () => {\n  info = DEFAULT_INFO_DB.info;\n};\nconst db = {\n  clear,\n  setInfo,\n  getInfo\n};\nconst draw = (text, id, version) => {\n  log.debug(\"rendering info diagram\\n\" + text);\n  const svg = selectSvgElement(id);\n  configureSvgSize(svg, 100, 400, true);\n  const group = svg.append(\"g\");\n  group.append(\"text\").attr(\"x\", 100).attr(\"y\", 40).attr(\"class\", \"version\").attr(\"font-size\", 32).style(\"text-anchor\", \"middle\").text(`v${version}`);\n};\nconst renderer = { draw };\nconst diagram = {\n  parser: parser$1,\n  db,\n  renderer\n};\nexport {\n  diagram\n};\n"],"names":["parser","o","k","v","o2","l","length","$V0","parser2","trace","yy","symbols_","terminals_","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","setInfo","table","defaultActions","parseError","str","hash","recoverable","error","Error","this","parse","input","stack","tstack","vstack","lstack","args","slice","call","arguments","lexer2","Object","create","lexer","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","push","ranges","options","getPrototypeOf","symbol","state","action","r","p","len","newState","expected","token","yyval","pop","lex","Array","errStr","showPosition","join","text","match","line","loc","$","first_line","last_line","first_column","last_column","range","apply","concat","EOF","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","unput","lines","split","substr","oldLines","more","reject","backtrack_lexer","less","n","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","Parser","info","diagram","db","clear","toggle","getInfo","renderer","draw","id","version","debug","svg","append","attr","style"],"sourceRoot":""}