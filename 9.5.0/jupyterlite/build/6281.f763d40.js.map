{"version":3,"file":"6281.f763d40.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lodash-es/clone.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/dagre-d3-es/src/graphlib/json.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/mermaid/dist/index-0980fb80.js"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, g as insertEdge, h as positionEdgeLabel } from \"./edges-5ec2587c.js\";\nimport { l as log, m as evaluate, c as getConfig } from \"./mermaid-04fb0060.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { a as createText } from \"./createText-a48a4c90.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancenstorId) => {\n  log.trace(\"In isDecendant\", ancenstorId, \" \", id, \" = \", descendants[ancenstorId].includes(id));\n  if (descendants[ancenstorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Decendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in decendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Decendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(getConfig().flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + node.x + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  label.attr(\n    \"transform\",\n    \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2 - node.padding / 3 + (evaluate(getConfig().flowchart.htmlLabels) ? 5 : 3)) + \")\"\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramtype, id, parentCluster) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(nodes, node.graph, diagramtype, id, graph.node(v));\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translateing: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramtype, graph, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramtype, id) => {\n  insertMarkers(elem, markers, diagramtype, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", JSON.stringify(graphlibJson.write(graph)));\n  await recursiveRender(elem, graph, diagramtype, id);\n};\nexport {\n  render as r\n};\n"],"names":["value","write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","graph","v","nodeValue","node","parent","e","edgeValue","edge","w","name","clusterDb","descendants","parents","isDescendant","id","ancenstorId","l","trace","includes","copy","clusterId","newGraph","rootId","warn","children","push","forEach","length","data","info","setNode","setParent","debug","data2","edgeInCluster","setEdge","error","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","extractor","depth","hasChildren","dir","rankdir","clusterData","clusterGraph","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","labelText","sorter","result","Object","assign","sorted","shapes","rect","shapeSvg","insert","attr","class","rect2","useHtmlLabels","flowchart","htmlLabels","label","text","labelType","style","labelStyle","appendChild","c","bbox","getBBox","div","dv","getBoundingClientRect","width","height","padding","halfPadding","diff","JSON","stringify","rx","ry","x","y","rectBox","intersect","point","i","roundedWithTitle","classes","innerRect","append","noteGroup","divider","clusterElems","recursiveRender","async","_elem","diagramtype","parentCluster","elem","clusters","edgePaths","edgeLabels","Promise","all","map","parse","o","newEl","u","s","sortNodesByHierarchy","p","shape","insertCluster","paths","n","type","render","markers","removeEdge","specialId","domId","edge1","structuredClone","edge2","arrowTypeEnd","fromCluster","toCluster","adjustClustersAndEdges"],"sourceRoot":""}