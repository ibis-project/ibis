{"version":3,"file":"2622.3d61d64.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/lib/singleWidgetShell.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/lib/singleWidgetApp.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { find } from '@lumino/algorithm';\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, Widget, PanelLayout } from '@lumino/widgets';\n/**\n * The single widget application shell token.\n */\nexport const ISingleWidgetShell = new Token('@jupyterlite/application:ISingleWidgetShell');\n/**\n * The application shell.\n */\nexport class SingleWidgetShell extends Widget {\n    constructor() {\n        super();\n        this._currentChanged = new Signal(this);\n        this.id = 'main';\n        const rootLayout = new PanelLayout();\n        this._main = new Panel();\n        this._main.id = 'single-widget-panel';\n        rootLayout.addWidget(this._main);\n        this.layout = rootLayout;\n    }\n    /**\n     * A signal emitted when the current widget changes.\n     */\n    get currentChanged() {\n        return this._currentChanged;\n    }\n    /**\n     * The current widget in the shell's main area.\n     */\n    get currentWidget() {\n        var _a;\n        return (_a = this._main.widgets[0]) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Activate a widget in its area.\n     */\n    activateById(id) {\n        const widget = find(this.widgets('main'), (w) => w.id === id);\n        if (widget) {\n            widget.activate();\n        }\n    }\n    /**\n     * Add a widget to the application shell.\n     *\n     * @param widget - The widget being added.\n     *\n     * @param area - Optional region in the shell into which the widget should\n     * be added.\n     *\n     * @param options - Optional open options.\n     *\n     */\n    add(widget, area, options) {\n        if (area === 'main' || area === undefined) {\n            if (this._main.widgets.length > 0) {\n                // do not add the widget if there is already one\n                return;\n            }\n            this._main.addWidget(widget);\n            this._main.update();\n            this._currentChanged.emit(void 0);\n        }\n    }\n    /**\n     * Return the list of widgets for the given area.\n     *\n     * @param area The area\n     */\n    *widgets(area) {\n        switch (area !== null && area !== void 0 ? area : 'main') {\n            case 'main':\n                yield* this._main.widgets;\n                break;\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n}\n//# sourceMappingURL=singleWidgetShell.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { createRendermimePlugins } from '@jupyterlab/application/lib/mimerenderers';\nimport { LabStatus } from '@jupyterlab/application/lib/status';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { SingleWidgetShell } from './singleWidgetShell';\n/**\n * App is the main application class. It is instantiated once and shared.\n */\nexport class SingleWidgetApp extends JupyterFrontEnd {\n    /**\n     * Construct a new SingleWidgetApp object.\n     *\n     * @param options The instantiation options for an application.\n     */\n    constructor(options = { shell: new SingleWidgetShell() }) {\n        var _a, _b;\n        super({\n            ...options,\n            shell: (_a = options.shell) !== null && _a !== void 0 ? _a : new SingleWidgetShell(),\n        });\n        /**\n         * The name of the application.\n         */\n        this.name = 'Single Widget Application';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The application busy and dirty status signals and flags.\n         */\n        this.status = new LabStatus(this);\n        /**\n         * The version of the application.\n         */\n        this.version = (_b = PageConfig.getOption('appVersion')) !== null && _b !== void 0 ? _b : 'unknown';\n        if (options.mimeExtensions) {\n            for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n                this.registerPlugin(plugin);\n            }\n        }\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return {\n            urls: {\n                base: PageConfig.getOption('baseUrl'),\n                notFound: PageConfig.getOption('notFoundUrl'),\n                app: PageConfig.getOption('appUrl'),\n                static: PageConfig.getOption('staticUrl'),\n                settings: PageConfig.getOption('settingsUrl'),\n                themes: PageConfig.getOption('themesUrl'),\n                doc: PageConfig.getOption('docUrl'),\n                translations: PageConfig.getOption('translationsApiUrl'),\n                hubHost: PageConfig.getOption('hubHost') || undefined,\n                hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n                hubUser: PageConfig.getOption('hubUser') || undefined,\n                hubServerName: PageConfig.getOption('hubServerName') || undefined,\n            },\n            directories: {\n                appSettings: PageConfig.getOption('appSettingsDir'),\n                schemas: PageConfig.getOption('schemasDir'),\n                static: PageConfig.getOption('staticDir'),\n                templates: PageConfig.getOption('templatesDir'),\n                themes: PageConfig.getOption('themesDir'),\n                userSettings: PageConfig.getOption('userSettingsDir'),\n                serverRoot: PageConfig.getOption('serverRoot'),\n                workspaces: PageConfig.getOption('workspacesDir'),\n            },\n        };\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach((item) => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach((mod) => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n//# sourceMappingURL=singleWidgetApp.js.map"],"names":["ISingleWidgetShell","Token","SingleWidgetShell","Widget","constructor","super","this","_currentChanged","Signal","id","rootLayout","PanelLayout","_main","Panel","addWidget","layout","currentChanged","currentWidget","_a","widgets","activateById","widget","find","w","activate","add","area","options","undefined","length","update","emit","Error","SingleWidgetApp","JupyterFrontEnd","shell","_b","name","namespace","status","version","PageConfig","getOption","mimeExtensions","plugin","registerPlugin","paths","urls","base","notFound","app","static","settings","themes","doc","translations","hubHost","hubPrefix","hubUser","hubServerName","directories","appSettings","schemas","templates","userSettings","serverRoot","workspaces","registerPluginModule","mod","data","default","Object","prototype","hasOwnProperty","call","Array","isArray","forEach","item","error","console","registerPluginModules","mods"],"sourceRoot":""}