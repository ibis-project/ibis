{"version":3,"file":"8929.0b66a95.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lumino/datagrid/dist/index.es6.js"],"sourcesContent":["import { Platform, ClipboardExt, ElementExt } from '@lumino/domutils';\nimport { getKeyboardLayout } from '@lumino/keyboard';\nimport { Drag } from '@lumino/dragdrop';\nimport { some, ArrayExt } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\nimport { Widget, ScrollBar, GridLayout } from '@lumino/widgets';\nimport { ConflatableMessage, MessageLoop } from '@lumino/messaging';\nimport { PromiseDelegate } from '@lumino/coreutils';\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A basic implementation of a data grid key handler.\n *\n * #### Notes\n * This class may be subclassed and customized as needed.\n */\nclass BasicKeyHandler {\n    constructor() {\n        this._disposed = false;\n    }\n    /**\n     * Whether the key handler is disposed.\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n    /**\n     * Dispose of the resources held by the key handler.\n     */\n    dispose() {\n        this._disposed = true;\n    }\n    /**\n     * Handle the key down event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keydown event of interest.\n     *\n     * #### Notes\n     * This will not be called if the mouse button is pressed.\n     */\n    onKeyDown(grid, event) {\n        // if grid is editable and cell selection available, start cell editing\n        // on key press (letters, numbers and space only)\n        if (grid.editable &&\n            grid.selectionModel.cursorRow !== -1 &&\n            grid.selectionModel.cursorColumn !== -1) {\n            const input = String.fromCharCode(event.keyCode);\n            if (/[a-zA-Z0-9-_ ]/.test(input)) {\n                const row = grid.selectionModel.cursorRow;\n                const column = grid.selectionModel.cursorColumn;\n                const cell = {\n                    grid: grid,\n                    row: row,\n                    column: column\n                };\n                grid.editorController.edit(cell);\n                if (getKeyboardLayout().keyForKeydownEvent(event) === 'Space') {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n                return;\n            }\n        }\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'ArrowLeft':\n                this.onArrowLeft(grid, event);\n                break;\n            case 'ArrowRight':\n                this.onArrowRight(grid, event);\n                break;\n            case 'ArrowUp':\n                this.onArrowUp(grid, event);\n                break;\n            case 'ArrowDown':\n                this.onArrowDown(grid, event);\n                break;\n            case 'PageUp':\n                this.onPageUp(grid, event);\n                break;\n            case 'PageDown':\n                this.onPageDown(grid, event);\n                break;\n            case 'Escape':\n                this.onEscape(grid, event);\n                break;\n            case 'Delete':\n                this.onDelete(grid, event);\n                break;\n            case 'C':\n                this.onKeyC(grid, event);\n                break;\n            case 'Enter':\n                if (grid.selectionModel) {\n                    grid.moveCursor(event.shiftKey ? 'up' : 'down');\n                    grid.scrollToCursor();\n                }\n                break;\n            case 'Tab':\n                if (grid.selectionModel) {\n                    grid.moveCursor(event.shiftKey ? 'left' : 'right');\n                    grid.scrollToCursor();\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n                break;\n        }\n    }\n    /**\n     * Handle the `'ArrowLeft'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onArrowLeft(grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(0, grid.scrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('left');\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Handle the row selection mode with accel key.\n        if (mode === 'row' && accel) {\n            grid.scrollTo(0, grid.scrollY);\n            return;\n        }\n        // Handle the row selection mode with no modifier. (ignore shift)\n        if (mode === 'row') {\n            grid.scrollByStep('left');\n            return;\n        }\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 - 1 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = r;\n            r2 = r;\n            c1 = 0;\n            c2 = 0;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r;\n            r2 = r;\n            c1 = c - 1;\n            c2 = c - 1;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    }\n    /**\n     * Handle the `'ArrowRight'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onArrowRight(grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.maxScrollX, grid.scrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('right');\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Handle the row selection model with accel key.\n        if (mode === 'row' && accel) {\n            grid.scrollTo(grid.maxScrollX, grid.scrollY);\n            return;\n        }\n        // Handle the row selection mode with no modifier. (ignore shift)\n        if (mode === 'row') {\n            grid.scrollByStep('right');\n            return;\n        }\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = Infinity;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 + 1 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = r;\n            r2 = r;\n            c1 = Infinity;\n            c2 = Infinity;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r;\n            r2 = r;\n            c1 = c + 1;\n            c2 = c + 1;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    }\n    /**\n     * Handle the `'ArrowUp'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onArrowUp(grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.scrollX, 0);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('up');\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Handle the column selection mode with accel key.\n        if (mode === 'column' && accel) {\n            grid.scrollTo(grid.scrollX, 0);\n            return;\n        }\n        // Handle the column selection mode with no modifier. (ignore shift)\n        if (mode === 'column') {\n            grid.scrollByStep('up');\n            return;\n        }\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 - 1 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = 0;\n            r2 = 0;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r - 1;\n            r2 = r - 1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    }\n    /**\n     * Handle the `'ArrowDown'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onArrowDown(grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.scrollX, grid.maxScrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('down');\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Handle the column selection mode with accel key.\n        if (mode === 'column' && accel) {\n            grid.scrollTo(grid.scrollX, grid.maxScrollY);\n            return;\n        }\n        // Handle the column selection mode with no modifier. (ignore shift)\n        if (mode === 'column') {\n            grid.scrollByStep('down');\n            return;\n        }\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = Infinity;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 + 1 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = Infinity;\n            r2 = Infinity;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r + 1;\n            r2 = r + 1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    }\n    /**\n     * Handle the `'PageUp'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onPageUp(grid, event) {\n        // Ignore the event if the accel key is pressed.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Scroll by page if there is no selection model.\n        if (!model || model.selectionMode === 'column') {\n            grid.scrollByPage('up');\n            return;\n        }\n        // Get the normal number of cells in the page height.\n        let n = Math.floor(grid.pageHeight / grid.defaultSizes.rowHeight);\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Select or resize as needed.\n        if (event.shiftKey) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 - n : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else {\n            r1 = cs ? cs.r1 - n : 0;\n            r2 = r1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        grid.scrollToRow(cs.r2);\n    }\n    /**\n     * Handle the `'PageDown'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onPageDown(grid, event) {\n        // Ignore the event if the accel key is pressed.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Scroll by page if there is no selection model.\n        if (!model || model.selectionMode === 'column') {\n            grid.scrollByPage('down');\n            return;\n        }\n        // Get the normal number of cells in the page height.\n        let n = Math.floor(grid.pageHeight / grid.defaultSizes.rowHeight);\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Select or resize as needed.\n        if (event.shiftKey) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 + n : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else {\n            r1 = cs ? cs.r1 + n : 0;\n            r2 = r1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        grid.scrollToRow(cs.r2);\n    }\n    /**\n     * Handle the `'Escape'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onEscape(grid, event) {\n        if (grid.selectionModel) {\n            grid.selectionModel.clear();\n        }\n    }\n    /**\n     * Handle the `'Delete'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onDelete(grid, event) {\n        if (grid.editable && !grid.selectionModel.isEmpty) {\n            const dataModel = grid.dataModel;\n            // Fetch the max row and column.\n            let maxRow = dataModel.rowCount('body') - 1;\n            let maxColumn = dataModel.columnCount('body') - 1;\n            for (let s of grid.selectionModel.selections()) {\n                // Clamp the cell to the model bounds.\n                let sr1 = Math.max(0, Math.min(s.r1, maxRow));\n                let sc1 = Math.max(0, Math.min(s.c1, maxColumn));\n                let sr2 = Math.max(0, Math.min(s.r2, maxRow));\n                let sc2 = Math.max(0, Math.min(s.c2, maxColumn));\n                for (let r = sr1; r <= sr2; ++r) {\n                    for (let c = sc1; c <= sc2; ++c) {\n                        dataModel.setData('body', r, c, null);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Handle the `'C'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onKeyC(grid, event) {\n        // Bail early if the modifiers aren't correct for copy.\n        if (event.shiftKey || !Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Copy the current selection to the clipboard.\n        grid.copyToClipboard();\n    }\n}\n\n/**\n * An object which renders the cells of a data grid.\n *\n * #### Notes\n * If the predefined cell renderers are insufficient for a particular\n * use case, a custom cell renderer can be defined which derives from\n * this class.\n *\n * The data grid renders cells in column-major order, by region. The\n * region order is: body, row header, column header, corner header.\n */\nclass CellRenderer {\n}\n/**\n * The namespace for the `CellRenderer` class statics.\n */\n(function (CellRenderer) {\n    /**\n     * Resolve a config option for a cell renderer.\n     *\n     * @param option - The config option to resolve.\n     *\n     * @param config - The cell config object.\n     *\n     * @returns The resolved value for the option.\n     */\n    function resolveOption(option, config) {\n        return typeof option === 'function'\n            ? option(config)\n            : option;\n    }\n    CellRenderer.resolveOption = resolveOption;\n})(CellRenderer || (CellRenderer = {}));\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A cell renderer which renders data values as text.\n */\nclass TextRenderer extends CellRenderer {\n    /**\n     * Construct a new text renderer.\n     *\n     * @param options - The options for initializing the renderer.\n     */\n    constructor(options = {}) {\n        super();\n        this.font = options.font || '12px sans-serif';\n        this.textColor = options.textColor || '#000000';\n        this.backgroundColor = options.backgroundColor || '';\n        this.verticalAlignment = options.verticalAlignment || 'center';\n        this.horizontalAlignment = options.horizontalAlignment || 'left';\n        this.horizontalPadding = options.horizontalPadding || 8;\n        this.format = options.format || TextRenderer.formatGeneric();\n        this.elideDirection = options.elideDirection || 'none';\n        this.wrapText = options.wrapText || false;\n    }\n    /**\n     * Paint the content for a cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    paint(gc, config) {\n        this.drawBackground(gc, config);\n        this.drawText(gc, config);\n    }\n    /**\n     * Draw the background for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    drawBackground(gc, config) {\n        // Resolve the background color for the cell.\n        let color = CellRenderer.resolveOption(this.backgroundColor, config);\n        // Bail if there is no background color to draw.\n        if (!color) {\n            return;\n        }\n        // Fill the cell with the background color.\n        gc.fillStyle = color;\n        gc.fillRect(config.x, config.y, config.width, config.height);\n    }\n    /**\n     * Get the full text to be rendered by the cell.\n     */\n    getText(config) {\n        return this.format(config);\n    }\n    /**\n     * Draw the text for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    drawText(gc, config) {\n        // Resolve the font for the cell.\n        let font = CellRenderer.resolveOption(this.font, config);\n        // Bail if there is no font to draw.\n        if (!font) {\n            return;\n        }\n        // Resolve the text color for the cell.\n        let color = CellRenderer.resolveOption(this.textColor, config);\n        // Bail if there is no text color to draw.\n        if (!color) {\n            return;\n        }\n        // Format the cell value to text.\n        let text = this.getText(config);\n        // Bail if there is no text to draw.\n        if (!text) {\n            return;\n        }\n        // Resolve the vertical and horizontal alignment.\n        let vAlign = CellRenderer.resolveOption(this.verticalAlignment, config);\n        let hAlign = CellRenderer.resolveOption(this.horizontalAlignment, config);\n        // Resolve the elision direction\n        let elideDirection = CellRenderer.resolveOption(this.elideDirection, config);\n        // Resolve the text wrapping flag\n        let wrapText = CellRenderer.resolveOption(this.wrapText, config);\n        // Compute the padded text box height for the specified alignment.\n        let boxHeight = config.height - (vAlign === 'center' ? 1 : 2);\n        // Bail if the text box has no effective size.\n        if (boxHeight <= 0) {\n            return;\n        }\n        // Compute the text height for the gc font.\n        let textHeight = TextRenderer.measureFontHeight(font);\n        // Set up the text position variables.\n        let textX;\n        let textY;\n        let boxWidth;\n        // Compute the Y position for the text.\n        switch (vAlign) {\n            case 'top':\n                textY = config.y + 2 + textHeight;\n                break;\n            case 'center':\n                textY = config.y + config.height / 2 + textHeight / 2;\n                break;\n            case 'bottom':\n                textY = config.y + config.height - 2;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the X position for the text.\n        switch (hAlign) {\n            case 'left':\n                textX = config.x + this.horizontalPadding;\n                boxWidth = config.width - 14;\n                break;\n            case 'center':\n                textX = config.x + config.width / 2;\n                boxWidth = config.width;\n                break;\n            case 'right':\n                textX = config.x + config.width - this.horizontalPadding;\n                boxWidth = config.width - 14;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Clip the cell if the text is taller than the text box height.\n        if (textHeight > boxHeight) {\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n        }\n        // Set the gc state.\n        gc.font = font;\n        gc.fillStyle = color;\n        gc.textAlign = hAlign;\n        gc.textBaseline = 'bottom';\n        // Terminate call here if we're not eliding or wrapping text\n        if (elideDirection === 'none' && !wrapText) {\n            gc.fillText(text, textX, textY);\n            return;\n        }\n        // The current text width in pixels.\n        let textWidth = gc.measureText(text).width;\n        // Apply text wrapping if enabled.\n        if (wrapText && textWidth > boxWidth) {\n            // Make sure box clipping happens.\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n            // Split column name to words based on\n            // whitespace preceding a word boundary.\n            // \"Hello  world\" --> [\"Hello  \", \"world\"]\n            const wordsInColumn = text.split(/\\s(?=\\b)/);\n            // Y-coordinate offset for any additional lines\n            let curY = textY;\n            let textInCurrentLine = wordsInColumn.shift();\n            // Single word. Applying text wrap on word by splitting\n            // it into characters and fitting the maximum number of\n            // characters possible per line (box width).\n            if (wordsInColumn.length === 0) {\n                let curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                while (curLineTextWidth > boxWidth && textInCurrentLine !== '') {\n                    // Iterating from the end of the string until we find a\n                    // substring (0,i) which has a width less than the box width.\n                    for (let i = textInCurrentLine.length; i > 0; i--) {\n                        const curSubString = textInCurrentLine.substring(0, i);\n                        const curSubStringWidth = gc.measureText(curSubString).width;\n                        if (curSubStringWidth < boxWidth || curSubString.length === 1) {\n                            // Found a substring which has a width less than the current\n                            // box width. Rendering that substring on the current line\n                            // and setting the remainder of the parent string as the next\n                            // string to iterate on for the next line.\n                            const nextLineText = textInCurrentLine.substring(i, textInCurrentLine.length);\n                            textInCurrentLine = nextLineText;\n                            curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                            gc.fillText(curSubString, textX, curY);\n                            curY += textHeight;\n                            // No need to continue iterating after we identified\n                            // an index to break the string on.\n                            break;\n                        }\n                    }\n                }\n            }\n            // Multiple words in column header. Fitting maximum\n            // number of words possible per line (box width).\n            else {\n                while (wordsInColumn.length !== 0) {\n                    // Processing the next word in the queue.\n                    const curWord = wordsInColumn.shift();\n                    // Joining that word with the existing text for\n                    // the current line.\n                    const incrementedText = [textInCurrentLine, curWord].join(' ');\n                    const incrementedTextWidth = gc.measureText(incrementedText).width;\n                    if (incrementedTextWidth > boxWidth) {\n                        // If the newly combined text has a width larger than\n                        // the box width, we render the line before the current\n                        // word was added. We set the current word as the next\n                        // line.\n                        gc.fillText(textInCurrentLine, textX, curY);\n                        curY += textHeight;\n                        textInCurrentLine = curWord;\n                    }\n                    else {\n                        // The combined text hasd a width less than the box width. We\n                        // set the the current line text to be the new combined text.\n                        textInCurrentLine = incrementedText;\n                    }\n                }\n            }\n            gc.fillText(textInCurrentLine, textX, curY);\n            // Terminating the call here as we don't want\n            // to apply text eliding when wrapping is active.\n            return;\n        }\n        // Elide text that is too long\n        const elide = '\\u2026';\n        // Loop until text width fits box or only one character remains\n        while (textWidth > boxWidth && text.length > 1) {\n            // Convert text string to array for dealing with astral symbols\n            const textArr = [...text];\n            if (elideDirection === 'right') {\n                // If text width is substantially bigger, take half the string\n                if (textArr.length > 4 && textWidth >= 2 * boxWidth) {\n                    text =\n                        textArr.slice(0, Math.floor(textArr.length / 2 + 1)).join('') +\n                            elide;\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = textArr.slice(0, textArr.length - 2).join('') + elide;\n                }\n            }\n            else {\n                // If text width is substantially bigger, take half the string\n                if (textArr.length > 4 && textWidth >= 2 * boxWidth) {\n                    text = elide + textArr.slice(Math.floor(textArr.length / 2)).join('');\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = elide + textArr.slice(2).join('');\n                }\n            }\n            // Measure new text width\n            textWidth = gc.measureText(text).width;\n        }\n        // Draw the text for the cell.\n        gc.fillText(text, textX, textY);\n    }\n}\n/**\n * The namespace for the `TextRenderer` class statics.\n */\n(function (TextRenderer) {\n    /**\n     * Create a generic text format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new generic text format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `String()` to coerce any value\n     * to a string.\n     */\n    function formatGeneric(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return String(value);\n        };\n    }\n    TextRenderer.formatGeneric = formatGeneric;\n    /**\n     * Create a fixed decimal format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new fixed decimal format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toFixed()` to\n     * coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatFixed(options = {}) {\n        let digits = options.digits;\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toFixed(digits);\n        };\n    }\n    TextRenderer.formatFixed = formatFixed;\n    /**\n     * Create a significant figure format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new significant figure format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toPrecision()`\n     * to coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatPrecision(options = {}) {\n        let digits = options.digits;\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toPrecision(digits);\n        };\n    }\n    TextRenderer.formatPrecision = formatPrecision;\n    /**\n     * Create a scientific notation format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new scientific notation format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toExponential()`\n     * to coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatExponential(options = {}) {\n        let digits = options.digits;\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toExponential(digits);\n        };\n    }\n    TextRenderer.formatExponential = formatExponential;\n    /**\n     * Create an international number format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new international number format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Intl.NumberFormat` object to\n     * coerce values.\n     *\n     * This is the most flexible (but slowest) number formatter.\n     */\n    function formatIntlNumber(options = {}) {\n        let missing = options.missing || '';\n        let nft = new Intl.NumberFormat(options.locales, options.options);\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return nft.format(value);\n        };\n    }\n    TextRenderer.formatIntlNumber = formatIntlNumber;\n    /**\n     * Create a date format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new date format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toDateString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatDate(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toDateString();\n            }\n            return new Date(value).toDateString();\n        };\n    }\n    TextRenderer.formatDate = formatDate;\n    /**\n     * Create a time format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new time format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toTimeString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatTime(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toTimeString();\n            }\n            return new Date(value).toTimeString();\n        };\n    }\n    TextRenderer.formatTime = formatTime;\n    /**\n     * Create an ISO datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new ISO datetime format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toISOString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatISODateTime(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toISOString();\n            }\n            return new Date(value).toISOString();\n        };\n    }\n    TextRenderer.formatISODateTime = formatISODateTime;\n    /**\n     * Create a UTC datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new UTC datetime format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toUTCString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatUTCDateTime(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toUTCString();\n            }\n            return new Date(value).toUTCString();\n        };\n    }\n    TextRenderer.formatUTCDateTime = formatUTCDateTime;\n    /**\n     * Create an international datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new international datetime format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Intl.DateTimeFormat` object to\n     * coerce values.\n     *\n     * This is the most flexible (but slowest) datetime formatter.\n     */\n    function formatIntlDateTime(options = {}) {\n        let missing = options.missing || '';\n        let dtf = new Intl.DateTimeFormat(options.locales, options.options);\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return dtf.format(value);\n        };\n    }\n    TextRenderer.formatIntlDateTime = formatIntlDateTime;\n    /**\n     * Measure the height of a font.\n     *\n     * @param font - The CSS font string of interest.\n     *\n     * @returns The height of the font bounding box.\n     *\n     * #### Notes\n     * This function uses a temporary DOM node to measure the text box\n     * height for the specified font. The first call for a given font\n     * will incur a DOM reflow, but the return value is cached, so any\n     * subsequent call for the same font will return the cached value.\n     */\n    function measureFontHeight(font) {\n        // Look up the cached font height.\n        let height = Private$6.fontHeightCache[font];\n        // Return the cached font height if it exists.\n        if (height !== undefined) {\n            return height;\n        }\n        // Normalize the font.\n        Private$6.fontMeasurementGC.font = font;\n        let normFont = Private$6.fontMeasurementGC.font;\n        // Set the font on the measurement node.\n        Private$6.fontMeasurementNode.style.font = normFont;\n        // Add the measurement node to the document.\n        document.body.appendChild(Private$6.fontMeasurementNode);\n        // Measure the node height.\n        height = Private$6.fontMeasurementNode.offsetHeight;\n        // Remove the measurement node from the document.\n        document.body.removeChild(Private$6.fontMeasurementNode);\n        // Cache the measured height for the font and norm font.\n        Private$6.fontHeightCache[font] = height;\n        Private$6.fontHeightCache[normFont] = height;\n        // Return the measured height.\n        return height;\n    }\n    TextRenderer.measureFontHeight = measureFontHeight;\n})(TextRenderer || (TextRenderer = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private$6;\n(function (Private) {\n    /**\n     * A cache of measured font heights.\n     */\n    Private.fontHeightCache = Object.create(null);\n    /**\n     * The DOM node used for font height measurement.\n     */\n    Private.fontMeasurementNode = (() => {\n        let node = document.createElement('div');\n        node.style.position = 'absolute';\n        node.style.top = '-99999px';\n        node.style.left = '-99999px';\n        node.style.visibility = 'hidden';\n        node.textContent = 'M';\n        return node;\n    })();\n    /**\n     * The GC used for font measurement.\n     */\n    Private.fontMeasurementGC = (() => {\n        let canvas = document.createElement('canvas');\n        canvas.width = 0;\n        canvas.height = 0;\n        return canvas.getContext('2d');\n    })();\n})(Private$6 || (Private$6 = {}));\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A cell renderer which renders data values as text.\n */\nclass HyperlinkRenderer extends TextRenderer {\n    /**\n     * Construct a new text renderer.\n     *\n     * @param options - The options for initializing the renderer.\n     */\n    constructor(options = {}) {\n        // Set default parameters before passing over the super.\n        options.textColor = options.textColor || 'navy';\n        options.font = options.font || 'bold 12px sans-serif';\n        super(options);\n        this.url = options.url;\n        this.urlName = options.urlName;\n    }\n    /**\n     * Get the full text to be rendered by the cell.\n     */\n    getText(config) {\n        let urlName = CellRenderer.resolveOption(this.urlName, config);\n        // If we have a friendly URL name, use that.\n        if (urlName) {\n            return this.format({\n                ...config,\n                value: urlName\n            });\n        }\n        // Otherwise use the raw value attribute.\n        return this.format(config);\n    }\n    /**\n     * Draw the text for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    drawText(gc, config) {\n        // Resolve the font for the cell.\n        let font = CellRenderer.resolveOption(this.font, config);\n        // Bail if there is no font to draw.\n        if (!font) {\n            return;\n        }\n        // Resolve the text color for the cell.\n        let color = CellRenderer.resolveOption(this.textColor, config);\n        // Bail if there is no text color to draw.\n        if (!color) {\n            return;\n        }\n        let text = this.getText(config);\n        // Bail if there is no text to draw.\n        if (!text) {\n            return;\n        }\n        // Resolve the vertical and horizontal alignment.\n        let vAlign = CellRenderer.resolveOption(this.verticalAlignment, config);\n        let hAlign = CellRenderer.resolveOption(this.horizontalAlignment, config);\n        // Resolve the elision direction\n        let elideDirection = CellRenderer.resolveOption(this.elideDirection, config);\n        // Resolve the text wrapping flag\n        let wrapText = CellRenderer.resolveOption(this.wrapText, config);\n        // Compute the padded text box height for the specified alignment.\n        let boxHeight = config.height - (vAlign === 'center' ? 1 : 2);\n        // Bail if the text box has no effective size.\n        if (boxHeight <= 0) {\n            return;\n        }\n        // Compute the text height for the gc font.\n        let textHeight = HyperlinkRenderer.measureFontHeight(font);\n        // Set up the text position variables.\n        let textX;\n        let textY;\n        let boxWidth;\n        // Compute the Y position for the text.\n        switch (vAlign) {\n            case 'top':\n                textY = config.y + 2 + textHeight;\n                break;\n            case 'center':\n                textY = config.y + config.height / 2 + textHeight / 2;\n                break;\n            case 'bottom':\n                textY = config.y + config.height - 2;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the X position for the text.\n        switch (hAlign) {\n            case 'left':\n                textX = config.x + 8;\n                boxWidth = config.width - 14;\n                break;\n            case 'center':\n                textX = config.x + config.width / 2;\n                boxWidth = config.width;\n                break;\n            case 'right':\n                textX = config.x + config.width - 8;\n                boxWidth = config.width - 14;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Clip the cell if the text is taller than the text box height.\n        if (textHeight > boxHeight) {\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n        }\n        // Set the gc state.\n        gc.font = font;\n        gc.fillStyle = color;\n        gc.textAlign = hAlign;\n        gc.textBaseline = 'bottom';\n        // Terminate call here if we're not eliding or wrapping text\n        if (elideDirection === 'none' && !wrapText) {\n            gc.fillText(text, textX, textY);\n            return;\n        }\n        // The current text width in pixels.\n        let textWidth = gc.measureText(text).width;\n        // Apply text wrapping if enabled.\n        if (wrapText && textWidth > boxWidth) {\n            // Make sure box clipping happens.\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n            // Split column name to words based on\n            // whitespace preceding a word boundary.\n            // \"Hello  world\" --> [\"Hello  \", \"world\"]\n            const wordsInColumn = text.split(/\\s(?=\\b)/);\n            // Y-coordinate offset for any additional lines\n            let curY = textY;\n            let textInCurrentLine = wordsInColumn.shift();\n            // Single word. Applying text wrap on word by splitting\n            // it into characters and fitting the maximum number of\n            // characters possible per line (box width).\n            if (wordsInColumn.length === 0) {\n                let curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                while (curLineTextWidth > boxWidth && textInCurrentLine !== '') {\n                    // Iterating from the end of the string until we find a\n                    // substring (0,i) which has a width less than the box width.\n                    for (let i = textInCurrentLine.length; i > 0; i--) {\n                        const curSubString = textInCurrentLine.substring(0, i);\n                        const curSubStringWidth = gc.measureText(curSubString).width;\n                        if (curSubStringWidth < boxWidth || curSubString.length === 1) {\n                            // Found a substring which has a width less than the current\n                            // box width. Rendering that substring on the current line\n                            // and setting the remainder of the parent string as the next\n                            // string to iterate on for the next line.\n                            const nextLineText = textInCurrentLine.substring(i, textInCurrentLine.length);\n                            textInCurrentLine = nextLineText;\n                            curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                            gc.fillText(curSubString, textX, curY);\n                            curY += textHeight;\n                            // No need to continue iterating after we identified\n                            // an index to break the string on.\n                            break;\n                        }\n                    }\n                }\n            }\n            // Multiple words in column header. Fitting maximum\n            // number of words possible per line (box width).\n            else {\n                while (wordsInColumn.length !== 0) {\n                    // Processing the next word in the queue.\n                    const curWord = wordsInColumn.shift();\n                    // Joining that word with the existing text for\n                    // the current line.\n                    const incrementedText = [textInCurrentLine, curWord].join(' ');\n                    const incrementedTextWidth = gc.measureText(incrementedText).width;\n                    if (incrementedTextWidth > boxWidth) {\n                        // If the newly combined text has a width larger than\n                        // the box width, we render the line before the current\n                        // word was added. We set the current word as the next\n                        // line.\n                        gc.fillText(textInCurrentLine, textX, curY);\n                        curY += textHeight;\n                        textInCurrentLine = curWord;\n                    }\n                    else {\n                        // The combined text hasd a width less than the box width. We\n                        // set the the current line text to be the new combined text.\n                        textInCurrentLine = incrementedText;\n                    }\n                }\n            }\n            gc.fillText(textInCurrentLine, textX, curY);\n            // Terminating the call here as we don't want\n            // to apply text eliding when wrapping is active.\n            return;\n        }\n        // Elide text that is too long\n        let elide = '\\u2026';\n        // Compute elided text\n        if (elideDirection === 'right') {\n            while (textWidth > boxWidth && text.length > 1) {\n                if (text.length > 4 && textWidth >= 2 * boxWidth) {\n                    // If text width is substantially bigger, take half the string\n                    text = text.substring(0, text.length / 2 + 1) + elide;\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = text.substring(0, text.length - 2) + elide;\n                }\n                textWidth = gc.measureText(text).width;\n            }\n        }\n        else {\n            while (textWidth > boxWidth && text.length > 1) {\n                if (text.length > 4 && textWidth >= 2 * boxWidth) {\n                    // If text width is substantially bigger, take half the string\n                    text = elide + text.substring(text.length / 2);\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = elide + text.substring(2);\n                }\n                textWidth = gc.measureText(text).width;\n            }\n        }\n        // Draw the text for the cell.\n        gc.fillText(text, textX, textY);\n    }\n}\n\n/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n/**\n * A collection of helper functions relating to merged cell groups\n */\nvar CellGroup;\n(function (CellGroup) {\n    /**\n     * Checks if two cell-groups are intersecting\n     * in the given axis.\n     * @param group1\n     * @param group2\n     * @param axis\n     */\n    function areCellGroupsIntersectingAtAxis(group1, group2, axis) {\n        if (axis === 'row') {\n            return ((group1.r1 >= group2.r1 && group1.r1 <= group2.r2) ||\n                (group1.r2 >= group2.r1 && group1.r2 <= group2.r2) ||\n                (group2.r1 >= group1.r1 && group2.r1 <= group1.r2) ||\n                (group2.r2 >= group1.r1 && group2.r2 <= group1.r2));\n        }\n        return ((group1.c1 >= group2.c1 && group1.c1 <= group2.c2) ||\n            (group1.c2 >= group2.c1 && group1.c2 <= group2.c2) ||\n            (group2.c1 >= group1.c1 && group2.c1 <= group1.c2) ||\n            (group2.c2 >= group1.c1 && group2.c2 <= group1.c2));\n    }\n    CellGroup.areCellGroupsIntersectingAtAxis = areCellGroupsIntersectingAtAxis;\n    /**\n     * Checks if cell-groups are intersecting.\n     * @param group1\n     * @param group2\n     */\n    function areCellGroupsIntersecting(group1, group2) {\n        return (((group1.r1 >= group2.r1 && group1.r1 <= group2.r2) ||\n            (group1.r2 >= group2.r1 && group1.r2 <= group2.r2) ||\n            (group2.r1 >= group1.r1 && group2.r1 <= group1.r2) ||\n            (group2.r2 >= group1.r1 && group2.r2 <= group1.r2)) &&\n            ((group1.c1 >= group2.c1 && group1.c1 <= group2.c2) ||\n                (group1.c2 >= group2.c1 && group1.c2 <= group2.c2) ||\n                (group2.c1 >= group1.c1 && group2.c1 <= group1.c2) ||\n                (group2.c2 >= group1.c1 && group2.c2 <= group1.c2)));\n    }\n    CellGroup.areCellGroupsIntersecting = areCellGroupsIntersecting;\n    /**\n     * Retrieves the index of the cell-group to which\n     * the cell at the given row, column belongs.\n     * @param dataModel\n     * @param rgn\n     * @param row\n     * @param column\n     */\n    function getGroupIndex(dataModel, rgn, row, column) {\n        const numGroups = dataModel.groupCount(rgn);\n        for (let i = 0; i < numGroups; i++) {\n            const group = dataModel.group(rgn, i);\n            if (row >= group.r1 &&\n                row <= group.r2 &&\n                column >= group.c1 &&\n                column <= group.c2) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    CellGroup.getGroupIndex = getGroupIndex;\n    /**\n     * Returns a cell-group for the given row/index coordinates.\n     * @param dataModel\n     * @param rgn\n     * @param row\n     * @param column\n     */\n    function getGroup(dataModel, rgn, row, column) {\n        const groupIndex = getGroupIndex(dataModel, rgn, row, column);\n        if (groupIndex === -1) {\n            return null;\n        }\n        return dataModel.group(rgn, groupIndex);\n    }\n    CellGroup.getGroup = getGroup;\n    /**\n     * Returns all cell groups which belong to\n     * a given cell cell region.\n     * @param dataModel\n     * @param rgn\n     */\n    function getCellGroupsAtRegion(dataModel, rgn) {\n        let groupsAtRegion = [];\n        const numGroups = dataModel.groupCount(rgn);\n        for (let i = 0; i < numGroups; i++) {\n            const group = dataModel.group(rgn, i);\n            groupsAtRegion.push(group);\n        }\n        return groupsAtRegion;\n    }\n    CellGroup.getCellGroupsAtRegion = getCellGroupsAtRegion;\n    /**\n     * Calculates and returns a merged cell-group from\n     * two cell-group objects.\n     * @param groups\n     */\n    function joinCellGroups(groups) {\n        let startRow = Number.MAX_VALUE;\n        let endRow = Number.MIN_VALUE;\n        let startColumn = Number.MAX_VALUE;\n        let endColumn = Number.MIN_VALUE;\n        for (const group of groups) {\n            startRow = Math.min(startRow, group.r1);\n            endRow = Math.max(endRow, group.r2);\n            startColumn = Math.min(startColumn, group.c1);\n            endColumn = Math.max(endColumn, group.c2);\n        }\n        return { r1: startRow, r2: endRow, c1: startColumn, c2: endColumn };\n    }\n    CellGroup.joinCellGroups = joinCellGroups;\n    /**\n     * Merges a cell group with other cells groups in the\n     * same region if they intersect.\n     * @param dataModel the data model of the grid.\n     * @param group the target cell group.\n     * @param region the region of the cell group.\n     * @returns a new cell group after merging has happened.\n     */\n    function joinCellGroupWithMergedCellGroups(dataModel, group, region) {\n        let joinedGroup = { ...group };\n        const mergedCellGroups = getCellGroupsAtRegion(dataModel, region);\n        for (let g = 0; g < mergedCellGroups.length; g++) {\n            const mergedGroup = mergedCellGroups[g];\n            if (areCellGroupsIntersecting(joinedGroup, mergedGroup)) {\n                joinedGroup = joinCellGroups([joinedGroup, mergedGroup]);\n            }\n        }\n        return joinedGroup;\n    }\n    CellGroup.joinCellGroupWithMergedCellGroups = joinCellGroupWithMergedCellGroups;\n    /**\n     * Retrieves a list of cell groups intersecting at\n     * a given row.\n     * @param dataModel data model of the grid.\n     * @param rgn the cell region.\n     * @param row the target row to look for intersections at.\n     * @returns all cell groups intersecting with the row.\n     */\n    function getCellGroupsAtRow(dataModel, rgn, row) {\n        let groupsAtRow = [];\n        const numGroups = dataModel.groupCount(rgn);\n        for (let i = 0; i < numGroups; i++) {\n            const group = dataModel.group(rgn, i);\n            if (row >= group.r1 && row <= group.r2) {\n                groupsAtRow.push(group);\n            }\n        }\n        return groupsAtRow;\n    }\n    CellGroup.getCellGroupsAtRow = getCellGroupsAtRow;\n    /**\n     * Retrieves a list of cell groups intersecting at\n     * a given column.\n     * @param dataModel data model of the grid.\n     * @param rgn the cell region.\n     * @param column the target column to look for intersections at.\n     * @returns all cell groups intersecting with the column.\n     */\n    function getCellGroupsAtColumn(dataModel, rgn, column) {\n        let groupsAtColumn = [];\n        const numGroups = dataModel.groupCount(rgn);\n        for (let i = 0; i < numGroups; i++) {\n            const group = dataModel.group(rgn, i);\n            if (column >= group.c1 && column <= group.c2) {\n                groupsAtColumn.push(group);\n            }\n        }\n        return groupsAtColumn;\n    }\n    CellGroup.getCellGroupsAtColumn = getCellGroupsAtColumn;\n    /**\n     * Merges a target cell group with any cell groups\n     * it intersects with at a given row or column.\n     * @param dataModel data model of the grid.\n     * @param regions list of cell regions.\n     * @param axis row or column.\n     * @param group the target cell group.\n     * @returns a new merged cell group.\n     */\n    function joinCellGroupsIntersectingAtAxis(dataModel, regions, axis, group) {\n        let groupsAtAxis = [];\n        if (axis === 'row') {\n            for (const region of regions) {\n                for (let r = group.r1; r <= group.r2; r++) {\n                    groupsAtAxis = groupsAtAxis.concat(CellGroup.getCellGroupsAtRow(dataModel, region, r));\n                }\n            }\n        }\n        else {\n            for (const region of regions) {\n                for (let c = group.c1; c <= group.c2; c++) {\n                    groupsAtAxis = groupsAtAxis.concat(CellGroup.getCellGroupsAtColumn(dataModel, region, c));\n                }\n            }\n        }\n        let mergedGroupAtAxis = CellGroup.joinCellGroups(groupsAtAxis);\n        if (groupsAtAxis.length > 0) {\n            let mergedCellGroups = [];\n            for (const region of regions) {\n                mergedCellGroups = mergedCellGroups.concat(CellGroup.getCellGroupsAtRegion(dataModel, region));\n            }\n            for (let g = 0; g < mergedCellGroups.length; g++) {\n                const group = mergedCellGroups[g];\n                if (CellGroup.areCellGroupsIntersectingAtAxis(mergedGroupAtAxis, group, axis)) {\n                    mergedGroupAtAxis = CellGroup.joinCellGroups([\n                        group,\n                        mergedGroupAtAxis\n                    ]);\n                    mergedCellGroups.splice(g, 1);\n                    g = 0;\n                }\n            }\n        }\n        return mergedGroupAtAxis;\n    }\n    CellGroup.joinCellGroupsIntersectingAtAxis = joinCellGroupsIntersectingAtAxis;\n})(CellGroup || (CellGroup = {}));\n\n/**\n * A basic implementation of a data grid mouse handler.\n *\n * #### Notes\n * This class may be subclassed and customized as needed.\n */\nclass BasicMouseHandler {\n    constructor() {\n        this._disposed = false;\n        this._pressData = null;\n    }\n    /**\n     * Dispose of the resources held by the mouse handler.\n     */\n    dispose() {\n        // Bail early if the handler is already disposed.\n        if (this._disposed) {\n            return;\n        }\n        // Release any held resources.\n        this.release();\n        // Mark the handler as disposed.\n        this._disposed = true;\n    }\n    /**\n     * Whether the mouse handler is disposed.\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n    /**\n     * Release the resources held by the handler.\n     */\n    release() {\n        // Bail early if the is no press data.\n        if (!this._pressData) {\n            return;\n        }\n        // Clear the autoselect timeout.\n        if (this._pressData.type === 'select') {\n            this._pressData.timeout = -1;\n        }\n        // Clear the press data.\n        this._pressData.override.dispose();\n        this._pressData = null;\n    }\n    /**\n     * Handle the mouse hover event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse hover event of interest.\n     */\n    onMouseHover(grid, event) {\n        // Hit test the grid.\n        let hit = grid.hitTest(event.clientX, event.clientY);\n        // Get the resize handle for the hit test.\n        let handle = Private$5.resizeHandleForHitTest(hit);\n        // Fetch the cursor for the handle.\n        let cursor = this.cursorForHandle(handle);\n        // Hyperlink logic.\n        const config = Private$5.createCellConfigObject(grid, hit);\n        if (config) {\n            // Retrieve renderer for hovered cell.\n            const renderer = grid.cellRenderers.get(config);\n            if (renderer instanceof HyperlinkRenderer) {\n                cursor = this.cursorForHandle('hyperlink');\n            }\n        }\n        // Update the viewport cursor based on the part.\n        grid.viewport.node.style.cursor = cursor;\n        // TODO support user-defined hover items\n    }\n    /**\n     * Handle the mouse leave event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse hover event of interest.\n     */\n    onMouseLeave(grid, event) {\n        // TODO support user-defined hover popups.\n        // Clear the viewport cursor.\n        grid.viewport.node.style.cursor = '';\n    }\n    /**\n     * Handle the mouse down event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse down event of interest.\n     */\n    onMouseDown(grid, event) {\n        // Unpack the event.\n        let { clientX, clientY } = event;\n        // Hit test the grid.\n        let hit = grid.hitTest(clientX, clientY);\n        // Unpack the hit test.\n        const { region, row, column } = hit;\n        // Bail if the hit test is on an uninteresting region.\n        if (region === 'void') {\n            return;\n        }\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Hyperlink logic.\n        if (grid) {\n            // Create cell config object.\n            const config = Private$5.createCellConfigObject(grid, hit);\n            // Retrieve cell renderer.\n            let renderer = grid.cellRenderers.get(config);\n            // Only process hyperlink renderers.\n            if (renderer instanceof HyperlinkRenderer) {\n                // Use the url param if it exists.\n                let url = CellRenderer.resolveOption(renderer.url, config);\n                // Otherwise assume cell value is the URL.\n                if (!url) {\n                    const format = TextRenderer.formatGeneric();\n                    url = format(config);\n                }\n                // Open the hyperlink only if user hit Ctrl+Click.\n                if (accel) {\n                    window.open(url);\n                    // Reset cursor default after clicking\n                    const cursor = this.cursorForHandle('none');\n                    grid.viewport.node.style.cursor = cursor;\n                    // Not applying selections if navigating away.\n                    return;\n                }\n            }\n        }\n        // If the hit test is the body region, the only option is select.\n        if (region === 'body') {\n            // Fetch the selection model.\n            let model = grid.selectionModel;\n            // Bail early if there is no selection model.\n            if (!model) {\n                return;\n            }\n            // Override the document cursor.\n            let override = Drag.overrideCursor('default');\n            // Set up the press data.\n            this._pressData = {\n                type: 'select',\n                region,\n                row,\n                column,\n                override,\n                localX: -1,\n                localY: -1,\n                timeout: -1\n            };\n            // Set up the selection variables.\n            let r1;\n            let c1;\n            let r2;\n            let c2;\n            let cursorRow;\n            let cursorColumn;\n            let clear;\n            // Accel == new selection, keep old selections.\n            if (accel) {\n                r1 = row;\n                r2 = row;\n                c1 = column;\n                c2 = column;\n                cursorRow = row;\n                cursorColumn = column;\n                clear = 'none';\n            }\n            else if (shift) {\n                r1 = model.cursorRow;\n                r2 = row;\n                c1 = model.cursorColumn;\n                c2 = column;\n                cursorRow = model.cursorRow;\n                cursorColumn = model.cursorColumn;\n                clear = 'current';\n            }\n            else {\n                r1 = row;\n                r2 = row;\n                c1 = column;\n                c2 = column;\n                cursorRow = row;\n                cursorColumn = column;\n                clear = 'all';\n            }\n            // Make the selection.\n            model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n            // Done.\n            return;\n        }\n        // Otherwise, the hit test is on a header region.\n        // Convert the hit test into a part.\n        let handle = Private$5.resizeHandleForHitTest(hit);\n        // Fetch the cursor for the handle.\n        let cursor = this.cursorForHandle(handle);\n        // Handle horizontal resize.\n        if (handle === 'left' || handle === 'right') {\n            // Set up the resize data type.\n            const type = 'column-resize';\n            // Determine the column region.\n            let rgn = region === 'column-header' ? 'body' : 'row-header';\n            // Determine the section index.\n            let index = handle === 'left' ? column - 1 : column;\n            // Fetch the section size.\n            let size = grid.columnSize(rgn, index);\n            // Override the document cursor.\n            let override = Drag.overrideCursor(cursor);\n            // Create the temporary press data.\n            this._pressData = { type, region: rgn, index, size, clientX, override };\n            // Done.\n            return;\n        }\n        // Handle vertical resize\n        if (handle === 'top' || handle === 'bottom') {\n            // Set up the resize data type.\n            const type = 'row-resize';\n            // Determine the row region.\n            let rgn = region === 'row-header' ? 'body' : 'column-header';\n            // Determine the section index.\n            let index = handle === 'top' ? row - 1 : row;\n            // Fetch the section size.\n            let size = grid.rowSize(rgn, index);\n            // Override the document cursor.\n            let override = Drag.overrideCursor(cursor);\n            // Create the temporary press data.\n            this._pressData = { type, region: rgn, index, size, clientY, override };\n            // Done.\n            return;\n        }\n        // Otherwise, the only option is select.\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Bail if there is no selection model.\n        if (!model) {\n            return;\n        }\n        // Override the document cursor.\n        let override = Drag.overrideCursor('default');\n        // Set up the press data.\n        this._pressData = {\n            type: 'select',\n            region,\n            row,\n            column,\n            override,\n            localX: -1,\n            localY: -1,\n            timeout: -1\n        };\n        // Set up the selection variables.\n        let r1;\n        let c1;\n        let r2;\n        let c2;\n        let cursorRow;\n        let cursorColumn;\n        let clear;\n        // Compute the selection based on the pressed region.\n        if (region === 'corner-header') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = 0;\n            c2 = Infinity;\n            cursorRow = accel ? 0 : shift ? model.cursorRow : 0;\n            cursorColumn = accel ? 0 : shift ? model.cursorColumn : 0;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else if (region === 'row-header') {\n            r1 = accel ? row : shift ? model.cursorRow : row;\n            r2 = row;\n            const selectionGroup = { r1: r1, c1: 0, r2: r2, c2: 0 };\n            const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['row-header', 'body'], 'row', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.r1 != Number.MAX_VALUE) {\n                r1 = joinedGroup.r1;\n                r2 = joinedGroup.r2;\n            }\n            c1 = 0;\n            c2 = Infinity;\n            cursorRow = accel ? row : shift ? model.cursorRow : row;\n            cursorColumn = accel ? 0 : shift ? model.cursorColumn : 0;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else if (region === 'column-header') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = accel ? column : shift ? model.cursorColumn : column;\n            c2 = column;\n            const selectionGroup = { r1: 0, c1: c1, r2: 0, c2: c2 };\n            const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['column-header', 'body'], 'column', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.c1 != Number.MAX_VALUE) {\n                c1 = joinedGroup.c1;\n                c2 = joinedGroup.c2;\n            }\n            cursorRow = accel ? 0 : shift ? model.cursorRow : 0;\n            cursorColumn = accel ? column : shift ? model.cursorColumn : column;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else {\n            r1 = accel ? row : shift ? model.cursorRow : row;\n            r2 = row;\n            c1 = accel ? column : shift ? model.cursorColumn : column;\n            c2 = column;\n            cursorRow = accel ? row : shift ? model.cursorRow : row;\n            cursorColumn = accel ? column : shift ? model.cursorColumn : column;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        // Make the selection.\n        model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n    }\n    /**\n     * Handle the mouse move event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse move event of interest.\n     */\n    onMouseMove(grid, event) {\n        // Fetch the press data.\n        const data = this._pressData;\n        // Bail early if there is no press data.\n        if (!data) {\n            return;\n        }\n        // Handle a row resize.\n        if (data.type === 'row-resize') {\n            let dy = event.clientY - data.clientY;\n            grid.resizeRow(data.region, data.index, data.size + dy);\n            return;\n        }\n        // Handle a column resize.\n        if (data.type === 'column-resize') {\n            let dx = event.clientX - data.clientX;\n            grid.resizeColumn(data.region, data.index, data.size + dx);\n            return;\n        }\n        // Otherwise, it's a select.\n        // Mouse moves during a corner header press are a no-op.\n        if (data.region === 'corner-header') {\n            return;\n        }\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Bail early if the selection model was removed.\n        if (!model) {\n            return;\n        }\n        // Map to local coordinates.\n        let { lx, ly } = grid.mapToLocal(event.clientX, event.clientY);\n        // Update the local mouse coordinates in the press data.\n        data.localX = lx;\n        data.localY = ly;\n        // Fetch the grid geometry.\n        let hw = grid.headerWidth;\n        let hh = grid.headerHeight;\n        let vpw = grid.viewportWidth;\n        let vph = grid.viewportHeight;\n        let sx = grid.scrollX;\n        let sy = grid.scrollY;\n        let msx = grid.maxScrollY;\n        let msy = grid.maxScrollY;\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Set up the timeout variable.\n        let timeout = -1;\n        // Compute the timemout based on hit region and mouse position.\n        if (data.region === 'row-header' || mode === 'row') {\n            if (ly < hh && sy > 0) {\n                timeout = Private$5.computeTimeout(hh - ly);\n            }\n            else if (ly >= vph && sy < msy) {\n                timeout = Private$5.computeTimeout(ly - vph);\n            }\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            if (lx < hw && sx > 0) {\n                timeout = Private$5.computeTimeout(hw - lx);\n            }\n            else if (lx >= vpw && sx < msx) {\n                timeout = Private$5.computeTimeout(lx - vpw);\n            }\n        }\n        else {\n            if (lx < hw && sx > 0) {\n                timeout = Private$5.computeTimeout(hw - lx);\n            }\n            else if (lx >= vpw && sx < msx) {\n                timeout = Private$5.computeTimeout(lx - vpw);\n            }\n            else if (ly < hh && sy > 0) {\n                timeout = Private$5.computeTimeout(hh - ly);\n            }\n            else if (ly >= vph && sy < msy) {\n                timeout = Private$5.computeTimeout(ly - vph);\n            }\n        }\n        // Update or initiate the autoselect if needed.\n        if (timeout >= 0) {\n            if (data.timeout < 0) {\n                data.timeout = timeout;\n                setTimeout(() => {\n                    Private$5.autoselect(grid, data);\n                }, timeout);\n            }\n            else {\n                data.timeout = timeout;\n            }\n            return;\n        }\n        // Otherwise, clear the autoselect timeout.\n        data.timeout = -1;\n        // Map the position to virtual coordinates.\n        let { vx, vy } = grid.mapToVirtual(event.clientX, event.clientY);\n        // Clamp the coordinates to the limits.\n        vx = Math.max(0, Math.min(vx, grid.bodyWidth - 1));\n        vy = Math.max(0, Math.min(vy, grid.bodyHeight - 1));\n        // Set up the selection variables.\n        let r1;\n        let c1;\n        let r2;\n        let c2;\n        let cursorRow = model.cursorRow;\n        let cursorColumn = model.cursorColumn;\n        let clear = 'current';\n        // Compute the selection based pressed region.\n        if (data.region === 'row-header' || mode === 'row') {\n            r1 = data.row;\n            r2 = grid.rowAt('body', vy);\n            const selectionGroup = { r1: r1, c1: 0, r2: r2, c2: 0 };\n            const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['row-header', 'body'], 'row', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.r1 != Number.MAX_VALUE) {\n                r1 = Math.min(r1, joinedGroup.r1);\n                r2 = Math.max(r2, joinedGroup.r2);\n            }\n            c1 = 0;\n            c2 = Infinity;\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = data.column;\n            c2 = grid.columnAt('body', vx);\n            const selectionGroup = { r1: 0, c1: c1, r2: 0, c2: c2 };\n            const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['column-header', 'body'], 'column', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.c1 != Number.MAX_VALUE) {\n                c1 = joinedGroup.c1;\n                c2 = joinedGroup.c2;\n            }\n        }\n        else {\n            r1 = cursorRow;\n            r2 = grid.rowAt('body', vy);\n            c1 = cursorColumn;\n            c2 = grid.columnAt('body', vx);\n        }\n        // Make the selection.\n        model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n    }\n    /**\n     * Handle the mouse up event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse up event of interest.\n     */\n    onMouseUp(grid, event) {\n        this.release();\n    }\n    /**\n     * Handle the mouse double click event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse up event of interest.\n     */\n    onMouseDoubleClick(grid, event) {\n        if (!grid.dataModel) {\n            this.release();\n            return;\n        }\n        // Unpack the event.\n        let { clientX, clientY } = event;\n        // Hit test the grid.\n        let hit = grid.hitTest(clientX, clientY);\n        // Unpack the hit test.\n        let { region, row, column } = hit;\n        if (region === 'void') {\n            this.release();\n            return;\n        }\n        if (region === 'column-header' || region === 'corner-header') {\n            // Convert the hit test into a part.\n            const handle = Private$5.resizeHandleForHitTest(hit);\n            if (handle === 'left' || handle === 'right') {\n                let colIndex = handle === 'left' ? column - 1 : column;\n                let colRegion = region === 'column-header' ? 'body' : 'row-header';\n                if (colIndex < 0) {\n                    if (region === 'column-header') {\n                        // If the column is -1, it means we are in the corner header\n                        colIndex = grid.dataModel.columnCount('row-header') - 1;\n                        colRegion = 'row-header';\n                    }\n                    else {\n                        // If we are on the left edge of the row header, do nothing\n                        return;\n                    }\n                }\n                grid.resizeColumn(colRegion, colIndex, null);\n            }\n        }\n        if (region === 'body') {\n            if (grid.editable) {\n                const cell = {\n                    grid: grid,\n                    row: row,\n                    column: column\n                };\n                grid.editorController.edit(cell);\n            }\n        }\n        this.release();\n    }\n    /**\n     * Handle the context menu event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The context menu event of interest.\n     */\n    onContextMenu(grid, event) {\n        // TODO support user-defined context menus\n    }\n    /**\n     * Handle the wheel event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The wheel event of interest.\n     */\n    onWheel(grid, event) {\n        // Bail if a mouse press is in progress.\n        if (this._pressData) {\n            return;\n        }\n        // Extract the delta X and Y movement.\n        let dx = event.deltaX;\n        let dy = event.deltaY;\n        // Convert the delta values to pixel values.\n        switch (event.deltaMode) {\n            case 0: // DOM_DELTA_PIXEL\n                break;\n            case 1: {\n                // DOM_DELTA_LINE\n                let ds = grid.defaultSizes;\n                dx *= ds.columnWidth;\n                dy *= ds.rowHeight;\n                break;\n            }\n            case 2: // DOM_DELTA_PAGE\n                dx *= grid.pageWidth;\n                dy *= grid.pageHeight;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Only scroll and stop the event propagation if needed.\n        if (\n        // Scrolling left and not reached min already\n        (dx < 0 && grid.scrollX !== 0) ||\n            // Scrolling right and not reached max already\n            (dx > 0 && grid.scrollX !== grid.maxScrollX) ||\n            // Scrolling top and not reached min already\n            (dy < 0 && grid.scrollY !== 0) ||\n            // Scrolling down and not reached max already\n            (dy > 0 && grid.scrollY !== grid.maxScrollY)) {\n            event.preventDefault();\n            event.stopPropagation();\n            // Scroll by the desired amount.\n            grid.scrollBy(dx, dy);\n        }\n    }\n    /**\n     * Convert a resize handle into a cursor.\n     */\n    cursorForHandle(handle) {\n        return Private$5.cursorMap[handle];\n    }\n    /**\n     * Get the current pressData\n     */\n    get pressData() {\n        return this._pressData;\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private$5;\n(function (Private) {\n    /**\n     * Creates a CellConfig object from a hit region.\n     */\n    function createCellConfigObject(grid, hit) {\n        const { region, row, column } = hit;\n        // Terminate call if region is void.\n        if (region === 'void') {\n            return undefined;\n        }\n        // Augment hit region params with value and metadata.\n        const value = grid.dataModel.data(region, row, column);\n        const metadata = grid.dataModel.metadata(region, row, column);\n        // Create cell config object to retrieve cell renderer.\n        const config = {\n            ...hit,\n            value: value,\n            metadata: metadata\n        };\n        return config;\n    }\n    Private.createCellConfigObject = createCellConfigObject;\n    /**\n     * Get the resize handle for a grid hit test.\n     */\n    function resizeHandleForHitTest(hit) {\n        // Fetch the row and column.\n        let r = hit.row;\n        let c = hit.column;\n        // Fetch the leading and trailing sizes.\n        let lw = hit.x;\n        let lh = hit.y;\n        let tw = hit.width - hit.x;\n        let th = hit.height - hit.y;\n        // Set up the result variable.\n        let result;\n        // Dispatch based on hit test region.\n        switch (hit.region) {\n            case 'corner-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'column-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'row-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'body':\n                result = 'none';\n                break;\n            case 'void':\n                result = 'none';\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Return the result.\n        return result;\n    }\n    Private.resizeHandleForHitTest = resizeHandleForHitTest;\n    /**\n     * A timer callback for the autoselect loop.\n     *\n     * @param grid - The datagrid of interest.\n     *\n     * @param data - The select data of interest.\n     */\n    function autoselect(grid, data) {\n        // Bail early if the timeout has been reset.\n        if (data.timeout < 0) {\n            return;\n        }\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Bail early if the selection model has been removed.\n        if (!model) {\n            return;\n        }\n        // Fetch the current selection.\n        let cs = model.currentSelection();\n        // Bail early if there is no current selection.\n        if (!cs) {\n            return;\n        }\n        // Fetch local X and Y coordinates of the mouse.\n        let lx = data.localX;\n        let ly = data.localY;\n        // Set up the selection variables.\n        let r1 = cs.r1;\n        let c1 = cs.c1;\n        let r2 = cs.r2;\n        let c2 = cs.c2;\n        let cursorRow = model.cursorRow;\n        let cursorColumn = model.cursorColumn;\n        let clear = 'current';\n        // Fetch the grid geometry.\n        let hw = grid.headerWidth;\n        let hh = grid.headerHeight;\n        let vpw = grid.viewportWidth;\n        let vph = grid.viewportHeight;\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Update the selection based on the hit region.\n        if (data.region === 'row-header' || mode === 'row') {\n            r2 += ly <= hh ? -1 : ly >= vph ? 1 : 0;\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            c2 += lx <= hw ? -1 : lx >= vpw ? 1 : 0;\n        }\n        else {\n            r2 += ly <= hh ? -1 : ly >= vph ? 1 : 0;\n            c2 += lx <= hw ? -1 : lx >= vpw ? 1 : 0;\n        }\n        // Update the current selection.\n        model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid based on the hit region.\n        if (data.region === 'row-header' || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else if (data.region === 'column-header' || mode == 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else if (mode === 'cell') {\n            grid.scrollToCell(cs.r2, cs.c2);\n        }\n        // Schedule the next call with the current timeout.\n        setTimeout(() => {\n            autoselect(grid, data);\n        }, data.timeout);\n    }\n    Private.autoselect = autoselect;\n    /**\n     * Compute the scroll timeout for the given delta distance.\n     *\n     * @param delta - The delta pixels from the origin.\n     *\n     * @returns The scaled timeout in milliseconds.\n     */\n    function computeTimeout(delta) {\n        return 5 + 120 * (1 - Math.min(128, Math.abs(delta)) / 128);\n    }\n    Private.computeTimeout = computeTimeout;\n    /**\n     * A mapping of resize handle to cursor.\n     */\n    Private.cursorMap = {\n        top: 'ns-resize',\n        left: 'ew-resize',\n        right: 'ew-resize',\n        bottom: 'ns-resize',\n        hyperlink: 'pointer',\n        none: 'default'\n    };\n})(Private$5 || (Private$5 = {}));\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A base class for creating data grid selection models.\n *\n * #### Notes\n * If the predefined selection models are insufficient for a particular\n * use case, a custom model can be defined which derives from this class.\n */\nclass SelectionModel {\n    /**\n     * Construct a new selection model.\n     *\n     * @param options - The options for initializing the model.\n     */\n    constructor(options) {\n        this._changed = new Signal(this);\n        this._selectionMode = 'cell';\n        this.dataModel = options.dataModel;\n        this._selectionMode = options.selectionMode || 'cell';\n        this.dataModel.changed.connect(this.onDataModelChanged, this);\n    }\n    /**\n     * A signal emitted when the selection model has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the selection mode for the model.\n     */\n    get selectionMode() {\n        return this._selectionMode;\n    }\n    /**\n     * Set the selection mode for the model.\n     *\n     * #### Notes\n     * This will clear the selection model.\n     */\n    set selectionMode(value) {\n        // Bail early if the mode does not change.\n        if (this._selectionMode === value) {\n            return;\n        }\n        // Update the internal mode.\n        this._selectionMode = value;\n        // Clear the current selections.\n        this.clear();\n    }\n    /**\n     * Test whether any selection intersects a row.\n     *\n     * @param index - The row index of interest.\n     *\n     * @returns Whether any selection intersects the row.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    isRowSelected(index) {\n        return some(this.selections(), s => Private$4.containsRow(s, index));\n    }\n    /**\n     * Test whether any selection intersects a column.\n     *\n     * @param index - The column index of interest.\n     *\n     * @returns Whether any selection intersects the column.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    isColumnSelected(index) {\n        return some(this.selections(), s => Private$4.containsColumn(s, index));\n    }\n    /**\n     * Test whether any selection intersects a cell.\n     *\n     * @param row - The row index of interest.\n     *\n     * @param column - The column index of interest.\n     *\n     * @returns Whether any selection intersects the cell.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    isCellSelected(row, column) {\n        return some(this.selections(), s => Private$4.containsCell(s, row, column));\n    }\n    /**\n     * A signal handler for the data model `changed` signal.\n     *\n     * @param args - The arguments for the signal.\n     *\n     * #### Notes\n     * Selection model implementations should update their selections\n     * in a manner that is relevant for the changes to the data model.\n     *\n     * The default implementation of this method is a no-op.\n     */\n    onDataModelChanged(sender, args) {\n        // pass\n    }\n    /**\n     * Emit the `changed` signal for the selection model.\n     *\n     * #### Notes\n     * Subclasses should call this method whenever the selection model\n     * has changed so that attached data grids can update themselves.\n     */\n    emitChanged() {\n        this._changed.emit(undefined);\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private$4;\n(function (Private) {\n    /**\n     * Test whether a selection contains a given row.\n     */\n    function containsRow(selection, row) {\n        let { r1, r2 } = selection;\n        return (row >= r1 && row <= r2) || (row >= r2 && row <= r1);\n    }\n    Private.containsRow = containsRow;\n    /**\n     * Test whether a selection contains a given column.\n     */\n    function containsColumn(selection, column) {\n        let { c1, c2 } = selection;\n        return (column >= c1 && column <= c2) || (column >= c2 && column <= c1);\n    }\n    Private.containsColumn = containsColumn;\n    /**\n     * Test whether a selection contains a given cell.\n     */\n    function containsCell(selection, row, column) {\n        return containsRow(selection, row) && containsColumn(selection, column);\n    }\n    Private.containsCell = containsCell;\n})(Private$4 || (Private$4 = {}));\n\n/**\n * A basic selection model implementation.\n *\n * #### Notes\n * This selection model is sufficient for most use cases where\n * structural knowledge of the data source is *not* required.\n */\nclass BasicSelectionModel extends SelectionModel {\n    constructor() {\n        super(...arguments);\n        this._cursorRow = -1;\n        this._cursorColumn = -1;\n        this._cursorRectIndex = -1;\n        this._selections = [];\n    }\n    /**\n     * Whether the selection model is empty.\n     */\n    get isEmpty() {\n        return this._selections.length === 0;\n    }\n    /**\n     * The row index of the cursor.\n     */\n    get cursorRow() {\n        return this._cursorRow;\n    }\n    /**\n     * The column index of the cursor.\n     */\n    get cursorColumn() {\n        return this._cursorColumn;\n    }\n    /**\n     * Move cursor down/up/left/right while making sure it remains\n     * within the bounds of selected rectangles\n     *\n     * @param direction - The direction of the movement.\n     */\n    moveCursorWithinSelections(direction) {\n        // Bail early if there are no selections or no existing cursor\n        if (this.isEmpty || this.cursorRow === -1 || this._cursorColumn === -1) {\n            return;\n        }\n        // Bail early if only single cell is selected\n        const firstSelection = this._selections[0];\n        if (this._selections.length === 1 &&\n            firstSelection.r1 === firstSelection.r2 &&\n            firstSelection.c1 === firstSelection.c2) {\n            return;\n        }\n        // start from last selection rectangle\n        if (this._cursorRectIndex === -1) {\n            this._cursorRectIndex = this._selections.length - 1;\n        }\n        let cursorRect = this._selections[this._cursorRectIndex];\n        const dr = direction === 'down' ? 1 : direction === 'up' ? -1 : 0;\n        const dc = direction === 'right' ? 1 : direction === 'left' ? -1 : 0;\n        let newRow = this._cursorRow + dr;\n        let newColumn = this._cursorColumn + dc;\n        const r1 = Math.min(cursorRect.r1, cursorRect.r2);\n        const r2 = Math.max(cursorRect.r1, cursorRect.r2);\n        const c1 = Math.min(cursorRect.c1, cursorRect.c2);\n        const c2 = Math.max(cursorRect.c1, cursorRect.c2);\n        const moveToNextRect = () => {\n            this._cursorRectIndex =\n                (this._cursorRectIndex + 1) % this._selections.length;\n            cursorRect = this._selections[this._cursorRectIndex];\n            newRow = Math.min(cursorRect.r1, cursorRect.r2);\n            newColumn = Math.min(cursorRect.c1, cursorRect.c2);\n        };\n        const moveToPreviousRect = () => {\n            this._cursorRectIndex =\n                this._cursorRectIndex === 0\n                    ? this._selections.length - 1\n                    : this._cursorRectIndex - 1;\n            cursorRect = this._selections[this._cursorRectIndex];\n            newRow = Math.max(cursorRect.r1, cursorRect.r2);\n            newColumn = Math.max(cursorRect.c1, cursorRect.c2);\n        };\n        if (newRow > r2) {\n            newRow = r1;\n            newColumn += 1;\n            if (newColumn > c2) {\n                moveToNextRect();\n            }\n        }\n        else if (newRow < r1) {\n            newRow = r2;\n            newColumn -= 1;\n            if (newColumn < c1) {\n                moveToPreviousRect();\n            }\n        }\n        else if (newColumn > c2) {\n            newColumn = c1;\n            newRow += 1;\n            if (newRow > r2) {\n                moveToNextRect();\n            }\n        }\n        else if (newColumn < c1) {\n            newColumn = c2;\n            newRow -= 1;\n            if (newRow < r1) {\n                moveToPreviousRect();\n            }\n        }\n        this._cursorRow = newRow;\n        this._cursorColumn = newColumn;\n        // Emit the changed signal.\n        this.emitChanged();\n    }\n    /**\n     * Get the current selection in the selection model.\n     *\n     * @returns The current selection or `null`.\n     *\n     * #### Notes\n     * This is the selection which holds the cursor.\n     */\n    currentSelection() {\n        return this._selections[this._selections.length - 1] || null;\n    }\n    /**\n     * Get an iterator of the selections in the model.\n     *\n     * @returns A new iterator of the current selections.\n     *\n     * #### Notes\n     * The data grid will render the selections in order.\n     */\n    *selections() {\n        yield* this._selections;\n    }\n    /**\n     * Select the specified cells.\n     *\n     * @param args - The arguments for the selection.\n     */\n    select(args) {\n        // Fetch the current row and column counts;\n        let rowCount = this.dataModel.rowCount('body');\n        let columnCount = this.dataModel.columnCount('body');\n        // Bail early if there is no content.\n        if (rowCount <= 0 || columnCount <= 0) {\n            return;\n        }\n        // Unpack the arguments.\n        let { r1, c1, r2, c2, cursorRow, cursorColumn, clear } = args;\n        // Clear the necessary selections.\n        if (clear === 'all') {\n            this._selections.length = 0;\n        }\n        else if (clear === 'current') {\n            this._selections.pop();\n        }\n        // Clamp to the data model bounds.\n        r1 = Math.max(0, Math.min(r1, rowCount - 1));\n        r2 = Math.max(0, Math.min(r2, rowCount - 1));\n        c1 = Math.max(0, Math.min(c1, columnCount - 1));\n        c2 = Math.max(0, Math.min(c2, columnCount - 1));\n        // Indicate if a row/column has already been selected.\n        let alreadySelected = false;\n        // Handle the selection mode.\n        if (this.selectionMode === 'row') {\n            c1 = 0;\n            c2 = columnCount - 1;\n            alreadySelected =\n                this._selections.filter(selection => selection.r1 === r1).length !== 0;\n            // Remove from selections if already selected.\n            this._selections = alreadySelected\n                ? this._selections.filter(selection => selection.r1 !== r1)\n                : this._selections;\n        }\n        else if (this.selectionMode === 'column') {\n            r1 = 0;\n            r2 = rowCount - 1;\n            alreadySelected =\n                this._selections.filter(selection => selection.c1 === c1).length !== 0;\n            // Remove from selections if already selected.\n            this._selections = alreadySelected\n                ? this._selections.filter(selection => selection.c1 !== c1)\n                : this._selections;\n        }\n        // Alias the cursor row and column.\n        let cr = cursorRow;\n        let cc = cursorColumn;\n        // Compute the new cursor location.\n        if (cr < 0 || (cr < r1 && cr < r2) || (cr > r1 && cr > r2)) {\n            cr = r1;\n        }\n        if (cc < 0 || (cc < c1 && cc < c2) || (cc > c1 && cc > c2)) {\n            cc = c1;\n        }\n        // Update the cursor.\n        this._cursorRow = cr;\n        this._cursorColumn = cc;\n        this._cursorRectIndex = this._selections.length;\n        // Add the new selection if it wasn't already selected.\n        if (!alreadySelected) {\n            this._selections.push({ r1, c1, r2, c2 });\n        }\n        // Emit the changed signal.\n        this.emitChanged();\n    }\n    /**\n     * Clear all selections in the selection model.\n     */\n    clear() {\n        // Bail early if there are no selections.\n        if (this._selections.length === 0) {\n            return;\n        }\n        // Reset the internal state.\n        this._cursorRow = -1;\n        this._cursorColumn = -1;\n        this._cursorRectIndex = -1;\n        this._selections.length = 0;\n        // Emit the changed signal.\n        this.emitChanged();\n    }\n    /**\n     * A signal handler for the data model `changed` signal.\n     *\n     * @param args - The arguments for the signal.\n     */\n    onDataModelChanged(sender, args) {\n        // Bail early if the model has no current selections.\n        if (this._selections.length === 0) {\n            return;\n        }\n        // Bail early if the cells have changed in place.\n        if (args.type === 'cells-changed') {\n            return;\n        }\n        // Bail early if there is no change to the row or column count.\n        if (args.type === 'rows-moved' || args.type === 'columns-moved') {\n            return;\n        }\n        // Fetch the last row and column index.\n        let lr = sender.rowCount('body') - 1;\n        let lc = sender.columnCount('body') - 1;\n        // Bail early if the data model is empty.\n        if (lr < 0 || lc < 0) {\n            this._selections.length = 0;\n            this.emitChanged();\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = this.selectionMode;\n        // Set up the assignment index variable.\n        let j = 0;\n        // Iterate over the current selections.\n        for (let i = 0, n = this._selections.length; i < n; ++i) {\n            // Unpack the selection.\n            let { r1, c1, r2, c2 } = this._selections[i];\n            // Skip the selection if it will disappear.\n            if ((lr < r1 && lr < r2) || (lc < c1 && lc < c2)) {\n                continue;\n            }\n            // Modify the bounds based on the selection mode.\n            if (mode === 'row') {\n                r1 = Math.max(0, Math.min(r1, lr));\n                r2 = Math.max(0, Math.min(r2, lr));\n                c1 = 0;\n                c2 = lc;\n            }\n            else if (mode === 'column') {\n                r1 = 0;\n                r2 = lr;\n                c1 = Math.max(0, Math.min(c1, lc));\n                c2 = Math.max(0, Math.min(c2, lc));\n            }\n            else {\n                r1 = Math.max(0, Math.min(r1, lr));\n                r2 = Math.max(0, Math.min(r2, lr));\n                c1 = Math.max(0, Math.min(c1, lc));\n                c2 = Math.max(0, Math.min(c2, lc));\n            }\n            // Assign the modified selection to the array.\n            this._selections[j++] = { r1, c1, r2, c2 };\n        }\n        // Remove the stale selections.\n        this._selections.length = j;\n        // Emit the changed signal.\n        this.emitChanged();\n    }\n}\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2023, Lumino Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * An object which renders the cells of a data grid asynchronously.\n *\n * #### Notes\n * For performance reason, the datagrid only paints cells synchronously,\n * though if your cell renderer inherits from AsyncCellRenderer, you will\n * be able to do some asynchronous work prior to painting the cell.\n * See `ImageRenderer` for an example of an asynchronous renderer.\n */\nclass AsyncCellRenderer extends CellRenderer {\n}\n\n/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n// default validation error message\nconst DEFAULT_INVALID_INPUT_MESSAGE = 'Invalid input!';\n/**\n * A cell input validator object which always returns valid.\n */\nclass PassInputValidator {\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    validate(cell, value) {\n        return { valid: true };\n    }\n}\n/**\n * Text cell input validator.\n */\nclass TextInputValidator {\n    constructor() {\n        /**\n         * Minimum text length\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.minLength = Number.NaN;\n        /**\n         * Maximum text length\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.maxLength = Number.NaN;\n        /**\n         * Required text pattern as regular expression\n         *\n         * The default is null, meaning no pattern constraint\n         */\n        this.pattern = null;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    validate(cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (typeof value !== 'string') {\n            return {\n                valid: false,\n                message: 'Input must be valid text'\n            };\n        }\n        if (!isNaN(this.minLength) && value.length < this.minLength) {\n            return {\n                valid: false,\n                message: `Text length must be greater than ${this.minLength}`\n            };\n        }\n        if (!isNaN(this.maxLength) && value.length > this.maxLength) {\n            return {\n                valid: false,\n                message: `Text length must be less than ${this.maxLength}`\n            };\n        }\n        if (this.pattern && !this.pattern.test(value)) {\n            return {\n                valid: false,\n                message: `Text doesn't match the required pattern`\n            };\n        }\n        return { valid: true };\n    }\n}\n/**\n * Integer cell input validator.\n */\nclass IntegerInputValidator {\n    constructor() {\n        /**\n         * Minimum value\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.min = Number.NaN;\n        /**\n         * Maximum value\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.max = Number.NaN;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    validate(cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (isNaN(value) || value % 1 !== 0) {\n            return {\n                valid: false,\n                message: 'Input must be valid integer'\n            };\n        }\n        if (!isNaN(this.min) && value < this.min) {\n            return {\n                valid: false,\n                message: `Input must be greater than ${this.min}`\n            };\n        }\n        if (!isNaN(this.max) && value > this.max) {\n            return {\n                valid: false,\n                message: `Input must be less than ${this.max}`\n            };\n        }\n        return { valid: true };\n    }\n}\n/**\n * Real number cell input validator.\n */\nclass NumberInputValidator {\n    constructor() {\n        /**\n         * Minimum value\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.min = Number.NaN;\n        /**\n         * Maximum value\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.max = Number.NaN;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    validate(cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (isNaN(value)) {\n            return {\n                valid: false,\n                message: 'Input must be valid number'\n            };\n        }\n        if (!isNaN(this.min) && value < this.min) {\n            return {\n                valid: false,\n                message: `Input must be greater than ${this.min}`\n            };\n        }\n        if (!isNaN(this.max) && value > this.max) {\n            return {\n                valid: false,\n                message: `Input must be less than ${this.max}`\n            };\n        }\n        return { valid: true };\n    }\n}\n/**\n * An abstract base class that provides the most of the functionality\n * needed by a cell editor. All of the built-in cell editors\n * for various cell types are derived from this base class. Custom cell editors\n * can be easily implemented by extending this class.\n */\nclass CellEditor {\n    /**\n     * Construct a new cell editor.\n     */\n    constructor() {\n        /**\n         * A signal emitted when input changes.\n         */\n        this.inputChanged = new Signal(this);\n        /**\n         * Notification popup used to show validation error messages.\n         */\n        this.validityNotification = null;\n        /**\n         * Whether the cell editor is disposed.\n         */\n        this._disposed = false;\n        /**\n         * Whether the value input is valid.\n         */\n        this._validInput = true;\n        /**\n         * Grid wheel event handler.\n         */\n        this._gridWheelEventHandler = null;\n        this.inputChanged.connect(() => {\n            this.validate();\n        });\n    }\n    /**\n     * Whether the cell editor is disposed.\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this._disposed) {\n            return;\n        }\n        if (this._gridWheelEventHandler) {\n            this.cell.grid.node.removeEventListener('wheel', this._gridWheelEventHandler);\n            this._gridWheelEventHandler = null;\n        }\n        this._closeValidityNotification();\n        this._disposed = true;\n        this.cell.grid.node.removeChild(this.viewportOccluder);\n    }\n    /**\n     * Start editing the cell.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param options - The cell editing options.\n     */\n    edit(cell, options) {\n        this.cell = cell;\n        this.onCommit = options && options.onCommit;\n        this.onCancel = options && options.onCancel;\n        this.validator =\n            options && options.validator\n                ? options.validator\n                : this.createValidatorBasedOnType();\n        this._gridWheelEventHandler = () => {\n            this._closeValidityNotification();\n            this.updatePosition();\n        };\n        cell.grid.node.addEventListener('wheel', this._gridWheelEventHandler);\n        this._addContainer();\n        this.updatePosition();\n        this.startEditing();\n    }\n    /**\n     * Cancel editing the cell.\n     */\n    cancel() {\n        if (this._disposed) {\n            return;\n        }\n        this.dispose();\n        if (this.onCancel) {\n            this.onCancel();\n        }\n    }\n    /**\n     * Whether the value input is valid.\n     */\n    get validInput() {\n        return this._validInput;\n    }\n    /**\n     * Validate the cell input. Shows validation error notification when input is invalid.\n     */\n    validate() {\n        let value;\n        try {\n            value = this.getInput();\n        }\n        catch (error) {\n            console.log(`Input error: ${error.message}`);\n            this.setValidity(false, error.message || DEFAULT_INVALID_INPUT_MESSAGE);\n            return;\n        }\n        if (this.validator) {\n            const result = this.validator.validate(this.cell, value);\n            if (result.valid) {\n                this.setValidity(true);\n            }\n            else {\n                this.setValidity(false, result.message || DEFAULT_INVALID_INPUT_MESSAGE);\n            }\n        }\n        else {\n            this.setValidity(true);\n        }\n    }\n    /**\n     * Set validity flag.\n     *\n     * @param valid - Whether the input is valid.\n     *\n     * @param message - Notification message to show.\n     *\n     * If message is set to empty string (which is the default)\n     * existing notification popup is removed if any.\n     */\n    setValidity(valid, message = '') {\n        this._validInput = valid;\n        this._closeValidityNotification();\n        if (valid) {\n            this.editorContainer.classList.remove('lm-mod-invalid');\n        }\n        else {\n            this.editorContainer.classList.add('lm-mod-invalid');\n            // show a notification popup\n            if (message !== '') {\n                this.validityNotification = new CellEditor.Notification({\n                    target: this.editorContainer,\n                    message: message,\n                    placement: 'bottom',\n                    timeout: 5000\n                });\n                this.validityNotification.show();\n            }\n        }\n    }\n    /**\n     * Create and return a cell input validator based on configuration of the\n     * cell being edited. If no suitable validator can be found, it returns undefined.\n     */\n    createValidatorBasedOnType() {\n        const cell = this.cell;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        switch (metadata && metadata.type) {\n            case 'string':\n                {\n                    const validator = new TextInputValidator();\n                    if (typeof metadata.format === 'string') {\n                        const format = metadata.format;\n                        switch (format) {\n                            case 'email':\n                                validator.pattern = new RegExp('^([a-z0-9_.-]+)@([da-z.-]+).([a-z.]{2,6})$');\n                                break;\n                            case 'uuid':\n                                validator.pattern = new RegExp('[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}');\n                                break;\n                        }\n                    }\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minLength !== undefined) {\n                            validator.minLength = metadata.constraint.minLength;\n                        }\n                        if (metadata.constraint.maxLength !== undefined) {\n                            validator.maxLength = metadata.constraint.maxLength;\n                        }\n                        if (typeof metadata.constraint.pattern === 'string') {\n                            validator.pattern = new RegExp(metadata.constraint.pattern);\n                        }\n                    }\n                    return validator;\n                }\n            case 'number':\n                {\n                    const validator = new NumberInputValidator();\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minimum !== undefined) {\n                            validator.min = metadata.constraint.minimum;\n                        }\n                        if (metadata.constraint.maximum !== undefined) {\n                            validator.max = metadata.constraint.maximum;\n                        }\n                    }\n                    return validator;\n                }\n            case 'integer':\n                {\n                    const validator = new IntegerInputValidator();\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minimum !== undefined) {\n                            validator.min = metadata.constraint.minimum;\n                        }\n                        if (metadata.constraint.maximum !== undefined) {\n                            validator.max = metadata.constraint.maximum;\n                        }\n                    }\n                    return validator;\n                }\n        }\n        return undefined;\n    }\n    /**\n     * Compute cell rectangle and return with other cell properties.\n     */\n    getCellInfo(cell) {\n        const { grid, row, column } = cell;\n        let data, columnX, rowY, width, height;\n        const cellGroup = CellGroup.getGroup(grid.dataModel, 'body', row, column);\n        if (cellGroup) {\n            columnX =\n                grid.headerWidth -\n                    grid.scrollX +\n                    grid.columnOffset('body', cellGroup.c1);\n            rowY =\n                grid.headerHeight - grid.scrollY + grid.rowOffset('body', cellGroup.r1);\n            width = 0;\n            height = 0;\n            for (let r = cellGroup.r1; r <= cellGroup.r2; r++) {\n                height += grid.rowSize('body', r);\n            }\n            for (let c = cellGroup.c1; c <= cellGroup.c2; c++) {\n                width += grid.columnSize('body', c);\n            }\n            data = grid.dataModel.data('body', cellGroup.r1, cellGroup.c1);\n        }\n        else {\n            columnX =\n                grid.headerWidth - grid.scrollX + grid.columnOffset('body', column);\n            rowY = grid.headerHeight - grid.scrollY + grid.rowOffset('body', row);\n            width = grid.columnSize('body', column);\n            height = grid.rowSize('body', row);\n            data = grid.dataModel.data('body', row, column);\n        }\n        return {\n            grid: grid,\n            row: row,\n            column: column,\n            data: data,\n            x: columnX,\n            y: rowY,\n            width: width,\n            height: height\n        };\n    }\n    /**\n     * Reposition cell editor by moving viewport occluder and cell editor container.\n     */\n    updatePosition() {\n        const grid = this.cell.grid;\n        const cellInfo = this.getCellInfo(this.cell);\n        const headerHeight = grid.headerHeight;\n        const headerWidth = grid.headerWidth;\n        this.viewportOccluder.style.top = headerHeight + 'px';\n        this.viewportOccluder.style.left = headerWidth + 'px';\n        this.viewportOccluder.style.width = grid.viewportWidth - headerWidth + 'px';\n        this.viewportOccluder.style.height =\n            grid.viewportHeight - headerHeight + 'px';\n        this.viewportOccluder.style.position = 'absolute';\n        this.editorContainer.style.left = cellInfo.x - 1 - headerWidth + 'px';\n        this.editorContainer.style.top = cellInfo.y - 1 - headerHeight + 'px';\n        this.editorContainer.style.width = cellInfo.width + 1 + 'px';\n        this.editorContainer.style.height = cellInfo.height + 1 + 'px';\n        this.editorContainer.style.visibility = 'visible';\n        this.editorContainer.style.position = 'absolute';\n    }\n    /**\n     * Commit the edited value.\n     *\n     * @param cursorMovement - Cursor move direction based on keys pressed to end the edit.\n     *\n     * @returns true on valid input, false otherwise.\n     */\n    commit(cursorMovement = 'none') {\n        this.validate();\n        if (!this._validInput) {\n            return false;\n        }\n        let value;\n        try {\n            value = this.getInput();\n        }\n        catch (error) {\n            console.log(`Input error: ${error.message}`);\n            return false;\n        }\n        this.dispose();\n        if (this.onCommit) {\n            this.onCommit({\n                cell: this.cell,\n                value: value,\n                cursorMovement: cursorMovement\n            });\n        }\n        return true;\n    }\n    /**\n     * Create container elements needed to prevent editor widget overflow\n     * beyond viewport and to position cell editor widget.\n     */\n    _addContainer() {\n        this.viewportOccluder = document.createElement('div');\n        this.viewportOccluder.className = 'lm-DataGrid-cellEditorOccluder';\n        this.cell.grid.node.appendChild(this.viewportOccluder);\n        this.editorContainer = document.createElement('div');\n        this.editorContainer.className = 'lm-DataGrid-cellEditorContainer';\n        this.viewportOccluder.appendChild(this.editorContainer);\n        // update mouse event pass-through state based on input validity\n        this.editorContainer.addEventListener('mouseleave', (event) => {\n            this.viewportOccluder.style.pointerEvents = this._validInput\n                ? 'none'\n                : 'auto';\n        });\n        this.editorContainer.addEventListener('mouseenter', (event) => {\n            this.viewportOccluder.style.pointerEvents = 'none';\n        });\n    }\n    /**\n     * Remove validity notification popup.\n     */\n    _closeValidityNotification() {\n        if (this.validityNotification) {\n            this.validityNotification.close();\n            this.validityNotification = null;\n        }\n    }\n}\n/**\n * Abstract base class with shared functionality\n * for cell editors which use HTML Input widget as editor.\n */\nclass InputCellEditor extends CellEditor {\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n            case 'input':\n                this._onInput(event);\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        super.dispose();\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        this.createWidget();\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        this.input.value = this.deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this.input);\n        this.input.focus();\n        this.input.select();\n        this.bindEvents();\n    }\n    deserialize(value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    }\n    createWidget() {\n        const input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        input.spellcheck = false;\n        input.type = this.inputType;\n        this.input = input;\n    }\n    bindEvents() {\n        this.input.addEventListener('keydown', this);\n        this.input.addEventListener('blur', this);\n        this.input.addEventListener('input', this);\n    }\n    _unbindEvents() {\n        this.input.removeEventListener('keydown', this);\n        this.input.removeEventListener('blur', this);\n        this.input.removeEventListener('input', this);\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.input.focus();\n        }\n    }\n    _onInput(event) {\n        this.inputChanged.emit(void 0);\n    }\n}\n/**\n * Cell editor for text cells.\n */\nclass TextCellEditor extends InputCellEditor {\n    constructor() {\n        super(...arguments);\n        this.inputType = 'text';\n    }\n    /**\n     * Return the current text input entered.\n     */\n    getInput() {\n        return this.input.value;\n    }\n}\n/**\n * Cell editor for real number cells.\n */\nclass NumberCellEditor extends InputCellEditor {\n    constructor() {\n        super(...arguments);\n        this.inputType = 'number';\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        super.startEditing();\n        this.input.step = 'any';\n        const cell = this.cell;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        const constraint = metadata.constraint;\n        if (constraint) {\n            if (constraint.minimum) {\n                this.input.min = constraint.minimum;\n            }\n            if (constraint.maximum) {\n                this.input.max = constraint.maximum;\n            }\n        }\n    }\n    /**\n     * Return the current number input entered. This method throws exception\n     * if input is invalid.\n     */\n    getInput() {\n        let value = this.input.value;\n        if (value.trim() === '') {\n            return null;\n        }\n        const floatValue = parseFloat(value);\n        if (isNaN(floatValue)) {\n            throw new Error('Invalid input');\n        }\n        return floatValue;\n    }\n}\n/**\n * Cell editor for integer cells.\n */\nclass IntegerCellEditor extends InputCellEditor {\n    constructor() {\n        super(...arguments);\n        this.inputType = 'number';\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        super.startEditing();\n        this.input.step = '1';\n        const cell = this.cell;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        const constraint = metadata.constraint;\n        if (constraint) {\n            if (constraint.minimum) {\n                this.input.min = constraint.minimum;\n            }\n            if (constraint.maximum) {\n                this.input.max = constraint.maximum;\n            }\n        }\n    }\n    /**\n     * Return the current integer input entered. This method throws exception\n     * if input is invalid.\n     */\n    getInput() {\n        let value = this.input.value;\n        if (value.trim() === '') {\n            return null;\n        }\n        let intValue = parseInt(value);\n        if (isNaN(intValue)) {\n            throw new Error('Invalid input');\n        }\n        return intValue;\n    }\n}\n/**\n * Cell editor for date cells.\n */\nclass DateCellEditor extends CellEditor {\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        super.dispose();\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        this._createWidget();\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        this._input.value = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._bindEvents();\n    }\n    /**\n     * Return the current date input entered.\n     */\n    getInput() {\n        return this._input.value;\n    }\n    _deserialize(value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    }\n    _createWidget() {\n        const input = document.createElement('input');\n        input.type = 'date';\n        input.pattern = 'd{4}-d{2}-d{2}';\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        this._input = input;\n    }\n    _bindEvents() {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('blur', this);\n    }\n    _unbindEvents() {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('blur', this);\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    }\n}\n/**\n * Cell editor for boolean cells.\n */\nclass BooleanCellEditor extends CellEditor {\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'mousedown':\n                // fix focus loss problem in Safari and Firefox\n                this._input.focus();\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        super.dispose();\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        this._createWidget();\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        this._input.checked = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._bindEvents();\n    }\n    /**\n     * Return the current boolean input entered.\n     */\n    getInput() {\n        return this._input.checked;\n    }\n    _deserialize(value) {\n        if (value === null || value === undefined) {\n            return false;\n        }\n        return value == true;\n    }\n    _createWidget() {\n        const input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorCheckbox');\n        input.type = 'checkbox';\n        input.spellcheck = false;\n        this._input = input;\n    }\n    _bindEvents() {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('mousedown', this);\n        this._input.addEventListener('blur', this);\n    }\n    _unbindEvents() {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('mousedown', this);\n        this._input.removeEventListener('blur', this);\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    }\n}\n/**\n * Cell editor for option cells.\n *\n * It supports multiple option selection. If cell metadata contains\n * type attribute 'array', then it behaves as a multi select.\n * In that case cell data is expected to be list of string values.\n */\nclass OptionCellEditor extends CellEditor {\n    constructor() {\n        super(...arguments);\n        this._isMultiSelect = false;\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        if (this._isMultiSelect) {\n            document.body.removeChild(this._select);\n        }\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        this._isMultiSelect = metadata.type === 'array';\n        this._createWidget();\n        if (this._isMultiSelect) {\n            this._select.multiple = true;\n            const values = this._deserialize(cellInfo.data);\n            for (let i = 0; i < this._select.options.length; ++i) {\n                const option = this._select.options.item(i);\n                option.selected = values.indexOf(option.value) !== -1;\n            }\n            document.body.appendChild(this._select);\n        }\n        else {\n            this._select.value = this._deserialize(cellInfo.data);\n            this.editorContainer.appendChild(this._select);\n        }\n        this._select.focus();\n        this._bindEvents();\n        this.updatePosition();\n    }\n    /**\n     * Return the current option input.\n     */\n    getInput() {\n        if (this._isMultiSelect) {\n            const input = [];\n            for (let i = 0; i < this._select.selectedOptions.length; ++i) {\n                input.push(this._select.selectedOptions.item(i).value);\n            }\n            return input;\n        }\n        else {\n            return this._select.value;\n        }\n    }\n    /**\n     * Reposition cell editor.\n     */\n    updatePosition() {\n        super.updatePosition();\n        if (!this._isMultiSelect) {\n            return;\n        }\n        const cellInfo = this.getCellInfo(this.cell);\n        this._select.style.position = 'absolute';\n        const editorContainerRect = this.editorContainer.getBoundingClientRect();\n        this._select.style.left = editorContainerRect.left + 'px';\n        this._select.style.top = editorContainerRect.top + cellInfo.height + 'px';\n        this._select.style.width = editorContainerRect.width + 'px';\n        this._select.style.maxHeight = '60px';\n        this.editorContainer.style.visibility = 'hidden';\n    }\n    _deserialize(value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        if (this._isMultiSelect) {\n            const values = [];\n            if (Array.isArray(value)) {\n                for (let item of value) {\n                    values.push(item.toString());\n                }\n            }\n            return values;\n        }\n        else {\n            return value.toString();\n        }\n    }\n    _createWidget() {\n        const cell = this.cell;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        const items = metadata.constraint.enum;\n        const select = document.createElement('select');\n        select.classList.add('lm-DataGrid-cellEditorWidget');\n        for (let item of items) {\n            const option = document.createElement('option');\n            option.value = item;\n            option.text = item;\n            select.appendChild(option);\n        }\n        this._select = select;\n    }\n    _bindEvents() {\n        this._select.addEventListener('keydown', this._onKeyDown.bind(this));\n        this._select.addEventListener('blur', this._onBlur.bind(this));\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._select.focus();\n        }\n    }\n}\n/**\n * Cell editor for option cells whose value can be any value\n * from set of pre-defined options or values that can be input by user.\n */\nclass DynamicOptionCellEditor extends CellEditor {\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        super.dispose();\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        this._createWidget();\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        this._input.value = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._input.select();\n        this._bindEvents();\n    }\n    /**\n     * Return the current option input.\n     */\n    getInput() {\n        return this._input.value;\n    }\n    _deserialize(value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    }\n    _createWidget() {\n        const cell = this.cell;\n        const grid = cell.grid;\n        const dataModel = grid.dataModel;\n        const rowCount = dataModel.rowCount('body');\n        const listId = 'cell-editor-list';\n        const list = document.createElement('datalist');\n        list.id = listId;\n        const input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        const valueSet = new Set();\n        for (let r = 0; r < rowCount; ++r) {\n            const data = dataModel.data('body', r, cell.column);\n            if (data) {\n                valueSet.add(data);\n            }\n        }\n        valueSet.forEach((value) => {\n            const option = document.createElement('option');\n            option.value = value;\n            option.text = value;\n            list.appendChild(option);\n        });\n        this.editorContainer.appendChild(list);\n        input.setAttribute('list', listId);\n        this._input = input;\n    }\n    _bindEvents() {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('blur', this);\n    }\n    _unbindEvents() {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('blur', this);\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    }\n}\n/**\n * The namespace for the `CellEditor` class statics.\n */\n(function (CellEditor) {\n    /**\n     * A widget which implements a notification popup.\n     */\n    class Notification extends Widget {\n        /**\n         * Construct a new notification.\n         *\n         * @param options - The options for initializing the notification.\n         */\n        constructor(options) {\n            super({ node: Notification.createNode() });\n            this._message = '';\n            this.addClass('lm-DataGrid-notification');\n            this.setFlag(Widget.Flag.DisallowLayout);\n            this._target = options.target;\n            this._message = options.message || '';\n            this._placement = options.placement || 'bottom';\n            Widget.attach(this, document.body);\n            if (options.timeout && options.timeout > 0) {\n                setTimeout(() => {\n                    this.close();\n                }, options.timeout);\n            }\n        }\n        /**\n         * Handle the DOM events for the notification.\n         *\n         * @param event - The DOM event sent to the notification.\n         *\n         * #### Notes\n         * This method implements the DOM `EventListener` interface and is\n         * called in response to events on the notification's DOM node.\n         *\n         * This should not be called directly by user code.\n         */\n        handleEvent(event) {\n            switch (event.type) {\n                case 'mousedown':\n                    this._evtMouseDown(event);\n                    break;\n                case 'contextmenu':\n                    event.preventDefault();\n                    event.stopPropagation();\n                    break;\n            }\n        }\n        /**\n         * Get the placement of the notification.\n         */\n        get placement() {\n            return this._placement;\n        }\n        /**\n         * Set the placement of the notification.\n         */\n        set placement(value) {\n            // Do nothing if the placement does not change.\n            if (this._placement === value) {\n                return;\n            }\n            // Update the internal placement.\n            this._placement = value;\n            // Schedule an update for notification.\n            this.update();\n        }\n        /**\n         * Get the current value of the message.\n         */\n        get message() {\n            return this._message;\n        }\n        /**\n         * Set the current value of the message.\n         *\n         */\n        set message(value) {\n            // Do nothing if the value does not change.\n            if (this._message === value) {\n                return;\n            }\n            // Update the internal value.\n            this._message = value;\n            // Schedule an update for notification.\n            this.update();\n        }\n        /**\n         * Get the node presenting the message.\n         */\n        get messageNode() {\n            return this.node.getElementsByClassName('lm-DataGrid-notificationMessage')[0];\n        }\n        /**\n         * A method invoked on a 'before-attach' message.\n         */\n        onBeforeAttach(msg) {\n            this.node.addEventListener('mousedown', this);\n            this.update();\n        }\n        /**\n         * A method invoked on an 'after-detach' message.\n         */\n        onAfterDetach(msg) {\n            this.node.removeEventListener('mousedown', this);\n        }\n        /**\n         * A method invoked on an 'update-request' message.\n         */\n        onUpdateRequest(msg) {\n            const targetRect = this._target.getBoundingClientRect();\n            const style = this.node.style;\n            switch (this._placement) {\n                case 'bottom':\n                    style.left = targetRect.left + 'px';\n                    style.top = targetRect.bottom + 'px';\n                    break;\n                case 'top':\n                    style.left = targetRect.left + 'px';\n                    style.height = targetRect.top + 'px';\n                    style.top = '0';\n                    style.alignItems = 'flex-end';\n                    style.justifyContent = 'flex-end';\n                    break;\n                case 'left':\n                    style.left = '0';\n                    style.width = targetRect.left + 'px';\n                    style.top = targetRect.top + 'px';\n                    style.alignItems = 'flex-end';\n                    style.justifyContent = 'flex-end';\n                    break;\n                case 'right':\n                    style.left = targetRect.right + 'px';\n                    style.top = targetRect.top + 'px';\n                    break;\n            }\n            this.messageNode.innerHTML = this._message;\n        }\n        /**\n         * Handle the `'mousedown'` event for the notification.\n         */\n        _evtMouseDown(event) {\n            // Do nothing if it's not a left mouse press.\n            if (event.button !== 0) {\n                return;\n            }\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n    CellEditor.Notification = Notification;\n    /**\n     * The namespace for the `Notification` class statics.\n     */\n    (function (Notification) {\n        /**\n         * Create the DOM node for notification.\n         */\n        function createNode() {\n            const node = document.createElement('div');\n            const container = document.createElement('div');\n            container.className = 'lm-DataGrid-notificationContainer';\n            const message = document.createElement('span');\n            message.className = 'lm-DataGrid-notificationMessage';\n            container.appendChild(message);\n            node.appendChild(container);\n            return node;\n        }\n        Notification.createNode = createNode;\n    })(Notification = CellEditor.Notification || (CellEditor.Notification = {}));\n})(CellEditor || (CellEditor = {}));\n\n/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * Resolve a config option for a cell editor.\n *\n * @param option - The config option to resolve.\n *\n * @param config - The cell config object.\n *\n * @returns The resolved value for the option.\n */\nfunction resolveOption(option, config) {\n    return typeof option === 'function'\n        ? option(config)\n        : option;\n}\n/**\n * An object which manages cell editing. It stores editor overrides,\n * decides which editor to use for a cell, makes sure there is only one editor active.\n */\nclass CellEditorController {\n    constructor() {\n        // active cell editor\n        this._editor = null;\n        // active cell being edited\n        this._cell = null;\n        // cell editor overrides based on cell data type identifier\n        this._typeBasedOverrides = new Map();\n        // cell editor overrides based on partial metadata match\n        this._metadataBasedOverrides = new Map();\n    }\n    /**\n     * Override cell editor for the cells matching the identifier.\n     *\n     * @param identifier - Cell identifier to use when matching cells.\n     * if identifier is a CellDataType, then cell matching is done using data type of the cell,\n     * if identifier is a Metadata, then partial match of the cell metadata with identifier is used for match,\n     * if identifier is 'default' then override is used as default editor when no other editor is found suitable\n     *\n     * @param editor - The cell editor to use or resolver to use to get an editor for matching cells.\n     */\n    setEditor(identifier, editor) {\n        if (typeof identifier === 'string') {\n            this._typeBasedOverrides.set(identifier, editor);\n        }\n        else {\n            const key = this._metadataIdentifierToKey(identifier);\n            this._metadataBasedOverrides.set(key, [identifier, editor]);\n        }\n    }\n    /**\n     * Start editing a cell.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param options - The cell editing options.\n     */\n    edit(cell, options) {\n        const grid = cell.grid;\n        if (!grid.editable) {\n            console.error('Grid cannot be edited!');\n            return false;\n        }\n        this.cancel();\n        this._cell = cell;\n        options = options || {};\n        options.onCommit = options.onCommit || this._onCommit.bind(this);\n        options.onCancel = options.onCancel || this._onCancel.bind(this);\n        // if an editor is passed in with options, then use it for editing\n        if (options.editor) {\n            this._editor = options.editor;\n            options.editor.edit(cell, options);\n            return true;\n        }\n        // choose an editor based on overrides / cell data type\n        const editor = this._getEditor(cell);\n        if (editor) {\n            this._editor = editor;\n            editor.edit(cell, options);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Cancel editing.\n     */\n    cancel() {\n        if (this._editor) {\n            this._editor.cancel();\n            this._editor = null;\n        }\n        this._cell = null;\n    }\n    _onCommit(response) {\n        const cell = this._cell;\n        if (!cell) {\n            return;\n        }\n        const grid = cell.grid;\n        const dataModel = grid.dataModel;\n        let row = cell.row;\n        let column = cell.column;\n        const cellGroup = CellGroup.getGroup(grid.dataModel, 'body', row, column);\n        if (cellGroup) {\n            row = cellGroup.r1;\n            column = cellGroup.c1;\n        }\n        dataModel.setData('body', row, column, response.value);\n        grid.viewport.node.focus();\n        if (response.cursorMovement !== 'none') {\n            grid.moveCursor(response.cursorMovement);\n            grid.scrollToCursor();\n        }\n    }\n    _onCancel() {\n        if (!this._cell) {\n            return;\n        }\n        this._cell.grid.viewport.node.focus();\n    }\n    _getDataTypeKey(cell) {\n        const metadata = cell.grid.dataModel\n            ? cell.grid.dataModel.metadata('body', cell.row, cell.column)\n            : null;\n        if (!metadata) {\n            return 'default';\n        }\n        let key = '';\n        if (metadata) {\n            key = metadata.type;\n        }\n        if (metadata.constraint && metadata.constraint.enum) {\n            if (metadata.constraint.enum === 'dynamic') {\n                key += ':dynamic-option';\n            }\n            else {\n                key += ':option';\n            }\n        }\n        return key;\n    }\n    _objectToKey(object) {\n        let str = '';\n        for (let key in object) {\n            const value = object[key];\n            if (typeof value === 'object') {\n                str += `${key}:${this._objectToKey(value)}`;\n            }\n            else {\n                str += `[${key}:${value}]`;\n            }\n        }\n        return str;\n    }\n    _metadataIdentifierToKey(metadata) {\n        return this._objectToKey(metadata);\n    }\n    _metadataMatchesIdentifier(metadata, identifier) {\n        for (let key in identifier) {\n            if (!metadata.hasOwnProperty(key)) {\n                return false;\n            }\n            const identifierValue = identifier[key];\n            const metadataValue = metadata[key];\n            if (typeof identifierValue === 'object') {\n                if (!this._metadataMatchesIdentifier(metadataValue, identifierValue)) {\n                    return false;\n                }\n            }\n            else if (metadataValue !== identifierValue) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _getMetadataBasedEditor(cell) {\n        let editorMatched;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        if (metadata) {\n            this._metadataBasedOverrides.forEach(value => {\n                if (!editorMatched) {\n                    let [identifier, editor] = value;\n                    if (this._metadataMatchesIdentifier(metadata, identifier)) {\n                        editorMatched = resolveOption(editor, cell);\n                    }\n                }\n            });\n        }\n        return editorMatched;\n    }\n    /**\n     * Choose the most appropriate cell editor to use based on overrides / cell data type.\n     *\n     * If no match is found in overrides or based on cell data type, and if cell has a primitive\n     * data type then TextCellEditor is used as default cell editor. If 'default' cell editor\n     * is overridden, then it is used instead of TextCellEditor for default.\n     */\n    _getEditor(cell) {\n        const dtKey = this._getDataTypeKey(cell);\n        // find an editor based on data type based override\n        if (this._typeBasedOverrides.has(dtKey)) {\n            const editor = this._typeBasedOverrides.get(dtKey);\n            return resolveOption(editor, cell);\n        } // find an editor based on metadata match based override\n        else if (this._metadataBasedOverrides.size > 0) {\n            const editor = this._getMetadataBasedEditor(cell);\n            if (editor) {\n                return editor;\n            }\n        }\n        // choose an editor based on data type\n        switch (dtKey) {\n            case 'string':\n                return new TextCellEditor();\n            case 'number':\n                return new NumberCellEditor();\n            case 'integer':\n                return new IntegerCellEditor();\n            case 'boolean':\n                return new BooleanCellEditor();\n            case 'date':\n                return new DateCellEditor();\n            case 'string:option':\n            case 'number:option':\n            case 'integer:option':\n            case 'date:option':\n            case 'array:option':\n                return new OptionCellEditor();\n            case 'string:dynamic-option':\n            case 'number:dynamic-option':\n            case 'integer:dynamic-option':\n            case 'date:dynamic-option':\n                return new DynamicOptionCellEditor();\n        }\n        // if an override exists for 'default', then use it\n        if (this._typeBasedOverrides.has('default')) {\n            const editor = this._typeBasedOverrides.get('default');\n            return resolveOption(editor, cell);\n        }\n        // if cell has a primitive data type then use TextCellEditor\n        const data = cell.grid.dataModel.data('body', cell.row, cell.column);\n        if (!data || typeof data !== 'object') {\n            return new TextCellEditor();\n        }\n        // no suitable editor found for the cell\n        return undefined;\n    }\n}\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * An object which provides the data for a data grid.\n *\n * #### Notes\n * If the predefined data models are insufficient for a particular use\n * case, a custom model can be defined which derives from this class.\n */\nclass DataModel {\n    constructor() {\n        this._changed = new Signal(this);\n    }\n    /**\n     * A signal emitted when the data model has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the count of merged cell groups pertaining to a given\n     * cell region.\n     * @param region the target cell region.\n     */\n    groupCount(region) {\n        return 0;\n    }\n    /**\n     * Get the metadata for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns The metadata for the specified cell.\n     *\n     * #### Notes\n     * The returned metadata should be treated as immutable.\n     *\n     * This method is called often, and so should be efficient.\n     *\n     * The default implementation returns `{}`.\n     */\n    metadata(region, row, column) {\n        return DataModel.emptyMetadata;\n    }\n    /**\n     * Get the merged cell group corresponding to a region and index number.\n     * @param region the cell region of cell group.\n     * @param groupIndex the group index of the cell group.\n     * @returns a cell group.\n     */\n    group(region, groupIndex) {\n        return null;\n    }\n    /**\n     * Emit the `changed` signal for the data model.\n     *\n     * #### Notes\n     * Subclasses should call this method whenever the data model has\n     * changed so that attached data grids can update themselves.\n     */\n    emitChanged(args) {\n        this._changed.emit(args);\n    }\n}\n/**\n * An object which provides the mutable data for a data grid.\n *\n * #### Notes\n * This object is an extension to `DataModel` and it only adds ability to\n * change data for cells.\n */\nclass MutableDataModel extends DataModel {\n}\n/**\n * The namespace for the `DataModel` class statics.\n */\n(function (DataModel) {\n    /**\n     * A singleton empty metadata object.\n     */\n    DataModel.emptyMetadata = Object.freeze({});\n})(DataModel || (DataModel = {}));\n\n/**\n * A thin caching wrapper around a 2D canvas rendering context.\n *\n * #### Notes\n * This class is mostly a transparent wrapper around a canvas rendering\n * context which improves performance when writing context state.\n *\n * For best performance, avoid reading state from the `gc`. Writes are\n * cached based on the previously written value.\n *\n * Unless otherwise specified, the API and semantics of this class are\n * identical to the builtin 2D canvas rendering context:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\n *\n * The wrapped canvas context should not be manipulated externally\n * until the wrapping `GraphicsContext` object is disposed.\n */\nclass GraphicsContext {\n    /**\n     * Create a new graphics context object.\n     *\n     * @param context - The 2D canvas rendering context to wrap.\n     */\n    constructor(context) {\n        this._disposed = false;\n        this._context = context;\n        this._state = Private$3.State.create(context);\n    }\n    dispose() {\n        // Bail if the gc is already disposed.\n        if (this._disposed) {\n            return;\n        }\n        // Mark the gc as disposed.\n        this._disposed = true;\n        // Pop any unrestored saves.\n        while (this._state.next) {\n            this._state = this._state.next;\n            this._context.restore();\n        }\n    }\n    get isDisposed() {\n        return this._disposed;\n    }\n    get fillStyle() {\n        return this._context.fillStyle;\n    }\n    set fillStyle(value) {\n        if (this._state.fillStyle !== value) {\n            this._state.fillStyle = value;\n            this._context.fillStyle = value;\n        }\n    }\n    get strokeStyle() {\n        return this._context.strokeStyle;\n    }\n    set strokeStyle(value) {\n        if (this._state.strokeStyle !== value) {\n            this._state.strokeStyle = value;\n            this._context.strokeStyle = value;\n        }\n    }\n    get font() {\n        return this._context.font;\n    }\n    set font(value) {\n        if (this._state.font !== value) {\n            this._state.font = value;\n            this._context.font = value;\n        }\n    }\n    get textAlign() {\n        return this._context.textAlign;\n    }\n    set textAlign(value) {\n        if (this._state.textAlign !== value) {\n            this._state.textAlign = value;\n            this._context.textAlign = value;\n        }\n    }\n    get textBaseline() {\n        return this._context.textBaseline;\n    }\n    set textBaseline(value) {\n        if (this._state.textBaseline !== value) {\n            this._state.textBaseline = value;\n            this._context.textBaseline = value;\n        }\n    }\n    get lineCap() {\n        return this._context.lineCap;\n    }\n    set lineCap(value) {\n        if (this._state.lineCap !== value) {\n            this._state.lineCap = value;\n            this._context.lineCap = value;\n        }\n    }\n    get lineDashOffset() {\n        return this._context.lineDashOffset;\n    }\n    set lineDashOffset(value) {\n        if (this._state.lineDashOffset !== value) {\n            this._state.lineDashOffset = value;\n            this._context.lineDashOffset = value;\n        }\n    }\n    get lineJoin() {\n        return this._context.lineJoin;\n    }\n    set lineJoin(value) {\n        if (this._state.lineJoin !== value) {\n            this._state.lineJoin = value;\n            this._context.lineJoin = value;\n        }\n    }\n    get lineWidth() {\n        return this._context.lineWidth;\n    }\n    set lineWidth(value) {\n        if (this._state.lineWidth !== value) {\n            this._state.lineWidth = value;\n            this._context.lineWidth = value;\n        }\n    }\n    get miterLimit() {\n        return this._context.miterLimit;\n    }\n    set miterLimit(value) {\n        if (this._state.miterLimit !== value) {\n            this._state.miterLimit = value;\n            this._context.miterLimit = value;\n        }\n    }\n    get shadowBlur() {\n        return this._context.shadowBlur;\n    }\n    set shadowBlur(value) {\n        if (this._state.shadowBlur !== value) {\n            this._state.shadowBlur = value;\n            this._context.shadowBlur = value;\n        }\n    }\n    get shadowColor() {\n        return this._context.shadowColor;\n    }\n    set shadowColor(value) {\n        if (this._state.shadowColor !== value) {\n            this._state.shadowColor = value;\n            this._context.shadowColor = value;\n        }\n    }\n    get shadowOffsetX() {\n        return this._context.shadowOffsetX;\n    }\n    set shadowOffsetX(value) {\n        if (this._state.shadowOffsetX !== value) {\n            this._state.shadowOffsetX = value;\n            this._context.shadowOffsetX = value;\n        }\n    }\n    get shadowOffsetY() {\n        return this._context.shadowOffsetY;\n    }\n    set shadowOffsetY(value) {\n        if (this._state.shadowOffsetY !== value) {\n            this._state.shadowOffsetY = value;\n            this._context.shadowOffsetY = value;\n        }\n    }\n    get imageSmoothingEnabled() {\n        return this._context.imageSmoothingEnabled;\n    }\n    set imageSmoothingEnabled(value) {\n        if (this._state.imageSmoothingEnabled !== value) {\n            this._state.imageSmoothingEnabled = value;\n            this._context.imageSmoothingEnabled = value;\n        }\n    }\n    get globalAlpha() {\n        return this._context.globalAlpha;\n    }\n    set globalAlpha(value) {\n        if (this._state.globalAlpha !== value) {\n            this._state.globalAlpha = value;\n            this._context.globalAlpha = value;\n        }\n    }\n    get globalCompositeOperation() {\n        return this._context.globalCompositeOperation;\n    }\n    set globalCompositeOperation(value) {\n        if (this._state.globalCompositeOperation !== value) {\n            this._state.globalCompositeOperation = value;\n            this._context.globalCompositeOperation = value;\n        }\n    }\n    getLineDash() {\n        return this._context.getLineDash();\n    }\n    setLineDash(segments) {\n        this._context.setLineDash(segments);\n    }\n    rotate(angle) {\n        this._context.rotate(angle);\n    }\n    scale(x, y) {\n        this._context.scale(x, y);\n    }\n    transform(m11, m12, m21, m22, dx, dy) {\n        this._context.transform(m11, m12, m21, m22, dx, dy);\n    }\n    translate(x, y) {\n        this._context.translate(x, y);\n    }\n    setTransform(m11, m12, m21, m22, dx, dy) {\n        this._context.setTransform(m11, m12, m21, m22, dx, dy);\n    }\n    save() {\n        // Clone an push the current state to the stack.\n        this._state = Private$3.State.push(this._state);\n        // Save the wrapped context state.\n        this._context.save();\n    }\n    restore() {\n        // Bail if there is no state to restore.\n        if (!this._state.next) {\n            return;\n        }\n        // Pop the saved state from the stack.\n        this._state = Private$3.State.pop(this._state);\n        // Restore the wrapped context state.\n        this._context.restore();\n    }\n    beginPath() {\n        return this._context.beginPath();\n    }\n    closePath() {\n        this._context.closePath();\n    }\n    isPointInPath(x, y, fillRule) {\n        let result;\n        if (arguments.length === 2) {\n            result = this._context.isPointInPath(x, y);\n        }\n        else {\n            result = this._context.isPointInPath(x, y, fillRule);\n        }\n        return result;\n    }\n    arc(x, y, radius, startAngle, endAngle, anticlockwise) {\n        if (arguments.length === 5) {\n            this._context.arc(x, y, radius, startAngle, endAngle);\n        }\n        else {\n            this._context.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n        }\n    }\n    arcTo(x1, y1, x2, y2, radius) {\n        this._context.arcTo(x1, y1, x2, y2, radius);\n    }\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    }\n    ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\n        if (arguments.length === 7) {\n            this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle);\n        }\n        else {\n            this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\n        }\n    }\n    lineTo(x, y) {\n        this._context.lineTo(x, y);\n    }\n    moveTo(x, y) {\n        this._context.moveTo(x, y);\n    }\n    quadraticCurveTo(cpx, cpy, x, y) {\n        this._context.quadraticCurveTo(cpx, cpy, x, y);\n    }\n    rect(x, y, w, h) {\n        this._context.rect(x, y, w, h);\n    }\n    clip(fillRule) {\n        if (arguments.length === 0) {\n            this._context.clip();\n        }\n        else {\n            this._context.clip(fillRule);\n        }\n    }\n    fill(fillRule) {\n        if (arguments.length === 0) {\n            this._context.fill();\n        }\n        else {\n            this._context.fill(fillRule);\n        }\n    }\n    stroke() {\n        this._context.stroke();\n    }\n    clearRect(x, y, w, h) {\n        return this._context.clearRect(x, y, w, h);\n    }\n    fillRect(x, y, w, h) {\n        this._context.fillRect(x, y, w, h);\n    }\n    fillText(text, x, y, maxWidth) {\n        if (arguments.length === 3) {\n            this._context.fillText(text, x, y);\n        }\n        else {\n            this._context.fillText(text, x, y, maxWidth);\n        }\n    }\n    strokeRect(x, y, w, h) {\n        this._context.strokeRect(x, y, w, h);\n    }\n    strokeText(text, x, y, maxWidth) {\n        if (arguments.length === 3) {\n            this._context.strokeText(text, x, y);\n        }\n        else {\n            this._context.strokeText(text, x, y, maxWidth);\n        }\n    }\n    measureText(text) {\n        return this._context.measureText(text);\n    }\n    createLinearGradient(x0, y0, x1, y1) {\n        return this._context.createLinearGradient(x0, y0, x1, y1);\n    }\n    createRadialGradient(x0, y0, r0, x1, y1, r1) {\n        return this._context.createRadialGradient(x0, y0, r0, x1, y1, r1);\n    }\n    createPattern(image, repetition) {\n        return this._context.createPattern(image, repetition);\n    }\n    createImageData() {\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        return this._context.createImageData.apply(this._context, arguments);\n    }\n    getImageData(sx, sy, sw, sh) {\n        return this._context.getImageData(sx, sy, sw, sh);\n    }\n    putImageData() {\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        this._context.putImageData.apply(this._context, arguments);\n    }\n    drawImage() {\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        this._context.drawImage.apply(this._context, arguments);\n    }\n    drawFocusIfNeeded(element) {\n        this._context.drawFocusIfNeeded(element);\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private$3;\n(function (Private) {\n    /**\n     * The index of next valid pool object.\n     */\n    let pi = -1;\n    /**\n     * A state object allocation pool.\n     */\n    const pool = [];\n    /**\n     * An object which holds the state for a gc.\n     */\n    class State {\n        /**\n         * Create a gc state object from a 2D canvas context.\n         */\n        static create(context) {\n            let state = pi < 0 ? new State() : pool[pi--];\n            state.next = null;\n            state.fillStyle = context.fillStyle;\n            state.font = context.font;\n            state.globalAlpha = context.globalAlpha;\n            state.globalCompositeOperation = context.globalCompositeOperation;\n            state.imageSmoothingEnabled = context.imageSmoothingEnabled;\n            state.lineCap = context.lineCap;\n            state.lineDashOffset = context.lineDashOffset;\n            state.lineJoin = context.lineJoin;\n            state.lineWidth = context.lineWidth;\n            state.miterLimit = context.miterLimit;\n            state.shadowBlur = context.shadowBlur;\n            state.shadowColor = context.shadowColor;\n            state.shadowOffsetX = context.shadowOffsetX;\n            state.shadowOffsetY = context.shadowOffsetY;\n            state.strokeStyle = context.strokeStyle;\n            state.textAlign = context.textAlign;\n            state.textBaseline = context.textBaseline;\n            return state;\n        }\n        /**\n         * Clone an existing gc state object and add it to the state stack.\n         */\n        static push(other) {\n            let state = pi < 0 ? new State() : pool[pi--];\n            state.next = other;\n            state.fillStyle = other.fillStyle;\n            state.font = other.font;\n            state.globalAlpha = other.globalAlpha;\n            state.globalCompositeOperation = other.globalCompositeOperation;\n            state.imageSmoothingEnabled = other.imageSmoothingEnabled;\n            state.lineCap = other.lineCap;\n            state.lineDashOffset = other.lineDashOffset;\n            state.lineJoin = other.lineJoin;\n            state.lineWidth = other.lineWidth;\n            state.miterLimit = other.miterLimit;\n            state.shadowBlur = other.shadowBlur;\n            state.shadowColor = other.shadowColor;\n            state.shadowOffsetX = other.shadowOffsetX;\n            state.shadowOffsetY = other.shadowOffsetY;\n            state.strokeStyle = other.strokeStyle;\n            state.textAlign = other.textAlign;\n            state.textBaseline = other.textBaseline;\n            return state;\n        }\n        /**\n         * Pop the next state object and return the current to the pool\n         */\n        static pop(state) {\n            state.fillStyle = '';\n            state.strokeStyle = '';\n            pool[++pi] = state;\n            return state.next;\n        }\n    }\n    Private.State = State;\n})(Private$3 || (Private$3 = {}));\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A class which manages the mapping of cell renderers.\n */\nclass RendererMap {\n    /**\n     * Construct a new renderer map.\n     *\n     * @param values - The initial values for the map.\n     *\n     * @param fallback - The renderer of last resort.\n     */\n    constructor(values = {}, fallback) {\n        this._changed = new Signal(this);\n        this._values = { ...values };\n        this._fallback = fallback || new TextRenderer();\n    }\n    /**\n     * A signal emitted when the renderer map has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the cell renderer to use for the given cell config.\n     *\n     * @param config - The cell config of interest.\n     *\n     * @returns The renderer to use for the cell.\n     */\n    get(config) {\n        // Fetch the renderer from the values map.\n        let renderer = this._values[config.region];\n        // Execute a resolver function if necessary.\n        if (typeof renderer === 'function') {\n            try {\n                renderer = renderer(config);\n            }\n            catch (err) {\n                renderer = undefined;\n                console.error(err);\n            }\n        }\n        // Return the renderer or the fallback.\n        return renderer || this._fallback;\n    }\n    /**\n     * Update the renderer map with new values\n     *\n     * @param values - The updated values for the map.\n     *\n     * @param fallback - The renderer of last resort.\n     *\n     * #### Notes\n     * This method always emits the `changed` signal.\n     */\n    update(values = {}, fallback) {\n        this._values = { ...this._values, ...values };\n        this._fallback = fallback || this._fallback;\n        this._changed.emit(undefined);\n    }\n}\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * An object which manages a collection of variable sized sections.\n *\n * #### Notes\n * This class is an implementation detail. It is designed to manage\n * the variable row and column sizes for a data grid. User code will\n * not interact with this class directly.\n */\nclass SectionList {\n    /**\n     * Construct a new section list.\n     *\n     * @param options - The options for initializing the list.\n     */\n    constructor(options) {\n        this._count = 0;\n        this._length = 0;\n        this._sections = [];\n        this._minimumSize = options.minimumSize || 2;\n        this._defaultSize = Math.max(this._minimumSize, Math.floor(options.defaultSize));\n    }\n    /**\n     * The total size of all sections in the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    get length() {\n        return this._length;\n    }\n    /**\n     * The total number of sections in the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * Get the minimum size of sections in the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    get minimumSize() {\n        return this._minimumSize;\n    }\n    /**\n     * Set the minimum size of sections in the list.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    set minimumSize(value) {\n        // Normalize the value.\n        value = Math.max(2, Math.floor(value));\n        // Bail early if the value does not change.\n        if (this._minimumSize === value) {\n            return;\n        }\n        // Update the internal minimum size.\n        this._minimumSize = value;\n        // Update default size if larger than minimum size\n        if (value > this._defaultSize) {\n            this.defaultSize = value;\n        }\n    }\n    /**\n     * Get the default size of sections in the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    get defaultSize() {\n        return this._defaultSize;\n    }\n    /**\n     * Set the default size of sections in the list.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    set defaultSize(value) {\n        // Normalize the value.\n        value = Math.max(this._minimumSize, Math.floor(value));\n        // Bail early if the value does not change.\n        if (this._defaultSize === value) {\n            return;\n        }\n        // Compute the delta default size.\n        let delta = value - this._defaultSize;\n        // Update the internal default size.\n        this._defaultSize = value;\n        // Update the length.\n        this._length += delta * (this._count - this._sections.length);\n        // Bail early if there are no modified sections.\n        if (this._sections.length === 0) {\n            return;\n        }\n        // Recompute the offsets of the modified sections.\n        for (let i = 0, n = this._sections.length; i < n; ++i) {\n            // Look up the previous and current modified sections.\n            let prev = this._sections[i - 1];\n            let curr = this._sections[i];\n            // Adjust the offset for the current section.\n            if (prev) {\n                let count = curr.index - prev.index - 1;\n                curr.offset = prev.offset + prev.size + count * value;\n            }\n            else {\n                curr.offset = curr.index * value;\n            }\n        }\n    }\n    /**\n     * Clamp a size to the minimum section size\n     *\n     * @param size - The size to clamp.\n     *\n     * @returns The size or the section minimum size, whichever is larger\n     */\n    clampSize(size) {\n        return Math.max(this._minimumSize, Math.floor(size));\n    }\n    /**\n     * Find the index of the section which covers the given offset.\n     *\n     * @param offset - The offset of the section of interest.\n     *\n     * @returns The index of the section which covers the given offset,\n     *   or `-1` if the offset is out of range.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    indexOf(offset) {\n        // Bail early if the offset is out of range.\n        if (offset < 0 || offset >= this._length || this._count === 0) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return Math.floor(offset / this._defaultSize);\n        }\n        // Find the modified section for the given offset.\n        let i = ArrayExt.lowerBound(this._sections, offset, Private$2.offsetCmp);\n        // Return the index of an exact match.\n        if (i < this._sections.length && this._sections[i].offset <= offset) {\n            return this._sections[i].index;\n        }\n        // Handle the case of no modified sections before the offset.\n        if (i === 0) {\n            return Math.floor(offset / this._defaultSize);\n        }\n        // Compute the index from the previous modified section.\n        let section = this._sections[i - 1];\n        let span = offset - (section.offset + section.size);\n        return section.index + Math.floor(span / this._defaultSize) + 1;\n    }\n    /**\n     * Find the offset of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The offset of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    offsetOf(index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return index * this._defaultSize;\n        }\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Return the offset of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].offset;\n        }\n        // Handle the case of no modified sections before the index.\n        if (i === 0) {\n            return index * this._defaultSize;\n        }\n        // Compute the offset from the previous modified section.\n        let section = this._sections[i - 1];\n        let span = index - section.index - 1;\n        return section.offset + section.size + span * this._defaultSize;\n    }\n    /**\n     * Find the extent of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The extent of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    extentOf(index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return (index + 1) * this._defaultSize - 1;\n        }\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Return the offset of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].offset + this._sections[i].size - 1;\n        }\n        // Handle the case of no modified sections before the index.\n        if (i === 0) {\n            return (index + 1) * this._defaultSize - 1;\n        }\n        // Compute the offset from the previous modified section.\n        let section = this._sections[i - 1];\n        let span = index - section.index;\n        return section.offset + section.size + span * this._defaultSize - 1;\n    }\n    /**\n     * Find the size of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The size of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    sizeOf(index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return this._defaultSize;\n        }\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Return the size of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].size;\n        }\n        // Return the default size for all other cases.\n        return this._defaultSize;\n    }\n    /**\n     * Resize a section in the list.\n     *\n     * @param index - The index of the section to resize. This method\n     *   is a no-op if this value is out of range.\n     *\n     * @param size - The new size of the section. This value will be\n     *   clamped to an integer `>= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    resize(index, size) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return;\n        }\n        // Clamp the size to an integer >= minimum size.\n        size = Math.max(this._minimumSize, Math.floor(size));\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Update or create the modified section as needed.\n        let delta;\n        if (i < this._sections.length && this._sections[i].index === index) {\n            let section = this._sections[i];\n            delta = size - section.size;\n            section.size = size;\n        }\n        else if (i === 0) {\n            let offset = index * this._defaultSize;\n            ArrayExt.insert(this._sections, i, { index, offset, size });\n            delta = size - this._defaultSize;\n        }\n        else {\n            let section = this._sections[i - 1];\n            let span = index - section.index - 1;\n            let offset = section.offset + section.size + span * this._defaultSize;\n            ArrayExt.insert(this._sections, i, { index, offset, size });\n            delta = size - this._defaultSize;\n        }\n        // Adjust the length.\n        this._length += delta;\n        // Update all modified sections after the resized section.\n        for (let j = i + 1, n = this._sections.length; j < n; ++j) {\n            this._sections[j].offset += delta;\n        }\n    }\n    /**\n     * Insert sections into the list.\n     *\n     * @param index - The index at which to insert the sections. This\n     *   value will be clamped to the bounds of the list.\n     *\n     * @param count - The number of sections to insert. This method\n     *   is a no-op if this value is `<= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` or `count` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    insert(index, count) {\n        // Bail early if there are no sections to insert.\n        if (count <= 0) {\n            return;\n        }\n        // Clamp the index to the bounds of the list.\n        index = Math.max(0, Math.min(index, this._count));\n        // Add the new sections to the totals.\n        let span = count * this._defaultSize;\n        this._count += count;\n        this._length += span;\n        // Bail early if there are no modified sections to update.\n        if (this._sections.length === 0) {\n            return;\n        }\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Update all modified sections after the insert location.\n        for (let n = this._sections.length; i < n; ++i) {\n            let section = this._sections[i];\n            section.index += count;\n            section.offset += span;\n        }\n    }\n    /**\n     * Remove sections from the list.\n     *\n     * @param index - The index of the first section to remove. This\n     *   method is a no-op if this value is out of range.\n     *\n     * @param count - The number of sections to remove. This method\n     *   is a no-op if this value is `<= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` or `count` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    remove(index, count) {\n        // Bail early if there is nothing to remove.\n        if (index < 0 || index >= this._count || count <= 0) {\n            return;\n        }\n        // Clamp the count to the bounds of the list.\n        count = Math.min(this._count - index, count);\n        // Handle the simple case of no modified sections to update.\n        if (this._sections.length === 0) {\n            this._count -= count;\n            this._length -= count * this._defaultSize;\n            return;\n        }\n        // Handle the simple case of removing all sections.\n        if (count === this._count) {\n            this._length = 0;\n            this._count = 0;\n            this._sections.length = 0;\n            return;\n        }\n        // Find the modified section for the start index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Find the modified section for the end index.\n        let j = ArrayExt.lowerBound(this._sections, index + count, Private$2.indexCmp);\n        // Remove the relevant modified sections.\n        let removed = this._sections.splice(i, j - i);\n        // Compute the total removed span.\n        let span = (count - removed.length) * this._defaultSize;\n        for (let k = 0, n = removed.length; k < n; ++k) {\n            span += removed[k].size;\n        }\n        // Adjust the totals.\n        this._count -= count;\n        this._length -= span;\n        // Update all modified sections after the removed span.\n        for (let k = i, n = this._sections.length; k < n; ++k) {\n            let section = this._sections[k];\n            section.index -= count;\n            section.offset -= span;\n        }\n    }\n    /**\n     * Move sections within the list.\n     *\n     * @param index - The index of the first section to move. This method\n     *   is a no-op if this value is out of range.\n     *\n     * @param count - The number of sections to move. This method is a\n     *   no-op if this value is `<= 0`.\n     *\n     * @param destination - The destination index for the first section.\n     *   This value will be clamped to the allowable range.\n     *\n     * #### Undefined Behavior\n     * An `index`, `count`, or `destination` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of moved resized sections.\n     */\n    move(index, count, destination) {\n        // Bail early if there is nothing to move.\n        if (index < 0 || index >= this._count || count <= 0) {\n            return;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return;\n        }\n        // Clamp the move count to the limit.\n        count = Math.min(count, this._count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), this._count - count);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Compute the first affected index.\n        let i1 = Math.min(index, destination);\n        // Look up the first affected modified section.\n        let k1 = ArrayExt.lowerBound(this._sections, i1, Private$2.indexCmp);\n        // Bail early if there are no affected modified sections.\n        if (k1 === this._sections.length) {\n            return;\n        }\n        // Compute the last affected index.\n        let i2 = Math.max(index + count - 1, destination + count - 1);\n        // Look up the last affected modified section.\n        let k2 = ArrayExt.upperBound(this._sections, i2, Private$2.indexCmp) - 1;\n        // Bail early if there are no affected modified sections.\n        if (k2 < k1) {\n            return;\n        }\n        // Compute the pivot index.\n        let pivot = destination < index ? index : index + count;\n        // Compute the count for each side of the pivot.\n        let count1 = pivot - i1;\n        let count2 = i2 - pivot + 1;\n        // Compute the span for each side of the pivot.\n        let span1 = count1 * this._defaultSize;\n        let span2 = count2 * this._defaultSize;\n        // Adjust the spans for the modified sections.\n        for (let j = k1; j <= k2; ++j) {\n            let section = this._sections[j];\n            if (section.index < pivot) {\n                span1 += section.size - this._defaultSize;\n            }\n            else {\n                span2 += section.size - this._defaultSize;\n            }\n        }\n        // Look up the pivot section.\n        let k3 = ArrayExt.lowerBound(this._sections, pivot, Private$2.indexCmp);\n        // Rotate the modified sections if needed.\n        if (k1 <= k3 && k3 <= k2) {\n            ArrayExt.rotate(this._sections, k3 - k1, k1, k2);\n        }\n        // Adjust the modified section indices and offsets.\n        for (let j = k1; j <= k2; ++j) {\n            let section = this._sections[j];\n            if (section.index < pivot) {\n                section.index += count2;\n                section.offset += span2;\n            }\n            else {\n                section.index -= count1;\n                section.offset -= span1;\n            }\n        }\n    }\n    /**\n     * Reset all modified sections to the default size.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    reset() {\n        this._sections.length = 0;\n        this._length = this._count * this._defaultSize;\n    }\n    /**\n     * Remove all sections from the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    clear() {\n        this._count = 0;\n        this._length = 0;\n        this._sections.length = 0;\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private$2;\n(function (Private) {\n    /**\n     * A comparison function for searching by offset.\n     */\n    function offsetCmp(section, offset) {\n        if (offset < section.offset) {\n            return 1;\n        }\n        if (section.offset + section.size <= offset) {\n            return -1;\n        }\n        return 0;\n    }\n    Private.offsetCmp = offsetCmp;\n    /**\n     * A comparison function for searching by index.\n     */\n    function indexCmp(section, index) {\n        return section.index - index;\n    }\n    Private.indexCmp = indexCmp;\n})(Private$2 || (Private$2 = {}));\n\n/**\n * A widget which implements a high-performance tabular data grid.\n *\n * #### Notes\n * A data grid is implemented as a composition of child widgets. These\n * child widgets are considered an implementation detail. Manipulating\n * the child widgets of a data grid directly is undefined behavior.\n *\n * This class is not designed to be subclassed.\n */\nclass DataGrid extends Widget {\n    /**\n     * Construct a new data grid.\n     *\n     * @param options - The options for initializing the data grid.\n     */\n    constructor(options = {}) {\n        super();\n        this._scrollX = 0;\n        this._scrollY = 0;\n        this._viewportWidth = 0;\n        this._viewportHeight = 0;\n        this._mousedown = false;\n        this._keyHandler = null;\n        this._mouseHandler = null;\n        this._vScrollBarMinWidth = 0;\n        this._hScrollBarMinHeight = 0;\n        this._dpiRatio = Math.ceil(window.devicePixelRatio);\n        this._dataModel = null;\n        this._selectionModel = null;\n        this._editingEnabled = false;\n        this.addClass('lm-DataGrid');\n        // Parse the simple options.\n        this._style = options.style || DataGrid.defaultStyle;\n        this._stretchLastRow = options.stretchLastRow || false;\n        this._stretchLastColumn = options.stretchLastColumn || false;\n        this._headerVisibility = options.headerVisibility || 'all';\n        this._cellRenderers = options.cellRenderers || new RendererMap();\n        this._copyConfig = options.copyConfig || DataGrid.defaultCopyConfig;\n        // Connect to the renderer map changed signal.\n        this._cellRenderers.changed.connect(this._onRenderersChanged, this);\n        // Parse the default sizes.\n        let defaultSizes = options.defaultSizes || DataGrid.defaultSizes;\n        let minimumSizes = options.minimumSizes || DataGrid.minimumSizes;\n        // Set up the sections lists.\n        this._rowSections = new SectionList({\n            defaultSize: defaultSizes.rowHeight,\n            minimumSize: minimumSizes.rowHeight\n        });\n        this._columnSections = new SectionList({\n            defaultSize: defaultSizes.columnWidth,\n            minimumSize: minimumSizes.columnWidth\n        });\n        this._rowHeaderSections = new SectionList({\n            defaultSize: defaultSizes.rowHeaderWidth,\n            minimumSize: minimumSizes.rowHeaderWidth\n        });\n        this._columnHeaderSections = new SectionList({\n            defaultSize: defaultSizes.columnHeaderHeight,\n            minimumSize: minimumSizes.columnHeaderHeight\n        });\n        // Create the canvas, buffer, and overlay objects.\n        this._canvas = Private$1.createCanvas();\n        this._buffer = Private$1.createCanvas();\n        this._overlay = Private$1.createCanvas();\n        // Get the graphics contexts for the canvases.\n        this._canvasGC = this._canvas.getContext('2d');\n        this._bufferGC = this._buffer.getContext('2d');\n        this._overlayGC = this._overlay.getContext('2d');\n        // Set up the on-screen canvas.\n        this._canvas.style.position = 'absolute';\n        this._canvas.style.top = '0px';\n        this._canvas.style.left = '0px';\n        this._canvas.style.width = '0px';\n        this._canvas.style.height = '0px';\n        // Set up the on-screen overlay.\n        this._overlay.style.position = 'absolute';\n        this._overlay.style.top = '0px';\n        this._overlay.style.left = '0px';\n        this._overlay.style.width = '0px';\n        this._overlay.style.height = '0px';\n        // Create the internal widgets for the data grid.\n        this._viewport = new Widget();\n        this._viewport.node.tabIndex = -1;\n        this._viewport.node.style.outline = 'none';\n        this._vScrollBar = new ScrollBar({ orientation: 'vertical' });\n        this._hScrollBar = new ScrollBar({ orientation: 'horizontal' });\n        this._scrollCorner = new Widget();\n        this._editorController = new CellEditorController();\n        // Add the extra class names to the child widgets.\n        this._viewport.addClass('lm-DataGrid-viewport');\n        this._vScrollBar.addClass('lm-DataGrid-scrollBar');\n        this._hScrollBar.addClass('lm-DataGrid-scrollBar');\n        this._scrollCorner.addClass('lm-DataGrid-scrollCorner');\n        // Add the on-screen canvas to the viewport node.\n        this._viewport.node.appendChild(this._canvas);\n        // Add the on-screen overlay to the viewport node.\n        this._viewport.node.appendChild(this._overlay);\n        // Install the message hooks.\n        MessageLoop.installMessageHook(this._viewport, this);\n        MessageLoop.installMessageHook(this._hScrollBar, this);\n        MessageLoop.installMessageHook(this._vScrollBar, this);\n        // Hide the scroll bars and corner from the outset.\n        this._vScrollBar.hide();\n        this._hScrollBar.hide();\n        this._scrollCorner.hide();\n        // Connect to the scroll bar signals.\n        this._vScrollBar.thumbMoved.connect(this._onThumbMoved, this);\n        this._hScrollBar.thumbMoved.connect(this._onThumbMoved, this);\n        this._vScrollBar.pageRequested.connect(this._onPageRequested, this);\n        this._hScrollBar.pageRequested.connect(this._onPageRequested, this);\n        this._vScrollBar.stepRequested.connect(this._onStepRequested, this);\n        this._hScrollBar.stepRequested.connect(this._onStepRequested, this);\n        // Set the layout cell config for the child widgets.\n        GridLayout.setCellConfig(this._viewport, { row: 0, column: 0 });\n        GridLayout.setCellConfig(this._vScrollBar, { row: 0, column: 1 });\n        GridLayout.setCellConfig(this._hScrollBar, { row: 1, column: 0 });\n        GridLayout.setCellConfig(this._scrollCorner, { row: 1, column: 1 });\n        // Create the layout for the data grid.\n        let layout = new GridLayout({\n            rowCount: 2,\n            columnCount: 2,\n            rowSpacing: 0,\n            columnSpacing: 0,\n            fitPolicy: 'set-no-constraint'\n        });\n        // Set the stretch factors for the grid.\n        layout.setRowStretch(0, 1);\n        layout.setRowStretch(1, 0);\n        layout.setColumnStretch(0, 1);\n        layout.setColumnStretch(1, 0);\n        // Add the child widgets to the layout.\n        layout.addWidget(this._viewport);\n        layout.addWidget(this._vScrollBar);\n        layout.addWidget(this._hScrollBar);\n        layout.addWidget(this._scrollCorner);\n        // Install the layout on the data grid.\n        this.layout = layout;\n    }\n    /**\n     * Dispose of the resources held by the widgets.\n     */\n    dispose() {\n        // Release the mouse.\n        this._releaseMouse();\n        // Dispose of the handlers.\n        if (this._keyHandler) {\n            this._keyHandler.dispose();\n        }\n        if (this._mouseHandler) {\n            this._mouseHandler.dispose();\n        }\n        this._keyHandler = null;\n        this._mouseHandler = null;\n        // Clear the models.\n        this._dataModel = null;\n        this._selectionModel = null;\n        // Clear the section lists.\n        this._rowSections.clear();\n        this._columnSections.clear();\n        this._rowHeaderSections.clear();\n        this._columnHeaderSections.clear();\n        // Dispose of the base class.\n        super.dispose();\n    }\n    /**\n     * Get the data model for the data grid.\n     */\n    get dataModel() {\n        return this._dataModel;\n    }\n    /**\n     * Set the data model for the data grid.\n     *\n     * #### Notes\n     * This will automatically remove the current selection model.\n     */\n    set dataModel(value) {\n        // Do nothing if the model does not change.\n        if (this._dataModel === value) {\n            return;\n        }\n        // Release the mouse.\n        this._releaseMouse();\n        // Clear the selection model.\n        this.selectionModel = null;\n        // Disconnect the change handler from the old model.\n        if (this._dataModel) {\n            this._dataModel.changed.disconnect(this._onDataModelChanged, this);\n        }\n        // Connect the change handler for the new model.\n        if (value) {\n            value.changed.connect(this._onDataModelChanged, this);\n        }\n        // Update the internal model reference.\n        this._dataModel = value;\n        // Clear the section lists.\n        this._rowSections.clear();\n        this._columnSections.clear();\n        this._rowHeaderSections.clear();\n        this._columnHeaderSections.clear();\n        // Populate the section lists.\n        if (value) {\n            this._rowSections.insert(0, value.rowCount('body'));\n            this._columnSections.insert(0, value.columnCount('body'));\n            this._rowHeaderSections.insert(0, value.columnCount('row-header'));\n            this._columnHeaderSections.insert(0, value.rowCount('column-header'));\n        }\n        // Reset the scroll position.\n        this._scrollX = 0;\n        this._scrollY = 0;\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Get the selection model for the data grid.\n     */\n    get selectionModel() {\n        return this._selectionModel;\n    }\n    /**\n     * Set the selection model for the data grid.\n     */\n    set selectionModel(value) {\n        // Do nothing if the selection model does not change.\n        if (this._selectionModel === value) {\n            return;\n        }\n        // Release the mouse.\n        this._releaseMouse();\n        // Ensure the data models are a match.\n        if (value && value.dataModel !== this._dataModel) {\n            throw new Error('SelectionModel.dataModel !== DataGrid.dataModel');\n        }\n        // Disconnect the change handler from the old model.\n        if (this._selectionModel) {\n            this._selectionModel.changed.disconnect(this._onSelectionsChanged, this);\n        }\n        // Connect the change handler for the new model.\n        if (value) {\n            value.changed.connect(this._onSelectionsChanged, this);\n        }\n        // Update the internal selection model reference.\n        this._selectionModel = value;\n        // Schedule a repaint of the overlay.\n        this.repaintOverlay();\n    }\n    /**\n     * Get the key handler for the data grid.\n     */\n    get keyHandler() {\n        return this._keyHandler;\n    }\n    /**\n     * Set the key handler for the data grid.\n     */\n    set keyHandler(value) {\n        this._keyHandler = value;\n    }\n    /**\n     * Get the mouse handler for the data grid.\n     */\n    get mouseHandler() {\n        return this._mouseHandler;\n    }\n    /**\n     * Set the mouse handler for the data grid.\n     */\n    set mouseHandler(value) {\n        // Bail early if the mouse handler does not change.\n        if (this._mouseHandler === value) {\n            return;\n        }\n        // Release the mouse.\n        this._releaseMouse();\n        // Update the internal mouse handler.\n        this._mouseHandler = value;\n    }\n    /**\n     * Get the style for the data grid.\n     */\n    get style() {\n        return this._style;\n    }\n    /**\n     * Set the style for the data grid.\n     */\n    set style(value) {\n        // Bail if the style does not change.\n        if (this._style === value) {\n            return;\n        }\n        // Update the internal style.\n        this._style = { ...value };\n        // Schedule a repaint of the content.\n        this.repaintContent();\n        // Schedule a repaint of the overlay.\n        this.repaintOverlay();\n    }\n    /**\n     * Get the cell renderer map for the data grid.\n     */\n    get cellRenderers() {\n        return this._cellRenderers;\n    }\n    /**\n     * Set the cell renderer map for the data grid.\n     */\n    set cellRenderers(value) {\n        // Bail if the renderer map does not change.\n        if (this._cellRenderers === value) {\n            return;\n        }\n        // Disconnect the old map.\n        this._cellRenderers.changed.disconnect(this._onRenderersChanged, this);\n        // Connect the new map.\n        value.changed.connect(this._onRenderersChanged, this);\n        // Update the internal renderer map.\n        this._cellRenderers = value;\n        // Schedule a repaint of the grid content.\n        this.repaintContent();\n    }\n    /**\n     * Get the header visibility for the data grid.\n     */\n    get headerVisibility() {\n        return this._headerVisibility;\n    }\n    /**\n     * Set the header visibility for the data grid.\n     */\n    set headerVisibility(value) {\n        // Bail if the visibility does not change.\n        if (this._headerVisibility === value) {\n            return;\n        }\n        // Update the internal visibility.\n        this._headerVisibility = value;\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Get the default sizes for the various sections of the data grid.\n     */\n    get defaultSizes() {\n        let rowHeight = this._rowSections.defaultSize;\n        let columnWidth = this._columnSections.defaultSize;\n        let rowHeaderWidth = this._rowHeaderSections.defaultSize;\n        let columnHeaderHeight = this._columnHeaderSections.defaultSize;\n        return { rowHeight, columnWidth, rowHeaderWidth, columnHeaderHeight };\n    }\n    /**\n     * Set the default sizes for the various sections of the data grid.\n     */\n    set defaultSizes(value) {\n        // Update the section default sizes.\n        this._rowSections.defaultSize = value.rowHeight;\n        this._columnSections.defaultSize = value.columnWidth;\n        this._rowHeaderSections.defaultSize = value.rowHeaderWidth;\n        this._columnHeaderSections.defaultSize = value.columnHeaderHeight;\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Get the minimum sizes for the various sections of the data grid.\n     */\n    get minimumSizes() {\n        let rowHeight = this._rowSections.minimumSize;\n        let columnWidth = this._columnSections.minimumSize;\n        let rowHeaderWidth = this._rowHeaderSections.minimumSize;\n        let columnHeaderHeight = this._columnHeaderSections.minimumSize;\n        return { rowHeight, columnWidth, rowHeaderWidth, columnHeaderHeight };\n    }\n    /**\n     * Set the minimum sizes for the various sections of the data grid.\n     */\n    set minimumSizes(value) {\n        // Update the section default sizes.\n        this._rowSections.minimumSize = value.rowHeight;\n        this._columnSections.minimumSize = value.columnWidth;\n        this._rowHeaderSections.minimumSize = value.rowHeaderWidth;\n        this._columnHeaderSections.minimumSize = value.columnHeaderHeight;\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Get the copy configuration for the data grid.\n     */\n    get copyConfig() {\n        return this._copyConfig;\n    }\n    /**\n     * Set the copy configuration for the data grid.\n     */\n    set copyConfig(value) {\n        this._copyConfig = value;\n    }\n    /**\n     * Get whether the last row is stretched.\n     */\n    get stretchLastRow() {\n        return this._stretchLastRow;\n    }\n    /**\n     * Set whether the last row is stretched.\n     */\n    set stretchLastRow(value) {\n        // Bail early if the value does not change.\n        if (value === this._stretchLastRow) {\n            return;\n        }\n        // Update the internal value.\n        this._stretchLastRow = value;\n        // Sync the viewport\n        this._syncViewport();\n    }\n    /**\n     * Get whether the last column is stretched.\n     */\n    get stretchLastColumn() {\n        return this._stretchLastColumn;\n    }\n    /**\n     * Set whether the last column is stretched.\n     */\n    set stretchLastColumn(value) {\n        // Bail early if the value does not change.\n        if (value === this._stretchLastColumn) {\n            return;\n        }\n        // Update the internal value.\n        this._stretchLastColumn = value;\n        // Sync the viewport\n        this._syncViewport();\n    }\n    /**\n     * The virtual width of the row headers.\n     */\n    get headerWidth() {\n        if (this._headerVisibility === 'none') {\n            return 0;\n        }\n        if (this._headerVisibility === 'column') {\n            return 0;\n        }\n        return this._rowHeaderSections.length;\n    }\n    /**\n     * The virtual height of the column headers.\n     */\n    get headerHeight() {\n        if (this._headerVisibility === 'none') {\n            return 0;\n        }\n        if (this._headerVisibility === 'row') {\n            return 0;\n        }\n        return this._columnHeaderSections.length;\n    }\n    /**\n     * The virtual width of the grid body.\n     *\n     * #### Notes\n     * This does *not* account for a stretched last column.\n     */\n    get bodyWidth() {\n        return this._columnSections.length;\n    }\n    /**\n     * The virtual height of the grid body.\n     *\n     * #### Notes\n     * This does *not* account for a stretched last row.\n     */\n    get bodyHeight() {\n        return this._rowSections.length;\n    }\n    /**\n     * The virtual width of the entire grid.\n     *\n     * #### Notes\n     * This does *not* account for a stretched last column.\n     */\n    get totalWidth() {\n        return this.headerWidth + this.bodyWidth;\n    }\n    /**\n     * The virtual height of the entire grid.\n     *\n     * #### Notes\n     * This does *not* account for a stretched last row.\n     */\n    get totalHeight() {\n        return this.headerHeight + this.bodyHeight;\n    }\n    /**\n     * The actual width of the viewport.\n     */\n    get viewportWidth() {\n        return this._viewportWidth;\n    }\n    /**\n     * The actual height of the viewport.\n     */\n    get viewportHeight() {\n        return this._viewportHeight;\n    }\n    /**\n     * The width of the visible portion of the grid body.\n     */\n    get pageWidth() {\n        return Math.max(0, this.viewportWidth - this.headerWidth);\n    }\n    /**\n     * The height of the visible portion of the grid body.\n     */\n    get pageHeight() {\n        return Math.max(0, this.viewportHeight - this.headerHeight);\n    }\n    /**\n     * The current scroll X position of the viewport.\n     */\n    get scrollX() {\n        return this._hScrollBar.value;\n    }\n    /**\n     * The current scroll Y position of the viewport.\n     */\n    get scrollY() {\n        return this._vScrollBar.value;\n    }\n    /**\n     * The maximum scroll X position for the grid.\n     */\n    get maxScrollX() {\n        return Math.max(0, this.bodyWidth - this.pageWidth - 1);\n    }\n    /**\n     * The maximum scroll Y position for the grid.\n     */\n    get maxScrollY() {\n        return Math.max(0, this.bodyHeight - this.pageHeight - 1);\n    }\n    /**\n     * The viewport widget for the data grid.\n     */\n    get viewport() {\n        return this._viewport;\n    }\n    /**\n     * The cell editor controller object for the data grid.\n     */\n    get editorController() {\n        return this._editorController;\n    }\n    set editorController(controller) {\n        this._editorController = controller;\n    }\n    /**\n     * Whether the cell editing is enabled for the data grid.\n     */\n    get editingEnabled() {\n        return this._editingEnabled;\n    }\n    set editingEnabled(enabled) {\n        this._editingEnabled = enabled;\n    }\n    /**\n     * Whether the grid cells are editable.\n     *\n     * `editingEnabled` flag must be on and grid must have required\n     * selection model, editor controller and data model properties.\n     */\n    get editable() {\n        return (this._editingEnabled &&\n            this._selectionModel !== null &&\n            this._editorController !== null &&\n            this.dataModel instanceof MutableDataModel);\n    }\n    /**\n     * The rendering context for painting the data grid.\n     */\n    get canvasGC() {\n        return this._canvasGC;\n    }\n    /**\n     * The row sections of the data grid.\n     */\n    get rowSections() {\n        return this._rowSections;\n    }\n    /**\n     * The column sections of the data grid.\n     */\n    get columnSections() {\n        return this._columnSections;\n    }\n    /**\n     * The row header sections of the data grid.\n     */\n    get rowHeaderSections() {\n        return this._rowHeaderSections;\n    }\n    /**\n     * The column header sections of the data grid.\n     */\n    get columnHeaderSections() {\n        return this._columnHeaderSections;\n    }\n    /**\n     * Scroll the grid to the specified row.\n     *\n     * @param row - The row index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the row is already visible.\n     */\n    scrollToRow(row) {\n        // Fetch the row count.\n        let nr = this._rowSections.count;\n        // Bail early if there is no content.\n        if (nr === 0) {\n            return;\n        }\n        // Floor the row index.\n        row = Math.floor(row);\n        // Clamp the row index.\n        row = Math.max(0, Math.min(row, nr - 1));\n        // Get the virtual bounds of the row.\n        let y1 = this._rowSections.offsetOf(row);\n        let y2 = this._rowSections.extentOf(row);\n        // Get the virtual bounds of the viewport.\n        let vy1 = this._scrollY;\n        let vy2 = this._scrollY + this.pageHeight - 1;\n        // Set up the delta variables.\n        let dy = 0;\n        // Compute the delta Y scroll.\n        if (y1 < vy1) {\n            dy = y1 - vy1 - 10;\n        }\n        else if (y2 > vy2) {\n            dy = y2 - vy2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dy === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(0, dy);\n    }\n    /**\n     * Scroll the grid to the specified column.\n     *\n     * @param column - The column index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the column is already visible.\n     */\n    scrollToColumn(column) {\n        // Fetch the column count.\n        let nc = this._columnSections.count;\n        // Bail early if there is no content.\n        if (nc === 0) {\n            return;\n        }\n        // Floor the column index.\n        column = Math.floor(column);\n        // Clamp the column index.\n        column = Math.max(0, Math.min(column, nc - 1));\n        // Get the virtual bounds of the column.\n        let x1 = this._columnSections.offsetOf(column);\n        let x2 = this._columnSections.extentOf(column);\n        // Get the virtual bounds of the viewport.\n        let vx1 = this._scrollX;\n        let vx2 = this._scrollX + this.pageWidth - 1;\n        // Set up the delta variables.\n        let dx = 0;\n        // Compute the delta X scroll.\n        if (x1 < vx1) {\n            dx = x1 - vx1 - 10;\n        }\n        else if (x2 > vx2) {\n            dx = x2 - vx2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dx === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(dx, 0);\n    }\n    /**\n     * Scroll the grid to the specified cell.\n     *\n     * @param row - The row index of the cell.\n     *\n     * @param column - The column index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the cell is already visible.\n     */\n    scrollToCell(row, column) {\n        // Fetch the row and column count.\n        let nr = this._rowSections.count;\n        let nc = this._columnSections.count;\n        // Bail early if there is no content.\n        if (nr === 0 || nc === 0) {\n            return;\n        }\n        // Floor the cell index.\n        row = Math.floor(row);\n        column = Math.floor(column);\n        // Clamp the cell index.\n        row = Math.max(0, Math.min(row, nr - 1));\n        column = Math.max(0, Math.min(column, nc - 1));\n        // Get the virtual bounds of the cell.\n        let x1 = this._columnSections.offsetOf(column);\n        let x2 = this._columnSections.extentOf(column);\n        let y1 = this._rowSections.offsetOf(row);\n        let y2 = this._rowSections.extentOf(row);\n        // Get the virtual bounds of the viewport.\n        let vx1 = this._scrollX;\n        let vx2 = this._scrollX + this.pageWidth - 1;\n        let vy1 = this._scrollY;\n        let vy2 = this._scrollY + this.pageHeight - 1;\n        // Set up the delta variables.\n        let dx = 0;\n        let dy = 0;\n        // Compute the delta X scroll.\n        if (x1 < vx1) {\n            dx = x1 - vx1 - 10;\n        }\n        else if (x2 > vx2) {\n            dx = x2 - vx2 + 10;\n        }\n        // Compute the delta Y scroll.\n        if (y1 < vy1) {\n            dy = y1 - vy1 - 10;\n        }\n        else if (y2 > vy2) {\n            dy = y2 - vy2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dx === 0 && dy === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(dx, dy);\n    }\n    /**\n     * Move cursor down/up/left/right while making sure it remains\n     * within the bounds of selected rectangles\n     *\n     * @param direction - The direction of the movement.\n     */\n    moveCursor(direction) {\n        // Bail early if there is no selection\n        if (!this.dataModel ||\n            !this._selectionModel ||\n            this._selectionModel.isEmpty) {\n            return;\n        }\n        const iter = this._selectionModel.selections();\n        const onlyOne = iter.next() && !iter.next();\n        // if there is a single selection that is a single cell selection\n        // then move the selection and cursor within grid bounds\n        if (onlyOne) {\n            const currentSel = this._selectionModel.currentSelection();\n            if (currentSel.r1 === currentSel.r2 && currentSel.c1 === currentSel.c2) {\n                const dr = direction === 'down' ? 1 : direction === 'up' ? -1 : 0;\n                const dc = direction === 'right' ? 1 : direction === 'left' ? -1 : 0;\n                let newRow = currentSel.r1 + dr;\n                let newColumn = currentSel.c1 + dc;\n                const rowCount = this.dataModel.rowCount('body');\n                const columnCount = this.dataModel.columnCount('body');\n                if (newRow >= rowCount) {\n                    newRow = 0;\n                    newColumn += 1;\n                }\n                else if (newRow === -1) {\n                    newRow = rowCount - 1;\n                    newColumn -= 1;\n                }\n                if (newColumn >= columnCount) {\n                    newColumn = 0;\n                    newRow += 1;\n                    if (newRow >= rowCount) {\n                        newRow = 0;\n                    }\n                }\n                else if (newColumn === -1) {\n                    newColumn = columnCount - 1;\n                    newRow -= 1;\n                    if (newRow === -1) {\n                        newRow = rowCount - 1;\n                    }\n                }\n                this._selectionModel.select({\n                    r1: newRow,\n                    c1: newColumn,\n                    r2: newRow,\n                    c2: newColumn,\n                    cursorRow: newRow,\n                    cursorColumn: newColumn,\n                    clear: 'all'\n                });\n                return;\n            }\n        }\n        // if there are multiple selections, move cursor\n        // within selection rectangles\n        this._selectionModel.moveCursorWithinSelections(direction);\n    }\n    /**\n     * Scroll the grid to the current cursor position.\n     *\n     * #### Notes\n     * This is a no-op if the cursor is already visible or\n     * if there is no selection model installed on the grid.\n     */\n    scrollToCursor() {\n        // Bail early if there is no selection model.\n        if (!this._selectionModel) {\n            return;\n        }\n        // Fetch the cursor row and column.\n        let row = this._selectionModel.cursorRow;\n        let column = this._selectionModel.cursorColumn;\n        // Scroll to the cursor cell.\n        this.scrollToCell(row, column);\n    }\n    /**\n     * Scroll the viewport by the specified amount.\n     *\n     * @param dx - The X scroll amount.\n     *\n     * @param dy - The Y scroll amount.\n     */\n    scrollBy(dx, dy) {\n        this.scrollTo(this.scrollX + dx, this.scrollY + dy);\n    }\n    /**\n     * Scroll the viewport by one page.\n     *\n     * @param dir - The desired direction of the scroll.\n     */\n    scrollByPage(dir) {\n        let dx = 0;\n        let dy = 0;\n        switch (dir) {\n            case 'up':\n                dy = -this.pageHeight;\n                break;\n            case 'down':\n                dy = this.pageHeight;\n                break;\n            case 'left':\n                dx = -this.pageWidth;\n                break;\n            case 'right':\n                dx = this.pageWidth;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.scrollTo(this.scrollX + dx, this.scrollY + dy);\n    }\n    /**\n     * Scroll the viewport by one cell-aligned step.\n     *\n     * @param dir - The desired direction of the scroll.\n     */\n    scrollByStep(dir) {\n        let r;\n        let c;\n        let x = this.scrollX;\n        let y = this.scrollY;\n        let rows = this._rowSections;\n        let columns = this._columnSections;\n        switch (dir) {\n            case 'up':\n                r = rows.indexOf(y - 1);\n                y = r < 0 ? y : rows.offsetOf(r);\n                break;\n            case 'down':\n                r = rows.indexOf(y);\n                y = r < 0 ? y : rows.offsetOf(r) + rows.sizeOf(r);\n                break;\n            case 'left':\n                c = columns.indexOf(x - 1);\n                x = c < 0 ? x : columns.offsetOf(c);\n                break;\n            case 'right':\n                c = columns.indexOf(x);\n                x = c < 0 ? x : columns.offsetOf(c) + columns.sizeOf(c);\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.scrollTo(x, y);\n    }\n    /**\n     * Scroll to the specified offset position.\n     *\n     * @param x - The desired X position.\n     *\n     * @param y - The desired Y position.\n     */\n    scrollTo(x, y) {\n        // Floor and clamp the position to the allowable range.\n        x = Math.max(0, Math.min(Math.floor(x), this.maxScrollX));\n        y = Math.max(0, Math.min(Math.floor(y), this.maxScrollY));\n        // Update the scroll bar values with the desired position.\n        this._hScrollBar.value = x;\n        this._vScrollBar.value = y;\n        // Post a scroll request message to the viewport.\n        MessageLoop.postMessage(this._viewport, Private$1.ScrollRequest);\n    }\n    /**\n     * Get the row count for a particular region in the data grid.\n     *\n     * @param region - The row region of interest.\n     *\n     * @returns The row count for the specified region.\n     */\n    rowCount(region) {\n        let count;\n        if (region === 'body') {\n            count = this._rowSections.count;\n        }\n        else {\n            count = this._columnHeaderSections.count;\n        }\n        return count;\n    }\n    /**\n     * Get the column count for a particular region in the data grid.\n     *\n     * @param region - The column region of interest.\n     *\n     * @returns The column count for the specified region.\n     */\n    columnCount(region) {\n        let count;\n        if (region === 'body') {\n            count = this._columnSections.count;\n        }\n        else {\n            count = this._rowHeaderSections.count;\n        }\n        return count;\n    }\n    /**\n     * Get the row at a virtual offset in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param offset - The virtual offset of the row of interest.\n     *\n     * @returns The index of the row, or `-1` if the offset is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row.\n     */\n    rowAt(region, offset) {\n        // Bail early if the offset is negative.\n        if (offset < 0) {\n            return -1;\n        }\n        // Return early for the column header region.\n        if (region === 'column-header') {\n            return this._columnHeaderSections.indexOf(offset);\n        }\n        // Fetch the index.\n        let index = this._rowSections.indexOf(offset);\n        // Return early if the section is found.\n        if (index >= 0) {\n            return index;\n        }\n        // Bail early if the last row is not stretched.\n        if (!this._stretchLastRow) {\n            return -1;\n        }\n        // Fetch the geometry.\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        // Bail early if no row stretching is required.\n        if (ph <= bh) {\n            return -1;\n        }\n        // Bail early if the offset is out of bounds.\n        if (offset >= ph) {\n            return -1;\n        }\n        // Otherwise, return the last row.\n        return this._rowSections.count - 1;\n    }\n    /**\n     * Get the column at a virtual offset in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param offset - The virtual offset of the column of interest.\n     *\n     * @returns The index of the column, or `-1` if the offset is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last column.\n     */\n    columnAt(region, offset) {\n        if (offset < 0) {\n            return -1;\n        }\n        // Return early for the row header region.\n        if (region === 'row-header') {\n            return this._rowHeaderSections.indexOf(offset);\n        }\n        // Fetch the index.\n        let index = this._columnSections.indexOf(offset);\n        // Return early if the section is found.\n        if (index >= 0) {\n            return index;\n        }\n        // Bail early if the last column is not stretched.\n        if (!this._stretchLastColumn) {\n            return -1;\n        }\n        // Fetch the geometry.\n        let bw = this.bodyWidth;\n        let pw = this.pageWidth;\n        // Bail early if no column stretching is required.\n        if (pw <= bw) {\n            return -1;\n        }\n        // Bail early if the offset is out of bounds.\n        if (offset >= pw) {\n            return -1;\n        }\n        // Otherwise, return the last column.\n        return this._columnSections.count - 1;\n    }\n    /**\n     * Get the offset of a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @returns The offset of the row, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * A stretched last row has no effect on the return value.\n     */\n    rowOffset(region, index) {\n        let offset;\n        if (region === 'body') {\n            offset = this._rowSections.offsetOf(index);\n        }\n        else {\n            offset = this._columnHeaderSections.offsetOf(index);\n        }\n        return offset;\n    }\n    /**\n     * Get the offset of a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @returns The offset of the column, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * A stretched last column has no effect on the return value.\n     */\n    columnOffset(region, index) {\n        let offset;\n        if (region === 'body') {\n            offset = this._columnSections.offsetOf(index);\n        }\n        else {\n            offset = this._rowHeaderSections.offsetOf(index);\n        }\n        return offset;\n    }\n    /**\n     * Get the size of a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @returns The size of the row, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row.\n     */\n    rowSize(region, index) {\n        // Return early for the column header region.\n        if (region === 'column-header') {\n            return this._columnHeaderSections.sizeOf(index);\n        }\n        // Fetch the row size.\n        let size = this._rowSections.sizeOf(index);\n        // Bail early if the index is out of bounds.\n        if (size < 0) {\n            return size;\n        }\n        // Return early if the last row is not stretched.\n        if (!this._stretchLastRow) {\n            return size;\n        }\n        // Return early if its not the last row.\n        if (index < this._rowSections.count - 1) {\n            return size;\n        }\n        // Fetch the geometry.\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        // Return early if no stretching is needed.\n        if (ph <= bh) {\n            return size;\n        }\n        // Return the adjusted size.\n        return size + (ph - bh);\n    }\n    /**\n     * Get the size of a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @returns The size of the column, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last column.\n     */\n    columnSize(region, index) {\n        // Return early for the row header region.\n        if (region === 'row-header') {\n            return this._rowHeaderSections.sizeOf(index);\n        }\n        // Fetch the column size.\n        let size = this._columnSections.sizeOf(index);\n        // Bail early if the index is out of bounds.\n        if (size < 0) {\n            return size;\n        }\n        // Return early if the last column is not stretched.\n        if (!this._stretchLastColumn) {\n            return size;\n        }\n        // Return early if its not the last column.\n        if (index < this._columnSections.count - 1) {\n            return size;\n        }\n        // Fetch the geometry.\n        let bw = this.bodyWidth;\n        let pw = this.pageWidth;\n        // Return early if no stretching is needed.\n        if (pw <= bw) {\n            return size;\n        }\n        // Return the adjusted size.\n        return size + (pw - bw);\n    }\n    /**\n     * Resize a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @param size - The desired size of the row.\n     */\n    resizeRow(region, index, size) {\n        let msg = new Private$1.RowResizeRequest(region, index, size);\n        MessageLoop.postMessage(this._viewport, msg);\n    }\n    /**\n     * Resize a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @param size - The desired size of the column.\n     */\n    resizeColumn(region, index, size) {\n        let msg = new Private$1.ColumnResizeRequest(region, index, size);\n        MessageLoop.postMessage(this._viewport, msg);\n    }\n    /**\n     * Reset modified rows to their default size.\n     *\n     * @param region - The row region of interest.\n     */\n    resetRows(region) {\n        switch (region) {\n            case 'all':\n                this._rowSections.reset();\n                this._columnHeaderSections.reset();\n                break;\n            case 'body':\n                this._rowSections.reset();\n                break;\n            case 'column-header':\n                this._columnHeaderSections.reset();\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.repaintContent();\n        this.repaintOverlay();\n    }\n    /**\n     * Reset modified columns to their default size.\n     *\n     * @param region - The column region of interest.\n     */\n    resetColumns(region) {\n        switch (region) {\n            case 'all':\n                this._columnSections.reset();\n                this._rowHeaderSections.reset();\n                break;\n            case 'body':\n                this._columnSections.reset();\n                break;\n            case 'row-header':\n                this._rowHeaderSections.reset();\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.repaintContent();\n        this.repaintOverlay();\n    }\n    /**\n     * Auto sizes column-header widths based on their text content.\n     * @param area which area to resize: 'body', 'row-header' or 'all'.\n     * @param padding padding added to resized columns (pixels).\n     * @param numCols specify cap on the number of column resizes (optional).\n     */\n    fitColumnNames(area = 'all', padding = 15, numCols) {\n        // Attempt resizing only if a data model is present.\n        if (this.dataModel) {\n            // Tracking remaining columns to be resized if numCols arg passed.\n            let colsRemaining = numCols === undefined || numCols < 0 ? undefined : numCols;\n            if (area === 'row-header' || area === 'all') {\n                // Respecting any column resize cap, if one has been passed.\n                if (colsRemaining !== undefined) {\n                    const rowColumnCount = this.dataModel.columnCount('row-header');\n                    /*\n                      If we have more row-header columns than columns available\n                      for resize, resize only remaining columns as per allowance\n                      and set remaining resize allowance number to 0.\n                    */\n                    if (colsRemaining - rowColumnCount < 0) {\n                        this._fitRowColumnHeaders(this.dataModel, padding, colsRemaining);\n                        colsRemaining = 0;\n                    }\n                    else {\n                        /*\n                          Otherwise the entire row-header column count can be resized.\n                          Resize all row-header columns and subtract from remaining\n                          column resize allowance.\n                        */\n                        this._fitRowColumnHeaders(this.dataModel, padding, rowColumnCount);\n                        colsRemaining = colsRemaining - rowColumnCount;\n                    }\n                }\n                else {\n                    // No column resize cap passed - resizing all columns.\n                    this._fitRowColumnHeaders(this.dataModel, padding);\n                }\n            }\n            if (area === 'body' || area === 'all') {\n                // Respecting any column resize cap, if one has been passed.\n                if (colsRemaining !== undefined) {\n                    const bodyColumnCount = this.dataModel.columnCount('body');\n                    /*\n                      If we have more body columns than columns available\n                      for resize, resize only remaining columns as per allowance\n                      and set remaining resize allowance number to 0.\n                    */\n                    if (colsRemaining - bodyColumnCount < 0) {\n                        this._fitBodyColumnHeaders(this.dataModel, padding, colsRemaining);\n                    }\n                    else {\n                        /*\n                          Otherwise the entire body column count can be resized.\n                          Resize based on the smallest number between remaining\n                          resize allowance and body column count.\n                        */\n                        this._fitBodyColumnHeaders(this.dataModel, padding, Math.min(colsRemaining, bodyColumnCount));\n                    }\n                }\n                else {\n                    // No column resize cap passed - resizing all columns.\n                    this._fitBodyColumnHeaders(this.dataModel, padding);\n                }\n            }\n        }\n    }\n    /**\n     * Map a client position to local viewport coordinates.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The local viewport coordinates for the position.\n     */\n    mapToLocal(clientX, clientY) {\n        // Fetch the viewport rect.\n        let rect = this._viewport.node.getBoundingClientRect();\n        // Extract the rect coordinates.\n        let { left, top } = rect;\n        // Round the rect coordinates for sub-pixel positioning.\n        left = Math.floor(left);\n        top = Math.floor(top);\n        // Convert to local coordinates.\n        let lx = clientX - left;\n        let ly = clientY - top;\n        // Return the local coordinates.\n        return { lx, ly };\n    }\n    /**\n     * Map a client position to virtual grid coordinates.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The virtual grid coordinates for the position.\n     */\n    mapToVirtual(clientX, clientY) {\n        // Convert to local coordiates.\n        let { lx, ly } = this.mapToLocal(clientX, clientY);\n        // Convert to virtual coordinates.\n        let vx = lx + this.scrollX - this.headerWidth;\n        let vy = ly + this.scrollY - this.headerHeight;\n        // Return the local coordinates.\n        return { vx, vy };\n    }\n    /**\n     * Hit test the viewport for the given client position.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The hit test result, or `null` if the client\n     *   position is out of bounds.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row and/or column.\n     */\n    hitTest(clientX, clientY) {\n        // Convert the mouse position into local coordinates.\n        let { lx, ly } = this.mapToLocal(clientX, clientY);\n        // Fetch the header and body dimensions.\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        let pw = this.pageWidth;\n        // Adjust the body width for a stretched last column.\n        if (this._stretchLastColumn && pw > bw) {\n            bw = pw;\n        }\n        // Adjust the body height for a stretched last row.\n        if (this._stretchLastRow && ph > bh) {\n            bh = ph;\n        }\n        // Check for a corner header hit.\n        if (lx >= 0 && lx < hw && ly >= 0 && ly < hh) {\n            // Convert to unscrolled virtual coordinates.\n            let vx = lx;\n            let vy = ly;\n            // Fetch the row and column index.\n            let row = this.rowAt('column-header', vy);\n            let column = this.columnAt('row-header', vx);\n            // Fetch the cell offset position.\n            let ox = this.columnOffset('row-header', column);\n            let oy = this.rowOffset('column-header', row);\n            // Fetch cell width and height.\n            let width = this.columnSize('row-header', column);\n            let height = this.rowSize('column-header', row);\n            // Compute the leading and trailing positions.\n            let x = vx - ox;\n            let y = vy - oy;\n            // Return the hit test result.\n            return { region: 'corner-header', row, column, x, y, width, height };\n        }\n        // Check for a column header hit.\n        if (ly >= 0 && ly < hh && lx >= 0 && lx < hw + bw) {\n            // Convert to unscrolled virtual coordinates.\n            let vx = lx + this._scrollX - hw;\n            let vy = ly;\n            // Fetch the row and column index.\n            let row = this.rowAt('column-header', vy);\n            let column = this.columnAt('body', vx);\n            // Fetch the cell offset position.\n            let ox = this.columnOffset('body', column);\n            let oy = this.rowOffset('column-header', row);\n            // Fetch the cell width and height.\n            let width = this.columnSize('body', column);\n            let height = this.rowSize('column-header', row);\n            // Compute the leading and trailing positions.\n            let x = vx - ox;\n            let y = vy - oy;\n            // Return the hit test result.\n            return { region: 'column-header', row, column, x, y, width, height };\n        }\n        // Check for a row header hit.\n        if (lx >= 0 && lx < hw && ly >= 0 && ly < hh + bh) {\n            // Convert to unscrolled virtual coordinates.\n            let vx = lx;\n            let vy = ly + this._scrollY - hh;\n            // Fetch the row and column index.\n            let row = this.rowAt('body', vy);\n            let column = this.columnAt('row-header', vx);\n            // Fetch the cell offset position.\n            let ox = this.columnOffset('row-header', column);\n            let oy = this.rowOffset('body', row);\n            // Fetch the cell width and height.\n            let width = this.columnSize('row-header', column);\n            let height = this.rowSize('body', row);\n            // Compute the leading and trailing positions.\n            let x = vx - ox;\n            let y = vy - oy;\n            // Return the hit test result.\n            return { region: 'row-header', row, column, x, y, width, height };\n        }\n        // Check for a body hit.\n        if (lx >= hw && lx < hw + bw && ly >= hh && ly < hh + bh) {\n            // Convert to unscrolled virtual coordinates.\n            let vx = lx + this._scrollX - hw;\n            let vy = ly + this._scrollY - hh;\n            // Fetch the row and column index.\n            let row = this.rowAt('body', vy);\n            let column = this.columnAt('body', vx);\n            // Fetch the cell offset position.\n            let ox = this.columnOffset('body', column);\n            let oy = this.rowOffset('body', row);\n            // Fetch the cell width and height.\n            let width = this.columnSize('body', column);\n            let height = this.rowSize('body', row);\n            // Compute the part coordinates.\n            let x = vx - ox;\n            let y = vy - oy;\n            // Return the result.\n            return { region: 'body', row, column, x, y, width, height };\n        }\n        // Otherwise, it's a void space hit.\n        let row = -1;\n        let column = -1;\n        let x = -1;\n        let y = -1;\n        let width = -1;\n        let height = -1;\n        // Return the hit test result.\n        return { region: 'void', row, column, x, y, width, height };\n    }\n    /**\n     * Copy the current selection to the system clipboard.\n     *\n     * #### Notes\n     * The grid must have a data model and a selection model.\n     *\n     * The behavior can be configured via `DataGrid.copyConfig`.\n     */\n    copyToClipboard() {\n        // Fetch the data model.\n        let dataModel = this._dataModel;\n        // Bail early if there is no data model.\n        if (!dataModel) {\n            return;\n        }\n        // Fetch the selection model.\n        let selectionModel = this._selectionModel;\n        // Bail early if there is no selection model.\n        if (!selectionModel) {\n            return;\n        }\n        // Coerce the selections to an array.\n        let selections = Array.from(selectionModel.selections());\n        // Bail early if there are no selections.\n        if (selections.length === 0) {\n            return;\n        }\n        // Alert that multiple selections cannot be copied.\n        if (selections.length > 1) {\n            alert('Cannot copy multiple grid selections.');\n            return;\n        }\n        // Fetch the model counts.\n        let br = dataModel.rowCount('body');\n        let bc = dataModel.columnCount('body');\n        // Bail early if there is nothing to copy.\n        if (br === 0 || bc === 0) {\n            return;\n        }\n        // Unpack the selection.\n        let { r1, c1, r2, c2 } = selections[0];\n        // Clamp the selection to the model bounds.\n        r1 = Math.max(0, Math.min(r1, br - 1));\n        c1 = Math.max(0, Math.min(c1, bc - 1));\n        r2 = Math.max(0, Math.min(r2, br - 1));\n        c2 = Math.max(0, Math.min(c2, bc - 1));\n        // Ensure the limits are well-orderd.\n        if (r2 < r1)\n            [r1, r2] = [r2, r1];\n        if (c2 < c1)\n            [c1, c2] = [c2, c1];\n        // Fetch the header counts.\n        let rhc = dataModel.columnCount('row-header');\n        let chr = dataModel.rowCount('column-header');\n        // Unpack the copy config.\n        let separator = this._copyConfig.separator;\n        let format = this._copyConfig.format;\n        let headers = this._copyConfig.headers;\n        let warningThreshold = this._copyConfig.warningThreshold;\n        // Compute the number of cells to be copied.\n        let rowCount = r2 - r1 + 1;\n        let colCount = c2 - c1 + 1;\n        switch (headers) {\n            case 'none':\n                rhc = 0;\n                chr = 0;\n                break;\n            case 'row':\n                chr = 0;\n                colCount += rhc;\n                break;\n            case 'column':\n                rhc = 0;\n                rowCount += chr;\n                break;\n            case 'all':\n                rowCount += chr;\n                colCount += rhc;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the total cell count.\n        let cellCount = rowCount * colCount;\n        // Allow the user to cancel a large copy request.\n        if (cellCount > warningThreshold) {\n            let msg = `Copying ${cellCount} cells may take a while. Continue?`;\n            if (!window.confirm(msg)) {\n                return;\n            }\n        }\n        // Set up the format args.\n        let args = {\n            region: 'body',\n            row: 0,\n            column: 0,\n            value: null,\n            metadata: {}\n        };\n        // Allocate the array of rows.\n        let rows = new Array(rowCount);\n        // Iterate over the rows.\n        for (let j = 0; j < rowCount; ++j) {\n            // Allocate the array of cells.\n            let cells = new Array(colCount);\n            // Iterate over the columns.\n            for (let i = 0; i < colCount; ++i) {\n                // Set up the format variables.\n                let region;\n                let row;\n                let column;\n                // Populate the format variables.\n                if (j < chr && i < rhc) {\n                    region = 'corner-header';\n                    row = j;\n                    column = i;\n                }\n                else if (j < chr) {\n                    region = 'column-header';\n                    row = j;\n                    column = i - rhc + c1;\n                }\n                else if (i < rhc) {\n                    region = 'row-header';\n                    row = j - chr + r1;\n                    column = i;\n                }\n                else {\n                    region = 'body';\n                    row = j - chr + r1;\n                    column = i - rhc + c1;\n                }\n                // Populate the format args.\n                args.region = region;\n                args.row = row;\n                args.column = column;\n                args.value = dataModel.data(region, row, column);\n                args.metadata = dataModel.metadata(region, row, column);\n                // Format the cell.\n                cells[i] = format(args);\n            }\n            // Save the row of cells.\n            rows[j] = cells;\n        }\n        // Convert the cells into lines.\n        let lines = rows.map(cells => cells.join(separator));\n        // Convert the lines into text.\n        let text = lines.join('\\n');\n        // Copy the text to the clipboard.\n        ClipboardExt.copyText(text);\n    }\n    /**\n     * Process a message sent to the widget.\n     *\n     * @param msg - The message sent to the widget.\n     */\n    processMessage(msg) {\n        // Ignore child show/hide messages. The data grid controls the\n        // visibility of its children, and will manually dispatch the\n        // fit-request messages as a result of visibility change.\n        if (msg.type === 'child-shown' || msg.type === 'child-hidden') {\n            return;\n        }\n        // Recompute the scroll bar minimums before the layout refits.\n        if (msg.type === 'fit-request') {\n            let vsbLimits = ElementExt.sizeLimits(this._vScrollBar.node);\n            let hsbLimits = ElementExt.sizeLimits(this._hScrollBar.node);\n            this._vScrollBarMinWidth = vsbLimits.minWidth;\n            this._hScrollBarMinHeight = hsbLimits.minHeight;\n        }\n        // Process all other messages as normal.\n        super.processMessage(msg);\n    }\n    /**\n     * Intercept a message sent to a message handler.\n     *\n     * @param handler - The target handler of the message.\n     *\n     * @param msg - The message to be sent to the handler.\n     *\n     * @returns `true` if the message should continue to be processed\n     *   as normal, or `false` if processing should cease immediately.\n     */\n    messageHook(handler, msg) {\n        // Process viewport messages.\n        if (handler === this._viewport) {\n            this._processViewportMessage(msg);\n            return true;\n        }\n        // Process horizontal scroll bar messages.\n        if (handler === this._hScrollBar && msg.type === 'activate-request') {\n            this.activate();\n            return false;\n        }\n        // Process vertical scroll bar messages.\n        if (handler === this._vScrollBar && msg.type === 'activate-request') {\n            this.activate();\n            return false;\n        }\n        // Ignore all other messages.\n        return true;\n    }\n    /**\n     * Handle the DOM events for the data grid.\n     *\n     * @param event - The DOM event sent to the data grid.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the data grid's DOM node. It\n     * should not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._evtKeyDown(event);\n                break;\n            case 'mousedown':\n                this._evtMouseDown(event);\n                break;\n            case 'mousemove':\n                this._evtMouseMove(event);\n                break;\n            case 'mouseup':\n                this._evtMouseUp(event);\n                break;\n            case 'dblclick':\n                this._evtMouseDoubleClick(event);\n                break;\n            case 'mouseleave':\n                this._evtMouseLeave(event);\n                break;\n            case 'contextmenu':\n                this._evtContextMenu(event);\n                break;\n            case 'wheel':\n                this._evtWheel(event);\n                break;\n            case 'resize':\n                this._refreshDPI();\n                break;\n        }\n    }\n    /**\n     * A message handler invoked on an `'activate-request'` message.\n     */\n    onActivateRequest(msg) {\n        this.viewport.node.focus({ preventScroll: true });\n    }\n    /**\n     * A message handler invoked on a `'before-attach'` message.\n     */\n    onBeforeAttach(msg) {\n        window.addEventListener('resize', this);\n        this.node.addEventListener('wheel', this);\n        this._viewport.node.addEventListener('keydown', this);\n        this._viewport.node.addEventListener('mousedown', this);\n        this._viewport.node.addEventListener('mousemove', this);\n        this._viewport.node.addEventListener('dblclick', this);\n        this._viewport.node.addEventListener('mouseleave', this);\n        this._viewport.node.addEventListener('contextmenu', this);\n        this.repaintContent();\n        this.repaintOverlay();\n    }\n    /**\n     * A message handler invoked on an `'after-detach'` message.\n     */\n    onAfterDetach(msg) {\n        window.removeEventListener('resize', this);\n        this.node.removeEventListener('wheel', this);\n        this._viewport.node.removeEventListener('keydown', this);\n        this._viewport.node.removeEventListener('mousedown', this);\n        this._viewport.node.removeEventListener('mousemove', this);\n        this._viewport.node.removeEventListener('mouseleave', this);\n        this._viewport.node.removeEventListener('dblclick', this);\n        this._viewport.node.removeEventListener('contextmenu', this);\n        this._releaseMouse();\n    }\n    /**\n     * A message handler invoked on a `'before-show'` message.\n     */\n    onBeforeShow(msg) {\n        this.repaintContent();\n        this.repaintOverlay();\n    }\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    onResize(msg) {\n        if (this._editorController) {\n            this._editorController.cancel();\n        }\n        this._syncScrollState();\n    }\n    /**\n     * Schedule a repaint of all of the grid content.\n     */\n    repaintContent() {\n        let msg = new Private$1.PaintRequest('all', 0, 0, 0, 0);\n        MessageLoop.postMessage(this._viewport, msg);\n    }\n    /**\n     * Schedule a repaint of specific grid content.\n     */\n    repaintRegion(region, r1, c1, r2, c2) {\n        let msg = new Private$1.PaintRequest(region, r1, c1, r2, c2);\n        MessageLoop.postMessage(this._viewport, msg);\n    }\n    /**\n     * Schedule a repaint of the overlay.\n     */\n    repaintOverlay() {\n        MessageLoop.postMessage(this._viewport, Private$1.OverlayPaintRequest);\n    }\n    _getMaxWidthInColumn(index, columnRegion) {\n        const dataModel = this.dataModel;\n        if (!dataModel) {\n            return null;\n        }\n        const columnHeaderRegion = columnRegion == 'row-header' ? 'corner-header' : 'column-header';\n        return Math.max(this._getMaxWidthInArea(dataModel, index, columnHeaderRegion, 'column-header'), this._getMaxWidthInArea(dataModel, index, columnRegion, 'body'));\n    }\n    _getMaxWidthInArea(dataModel, index, region, rowRegion) {\n        const numRows = dataModel.rowCount(rowRegion);\n        // Will only allocate up to 1_000_000 elements otherwise performance can tank.\n        const configs = Array.from({ length: Math.min(numRows, 1000000) }, (_val, idx) => DataGrid._getConfig(dataModel, idx, index, region));\n        // Heuristic: Sort by the length of the text to render and only fully calculate the text width\n        // for the top 100_000 rows by text length\n        if (numRows > 100000) {\n            // Sort by descending length\n            configs.sort(x => -this._getTextToRender(x).length);\n        }\n        let maxWidth = 0;\n        for (let i = 0; i < numRows && i < 100000; ++i) {\n            const textWidth = this._getCellTextWidth(configs[i]);\n            maxWidth = Math.max(maxWidth, textWidth);\n        }\n        return maxWidth;\n    }\n    static _getConfig(dataModel, row, col, location) {\n        return {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            region: location,\n            row: row,\n            column: col,\n            value: DataGrid._getCellValue(dataModel, location, row, col),\n            metadata: DataGrid._getCellMetadata(dataModel, location, row, col)\n        };\n    }\n    _getTextToRender(config) {\n        const renderer = this.cellRenderers.get(config);\n        return renderer.getText(config);\n    }\n    _getCellTextWidth(config) {\n        // Get the renderer for the given cell.\n        const renderer = this.cellRenderers.get(config);\n        // Use the canvas context to measure the cell's text width\n        const gc = this.canvasGC;\n        gc.font = CellRenderer.resolveOption(renderer.font, config);\n        gc.fillStyle = CellRenderer.resolveOption(renderer.textColor, config);\n        gc.textAlign = CellRenderer.resolveOption(renderer.horizontalAlignment, config);\n        gc.textBaseline = 'bottom';\n        const text = this._getTextToRender(config);\n        return gc.measureText(text).width + 2 * renderer.horizontalPadding;\n    }\n    /**\n     * Ensure the canvas is at least the specified size.\n     *\n     * This method will retain the valid canvas content.\n     */\n    _resizeCanvasIfNeeded(width, height) {\n        // Scale the size by the dpi ratio.\n        width = width * this._dpiRatio;\n        height = height * this._dpiRatio;\n        // Compute the maximum canvas size for the given width and height.\n        let maxW = (Math.ceil((width + 1) / 512) + 1) * 512;\n        let maxH = (Math.ceil((height + 1) / 512) + 1) * 512;\n        // Get the current size of the canvas.\n        let curW = this._canvas.width;\n        let curH = this._canvas.height;\n        // Bail early if the canvas size is within bounds.\n        if (curW >= width && curH >= height && curW <= maxW && curH <= maxH) {\n            return;\n        }\n        // Compute the expanded canvas size.\n        let expW = maxW - 512;\n        let expH = maxH - 512;\n        // Set the transforms to the identity matrix.\n        this._canvasGC.setTransform(1, 0, 0, 1, 0, 0);\n        this._bufferGC.setTransform(1, 0, 0, 1, 0, 0);\n        this._overlayGC.setTransform(1, 0, 0, 1, 0, 0);\n        // Resize the buffer if needed.\n        if (curW < width) {\n            this._buffer.width = expW;\n        }\n        else if (curW > maxW) {\n            this._buffer.width = maxW;\n        }\n        // Resize the buffer height if needed.\n        if (curH < height) {\n            this._buffer.height = expH;\n        }\n        else if (curH > maxH) {\n            this._buffer.height = maxH;\n        }\n        // Test whether there is content to blit.\n        let needBlit = curW > 0 && curH > 0 && width > 0 && height > 0;\n        // Copy the valid canvas content into the buffer if needed.\n        if (needBlit) {\n            this._bufferGC.drawImage(this._canvas, 0, 0);\n        }\n        // Resize the canvas width if needed.\n        if (curW < width) {\n            this._canvas.width = expW;\n            this._canvas.style.width = `${expW / this._dpiRatio}px`;\n        }\n        else if (curW > maxW) {\n            this._canvas.width = maxW;\n            this._canvas.style.width = `${maxW / this._dpiRatio}px`;\n        }\n        // Resize the canvas height if needed.\n        if (curH < height) {\n            this._canvas.height = expH;\n            this._canvas.style.height = `${expH / this._dpiRatio}px`;\n        }\n        else if (curH > maxH) {\n            this._canvas.height = maxH;\n            this._canvas.style.height = `${maxH / this._dpiRatio}px`;\n        }\n        // Copy the valid canvas content from the buffer if needed.\n        if (needBlit) {\n            this._canvasGC.drawImage(this._buffer, 0, 0);\n        }\n        // Copy the valid overlay content into the buffer if needed.\n        if (needBlit) {\n            this._bufferGC.drawImage(this._overlay, 0, 0);\n        }\n        // Resize the overlay width if needed.\n        if (curW < width) {\n            this._overlay.width = expW;\n            this._overlay.style.width = `${expW / this._dpiRatio}px`;\n        }\n        else if (curW > maxW) {\n            this._overlay.width = maxW;\n            this._overlay.style.width = `${maxW / this._dpiRatio}px`;\n        }\n        // Resize the overlay height if needed.\n        if (curH < height) {\n            this._overlay.height = expH;\n            this._overlay.style.height = `${expH / this._dpiRatio}px`;\n        }\n        else if (curH > maxH) {\n            this._overlay.height = maxH;\n            this._overlay.style.height = `${maxH / this._dpiRatio}px`;\n        }\n        // Copy the valid overlay content from the buffer if needed.\n        if (needBlit) {\n            this._overlayGC.drawImage(this._buffer, 0, 0);\n        }\n    }\n    /**\n     * Sync the scroll bars and scroll state with the viewport.\n     *\n     * #### Notes\n     * If the visibility of either scroll bar changes, a synchronous\n     * fit-request will be dispatched to the data grid to immediately\n     * resize the viewport.\n     */\n    _syncScrollState() {\n        // Fetch the viewport dimensions.\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        let pw = this.pageWidth;\n        let ph = this.pageHeight;\n        // Get the current scroll bar visibility.\n        let hasVScroll = !this._vScrollBar.isHidden;\n        let hasHScroll = !this._hScrollBar.isHidden;\n        // Get the minimum sizes of the scroll bars.\n        let vsw = this._vScrollBarMinWidth;\n        let hsh = this._hScrollBarMinHeight;\n        // Get the page size as if no scroll bars are visible.\n        let apw = pw + (hasVScroll ? vsw : 0);\n        let aph = ph + (hasHScroll ? hsh : 0);\n        // Test whether scroll bars are needed for the adjusted size.\n        let needVScroll = aph < bh - 1;\n        let needHScroll = apw < bw - 1;\n        // Re-test the horizontal scroll if a vertical scroll is needed.\n        if (needVScroll && !needHScroll) {\n            needHScroll = apw - vsw < bw - 1;\n        }\n        // Re-test the vertical scroll if a horizontal scroll is needed.\n        if (needHScroll && !needVScroll) {\n            needVScroll = aph - hsh < bh - 1;\n        }\n        // If the visibility changes, immediately refit the grid.\n        if (needVScroll !== hasVScroll || needHScroll !== hasHScroll) {\n            this._vScrollBar.setHidden(!needVScroll);\n            this._hScrollBar.setHidden(!needHScroll);\n            this._scrollCorner.setHidden(!needVScroll || !needHScroll);\n            MessageLoop.sendMessage(this, Widget.Msg.FitRequest);\n        }\n        // Update the scroll bar limits.\n        this._vScrollBar.maximum = this.maxScrollY;\n        this._vScrollBar.page = this.pageHeight;\n        this._hScrollBar.maximum = this.maxScrollX;\n        this._hScrollBar.page = this.pageWidth;\n        // Re-clamp the scroll position.\n        this._scrollTo(this._scrollX, this._scrollY);\n    }\n    /**\n     * Sync the viewport to the given scroll position.\n     *\n     * #### Notes\n     * This schedules a full repaint and syncs the scroll state.\n     */\n    _syncViewport() {\n        this.repaintContent();\n        this.repaintOverlay();\n        this._syncScrollState();\n    }\n    /**\n     * Process a message sent to the viewport\n     */\n    _processViewportMessage(msg) {\n        switch (msg.type) {\n            case 'resize':\n                this._onViewportResize(msg);\n                break;\n            case 'scroll-request':\n                this._onViewportScrollRequest(msg);\n                break;\n            case 'paint-request':\n                this._onViewportPaintRequest(msg);\n                break;\n            case 'overlay-paint-request':\n                this._onViewportOverlayPaintRequest(msg);\n                break;\n            case 'row-resize-request':\n                this._onViewportRowResizeRequest(msg);\n                break;\n            case 'column-resize-request':\n                this._onViewportColumnResizeRequest(msg);\n                break;\n        }\n    }\n    /**\n     * A message hook invoked on a viewport `'resize'` message.\n     */\n    _onViewportResize(msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Unpack the message data.\n        let { width, height } = msg;\n        // Measure the viewport node if the dimensions are unknown.\n        if (width === -1) {\n            width = this._viewport.node.offsetWidth;\n        }\n        if (height === -1) {\n            height = this._viewport.node.offsetHeight;\n        }\n        // Round the dimensions to the nearest pixel.\n        width = Math.round(width);\n        height = Math.round(height);\n        // Get the current size of the viewport.\n        let oldWidth = this._viewportWidth;\n        let oldHeight = this._viewportHeight;\n        // Updated internal viewport size.\n        this._viewportWidth = width;\n        this._viewportHeight = height;\n        // Resize the canvas if needed.\n        this._resizeCanvasIfNeeded(width, height);\n        // Bail early if there is nothing to paint.\n        if (width === 0 || height === 0) {\n            return;\n        }\n        // Paint the whole grid if the old size was zero.\n        if (oldWidth === 0 || oldHeight === 0) {\n            this.paintContent(0, 0, width, height);\n            this._paintOverlay();\n            return;\n        }\n        // Paint the right edge as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            let bx = this._columnSections.offsetOf(this._columnSections.count - 1);\n            let x = Math.min(this.headerWidth + bx, oldWidth);\n            this.paintContent(x, 0, width - x, height);\n        }\n        else if (width > oldWidth) {\n            this.paintContent(oldWidth, 0, width - oldWidth + 1, height);\n        }\n        // Paint the bottom edge as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            let by = this._rowSections.offsetOf(this._rowSections.count - 1);\n            let y = Math.min(this.headerHeight + by, oldHeight);\n            this.paintContent(0, y, width, height - y);\n        }\n        else if (height > oldHeight) {\n            this.paintContent(0, oldHeight, width, height - oldHeight + 1);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n    }\n    /**\n     * A message hook invoked on a viewport `'scroll-request'` message.\n     */\n    _onViewportScrollRequest(msg) {\n        this._scrollTo(this._hScrollBar.value, this._vScrollBar.value);\n    }\n    /**\n     * A message hook invoked on a viewport `'paint-request'` message.\n     */\n    _onViewportPaintRequest(msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Bail early if the viewport has zero area.\n        if (this._viewportWidth === 0 || this._viewportHeight === 0) {\n            return;\n        }\n        // Set up the paint limits.\n        let xMin = 0;\n        let yMin = 0;\n        let xMax = this._viewportWidth - 1;\n        let yMax = this._viewportHeight - 1;\n        // Fetch the scroll position.\n        let sx = this._scrollX;\n        let sy = this._scrollY;\n        // Fetch the header dimensions.\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        // Fetch the section lists.\n        let rs = this._rowSections;\n        let cs = this._columnSections;\n        let rhs = this._rowHeaderSections;\n        let chs = this._columnHeaderSections;\n        // Unpack the message data.\n        let { region, r1, c1, r2, c2 } = msg;\n        // Set up the paint variables.\n        let x1;\n        let y1;\n        let x2;\n        let y2;\n        // Fill the paint variables based on the paint region.\n        switch (region) {\n            case 'all':\n                x1 = xMin;\n                y1 = yMin;\n                x2 = xMax;\n                y2 = yMax;\n                break;\n            case 'body':\n                r1 = Math.max(0, Math.min(r1, rs.count));\n                c1 = Math.max(0, Math.min(c1, cs.count));\n                r2 = Math.max(0, Math.min(r2, rs.count));\n                c2 = Math.max(0, Math.min(c2, cs.count));\n                x1 = cs.offsetOf(c1) - sx + hw;\n                y1 = rs.offsetOf(r1) - sy + hh;\n                x2 = cs.extentOf(c2) - sx + hw;\n                y2 = rs.extentOf(r2) - sy + hh;\n                break;\n            case 'row-header':\n                r1 = Math.max(0, Math.min(r1, rs.count));\n                c1 = Math.max(0, Math.min(c1, rhs.count));\n                r2 = Math.max(0, Math.min(r2, rs.count));\n                c2 = Math.max(0, Math.min(c2, rhs.count));\n                x1 = rhs.offsetOf(c1);\n                y1 = rs.offsetOf(r1) - sy + hh;\n                x2 = rhs.extentOf(c2);\n                y2 = rs.extentOf(r2) - sy + hh;\n                break;\n            case 'column-header':\n                r1 = Math.max(0, Math.min(r1, chs.count));\n                c1 = Math.max(0, Math.min(c1, cs.count));\n                r2 = Math.max(0, Math.min(r2, chs.count));\n                c2 = Math.max(0, Math.min(c2, cs.count));\n                x1 = cs.offsetOf(c1) - sx + hw;\n                y1 = chs.offsetOf(r1);\n                x2 = cs.extentOf(c2) - sx + hw;\n                y2 = chs.extentOf(r2);\n                break;\n            case 'corner-header':\n                r1 = Math.max(0, Math.min(r1, chs.count));\n                c1 = Math.max(0, Math.min(c1, rhs.count));\n                r2 = Math.max(0, Math.min(r2, chs.count));\n                c2 = Math.max(0, Math.min(c2, rhs.count));\n                x1 = rhs.offsetOf(c1);\n                y1 = chs.offsetOf(r1);\n                x2 = rhs.extentOf(c2);\n                y2 = chs.extentOf(r2);\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Bail early if the dirty rect is outside the bounds.\n        if (x2 < xMin || y2 < yMin || x1 > xMax || y1 > yMax) {\n            return;\n        }\n        // Clamp the dirty rect to the paint bounds.\n        x1 = Math.max(xMin, Math.min(x1, xMax));\n        y1 = Math.max(yMin, Math.min(y1, yMax));\n        x2 = Math.max(xMin, Math.min(x2, xMax));\n        y2 = Math.max(yMin, Math.min(y2, yMax));\n        // Paint the content of the dirty rect.\n        this.paintContent(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n    }\n    /**\n     * A message hook invoked on a viewport `'overlay-paint-request'` message.\n     */\n    _onViewportOverlayPaintRequest(msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Bail early if the viewport has zero area.\n        if (this._viewportWidth === 0 || this._viewportHeight === 0) {\n            return;\n        }\n        // Paint the content of the overlay.\n        this._paintOverlay();\n    }\n    /**\n     * A message hook invoked on a viewport `'row-resize-request'` message.\n     */\n    _onViewportRowResizeRequest(msg) {\n        if (msg.region === 'body') {\n            this._resizeRow(msg.index, msg.size);\n        }\n        else {\n            this._resizeColumnHeader(msg.index, msg.size);\n        }\n    }\n    /**\n     * A message hook invoked on a viewport `'column-resize-request'` message.\n     */\n    _onViewportColumnResizeRequest(msg) {\n        if (msg.region === 'body') {\n            this._resizeColumn(msg.index, msg.size);\n        }\n        else {\n            this._resizeRowHeader(msg.index, msg.size);\n        }\n    }\n    /**\n     * Handle the `thumbMoved` signal from a scroll bar.\n     */\n    _onThumbMoved(sender) {\n        MessageLoop.postMessage(this._viewport, Private$1.ScrollRequest);\n    }\n    /**\n     * Handle the `pageRequested` signal from a scroll bar.\n     */\n    _onPageRequested(sender, dir) {\n        if (sender === this._vScrollBar) {\n            this.scrollByPage(dir === 'decrement' ? 'up' : 'down');\n        }\n        else {\n            this.scrollByPage(dir === 'decrement' ? 'left' : 'right');\n        }\n    }\n    /**\n     * Handle the `stepRequested` signal from a scroll bar.\n     */\n    _onStepRequested(sender, dir) {\n        if (sender === this._vScrollBar) {\n            this.scrollByStep(dir === 'decrement' ? 'up' : 'down');\n        }\n        else {\n            this.scrollByStep(dir === 'decrement' ? 'left' : 'right');\n        }\n    }\n    /**\n     * A signal handler for the data model `changed` signal.\n     */\n    _onDataModelChanged(sender, args) {\n        switch (args.type) {\n            case 'rows-inserted':\n                this._onRowsInserted(args);\n                break;\n            case 'columns-inserted':\n                this._onColumnsInserted(args);\n                break;\n            case 'rows-removed':\n                this._onRowsRemoved(args);\n                break;\n            case 'columns-removed':\n                this._onColumnsRemoved(args);\n                break;\n            case 'rows-moved':\n                this._onRowsMoved(args);\n                break;\n            case 'columns-moved':\n                this._onColumnsMoved(args);\n                break;\n            case 'cells-changed':\n                this._onCellsChanged(args);\n                break;\n            case 'model-reset':\n                this._onModelReset(args);\n                break;\n            default:\n                throw 'unreachable';\n        }\n    }\n    /**\n     * A signal handler for the selection model `changed` signal.\n     */\n    _onSelectionsChanged(sender) {\n        this.repaintOverlay();\n    }\n    /**\n     * Handle rows being inserted in the data model.\n     */\n    _onRowsInserted(args) {\n        // Unpack the arg data.\n        let { region, index, span } = args;\n        // Bail early if there are no sections to insert.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Insert the span, maintaining the scroll position as needed.\n        if (this._scrollY === this.maxScrollY && this.maxScrollY > 0) {\n            list.insert(index, span);\n            this._scrollY = this.maxScrollY;\n        }\n        else {\n            list.insert(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle columns being inserted into the data model.\n     */\n    _onColumnsInserted(args) {\n        // Unpack the arg data.\n        let { region, index, span } = args;\n        // Bail early if there are no sections to insert.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Insert the span, maintaining the scroll position as needed.\n        if (this._scrollX === this.maxScrollX && this.maxScrollX > 0) {\n            list.insert(index, span);\n            this._scrollX = this.maxScrollX;\n        }\n        else {\n            list.insert(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle rows being removed from the data model.\n     */\n    _onRowsRemoved(args) {\n        // Unpack the arg data.\n        let { region, index, span } = args;\n        // Bail early if there are no sections to remove.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Bail if the index or is invalid\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Remove the span, maintaining the scroll position as needed.\n        if (this._scrollY === this.maxScrollY && this.maxScrollY > 0) {\n            list.remove(index, span);\n            this._scrollY = this.maxScrollY;\n        }\n        else {\n            list.remove(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle columns being removed from the data model.\n     */\n    _onColumnsRemoved(args) {\n        // Unpack the arg data.\n        let { region, index, span } = args;\n        // Bail early if there are no sections to remove.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Bail if the index or is invalid\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Remove the span, maintaining the scroll position as needed.\n        if (this._scrollX === this.maxScrollX && this.maxScrollX > 0) {\n            list.remove(index, span);\n            this._scrollX = this.maxScrollX;\n        }\n        else {\n            list.remove(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle rows moving in the data model.\n     */\n    _onRowsMoved(args) {\n        // Unpack the arg data.\n        let { region, index, span, destination } = args;\n        // Bail early if there are no sections to move.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Clamp the move span to the limit.\n        span = Math.min(span, list.count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), list.count - span);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Compute the first affected index.\n        let r1 = Math.min(index, destination);\n        // Compute the last affected index.\n        let r2 = Math.max(index + span - 1, destination + span - 1);\n        // Move the sections in the list.\n        list.move(index, span, destination);\n        // Schedule a repaint of the dirty cells.\n        if (region === 'body') {\n            this.repaintRegion('body', r1, 0, r2, Infinity);\n            this.repaintRegion('row-header', r1, 0, r2, Infinity);\n        }\n        else {\n            this.repaintRegion('column-header', r1, 0, r2, Infinity);\n            this.repaintRegion('corner-header', r1, 0, r2, Infinity);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle columns moving in the data model.\n     */\n    _onColumnsMoved(args) {\n        // Unpack the arg data.\n        let { region, index, span, destination } = args;\n        // Bail early if there are no sections to move.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Clamp the move span to the limit.\n        span = Math.min(span, list.count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), list.count - span);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Move the sections in the list.\n        list.move(index, span, destination);\n        // Compute the first affected index.\n        let c1 = Math.min(index, destination);\n        // Compute the last affected index.\n        let c2 = Math.max(index + span - 1, destination + span - 1);\n        // Schedule a repaint of the dirty cells.\n        if (region === 'body') {\n            this.repaintRegion('body', 0, c1, Infinity, c2);\n            this.repaintRegion('column-header', 0, c1, Infinity, c2);\n        }\n        else {\n            this.repaintRegion('row-header', 0, c1, Infinity, c2);\n            this.repaintRegion('corner-header', 0, c1, Infinity, c2);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle cells changing in the data model.\n     */\n    _onCellsChanged(args) {\n        // Unpack the arg data.\n        let { region, row, column, rowSpan, columnSpan } = args;\n        // Bail early if there are no cells to modify.\n        if (rowSpan <= 0 && columnSpan <= 0) {\n            return;\n        }\n        // Compute the changed cell bounds.\n        let r1 = row;\n        let c1 = column;\n        let r2 = r1 + rowSpan - 1;\n        let c2 = c1 + columnSpan - 1;\n        // Schedule a repaint of the cell content.\n        this.repaintRegion(region, r1, c1, r2, c2);\n    }\n    /**\n     * Handle a full data model reset.\n     */\n    _onModelReset(args) {\n        // Look up the various current section counts.\n        let nr = this._rowSections.count;\n        let nc = this._columnSections.count;\n        let nrh = this._rowHeaderSections.count;\n        let nch = this._columnHeaderSections.count;\n        // Compute the delta count for each region.\n        let dr = this._dataModel.rowCount('body') - nr;\n        let dc = this._dataModel.columnCount('body') - nc;\n        let drh = this._dataModel.columnCount('row-header') - nrh;\n        let dch = this._dataModel.rowCount('column-header') - nch;\n        // Update the row sections, if needed.\n        if (dr > 0) {\n            this._rowSections.insert(nr, dr);\n        }\n        else if (dr < 0) {\n            this._rowSections.remove(nr + dr, -dr);\n        }\n        // Update the column sections, if needed.\n        if (dc > 0) {\n            this._columnSections.insert(nc, dc);\n        }\n        else if (dc < 0) {\n            this._columnSections.remove(nc + dc, -dc);\n        }\n        // Update the row header sections, if needed.\n        if (drh > 0) {\n            this._rowHeaderSections.insert(nrh, drh);\n        }\n        else if (drh < 0) {\n            this._rowHeaderSections.remove(nrh + drh, -drh);\n        }\n        // Update the column header sections, if needed.\n        if (dch > 0) {\n            this._columnHeaderSections.insert(nch, dch);\n        }\n        else if (dch < 0) {\n            this._columnHeaderSections.remove(nch + dch, -dch);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * A signal handler for the renderer map `changed` signal.\n     */\n    _onRenderersChanged() {\n        this.repaintContent();\n    }\n    /**\n     * Handle the `'keydown'` event for the data grid.\n     */\n    _evtKeyDown(event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._keyHandler) {\n            this._keyHandler.onKeyDown(this, event);\n        }\n    }\n    /**\n     * Handle the `'mousedown'` event for the data grid.\n     */\n    _evtMouseDown(event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Activate the grid.\n        this.activate();\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Add the extra document listeners.\n        document.addEventListener('keydown', this, true);\n        document.addEventListener('mouseup', this, true);\n        document.addEventListener('mousedown', this, true);\n        document.addEventListener('mousemove', this, true);\n        document.addEventListener('contextmenu', this, true);\n        // Flip the mousedown flag.\n        this._mousedown = true;\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseDown(this, event);\n        }\n    }\n    /**\n     * Handle the `'mousemove'` event for the data grid.\n     */\n    _evtMouseMove(event) {\n        // Stop the event propagation if the mouse is down.\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        // Bail if there is no mouse handler.\n        if (!this._mouseHandler) {\n            return;\n        }\n        // Dispatch to the mouse handler.\n        if (this._mousedown) {\n            this._mouseHandler.onMouseMove(this, event);\n        }\n        else {\n            this._mouseHandler.onMouseHover(this, event);\n        }\n    }\n    /**\n     * Handle the `'mouseup'` event for the data grid.\n     */\n    _evtMouseUp(event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseUp(this, event);\n        }\n        // Release the mouse.\n        this._releaseMouse();\n    }\n    /**\n     * Handle the `'dblclick'` event for the data grid.\n     */\n    _evtMouseDoubleClick(event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseDoubleClick(this, event);\n        }\n        // Release the mouse.\n        this._releaseMouse();\n    }\n    /**\n     * Handle the `'mouseleave'` event for the data grid.\n     */\n    _evtMouseLeave(event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._mouseHandler) {\n            this._mouseHandler.onMouseLeave(this, event);\n        }\n    }\n    /**\n     * Handle the `'contextmenu'` event for the data grid.\n     */\n    _evtContextMenu(event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._mouseHandler) {\n            this._mouseHandler.onContextMenu(this, event);\n        }\n    }\n    /**\n     * Handle the `'wheel'` event for the data grid.\n     */\n    _evtWheel(event) {\n        // Ignore the event if `accel` is held.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Bail early if there is no mouse handler.\n        if (!this._mouseHandler) {\n            return;\n        }\n        // Dispatch to the mouse handler.\n        this._mouseHandler.onWheel(this, event);\n    }\n    /**\n     * Release the mouse grab.\n     */\n    _releaseMouse() {\n        // Clear the mousedown flag.\n        this._mousedown = false;\n        // Relase the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.release();\n        }\n        // Remove the document listeners.\n        document.removeEventListener('keydown', this, true);\n        document.removeEventListener('mouseup', this, true);\n        document.removeEventListener('mousedown', this, true);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('contextmenu', this, true);\n    }\n    /**\n     * Refresh the dpi ratio.\n     */\n    _refreshDPI() {\n        // Get the best integral value for the dpi ratio.\n        let dpiRatio = Math.ceil(window.devicePixelRatio);\n        // Bail early if the computed dpi ratio has not changed.\n        if (this._dpiRatio === dpiRatio) {\n            return;\n        }\n        // Update the internal dpi ratio.\n        this._dpiRatio = dpiRatio;\n        // Schedule a repaint of the content.\n        this.repaintContent();\n        // Schedule a repaint of the overlay.\n        this.repaintOverlay();\n        // Update the canvas size for the new dpi ratio.\n        this._resizeCanvasIfNeeded(this._viewportWidth, this._viewportHeight);\n        // Ensure the canvas style is scaled for the new ratio.\n        this._canvas.style.width = `${this._canvas.width / this._dpiRatio}px`;\n        this._canvas.style.height = `${this._canvas.height / this._dpiRatio}px`;\n        // Ensure the overlay style is scaled for the new ratio.\n        this._overlay.style.width = `${this._overlay.width / this._dpiRatio}px`;\n        this._overlay.style.height = `${this._overlay.height / this._dpiRatio}px`;\n    }\n    /**\n     * Resize a row section immediately.\n     */\n    _resizeRow(index, size) {\n        // Look up the target section list.\n        let list = this._rowSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        let oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        let newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        let delta = newSize - oldSize;\n        // Look up the column header height.\n        let hh = this.headerHeight;\n        // Compute the viewport offset of the section.\n        let offset = list.offsetOf(index) + hh - this._scrollY;\n        // Bail early if there is nothing to paint.\n        if (hh >= vh || offset >= vh) {\n            this._syncScrollState();\n            return;\n        }\n        // Update the scroll position if the section is not visible.\n        if (offset + oldSize <= hh) {\n            this._scrollY += delta;\n            this._syncScrollState();\n            return;\n        }\n        // Compute the paint origin of the section.\n        let pos = Math.max(hh, offset);\n        // Paint from the section onward if it spans the viewport.\n        if (offset + oldSize >= vh || offset + newSize >= vh) {\n            this.paintContent(0, pos, vw, vh - pos);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the X blit dimensions.\n        let sx = 0;\n        let sw = vw;\n        let dx = 0;\n        // Compute the Y blit dimensions.\n        let sy;\n        let sh;\n        let dy;\n        if (offset + newSize <= hh) {\n            sy = hh - delta;\n            sh = vh - sy;\n            dy = hh;\n        }\n        else {\n            sy = offset + oldSize;\n            sh = vh - sy;\n            dy = sy + delta;\n        }\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the section if needed.\n        if (newSize > 0 && offset + newSize > hh) {\n            this.paintContent(0, pos, vw, offset + newSize - pos);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            let r = this._rowSections.count - 1;\n            let y = hh + this._rowSections.offsetOf(r);\n            this.paintContent(0, y, vw, vh - y);\n        }\n        else if (delta < 0) {\n            this.paintContent(0, vh + delta, vw, -delta);\n        }\n        // Repaint merged cells that are intersected by the resized row\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of ['body', 'row-header']) {\n            const cellGroups = CellGroup.getCellGroupsAtRow(this.dataModel, rgn, index);\n            let paintRgn = {\n                region: rgn,\n                xMin: 0,\n                xMax: 0,\n                yMin: 0,\n                yMax: 0\n            };\n            let backgroundColor = undefined;\n            switch (rgn) {\n                case 'body':\n                    paintRgn.xMin = this.headerWidth;\n                    paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                    paintRgn.yMin = this.headerHeight;\n                    paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                    backgroundColor = this._style.backgroundColor;\n                    break;\n                case 'row-header':\n                    paintRgn.xMin = 0;\n                    paintRgn.xMax = this.headerWidth;\n                    paintRgn.yMin = this.headerHeight;\n                    paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                    backgroundColor = this._style.headerBackgroundColor;\n                    break;\n            }\n            this._paintMergedCells(cellGroups, paintRgn, backgroundColor);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state.\n        this._syncScrollState();\n    }\n    /**\n     * Resize a column section immediately.\n     */\n    _resizeColumn(index, size) {\n        // Look up the target section list.\n        let list = this._columnSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        const adjustedSize = size !== null && size !== void 0 ? size : this._getMaxWidthInColumn(index, 'body');\n        if (!adjustedSize || adjustedSize == 0) {\n            return;\n        }\n        // Look up the old size of the section.\n        let oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        let newSize = list.clampSize(adjustedSize);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        let delta = newSize - oldSize;\n        // Look up the row header width.\n        let hw = this.headerWidth;\n        // Compute the viewport offset of the section.\n        let offset = list.offsetOf(index) + hw - this._scrollX;\n        // Bail early if there is nothing to paint.\n        if (hw >= vw || offset >= vw) {\n            this._syncScrollState();\n            return;\n        }\n        // Update the scroll position if the section is not visible.\n        if (offset + oldSize <= hw) {\n            this._scrollX += delta;\n            this._syncScrollState();\n            return;\n        }\n        // Compute the paint origin of the section.\n        let pos = Math.max(hw, offset);\n        // Paint from the section onward if it spans the viewport.\n        if (offset + oldSize >= vw || offset + newSize >= vw) {\n            this.paintContent(pos, 0, vw - pos, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the Y blit dimensions.\n        let sy = 0;\n        let sh = vh;\n        let dy = 0;\n        // Compute the X blit dimensions.\n        let sx;\n        let sw;\n        let dx;\n        if (offset + newSize <= hw) {\n            sx = hw - delta;\n            sw = vw - sx;\n            dx = hw;\n        }\n        else {\n            sx = offset + oldSize;\n            sw = vw - sx;\n            dx = sx + delta;\n        }\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the section if needed.\n        if (newSize > 0 && offset + newSize > hw) {\n            this.paintContent(pos, 0, offset + newSize - pos, vh);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            let c = this._columnSections.count - 1;\n            let x = hw + this._columnSections.offsetOf(c);\n            this.paintContent(x, 0, vw - x, vh);\n        }\n        else if (delta < 0) {\n            this.paintContent(vw + delta, 0, -delta, vh);\n        }\n        // Repaint merged cells that are intersected by the resized column\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of ['body', 'column-header']) {\n            const cellGroups = CellGroup.getCellGroupsAtColumn(this.dataModel, rgn, index);\n            let paintRgn = {\n                region: rgn,\n                xMin: 0,\n                xMax: 0,\n                yMin: 0,\n                yMax: 0\n            };\n            let backgroundColor = undefined;\n            switch (rgn) {\n                case 'body':\n                    paintRgn.xMin = this.headerWidth;\n                    paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                    paintRgn.yMin = this.headerHeight;\n                    paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                    backgroundColor = this._style.backgroundColor;\n                    break;\n                case 'column-header':\n                    paintRgn.xMin = this.headerWidth;\n                    paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                    paintRgn.yMin = 0;\n                    paintRgn.yMax = this.headerHeight;\n                    backgroundColor = this._style.headerBackgroundColor;\n                    break;\n            }\n            this._paintMergedCells(cellGroups, paintRgn, backgroundColor);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    }\n    /**\n     * Resize a row header section immediately.\n     */\n    _resizeRowHeader(index, size) {\n        // Look up the target section list.\n        let list = this._rowHeaderSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        const adjustedSize = size !== null && size !== void 0 ? size : this._getMaxWidthInColumn(index, 'row-header');\n        if (!adjustedSize || adjustedSize == 0) {\n            return;\n        }\n        // Look up the old size of the section.\n        let oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        let newSize = list.clampSize(adjustedSize);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        let delta = newSize - oldSize;\n        // Look up the offset of the section.\n        let offset = list.offsetOf(index);\n        // Bail early if the section is fully outside the viewport.\n        if (offset >= vw) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the entire tail if the section spans the viewport.\n        if (offset + oldSize >= vw || offset + newSize >= vw) {\n            this.paintContent(offset, 0, vw - offset, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the blit content dimensions.\n        let sx = offset + oldSize;\n        let sy = 0;\n        let sw = vw - sx;\n        let sh = vh;\n        let dx = sx + delta;\n        let dy = 0;\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the header section if needed.\n        if (newSize > 0) {\n            this.paintContent(offset, 0, newSize, vh);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            let c = this._columnSections.count - 1;\n            let x = this.headerWidth + this._columnSections.offsetOf(c);\n            this.paintContent(x, 0, vw - x, vh);\n        }\n        else if (delta < 0) {\n            this.paintContent(vw + delta, 0, -delta, vh);\n        }\n        // Repaint merged cells that are intersected by the resized row\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of [\n            'corner-header',\n            'row-header'\n        ]) {\n            const cellGroups = CellGroup.getCellGroupsAtColumn(this.dataModel, rgn, index);\n            let paintRgn = {\n                region: rgn,\n                xMin: 0,\n                xMax: 0,\n                yMin: 0,\n                yMax: 0\n            };\n            switch (rgn) {\n                case 'corner-header':\n                    paintRgn.xMin = 0;\n                    paintRgn.xMax = this.headerWidth;\n                    paintRgn.yMin = 0;\n                    paintRgn.yMax = this.headerHeight;\n                    break;\n                case 'row-header':\n                    paintRgn.xMin = 0;\n                    paintRgn.xMax = this.headerWidth;\n                    paintRgn.yMin = this.headerHeight;\n                    paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                    break;\n            }\n            this._paintMergedCells(cellGroups, paintRgn, this._style.headerBackgroundColor);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    }\n    /**\n     * Resize a column header section immediately.\n     */\n    _resizeColumnHeader(index, size) {\n        // Look up the target section list.\n        let list = this._columnHeaderSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        let oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        let newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Compute the size delta.\n        let delta = newSize - oldSize;\n        // Look up the offset of the section.\n        let offset = list.offsetOf(index);\n        // Bail early if the section is fully outside the viewport.\n        if (offset >= vh) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the entire tail if the section spans the viewport.\n        if (offset + oldSize >= vh || offset + newSize >= vh) {\n            this.paintContent(0, offset, vw, vh - offset);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the blit content dimensions.\n        let sx = 0;\n        let sy = offset + oldSize;\n        let sw = vw;\n        let sh = vh - sy;\n        let dx = 0;\n        let dy = sy + delta;\n        // Blit the valid contents to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the header section if needed.\n        if (newSize > 0) {\n            this.paintContent(0, offset, vw, newSize);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            let r = this._rowSections.count - 1;\n            let y = this.headerHeight + this._rowSections.offsetOf(r);\n            this.paintContent(0, y, vw, vh - y);\n        }\n        else if (delta < 0) {\n            this.paintContent(0, vh + delta, vw, -delta);\n        }\n        // Repaint merged cells that are intersected by the resized row\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of [\n            'corner-header',\n            'column-header'\n        ]) {\n            const cellGroups = CellGroup.getCellGroupsAtRow(this.dataModel, rgn, index);\n            let paintRgn = {\n                region: rgn,\n                xMin: 0,\n                xMax: 0,\n                yMin: 0,\n                yMax: 0\n            };\n            switch (rgn) {\n                case 'corner-header':\n                    paintRgn.xMin = 0;\n                    paintRgn.xMax = this.headerWidth;\n                    paintRgn.yMin = 0;\n                    paintRgn.yMax = this.headerHeight;\n                    break;\n                case 'column-header':\n                    paintRgn.xMin = this.headerWidth;\n                    paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                    paintRgn.yMin = 0;\n                    paintRgn.yMax = this.headerHeight;\n                    break;\n            }\n            this._paintMergedCells(cellGroups, paintRgn, this._style.headerBackgroundColor);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    }\n    /**\n     * Scroll immediately to the specified offset position.\n     */\n    _scrollTo(x, y) {\n        // Bail if no data model found.\n        if (!this.dataModel) {\n            return;\n        }\n        // Floor and clamp the position to the allowable range.\n        x = Math.max(0, Math.min(Math.floor(x), this.maxScrollX));\n        y = Math.max(0, Math.min(Math.floor(y), this.maxScrollY));\n        // Synchronize the scroll bar values.\n        this._hScrollBar.value = x;\n        this._vScrollBar.value = y;\n        // Compute the delta scroll amount.\n        let dx = x - this._scrollX;\n        let dy = y - this._scrollY;\n        // Bail early if there is no effective scroll.\n        if (dx === 0 && dy === 0) {\n            return;\n        }\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Get the current size of the viewport.\n        let width = this._viewportWidth;\n        let height = this._viewportHeight;\n        // Bail early if the viewport is empty.\n        if (width === 0 || height === 0) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = this.headerWidth;\n        let contentY = this.headerHeight;\n        // Get the visible content dimensions.\n        let contentWidth = width - contentX;\n        let contentHeight = height - contentY;\n        // Bail early if there is no content to draw.\n        if (contentWidth <= 0 && contentHeight <= 0) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Compute the area which needs painting for the `dx` scroll.\n        let dxArea = 0;\n        if (dx !== 0 && contentWidth > 0) {\n            if (Math.abs(dx) >= contentWidth) {\n                dxArea = contentWidth * height;\n            }\n            else {\n                dxArea = Math.abs(dx) * height;\n            }\n        }\n        // Compute the area which needs painting for the `dy` scroll.\n        let dyArea = 0;\n        if (dy !== 0 && contentHeight > 0) {\n            if (Math.abs(dy) >= contentHeight) {\n                dyArea = width * contentHeight;\n            }\n            else {\n                dyArea = width * Math.abs(dy);\n            }\n        }\n        // If the area sum is larger than the total, paint everything.\n        if (dxArea + dyArea >= width * height) {\n            this._scrollX = x;\n            this._scrollY = y;\n            this.paintContent(0, 0, width, height);\n            this._paintOverlay();\n            return;\n        }\n        // Update the internal Y scroll position.\n        this._scrollY = y;\n        // Scroll the Y axis if needed. If the scroll distance exceeds\n        // the visible height, paint everything. Otherwise, blit the\n        // valid content and paint the dirty region.\n        if (dy !== 0 && contentHeight > 0) {\n            if (Math.abs(dy) >= contentHeight) {\n                this.paintContent(0, contentY, width, contentHeight);\n            }\n            else {\n                const x = 0;\n                const y = dy < 0 ? contentY : contentY + dy;\n                const w = width;\n                const h = contentHeight - Math.abs(dy);\n                this._blitContent(this._canvas, x, y, w, h, x, y - dy);\n                this.paintContent(0, dy < 0 ? contentY : height - dy, width, Math.abs(dy));\n                // Repaint merged cells that are intersected by the scroll level\n                // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n                for (const rgn of ['body', 'row-header']) {\n                    const cellgroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn);\n                    let paintRgn = {\n                        region: rgn,\n                        xMin: 0,\n                        xMax: 0,\n                        yMin: 0,\n                        yMax: 0\n                    };\n                    let backgroundColor = undefined;\n                    switch (rgn) {\n                        case 'body':\n                            paintRgn.xMin = this.headerWidth;\n                            paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                            paintRgn.yMin = this.headerHeight;\n                            paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                            backgroundColor = this._style.backgroundColor;\n                            break;\n                        case 'row-header':\n                            paintRgn.xMin = 0;\n                            paintRgn.xMax = this.headerWidth;\n                            paintRgn.yMin = this.headerHeight;\n                            paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                            backgroundColor = this._style.headerBackgroundColor;\n                            break;\n                    }\n                    this._paintMergedCells(cellgroups, paintRgn, backgroundColor);\n                }\n            }\n        }\n        // Update the internal X scroll position.\n        this._scrollX = x;\n        // Scroll the X axis if needed. If the scroll distance exceeds\n        // the visible width, paint everything. Otherwise, blit the\n        // valid content and paint the dirty region.\n        if (dx !== 0 && contentWidth > 0) {\n            if (Math.abs(dx) >= contentWidth) {\n                this.paintContent(contentX, 0, contentWidth, height);\n            }\n            else {\n                const x = dx < 0 ? contentX : contentX + dx;\n                const y = 0;\n                const w = contentWidth - Math.abs(dx);\n                const h = height;\n                this._blitContent(this._canvas, x, y, w, h, x - dx, y);\n                this.paintContent(dx < 0 ? contentX : width - dx, 0, Math.abs(dx), height);\n                // Repaint merged cells that are intersected by the scroll level\n                // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n                for (const rgn of ['body', 'column-header']) {\n                    const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn);\n                    let paintRgn = {\n                        region: rgn,\n                        xMin: 0,\n                        xMax: 0,\n                        yMin: 0,\n                        yMax: 0\n                    };\n                    let backgroundColor = undefined;\n                    switch (rgn) {\n                        case 'body':\n                            paintRgn.xMin = this.headerWidth;\n                            paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                            paintRgn.yMin = this.headerHeight;\n                            paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                            backgroundColor = this._style.backgroundColor;\n                            break;\n                        case 'column-header':\n                            paintRgn.xMin = this.headerWidth;\n                            paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                            paintRgn.yMin = 0;\n                            paintRgn.yMax = this.headerHeight;\n                            backgroundColor = this._style.headerBackgroundColor;\n                            break;\n                    }\n                    this._paintMergedCells(cellGroups, paintRgn, backgroundColor);\n                }\n            }\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n    }\n    /**\n     * Blit content into the on-screen grid canvas.\n     *\n     * The rect should be expressed in viewport coordinates.\n     *\n     * This automatically accounts for the dpi ratio.\n     */\n    _blitContent(source, x, y, w, h, dx, dy) {\n        // Scale the blit coordinates by the dpi ratio.\n        x *= this._dpiRatio;\n        y *= this._dpiRatio;\n        w *= this._dpiRatio;\n        h *= this._dpiRatio;\n        dx *= this._dpiRatio;\n        dy *= this._dpiRatio;\n        // Save the current gc state.\n        this._canvasGC.save();\n        // Set the transform to the identity matrix.\n        this._canvasGC.setTransform(1, 0, 0, 1, 0, 0);\n        // Draw the specified content.\n        this._canvasGC.drawImage(source, x, y, w, h, dx, dy, w, h);\n        // Restore the gc state.\n        this._canvasGC.restore();\n    }\n    /**\n     * Paint the grid content for the given dirty rect.\n     *\n     * The rect should be expressed in valid viewport coordinates.\n     *\n     * This is the primary paint entry point. The individual `_draw*`\n     * methods should not be invoked directly. This method dispatches\n     * to the drawing methods in the correct order.\n     */\n    paintContent(rx, ry, rw, rh) {\n        // Scale the canvas and buffer GC for the dpi ratio.\n        this._canvasGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        this._bufferGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        // Clear the dirty rect of all content.\n        this._canvasGC.clearRect(rx, ry, rw, rh);\n        // Draw the void region.\n        this._drawVoidRegion(rx, ry, rw, rh);\n        // Draw the body region.\n        this._drawBodyRegion(rx, ry, rw, rh);\n        // Draw the row header region.\n        this._drawRowHeaderRegion(rx, ry, rw, rh);\n        // Draw the column header region.\n        this._drawColumnHeaderRegion(rx, ry, rw, rh);\n        // Draw the corner header region.\n        this.drawCornerHeaderRegion(rx, ry, rw, rh);\n    }\n    /**\n     * Resizes body column headers so their text fits\n     * without clipping or wrapping.\n     * @param dataModel\n     */\n    _fitBodyColumnHeaders(dataModel, padding, numCols) {\n        // Get the body column count\n        const bodyColumnCount = numCols === undefined ? dataModel.columnCount('body') : numCols;\n        for (let i = 0; i < bodyColumnCount; i++) {\n            /*\n              if we're working with nested column headers,\n              retrieve the nested levels and iterate on them.\n            */\n            const numRows = dataModel.rowCount('column-header');\n            /*\n              Calculate the maximum text width, across\n              all nested rows under a given column number.\n            */\n            let maxWidth = 0;\n            for (let j = 0; j < numRows; j++) {\n                const config = DataGrid._getConfig(dataModel, j, i, 'column-header');\n                const textWidth = this._getCellTextWidth(config);\n                // Update the maximum width for that column.\n                maxWidth = Math.max(maxWidth, textWidth);\n            }\n            /*\n              Send a resize message with new width for the given column.\n              Using a padding of 15 pixels to leave some room.\n            */\n            this.resizeColumn('body', i, maxWidth + padding);\n        }\n    }\n    /**\n     * Resizes row header columns so their text fits\n     * without clipping or wrapping.\n     * @param dataModel\n     */\n    _fitRowColumnHeaders(dataModel, padding, numCols) {\n        /*\n          if we're working with nested row headers,\n          retrieve the nested levels and iterate on them.\n        */\n        const rowColumnCount = numCols === undefined ? dataModel.columnCount('row-header') : numCols;\n        for (let i = 0; i < rowColumnCount; i++) {\n            const numCols = dataModel.rowCount('column-header');\n            /*\n              Calculate the maximum text width, across\n              all nested columns under a given row index.\n            */\n            let maxWidth = 0;\n            for (let j = 0; j < numCols; j++) {\n                const config = DataGrid._getConfig(dataModel, j, i, 'corner-header');\n                const textWidth = this._getCellTextWidth(config);\n                maxWidth = Math.max(maxWidth, textWidth);\n            }\n            /*\n              Send a resize message with new width for the given column.\n              Using a padding of 15 pixels to leave some room.\n            */\n            this.resizeColumn('row-header', i, maxWidth + padding);\n        }\n    }\n    /**\n     * Paint the overlay content for the entire grid.\n     *\n     * This is the primary overlay paint entry point. The individual\n     * `_draw*` methods should not be invoked directly. This method\n     * dispatches to the drawing methods in the correct order.\n     */\n    _paintOverlay() {\n        // Scale the overlay GC for the dpi ratio.\n        this._overlayGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        // Clear the overlay of all content.\n        this._overlayGC.clearRect(0, 0, this._overlay.width, this._overlay.height);\n        // Draw the body selections.\n        this._drawBodySelections();\n        // Draw the row header selections.\n        this._drawRowHeaderSelections();\n        // Draw the column header selections.\n        this._drawColumnHeaderSelections();\n        // Draw the cursor.\n        this._drawCursor();\n        // Draw the shadows.\n        this._drawShadows();\n    }\n    /**\n     * Draw the void region for the dirty rect.\n     */\n    _drawVoidRegion(rx, ry, rw, rh) {\n        // Look up the void color.\n        let color = this._style.voidColor;\n        // Bail if there is no void color.\n        if (!color) {\n            return;\n        }\n        // Fill the dirty rect with the void color.\n        this._canvasGC.fillStyle = color;\n        this._canvasGC.fillRect(rx, ry, rw, rh);\n    }\n    /**\n     * Draw the body region which intersects the dirty rect.\n     */\n    _drawBodyRegion(rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        let contentW = this._columnSections.length - this._scrollX;\n        let contentH = this._rowSections.length - this._scrollY;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = this.headerWidth;\n        let contentY = this.headerHeight;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        let bh = this.bodyHeight;\n        let bw = this.bodyWidth;\n        let ph = this.pageHeight;\n        let pw = this.pageWidth;\n        // Get the upper and lower bounds of the dirty content area.\n        let x1 = Math.max(rx, contentX);\n        let y1 = Math.max(ry, contentY);\n        let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        let r1 = this._rowSections.indexOf(y1 - contentY + this._scrollY);\n        let c1 = this._columnSections.indexOf(x1 - contentX + this._scrollX);\n        let r2 = this._rowSections.indexOf(y2 - contentY + this._scrollY);\n        let c2 = this._columnSections.indexOf(x2 - contentX + this._scrollX);\n        // Fetch the max row and column.\n        let maxRow = this._rowSections.count - 1;\n        let maxColumn = this._columnSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        let x = this._columnSections.offsetOf(c1) + contentX - this._scrollX;\n        let y = this._rowSections.offsetOf(r1) + contentY - this._scrollY;\n        // Set up the paint region size variables.\n        let width = 0;\n        let height = 0;\n        // Allocate the section sizes arrays.\n        let rowSizes = new Array(r2 - r1 + 1);\n        let columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (let j = r1; j <= r2; ++j) {\n            let size = this._rowSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (let i = c1; i <= c2; ++i) {\n            let size = this._columnSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last row is streched.\n        if (this._stretchLastRow && ph > bh && r2 === maxRow) {\n            let dh = this.pageHeight - this.bodyHeight;\n            rowSizes[rowSizes.length - 1] += dh;\n            height += dh;\n            y2 += dh;\n        }\n        // Adjust the geometry if the last column is streched.\n        if (this._stretchLastColumn && pw > bw && c2 === maxColumn) {\n            let dw = this.pageWidth - this.bodyWidth;\n            columnSizes[columnSizes.length - 1] += dw;\n            width += dw;\n            x2 += dw;\n        }\n        // Create the paint region object.\n        let rgn = {\n            region: 'body',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x,\n            y,\n            width,\n            height,\n            row: r1,\n            column: c1,\n            rowSizes,\n            columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.backgroundColor);\n        // Draw the row background.\n        this._drawRowBackground(rgn, this._style.rowBackgroundColor);\n        // Draw the column background.\n        this._drawColumnBackground(rgn, this._style.columnBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.horizontalGridLineColor || this._style.gridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.verticalGridLineColor || this._style.gridLineColor);\n        // Get the cellgroups from the cell-region that intersects with the paint region\n        const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn.region).filter(group => {\n            return this.cellGroupInteresectsRegion(group, rgn);\n        });\n        // Draw merged cells\n        this._paintMergedCells(cellGroups, rgn, this._style.backgroundColor);\n    }\n    /**\n     * Draw the row header region which intersects the dirty rect.\n     */\n    _drawRowHeaderRegion(rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        let contentW = this.headerWidth;\n        let contentH = this.bodyHeight - this._scrollY;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = 0;\n        let contentY = this.headerHeight;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        // Get the upper and lower bounds of the dirty content area.\n        let x1 = rx;\n        let y1 = Math.max(ry, contentY);\n        let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        let r1 = this._rowSections.indexOf(y1 - contentY + this._scrollY);\n        let c1 = this._rowHeaderSections.indexOf(x1);\n        let r2 = this._rowSections.indexOf(y2 - contentY + this._scrollY);\n        let c2 = this._rowHeaderSections.indexOf(x2);\n        // Fetch max row and column.\n        let maxRow = this._rowSections.count - 1;\n        let maxColumn = this._rowHeaderSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        let x = this._rowHeaderSections.offsetOf(c1);\n        let y = this._rowSections.offsetOf(r1) + contentY - this._scrollY;\n        // Set up the paint region size variables.\n        let width = 0;\n        let height = 0;\n        // Allocate the section sizes arrays.\n        let rowSizes = new Array(r2 - r1 + 1);\n        let columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (let j = r1; j <= r2; ++j) {\n            let size = this._rowSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (let i = c1; i <= c2; ++i) {\n            let size = this._rowHeaderSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last row is stretched.\n        if (this._stretchLastRow && ph > bh && r2 === maxRow) {\n            let dh = this.pageHeight - this.bodyHeight;\n            rowSizes[rowSizes.length - 1] += dh;\n            height += dh;\n            y2 += dh;\n        }\n        // Create the paint region object.\n        let rgn = {\n            region: 'row-header',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x,\n            y,\n            width,\n            height,\n            row: r1,\n            column: c1,\n            rowSizes,\n            columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor || this._style.headerGridLineColor);\n        // Get the cellgroups from the cell-region that intersects with the paint region\n        const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn.region).filter(group => {\n            return this.cellGroupInteresectsRegion(group, rgn);\n        });\n        // Draw merged cells\n        this._paintMergedCells(cellGroups, rgn, this._style.headerBackgroundColor);\n    }\n    /**\n     * Draw the column header region which intersects the dirty rect.\n     */\n    _drawColumnHeaderRegion(rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        let contentW = this.bodyWidth - this._scrollX;\n        let contentH = this.headerHeight;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = this.headerWidth;\n        let contentY = 0;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        let bw = this.bodyWidth;\n        let pw = this.pageWidth;\n        // Get the upper and lower bounds of the dirty content area.\n        let x1 = Math.max(rx, contentX);\n        let y1 = ry;\n        let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        let r1 = this._columnHeaderSections.indexOf(y1);\n        let c1 = this._columnSections.indexOf(x1 - contentX + this._scrollX);\n        let r2 = this._columnHeaderSections.indexOf(y2);\n        let c2 = this._columnSections.indexOf(x2 - contentX + this._scrollX);\n        // Fetch the max row and column.\n        let maxRow = this._columnHeaderSections.count - 1;\n        let maxColumn = this._columnSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        let x = this._columnSections.offsetOf(c1) + contentX - this._scrollX;\n        let y = this._columnHeaderSections.offsetOf(r1);\n        // Set up the paint region size variables.\n        let width = 0;\n        let height = 0;\n        // Allocate the section sizes arrays.\n        let rowSizes = new Array(r2 - r1 + 1);\n        let columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (let j = r1; j <= r2; ++j) {\n            let size = this._columnHeaderSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (let i = c1; i <= c2; ++i) {\n            let size = this._columnSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last column is stretched.\n        if (this._stretchLastColumn && pw > bw && c2 === maxColumn) {\n            let dw = this.pageWidth - this.bodyWidth;\n            columnSizes[columnSizes.length - 1] += dw;\n            width += dw;\n            x2 += dw;\n        }\n        // Create the paint region object.\n        let rgn = {\n            region: 'column-header',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x,\n            y,\n            width,\n            height,\n            row: r1,\n            column: c1,\n            rowSizes,\n            columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor || this._style.headerGridLineColor);\n        // Get the cellgroups from the cell-region that intersects with the paint region\n        const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn.region).filter(group => {\n            return this.cellGroupInteresectsRegion(group, rgn);\n        });\n        // Draw merged cells\n        this._paintMergedCells(cellGroups, rgn, this._style.headerBackgroundColor);\n    }\n    /**\n     * Draw the corner header region which intersects the dirty rect.\n     */\n    drawCornerHeaderRegion(rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        let contentW = this.headerWidth;\n        let contentH = this.headerHeight;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = 0;\n        let contentY = 0;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Get the upper and lower bounds of the dirty content area.\n        let x1 = rx;\n        let y1 = ry;\n        let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        let r1 = this._columnHeaderSections.indexOf(y1);\n        let c1 = this._rowHeaderSections.indexOf(x1);\n        let r2 = this._columnHeaderSections.indexOf(y2);\n        let c2 = this._rowHeaderSections.indexOf(x2);\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = this._columnHeaderSections.count - 1;\n        }\n        if (c2 < 0) {\n            c2 = this._rowHeaderSections.count - 1;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        let x = this._rowHeaderSections.offsetOf(c1);\n        let y = this._columnHeaderSections.offsetOf(r1);\n        // Set up the paint region size variables.\n        let width = 0;\n        let height = 0;\n        // Allocate the section sizes arrays.\n        let rowSizes = new Array(r2 - r1 + 1);\n        let columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (let j = r1; j <= r2; ++j) {\n            let size = this._columnHeaderSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (let i = c1; i <= c2; ++i) {\n            let size = this._rowHeaderSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Create the paint region object.\n        let rgn = {\n            region: 'corner-header',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x,\n            y,\n            width,\n            height,\n            row: r1,\n            column: c1,\n            rowSizes,\n            columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor || this._style.headerGridLineColor);\n        // Get the cellgroups from the cell-region that intersects with the paint region\n        const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn.region).filter(group => {\n            return this.cellGroupInteresectsRegion(group, rgn);\n        });\n        // Draw merged cells\n        this._paintMergedCells(cellGroups, rgn, this._style.headerBackgroundColor);\n    }\n    /**\n     * Draw the background for the given paint region.\n     */\n    _drawBackground(rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Unpack the region.\n        let { xMin, yMin, xMax, yMax } = rgn;\n        // Fill the region with the specified color.\n        this._canvasGC.fillStyle = color;\n        this._canvasGC.fillRect(xMin, yMin, xMax - xMin + 1, yMax - yMin + 1);\n    }\n    /**\n     * Draw the row background for the given paint region.\n     */\n    _drawRowBackground(rgn, colorFn) {\n        // Bail if there is no color function.\n        if (!colorFn) {\n            return;\n        }\n        // Compute the X bounds for the row.\n        let x1 = Math.max(rgn.xMin, rgn.x);\n        let x2 = Math.min(rgn.x + rgn.width - 1, rgn.xMax);\n        // Draw the background for the rows in the region.\n        for (let y = rgn.y, j = 0, n = rgn.rowSizes.length; j < n; ++j) {\n            // Fetch the size of the row.\n            let size = rgn.rowSizes[j];\n            // Skip zero sized rows.\n            if (size === 0) {\n                continue;\n            }\n            // Get the background color for the row.\n            let color = colorFn(rgn.row + j);\n            // Fill the row with the background color if needed.\n            if (color) {\n                let y1 = Math.max(rgn.yMin, y);\n                let y2 = Math.min(y + size - 1, rgn.yMax);\n                this._canvasGC.fillStyle = color;\n                this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Increment the running Y coordinate.\n            y += size;\n        }\n    }\n    /**\n     * Draw the column background for the given paint region.\n     */\n    _drawColumnBackground(rgn, colorFn) {\n        // Bail if there is no color function.\n        if (!colorFn) {\n            return;\n        }\n        // Compute the Y bounds for the column.\n        let y1 = Math.max(rgn.yMin, rgn.y);\n        let y2 = Math.min(rgn.y + rgn.height - 1, rgn.yMax);\n        // Draw the background for the columns in the region.\n        for (let x = rgn.x, i = 0, n = rgn.columnSizes.length; i < n; ++i) {\n            // Fetch the size of the column.\n            let size = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (size === 0) {\n                continue;\n            }\n            // Get the background color for the column.\n            let color = colorFn(rgn.column + i);\n            // Fill the column with the background color if needed.\n            if (color) {\n                let x1 = Math.max(rgn.xMin, x);\n                let x2 = Math.min(x + size - 1, rgn.xMax);\n                this._canvasGC.fillStyle = color;\n                this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Increment the running X coordinate.\n            x += size;\n        }\n    }\n    /**\n     * Returns column size\n     * @param region\n     * @param index\n     */\n    _getColumnSize(region, index) {\n        if (region === 'corner-header') {\n            return this._rowHeaderSections.sizeOf(index);\n        }\n        return this.columnSize(region, index);\n    }\n    /**\n     * Returns row size\n     * @param region\n     * @param index\n     */\n    _getRowSize(region, index) {\n        if (region === 'corner-header') {\n            return this._columnHeaderSections.sizeOf(index);\n        }\n        return this.rowSize(region, index);\n    }\n    /**\n     * Draw the cells for the given paint region.\n     */\n    _drawCells(rgn) {\n        // Bail if there is no data model.\n        if (!this._dataModel) {\n            return;\n        }\n        // Set up the cell config object for rendering.\n        let config = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            region: rgn.region,\n            row: 0,\n            column: 0,\n            value: null,\n            metadata: DataModel.emptyMetadata\n        };\n        let groupIndex = -1;\n        // Save the buffer gc before wrapping.\n        this._bufferGC.save();\n        // Wrap the buffer gc for painting the cells.\n        let gc = new GraphicsContext(this._bufferGC);\n        let height = 0;\n        // Loop over the columns in the region.\n        for (let x = rgn.x, i = 0, n = rgn.columnSizes.length; i < n; ++i) {\n            // Fetch the size of the column.\n            let width = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (width === 0) {\n                continue;\n            }\n            // Compute the column index.\n            let column = rgn.column + i;\n            // Update the config for the current column.\n            config.x = x;\n            config.width = width;\n            config.column = column;\n            // Loop over the rows in the column.\n            for (let y = rgn.y, j = 0, n = rgn.rowSizes.length; j < n; ++j) {\n                // Fetch the size of the row.\n                height = rgn.rowSizes[j];\n                // Skip zero sized rows.\n                if (height === 0) {\n                    continue;\n                }\n                // Compute the row index.\n                let row = rgn.row + j;\n                groupIndex = CellGroup.getGroupIndex(this.dataModel, config.region, row, column);\n                // For merged cell regions, don't do anything, we draw merged regions later.\n                if (groupIndex !== -1) {\n                    y += height;\n                    continue;\n                }\n                // Clear the buffer rect for the cell.\n                gc.clearRect(x, y, width, height);\n                let value = DataGrid._getCellValue(this.dataModel, rgn.region, row, column);\n                let metadata = DataGrid._getCellMetadata(this.dataModel, rgn.region, row, column);\n                // Update the config for the current cell.\n                config.y = y;\n                config.height = height;\n                config.width = width;\n                config.row = row;\n                config.value = value;\n                config.metadata = metadata;\n                // Get the renderer for the cell.\n                let renderer = this._cellRenderers.get(config);\n                // Save the GC state.\n                gc.save();\n                // Paint the cell into the off-screen buffer.\n                try {\n                    if (renderer instanceof AsyncCellRenderer) {\n                        if (renderer.isReady(config)) {\n                            renderer.paint(gc, config);\n                        }\n                        else {\n                            renderer.paintPlaceholder(gc, config);\n                            renderer.load(config).then(() => {\n                                const r1 = row;\n                                const r2 = row + 1;\n                                const c1 = column;\n                                const c2 = column + 1;\n                                this.repaintRegion(rgn.region, r1, c1, r2, c2);\n                            });\n                        }\n                    }\n                    else {\n                        renderer.paint(gc, config);\n                    }\n                }\n                catch (err) {\n                    console.error(err);\n                }\n                // Restore the GC state.\n                gc.restore();\n                // Compute the actual X bounds for the cell.\n                let x1 = Math.max(rgn.xMin, config.x);\n                let x2 = Math.min(config.x + config.width - 1, rgn.xMax);\n                // Compute the actual Y bounds for the cell.\n                let y1 = Math.max(rgn.yMin, config.y);\n                let y2 = Math.min(config.y + config.height - 1, rgn.yMax);\n                this._blitContent(this._buffer, x1, y1, x2 - x1 + 1, y2 - y1 + 1, x1, y1);\n                // Increment the running Y coordinate.\n                y += height;\n            }\n            // Restore the GC state.\n            gc.restore();\n            // Increment the running X coordinate.\n            x += width;\n        }\n        // Dispose of the wrapped gc.\n        gc.dispose();\n        // Restore the final buffer gc state.\n        this._bufferGC.restore();\n    }\n    // TODO Move this in the utils file (but we need the PaintRegion typing)\n    cellGroupInteresectsRegion(group, rgn) {\n        const rgnR1 = rgn.row;\n        const rgnR2 = rgn.row + rgn.rowSizes.length;\n        const rgnC1 = rgn.column;\n        const rgnC2 = rgn.column + rgn.columnSizes.length;\n        const dx = Math.min(group.r2, rgnR2) - Math.max(group.r1, rgnR1);\n        const dy = Math.min(group.c2, rgnC2) - Math.max(group.c1, rgnC1);\n        return dx >= 0 && dy >= 0;\n    }\n    static _getCellValue(dm, region, row, col) {\n        // Get the value for the cell.\n        try {\n            return dm.data(region, row, col);\n        }\n        catch (err) {\n            console.error(err);\n            return null;\n        }\n    }\n    static _getCellMetadata(dm, region, row, col) {\n        // Get the metadata for the cell.\n        try {\n            return dm.metadata(region, row, col);\n        }\n        catch (err) {\n            console.error(err);\n            return DataModel.emptyMetadata;\n        }\n    }\n    /**\n     * Paint group cells.\n     */\n    _paintMergedCells(cellGroups, rgn, backgroundColor) {\n        // Bail if there is no data model.\n        if (!this._dataModel) {\n            return;\n        }\n        // Set up the cell config object for rendering.\n        let config = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            region: rgn.region,\n            row: 0,\n            column: 0,\n            value: null,\n            metadata: DataModel.emptyMetadata\n        };\n        if (backgroundColor) {\n            this._canvasGC.fillStyle = backgroundColor;\n        }\n        // Set the line width for the grid lines.\n        this._canvasGC.lineWidth = 1;\n        // Save the buffer gc before wrapping.\n        this._bufferGC.save();\n        // Wrap the buffer gc for painting the cells.\n        let gc = new GraphicsContext(this._bufferGC);\n        for (const group of cellGroups) {\n            let width = 0;\n            for (let c = group.c1; c <= group.c2; c++) {\n                width += this._getColumnSize(rgn.region, c);\n            }\n            let height = 0;\n            for (let r = group.r1; r <= group.r2; r++) {\n                height += this._getRowSize(rgn.region, r);\n            }\n            let value = DataGrid._getCellValue(this.dataModel, rgn.region, group.r1, group.c1);\n            let metadata = DataGrid._getCellMetadata(this.dataModel, rgn.region, group.r1, group.c2);\n            let x = 0;\n            let y = 0;\n            switch (rgn.region) {\n                case 'body':\n                    x =\n                        this._columnSections.offsetOf(group.c1) +\n                            this.headerWidth -\n                            this._scrollX;\n                    y =\n                        this._rowSections.offsetOf(group.r1) +\n                            this.headerHeight -\n                            this._scrollY;\n                    break;\n                case 'column-header':\n                    x =\n                        this._columnSections.offsetOf(group.c1) +\n                            this.headerWidth -\n                            this._scrollX;\n                    y = this._rowSections.offsetOf(group.r1);\n                    break;\n                case 'row-header':\n                    x = this._columnSections.offsetOf(group.c1);\n                    y =\n                        this._rowSections.offsetOf(group.r1) +\n                            this.headerHeight -\n                            this._scrollY;\n                    break;\n                case 'corner-header':\n                    x = this._columnSections.offsetOf(group.c1);\n                    y = this._rowSections.offsetOf(group.r1);\n                    break;\n            }\n            config.x = x;\n            config.y = y;\n            config.width = width;\n            config.height = height;\n            config.region = rgn.region;\n            config.row = group.r1;\n            config.column = group.c1;\n            config.value = value;\n            config.metadata = metadata;\n            // Compute the actual X bounds for the cell.\n            const x1 = Math.max(rgn.xMin, x);\n            const x2 = Math.min(x + width - 2, rgn.xMax);\n            // Compute the actual Y bounds for the cell.\n            const y1 = Math.max(rgn.yMin, y);\n            const y2 = Math.min(y + height - 2, rgn.yMax);\n            if (x2 <= x1 || y2 <= y1) {\n                continue;\n            }\n            // Draw the background.\n            if (backgroundColor) {\n                this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Get the renderer for the cell.\n            let renderer = this._cellRenderers.get(config);\n            // Clear the buffer rect for the cell.\n            gc.clearRect(config.x, config.y, width, height);\n            // Save the GC state.\n            gc.save();\n            // Paint the cell into the off-screen buffer.\n            try {\n                if (renderer instanceof AsyncCellRenderer) {\n                    if (renderer.isReady(config)) {\n                        renderer.paint(gc, config);\n                    }\n                    else {\n                        renderer.paintPlaceholder(gc, config);\n                        const r1 = group.r1;\n                        const r2 = group.r2;\n                        const c1 = group.c1;\n                        const c2 = group.c2;\n                        renderer.load(config).then(() => {\n                            this.repaintRegion(rgn.region, r1, c1, r2, c2);\n                        });\n                    }\n                }\n                else {\n                    renderer.paint(gc, config);\n                }\n            }\n            catch (err) {\n                console.error(err);\n            }\n            // Restore the GC state.\n            gc.restore();\n            this._blitContent(this._buffer, x1, y1, x2 - x1 + 1, y2 - y1 + 1, x1, y1);\n        }\n        // Dispose of the wrapped gc.\n        gc.dispose();\n        // Restore the final buffer gc state.\n        this._bufferGC.restore();\n    }\n    /**\n     * Draw the horizontal grid lines for the given paint region.\n     */\n    _drawHorizontalGridLines(rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Compute the X bounds for the horizontal lines.\n        const x1 = Math.max(rgn.xMin, rgn.x);\n        const x2 = Math.min(rgn.x + rgn.width, rgn.xMax + 1);\n        // Begin the path for the grid lines.\n        this._canvasGC.beginPath();\n        // Set the line width for the grid lines.\n        this._canvasGC.lineWidth = 1;\n        // Fetch the geometry.\n        const bh = this.bodyHeight;\n        const ph = this.pageHeight;\n        // Fetch the number of grid lines to be drawn.\n        let n = rgn.rowSizes.length;\n        // Adjust the count down if the last line shouldn't be drawn.\n        if (this._stretchLastRow && ph > bh) {\n            if (rgn.row + n === this._rowSections.count) {\n                n -= 1;\n            }\n        }\n        // Draw the horizontal grid lines.\n        for (let y = rgn.y, j = 0; j < n; ++j) {\n            // Fetch the size of the row.\n            let size = rgn.rowSizes[j];\n            // Skip zero sized rows.\n            if (size === 0) {\n                continue;\n            }\n            // Compute the Y position of the line.\n            let pos = y + size - 1;\n            // Draw the line if it's in range of the dirty rect.\n            if (pos >= rgn.yMin && pos <= rgn.yMax) {\n                this._canvasGC.moveTo(x1, pos + 0.5);\n                this._canvasGC.lineTo(x2, pos + 0.5);\n            }\n            // Increment the running Y coordinate.\n            y += size;\n        }\n        // Stroke the lines with the specified color.\n        this._canvasGC.strokeStyle = color;\n        this._canvasGC.stroke();\n    }\n    /**\n     * Draw the vertical grid lines for the given paint region.\n     */\n    _drawVerticalGridLines(rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Compute the Y bounds for the vertical lines.\n        const y1 = Math.max(rgn.yMin, rgn.y);\n        const y2 = Math.min(rgn.y + rgn.height, rgn.yMax + 1);\n        // Begin the path for the grid lines\n        this._canvasGC.beginPath();\n        // Set the line width for the grid lines.\n        this._canvasGC.lineWidth = 1;\n        // Fetch the geometry.\n        const bw = this.bodyWidth;\n        const pw = this.pageWidth;\n        // Fetch the number of grid lines to be drawn.\n        let n = rgn.columnSizes.length;\n        // Adjust the count down if the last line shouldn't be drawn.\n        if (this._stretchLastColumn && pw > bw) {\n            if (rgn.column + n === this._columnSections.count) {\n                n -= 1;\n            }\n        }\n        // Draw the vertical grid lines.\n        for (let x = rgn.x, i = 0; i < n; ++i) {\n            // Fetch the size of the column.\n            let size = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (size === 0) {\n                continue;\n            }\n            // Compute the X position of the line.\n            let pos = x + size - 1;\n            // Draw the line if it's in range of the dirty rect.\n            if (pos >= rgn.xMin && pos <= rgn.xMax) {\n                this._canvasGC.moveTo(pos + 0.5, y1);\n                this._canvasGC.lineTo(pos + 0.5, y2);\n            }\n            // Increment the running X coordinate.\n            x += size;\n        }\n        // Stroke the lines with the specified color.\n        this._canvasGC.strokeStyle = color;\n        this._canvasGC.stroke();\n    }\n    /**\n     * Draw the body selections for the data grid.\n     */\n    _drawBodySelections() {\n        // Fetch the selection model.\n        let model = this._selectionModel;\n        // Bail early if there are no selections.\n        if (!model || model.isEmpty) {\n            return;\n        }\n        // Fetch the selection colors.\n        let fill = this._style.selectionFillColor;\n        let stroke = this._style.selectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch the scroll geometry.\n        let sx = this._scrollX;\n        let sy = this._scrollY;\n        // Get the first visible cell of the grid.\n        let r1 = this._rowSections.indexOf(sy);\n        let c1 = this._columnSections.indexOf(sx);\n        // Bail early if there are no visible cells.\n        if (r1 < 0 || c1 < 0) {\n            return;\n        }\n        // Fetch the extra geometry.\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        let pw = this.pageWidth;\n        let ph = this.pageHeight;\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        // Get the last visible cell of the grid.\n        let r2 = this._rowSections.indexOf(sy + ph);\n        let c2 = this._columnSections.indexOf(sx + pw);\n        // Fetch the max row and column.\n        let maxRow = this._rowSections.count - 1;\n        let maxColumn = this._columnSections.count - 1;\n        // Clamp the last cell if the void space is visible.\n        r2 = r2 < 0 ? maxRow : r2;\n        c2 = c2 < 0 ? maxColumn : c2;\n        // Fetch the overlay gc.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the body clipping rect.\n        gc.beginPath();\n        gc.rect(hw, hh, pw, ph);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Iterate over the selections.\n        for (let s of model.selections()) {\n            // Skip the section if it's not visible.\n            if (s.r1 < r1 && s.r2 < r1) {\n                continue;\n            }\n            if (s.r1 > r2 && s.r2 > r2) {\n                continue;\n            }\n            if (s.c1 < c1 && s.c2 < c1) {\n                continue;\n            }\n            if (s.c1 > c2 && s.c2 > c2) {\n                continue;\n            }\n            // Clamp the cell to the model bounds.\n            let sr1 = Math.max(0, Math.min(s.r1, maxRow));\n            let sc1 = Math.max(0, Math.min(s.c1, maxColumn));\n            let sr2 = Math.max(0, Math.min(s.r2, maxRow));\n            let sc2 = Math.max(0, Math.min(s.c2, maxColumn));\n            // Swap index order if needed.\n            let tmp;\n            if (sr1 > sr2) {\n                tmp = sr1;\n                sr1 = sr2;\n                sr2 = tmp;\n            }\n            if (sc1 > sc2) {\n                tmp = sc1;\n                sc1 = sc2;\n                sc2 = tmp;\n            }\n            const joinedGroup = CellGroup.joinCellGroupWithMergedCellGroups(this.dataModel, { r1: sr1, r2: sr2, c1: sc1, c2: sc2 }, 'body');\n            sr1 = joinedGroup.r1;\n            sr2 = joinedGroup.r2;\n            sc1 = joinedGroup.c1;\n            sc2 = joinedGroup.c2;\n            // Convert to pixel coordinates.\n            let x1 = this._columnSections.offsetOf(sc1) - sx + hw;\n            let y1 = this._rowSections.offsetOf(sr1) - sy + hh;\n            let x2 = this._columnSections.extentOf(sc2) - sx + hw;\n            let y2 = this._rowSections.extentOf(sr2) - sy + hh;\n            // Adjust the trailing X coordinate for column stretch.\n            if (this._stretchLastColumn && pw > bw && sc2 === maxColumn) {\n                x2 = hw + pw - 1;\n            }\n            // Adjust the trailing Y coordinate for row stretch.\n            if (this._stretchLastRow && ph > bh && sr2 === maxRow) {\n                y2 = hh + ph - 1;\n            }\n            // Clamp the bounds to just outside of the clipping rect.\n            x1 = Math.max(hw - 1, x1);\n            y1 = Math.max(hh - 1, y1);\n            x2 = Math.min(hw + pw + 1, x2);\n            y2 = Math.min(hh + ph + 1, y2);\n            // Skip zero sized ranges.\n            if (x2 < x1 || y2 < y1) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Stroke the rect if needed.\n            if (stroke) {\n                gc.strokeRect(x1 - 0.5, y1 - 0.5, x2 - x1 + 1, y2 - y1 + 1);\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n    /**\n     * Draw the row header selections for the data grid.\n     */\n    _drawRowHeaderSelections() {\n        // Fetch the selection model.\n        let model = this._selectionModel;\n        // Bail early if there are no selections or if the selectionMode is the entire column.\n        if (!model || model.isEmpty || model.selectionMode == 'column') {\n            return;\n        }\n        // Bail early if the row headers are not visible.\n        if (this.headerWidth === 0 || this.pageHeight === 0) {\n            return;\n        }\n        // Fetch the selection colors.\n        let fill = this._style.headerSelectionFillColor;\n        let stroke = this._style.headerSelectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch common geometry.\n        let sy = this._scrollY;\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        let rs = this._rowSections;\n        // Fetch the overlay gc.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the header clipping rect.\n        gc.beginPath();\n        gc.rect(0, hh, hw, ph);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Fetch the max row.\n        let maxRow = rs.count - 1;\n        // Fetch the visible rows.\n        let r1 = rs.indexOf(sy);\n        let r2 = rs.indexOf(sy + ph - 1);\n        r2 = r2 < 0 ? maxRow : r2;\n        // Iterate over the visible rows.\n        for (let j = r1; j <= r2; ++j) {\n            // Skip rows which aren't selected.\n            if (!model.isRowSelected(j)) {\n                continue;\n            }\n            // Get the dimensions of the row.\n            let y = rs.offsetOf(j) - sy + hh;\n            let h = rs.sizeOf(j);\n            // Adjust the height for row stretch.\n            if (this._stretchLastRow && ph > bh && j === maxRow) {\n                h = hh + ph - y;\n            }\n            // Skip zero sized rows.\n            if (h === 0) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(0, y, hw, h);\n            }\n            // Draw the border if needed.\n            if (stroke) {\n                gc.beginPath();\n                gc.moveTo(hw - 0.5, y - 1);\n                gc.lineTo(hw - 0.5, y + h);\n                gc.stroke();\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n    /**\n     * Draw the column header selections for the data grid.\n     */\n    _drawColumnHeaderSelections() {\n        // Fetch the selection model.\n        let model = this._selectionModel;\n        // Bail early if there are no selections or if the selectionMode is the entire row\n        if (!model || model.isEmpty || model.selectionMode == 'row') {\n            return;\n        }\n        // Bail early if the column headers are not visible.\n        if (this.headerHeight === 0 || this.pageWidth === 0) {\n            return;\n        }\n        // Fetch the selection colors.\n        let fill = this._style.headerSelectionFillColor;\n        let stroke = this._style.headerSelectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch common geometry.\n        let sx = this._scrollX;\n        let bw = this.bodyWidth;\n        let pw = this.pageWidth;\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        let cs = this._columnSections;\n        // Fetch the overlay gc.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the header clipping rect.\n        gc.beginPath();\n        gc.rect(hw, 0, pw, hh);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Fetch the max column.\n        let maxCol = cs.count - 1;\n        // Fetch the visible columns.\n        let c1 = cs.indexOf(sx);\n        let c2 = cs.indexOf(sx + pw - 1);\n        c2 = c2 < 0 ? maxCol : c2;\n        // Iterate over the visible columns.\n        for (let i = c1; i <= c2; ++i) {\n            // Skip columns which aren't selected.\n            if (!model.isColumnSelected(i)) {\n                continue;\n            }\n            // Get the dimensions of the column.\n            let x = cs.offsetOf(i) - sx + hw;\n            let w = cs.sizeOf(i);\n            // Adjust the width for column stretch.\n            if (this._stretchLastColumn && pw > bw && i === maxCol) {\n                w = hw + pw - x;\n            }\n            // Skip zero sized columns.\n            if (w === 0) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(x, 0, w, hh);\n            }\n            // Draw the border if needed.\n            if (stroke) {\n                gc.beginPath();\n                gc.moveTo(x - 1, hh - 0.5);\n                gc.lineTo(x + w, hh - 0.5);\n                gc.stroke();\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n    /**\n     * Draw the overlay cursor for the data grid.\n     */\n    _drawCursor() {\n        // Fetch the selection model.\n        let model = this._selectionModel;\n        // Bail early if there is no cursor.\n        if (!model || model.isEmpty || model.selectionMode !== 'cell') {\n            return;\n        }\n        // Extract the style information.\n        let fill = this._style.cursorFillColor;\n        let stroke = this._style.cursorBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch the cursor location.\n        let startRow = model.cursorRow;\n        let startColumn = model.cursorColumn;\n        // Fetch the max row and column.\n        let maxRow = this._rowSections.count - 1;\n        let maxColumn = this._columnSections.count - 1;\n        // Bail early if the cursor is out of bounds.\n        if (startRow < 0 || startRow > maxRow) {\n            return;\n        }\n        if (startColumn < 0 || startColumn > maxColumn) {\n            return;\n        }\n        let endRow = startRow;\n        let endColumn = startColumn;\n        const joinedGroup = CellGroup.joinCellGroupWithMergedCellGroups(this.dataModel, { r1: startRow, r2: endRow, c1: startColumn, c2: endColumn }, 'body');\n        startRow = joinedGroup.r1;\n        endRow = joinedGroup.r2;\n        startColumn = joinedGroup.c1;\n        endColumn = joinedGroup.c2;\n        // Fetch geometry.\n        let sx = this._scrollX;\n        let sy = this._scrollY;\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        let pw = this.pageWidth;\n        let ph = this.pageHeight;\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // Get the cursor bounds in viewport coordinates.\n        let x1 = this._columnSections.offsetOf(startColumn) - sx + hw;\n        let x2 = this._columnSections.extentOf(endColumn) - sx + hw;\n        let y1 = this._rowSections.offsetOf(startRow) - sy + hh;\n        let y2 = this._rowSections.extentOf(endRow) - sy + hh;\n        // Adjust the trailing X coordinate for column stretch.\n        if (this._stretchLastColumn && pw > bw && startColumn === maxColumn) {\n            x2 = vw - 1;\n        }\n        // Adjust the trailing Y coordinate for row stretch.\n        if (this._stretchLastRow && ph > bh && startRow === maxRow) {\n            y2 = vh - 1;\n        }\n        // Skip zero sized cursors.\n        if (x2 < x1 || y2 < y1) {\n            return;\n        }\n        // Bail early if the cursor is off the screen.\n        if (x1 - 1 >= vw || y1 - 1 >= vh || x2 + 1 < hw || y2 + 1 < hh) {\n            return;\n        }\n        // Fetch the overlay gc.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the body clipping rect.\n        gc.beginPath();\n        gc.rect(hw, hh, pw, ph);\n        gc.clip();\n        // Clear any existing overlay content.\n        gc.clearRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n        // Fill the cursor rect if needed.\n        if (fill) {\n            // Set up the fill style.\n            gc.fillStyle = fill;\n            // Fill the cursor rect.\n            gc.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n        }\n        // Stroke the cursor border if needed.\n        if (stroke) {\n            // Set up the stroke style.\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 2;\n            // Stroke the cursor rect.\n            gc.strokeRect(x1, y1, x2 - x1, y2 - y1);\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n    /**\n     * Draw the overlay shadows for the data grid.\n     */\n    _drawShadows() {\n        // Fetch the scroll shadow from the style.\n        let shadow = this._style.scrollShadow;\n        // Bail early if there is no shadow to draw.\n        if (!shadow) {\n            return;\n        }\n        // Fetch the scroll position.\n        let sx = this._scrollX;\n        let sy = this._scrollY;\n        // Fetch maximum scroll position.\n        let sxMax = this.maxScrollX;\n        let syMax = this.maxScrollY;\n        // Fetch the header width and height.\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        // Fetch the page width and height.\n        let pw = this.pageWidth;\n        let ph = this.pageHeight;\n        // Fetch the viewport width and height.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // Fetch the body width and height.\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        // Adjust the body size for row and column stretch.\n        if (this._stretchLastRow && ph > bh) {\n            bh = ph;\n        }\n        if (this._stretchLastColumn && pw > bw) {\n            bw = pw;\n        }\n        // Fetch the gc object.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Draw the column header shadow if needed.\n        if (sy > 0) {\n            // Set up the gradient coordinates.\n            let x0 = 0;\n            let y0 = hh;\n            let x1 = 0;\n            let y1 = y0 + shadow.size;\n            // Create the gradient object.\n            let grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            let x = 0;\n            let y = hh;\n            let w = hw + Math.min(pw, bw - sx);\n            let h = shadow.size;\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the row header shadow if needed.\n        if (sx > 0) {\n            // Set up the gradient coordinates.\n            let x0 = hw;\n            let y0 = 0;\n            let x1 = x0 + shadow.size;\n            let y1 = 0;\n            // Create the gradient object.\n            let grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            let x = hw;\n            let y = 0;\n            let w = shadow.size;\n            let h = hh + Math.min(ph, bh - sy);\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the column footer shadow if needed.\n        if (sy < syMax) {\n            // Set up the gradient coordinates.\n            let x0 = 0;\n            let y0 = vh;\n            let x1 = 0;\n            let y1 = vh - shadow.size;\n            // Create the gradient object.\n            let grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            let x = 0;\n            let y = vh - shadow.size;\n            let w = hw + Math.min(pw, bw - sx);\n            let h = shadow.size;\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the row footer shadow if needed.\n        if (sx < sxMax) {\n            // Set up the gradient coordinates.\n            let x0 = vw;\n            let y0 = 0;\n            let x1 = vw - shadow.size;\n            let y1 = 0;\n            // Create the gradient object.\n            let grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            let x = vw - shadow.size;\n            let y = 0;\n            let w = shadow.size;\n            let h = hh + Math.min(ph, bh - sy);\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n}\n/**\n * The namespace for the `DataGrid` class statics.\n */\n(function (DataGrid) {\n    /**\n     * A generic format function for the copy handler.\n     *\n     * @param args - The format args for the function.\n     *\n     * @returns The string representation of the value.\n     *\n     * #### Notes\n     * This function uses `String()` to coerce a value to a string.\n     */\n    function copyFormatGeneric(args) {\n        if (args.value === null || args.value === undefined) {\n            return '';\n        }\n        return String(args.value);\n    }\n    DataGrid.copyFormatGeneric = copyFormatGeneric;\n    /**\n     * The default theme for a data grid.\n     */\n    DataGrid.defaultStyle = {\n        voidColor: '#F3F3F3',\n        backgroundColor: '#FFFFFF',\n        gridLineColor: 'rgba(20, 20, 20, 0.15)',\n        headerBackgroundColor: '#F3F3F3',\n        headerGridLineColor: 'rgba(20, 20, 20, 0.25)',\n        selectionFillColor: 'rgba(49, 119, 229, 0.2)',\n        selectionBorderColor: 'rgba(0, 107, 247, 1.0)',\n        cursorBorderColor: 'rgba(0, 107, 247, 1.0)',\n        headerSelectionFillColor: 'rgba(20, 20, 20, 0.1)',\n        headerSelectionBorderColor: 'rgba(0, 107, 247, 1.0)',\n        scrollShadow: {\n            size: 10,\n            color1: 'rgba(0, 0, 0, 0.20)',\n            color2: 'rgba(0, 0, 0, 0.05)',\n            color3: 'rgba(0, 0, 0, 0.00)'\n        }\n    };\n    /**\n     * The default sizes for a data grid.\n     */\n    DataGrid.defaultSizes = {\n        rowHeight: 20,\n        columnWidth: 64,\n        rowHeaderWidth: 64,\n        columnHeaderHeight: 20\n    };\n    /**\n     * The default minimum sizes for a data grid.\n     */\n    DataGrid.minimumSizes = {\n        rowHeight: 20,\n        columnWidth: 10,\n        rowHeaderWidth: 10,\n        columnHeaderHeight: 20\n    };\n    /**\n     * The default copy config for a data grid.\n     */\n    DataGrid.defaultCopyConfig = {\n        separator: '\\t',\n        format: copyFormatGeneric,\n        headers: 'none',\n        warningThreshold: 1e6\n    };\n})(DataGrid || (DataGrid = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private$1;\n(function (Private) {\n    /**\n     * A singleton `scroll-request` conflatable message.\n     */\n    Private.ScrollRequest = new ConflatableMessage('scroll-request');\n    /**\n     * A singleton `overlay-paint-request` conflatable message.\n     */\n    Private.OverlayPaintRequest = new ConflatableMessage('overlay-paint-request');\n    /**\n     * Create a new zero-sized canvas element.\n     */\n    function createCanvas() {\n        let canvas = document.createElement('canvas');\n        canvas.width = 0;\n        canvas.height = 0;\n        return canvas;\n    }\n    Private.createCanvas = createCanvas;\n    /**\n     * Checks whether a given regions has merged cells in it.\n     * @param dataModel grid's data model.\n     * @param region the paint region to be checked.\n     * @returns boolean.\n     */\n    function regionHasMergedCells(dataModel, region) {\n        const regionGroups = CellGroup.getCellGroupsAtRegion(dataModel, region);\n        return regionGroups.length > 0;\n    }\n    Private.regionHasMergedCells = regionHasMergedCells;\n    /**\n     * A conflatable message which merges dirty paint regions.\n     */\n    class PaintRequest extends ConflatableMessage {\n        /**\n         * Construct a new paint request messages.\n         *\n         * @param region - The cell region for the paint.\n         *\n         * @param r1 - The top-left row of the dirty region.\n         *\n         * @param c1 - The top-left column of the dirty region.\n         *\n         * @param r2 - The bottom-right row of the dirty region.\n         *\n         * @param c2 - The bottom-right column of the dirty region.\n         */\n        constructor(region, r1, c1, r2, c2) {\n            super('paint-request');\n            this._region = region;\n            this._r1 = r1;\n            this._c1 = c1;\n            this._r2 = r2;\n            this._c2 = c2;\n        }\n        /**\n         * The cell region for the paint.\n         */\n        get region() {\n            return this._region;\n        }\n        /**\n         * The top-left row of the dirty region.\n         */\n        get r1() {\n            return this._r1;\n        }\n        /**\n         * The top-left column of the dirty region.\n         */\n        get c1() {\n            return this._c1;\n        }\n        /**\n         * The bottom-right row of the dirty region.\n         */\n        get r2() {\n            return this._r2;\n        }\n        /**\n         * The bottom-right column of the dirty region.\n         */\n        get c2() {\n            return this._c2;\n        }\n        /**\n         * Conflate this message with another paint request.\n         */\n        conflate(other) {\n            // Bail early if the request is already painting everything.\n            if (this._region === 'all') {\n                return true;\n            }\n            // Any region can conflate with the `'all'` region.\n            if (other._region === 'all') {\n                this._region = 'all';\n                return true;\n            }\n            // Otherwise, do not conflate with a different region.\n            if (this._region !== other._region) {\n                return false;\n            }\n            // Conflate the region to the total boundary.\n            this._r1 = Math.min(this._r1, other._r1);\n            this._c1 = Math.min(this._c1, other._c1);\n            this._r2 = Math.max(this._r2, other._r2);\n            this._c2 = Math.max(this._c2, other._c2);\n            return true;\n        }\n    }\n    Private.PaintRequest = PaintRequest;\n    /**\n     * A conflatable message for resizing rows.\n     */\n    class RowResizeRequest extends ConflatableMessage {\n        /**\n         * Construct a new row resize request.\n         *\n         * @param region - The row region which holds the section.\n         *\n         * @param index - The index of row in the region.\n         *\n         * @param size - The target size of the section.\n         */\n        constructor(region, index, size) {\n            super('row-resize-request');\n            this._region = region;\n            this._index = index;\n            this._size = size;\n        }\n        /**\n         * The row region which holds the section.\n         */\n        get region() {\n            return this._region;\n        }\n        /**\n         * The index of the row in the region.\n         */\n        get index() {\n            return this._index;\n        }\n        /**\n         * The target size of the section.\n         */\n        get size() {\n            return this._size;\n        }\n        /**\n         * Conflate this message with another row resize request.\n         */\n        conflate(other) {\n            if (this._region !== other._region || this._index !== other._index) {\n                return false;\n            }\n            this._size = other._size;\n            return true;\n        }\n    }\n    Private.RowResizeRequest = RowResizeRequest;\n    /**\n     * A conflatable message for resizing columns.\n     */\n    class ColumnResizeRequest extends ConflatableMessage {\n        /**\n         * Construct a new column resize request.\n         *\n         * @param region - The column region which holds the section.\n         *\n         * @param index - The index of column in the region.\n         *\n         * @param size - The target size of the section.\n         *               If null, then infer the size to fit.\n         */\n        constructor(region, index, size) {\n            super('column-resize-request');\n            this._region = region;\n            this._index = index;\n            this._size = size;\n        }\n        /**\n         * The column region which holds the section.\n         */\n        get region() {\n            return this._region;\n        }\n        /**\n         * The index of the column in the region.\n         */\n        get index() {\n            return this._index;\n        }\n        /**\n         * The target size of the section.\n         */\n        get size() {\n            return this._size;\n        }\n        /**\n         * Conflate this message with another column resize request.\n         */\n        conflate(other) {\n            if (this._region !== other._region || this._index !== other._index) {\n                return false;\n            }\n            this._size = other._size;\n            return true;\n        }\n    }\n    Private.ColumnResizeRequest = ColumnResizeRequest;\n})(Private$1 || (Private$1 = {}));\n\n/**\n * A data model implementation for in-memory JSON data.\n */\nclass JSONModel extends DataModel {\n    /**\n     * Create a data model with static JSON data.\n     *\n     * @param options - The options for initializing the data model.\n     */\n    constructor(options) {\n        super();\n        let split = Private.splitFields(options.schema);\n        this._data = options.data;\n        this._bodyFields = split.bodyFields;\n        this._headerFields = split.headerFields;\n        this._missingValues = Private.createMissingMap(options.schema);\n    }\n    /**\n     * Get the row count for a region in the data model.\n     *\n     * @param region - The row region of interest.\n     *\n     * @returns - The row count for the region.\n     */\n    rowCount(region) {\n        if (region === 'body') {\n            return this._data.length;\n        }\n        return 1; // TODO multiple column-header rows?\n    }\n    /**\n     * Get the column count for a region in the data model.\n     *\n     * @param region - The column region of interest.\n     *\n     * @returns - The column count for the region.\n     */\n    columnCount(region) {\n        if (region === 'body') {\n            return this._bodyFields.length;\n        }\n        return this._headerFields.length;\n    }\n    /**\n     * Get the data value for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns - The data value for the specified cell.\n     *\n     * #### Notes\n     * A `missingValue` as defined by the schema is converted to `null`.\n     */\n    data(region, row, column) {\n        // Set up the field and value variables.\n        let field;\n        let value;\n        // Look up the field and value for the region.\n        switch (region) {\n            case 'body':\n                field = this._bodyFields[column];\n                value = this._data[row][field.name];\n                break;\n            case 'column-header':\n                field = this._bodyFields[column];\n                value = field.title || field.name;\n                break;\n            case 'row-header':\n                field = this._headerFields[column];\n                value = this._data[row][field.name];\n                break;\n            case 'corner-header':\n                field = this._headerFields[column];\n                value = field.title || field.name;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Test whether the value is a missing value.\n        let missing = this._missingValues !== null &&\n            typeof value === 'string' &&\n            this._missingValues[value] === true;\n        // Return the final value.\n        return missing ? null : value;\n    }\n    /**\n     * Get the metadata for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns The metadata for the cell.\n     */\n    metadata(region, row, column) {\n        if (region === 'body' || region === 'column-header') {\n            return this._bodyFields[column];\n        }\n        return this._headerFields[column];\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Split the schema fields into header and body fields.\n     */\n    function splitFields(schema) {\n        // Normalize the primary keys.\n        let primaryKeys;\n        if (schema.primaryKey === undefined) {\n            primaryKeys = [];\n        }\n        else if (typeof schema.primaryKey === 'string') {\n            primaryKeys = [schema.primaryKey];\n        }\n        else {\n            primaryKeys = schema.primaryKey;\n        }\n        // Separate the fields for the body and header.\n        let bodyFields = [];\n        let headerFields = [];\n        for (let field of schema.fields) {\n            if (primaryKeys.indexOf(field.name) === -1) {\n                bodyFields.push(field);\n            }\n            else {\n                headerFields.push(field);\n            }\n        }\n        // Return the separated fields.\n        return { bodyFields, headerFields };\n    }\n    Private.splitFields = splitFields;\n    /**\n     * Create a missing values map for a schema.\n     *\n     * This returns `null` if there are no missing values.\n     */\n    function createMissingMap(schema) {\n        // Bail early if there are no missing values.\n        if (!schema.missingValues || schema.missingValues.length === 0) {\n            return null;\n        }\n        // Collect the missing values into a map.\n        let result = Object.create(null);\n        for (let value of schema.missingValues) {\n            result[value] = true;\n        }\n        // Return the populated map.\n        return result;\n    }\n    Private.createMissingMap = createMissingMap;\n})(Private || (Private = {}));\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2023, Lumino Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nconst PERCENTAGE_REGEX = /^(\\d+(\\.\\d+)?)%$/;\nconst PIXEL_REGEX = /^(\\d+(\\.\\d+)?)px$/;\n/**\n * A cell renderer which renders data values as images.\n */\nclass ImageRenderer extends AsyncCellRenderer {\n    /**\n     * Construct a new text renderer.\n     *\n     * @param options - The options for initializing the renderer.\n     */\n    constructor(options = {}) {\n        super();\n        this.backgroundColor = options.backgroundColor || '';\n        this.textColor = options.textColor || '#000000';\n        this.placeholder = options.placeholder || '...';\n        this.width = options.width || '';\n        // Not using the || operator, because the empty string '' is a valid value\n        this.height = options.height === undefined ? '100%' : options.height;\n    }\n    /**\n     * Whether the renderer is ready or not for that specific config.\n     * If it's not ready, the datagrid will paint the placeholder.\n     * If it's ready, the datagrid will paint the image synchronously.\n     *\n     * @param config - The configuration data for the cell.\n     *\n     * @returns Whether the renderer is ready for this config or not.\n     */\n    isReady(config) {\n        return (!config.value || ImageRenderer.dataCache.get(config.value) !== undefined);\n    }\n    /**\n     * Load the image asynchronously for a specific config.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    async load(config) {\n        // Bail early if there is nothing to do\n        if (!config.value) {\n            return;\n        }\n        const value = config.value;\n        const loadedPromise = new PromiseDelegate();\n        ImageRenderer.dataCache.set(value, undefined);\n        const img = new Image();\n        img.onload = () => {\n            ImageRenderer.dataCache.set(value, img);\n            loadedPromise.resolve();\n        };\n        img.src = value;\n        return loadedPromise.promise;\n    }\n    /**\n     * Paint the placeholder for a cell, waiting for the renderer to be ready.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    paintPlaceholder(gc, config) {\n        this.drawBackground(gc, config);\n        this.drawPlaceholder(gc, config);\n    }\n    /**\n     * Paint the content for a cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    paint(gc, config) {\n        this.drawBackground(gc, config);\n        this.drawImage(gc, config);\n    }\n    /**\n     * Draw the background for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    drawBackground(gc, config) {\n        // Resolve the background color for the cell.\n        const color = CellRenderer.resolveOption(this.backgroundColor, config);\n        // Bail if there is no background color to draw.\n        if (!color) {\n            return;\n        }\n        // Fill the cell with the background color.\n        gc.fillStyle = color;\n        gc.fillRect(config.x, config.y, config.width, config.height);\n    }\n    /**\n     * Draw the placeholder for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    drawPlaceholder(gc, config) {\n        const placeholder = CellRenderer.resolveOption(this.placeholder, config);\n        const color = CellRenderer.resolveOption(this.textColor, config);\n        const textX = config.x + config.width / 2;\n        const textY = config.y + config.height / 2;\n        // Draw the placeholder.\n        gc.fillStyle = color;\n        gc.fillText(placeholder, textX, textY);\n    }\n    /**\n     * Draw the image for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    drawImage(gc, config) {\n        // Bail early if there is nothing to draw\n        if (!config.value) {\n            return;\n        }\n        const img = ImageRenderer.dataCache.get(config.value);\n        // If it's not loaded yet, show the placeholder\n        if (!img) {\n            return this.drawPlaceholder(gc, config);\n        }\n        const width = CellRenderer.resolveOption(this.width, config);\n        const height = CellRenderer.resolveOption(this.height, config);\n        // width and height are unset, we display the image with its original size\n        if (!width && !height) {\n            gc.drawImage(img, config.x, config.y);\n            return;\n        }\n        let requestedWidth = img.width;\n        let requestedHeight = img.height;\n        let widthPercentageMatch;\n        let widthPixelMatch;\n        let heightPercentageMatch;\n        let heightPixelMatch;\n        if ((widthPercentageMatch = width.match(PERCENTAGE_REGEX))) {\n            requestedWidth =\n                (parseFloat(widthPercentageMatch[1]) / 100) * config.width;\n        }\n        else if ((widthPixelMatch = width.match(PIXEL_REGEX))) {\n            requestedWidth = parseFloat(widthPixelMatch[1]);\n        }\n        if ((heightPercentageMatch = height.match(PERCENTAGE_REGEX))) {\n            requestedHeight =\n                (parseFloat(heightPercentageMatch[1]) / 100) * config.height;\n        }\n        else if ((heightPixelMatch = height.match(PIXEL_REGEX))) {\n            requestedHeight = parseFloat(heightPixelMatch[1]);\n        }\n        // If width is not set, we compute it respecting the image size ratio\n        if (!width) {\n            requestedWidth = (img.width / img.height) * requestedHeight;\n        }\n        // If height is not set, we compute it respecting the image size ratio\n        if (!height) {\n            requestedHeight = (img.height / img.width) * requestedWidth;\n        }\n        gc.drawImage(img, config.x, config.y, requestedWidth, requestedHeight);\n    }\n}\nImageRenderer.dataCache = new Map();\n\nexport { AsyncCellRenderer, BasicKeyHandler, BasicMouseHandler, BasicSelectionModel, BooleanCellEditor, CellEditor, CellEditorController, CellGroup, CellRenderer, DataGrid, DataModel, DateCellEditor, DynamicOptionCellEditor, GraphicsContext, HyperlinkRenderer, ImageRenderer, InputCellEditor, IntegerCellEditor, IntegerInputValidator, JSONModel, MutableDataModel, NumberCellEditor, NumberInputValidator, OptionCellEditor, PassInputValidator, RendererMap, SectionList, SelectionModel, TextCellEditor, TextInputValidator, TextRenderer, resolveOption };\n//# sourceMappingURL=index.es6.js.map\n"],"names":["Private$6","CellGroup","Private$5","Private$4","BasicKeyHandler","constructor","this","_disposed","isDisposed","dispose","onKeyDown","grid","event","editable","selectionModel","cursorRow","cursorColumn","input","String","fromCharCode","keyCode","test","cell","row","column","editorController","edit","getKeyboardLayout","keyForKeydownEvent","stopPropagation","preventDefault","onArrowLeft","onArrowRight","onArrowUp","onArrowDown","onPageUp","onPageDown","onEscape","onDelete","onKeyC","moveCursor","shiftKey","scrollToCursor","model","shift","accel","Platform","accelKey","scrollTo","scrollY","scrollByStep","mode","selectionMode","r1","r2","c1","c2","cr","cc","clear","r","c","cs","currentSelection","select","scrollToColumn","maxScrollX","Infinity","scrollX","scrollToRow","maxScrollY","scrollByPage","n","Math","floor","pageHeight","defaultSizes","rowHeight","isEmpty","dataModel","maxRow","rowCount","maxColumn","columnCount","s","selections","sr1","max","min","sc1","sr2","sc2","setData","copyToClipboard","CellRenderer","resolveOption","option","config","TextRenderer","options","super","font","textColor","backgroundColor","verticalAlignment","horizontalAlignment","horizontalPadding","format","formatGeneric","elideDirection","wrapText","paint","gc","drawBackground","drawText","color","fillStyle","fillRect","x","y","width","height","getText","text","vAlign","hAlign","boxHeight","textX","textY","boxWidth","textHeight","measureFontHeight","beginPath","rect","clip","textAlign","textBaseline","fillText","textWidth","measureText","wordsInColumn","split","curY","textInCurrentLine","length","curLineTextWidth","i","curSubString","substring","nextLineText","curWord","incrementedText","join","elide","textArr","slice","missing","value","formatFixed","digits","Number","toFixed","formatPrecision","toPrecision","formatExponential","toExponential","formatIntlNumber","nft","Intl","NumberFormat","locales","formatDate","Date","toDateString","formatTime","toTimeString","formatISODateTime","toISOString","formatUTCDateTime","toUTCString","formatIntlDateTime","dtf","DateTimeFormat","fontHeightCache","undefined","fontMeasurementGC","normFont","fontMeasurementNode","style","document","body","appendChild","offsetHeight","removeChild","Private","Object","create","node","createElement","position","top","left","visibility","textContent","canvas","getContext","HyperlinkRenderer","url","urlName","areCellGroupsIntersecting","group1","group2","getGroupIndex","rgn","numGroups","groupCount","group","getCellGroupsAtRegion","groupsAtRegion","push","joinCellGroups","groups","startRow","MAX_VALUE","endRow","MIN_VALUE","startColumn","endColumn","areCellGroupsIntersectingAtAxis","axis","getGroup","groupIndex","joinCellGroupWithMergedCellGroups","region","joinedGroup","mergedCellGroups","g","mergedGroup","getCellGroupsAtRow","groupsAtRow","getCellGroupsAtColumn","groupsAtColumn","joinCellGroupsIntersectingAtAxis","regions","groupsAtAxis","concat","mergedGroupAtAxis","splice","BasicMouseHandler","_pressData","release","type","timeout","override","onMouseHover","hit","hitTest","clientX","clientY","handle","resizeHandleForHitTest","cursor","cursorForHandle","createCellConfigObject","cellRenderers","get","viewport","onMouseLeave","onMouseDown","renderer","window","open","Drag","overrideCursor","localX","localY","index","size","columnSize","rowSize","selectionGroup","onMouseMove","data","dy","resizeRow","dx","resizeColumn","lx","ly","mapToLocal","hw","headerWidth","hh","headerHeight","vpw","viewportWidth","vph","viewportHeight","sx","sy","msx","msy","computeTimeout","setTimeout","autoselect","vx","vy","mapToVirtual","bodyWidth","bodyHeight","rowAt","columnAt","onMouseUp","onMouseDoubleClick","colIndex","colRegion","onContextMenu","onWheel","deltaX","deltaY","deltaMode","ds","columnWidth","pageWidth","scrollBy","cursorMap","pressData","metadata","result","lw","lh","tw","th","scrollToCell","delta","abs","right","bottom","hyperlink","none","SelectionModel","_changed","Signal","_selectionMode","changed","connect","onDataModelChanged","isRowSelected","some","containsRow","isColumnSelected","containsColumn","isCellSelected","containsCell","sender","args","emitChanged","emit","selection","BasicSelectionModel","arguments","_cursorRow","_cursorColumn","_cursorRectIndex","_selections","moveCursorWithinSelections","direction","firstSelection","cursorRect","dr","dc","newRow","newColumn","moveToNextRect","moveToPreviousRect","pop","alreadySelected","filter","lr","lc","j","AsyncCellRenderer","DEFAULT_INVALID_INPUT_MESSAGE","PassInputValidator","validate","valid","TextInputValidator","minLength","NaN","maxLength","pattern","message","isNaN","IntegerInputValidator","NumberInputValidator","CellEditor","inputChanged","validityNotification","_validInput","_gridWheelEventHandler","removeEventListener","_closeValidityNotification","viewportOccluder","onCommit","onCancel","validator","createValidatorBasedOnType","updatePosition","addEventListener","_addContainer","startEditing","cancel","validInput","getInput","error","console","log","setValidity","editorContainer","classList","remove","add","Notification","target","placement","show","RegExp","constraint","minimum","maximum","getCellInfo","columnX","rowY","cellGroup","columnOffset","rowOffset","cellInfo","commit","cursorMovement","className","pointerEvents","close","InputCellEditor","handleEvent","_onKeyDown","_onBlur","_onInput","_unbindEvents","createWidget","deserialize","focus","bindEvents","toString","spellcheck","inputType","TextCellEditor","NumberCellEditor","step","trim","floatValue","parseFloat","Error","IntegerCellEditor","intValue","parseInt","DateCellEditor","_createWidget","_input","_deserialize","_bindEvents","BooleanCellEditor","checked","OptionCellEditor","_isMultiSelect","_select","multiple","values","item","selected","indexOf","selectedOptions","editorContainerRect","getBoundingClientRect","maxHeight","Array","isArray","items","enum","bind","DynamicOptionCellEditor","listId","list","id","valueSet","Set","forEach","setAttribute","Widget","createNode","_message","addClass","setFlag","Flag","DisallowLayout","_target","_placement","attach","_evtMouseDown","update","messageNode","getElementsByClassName","onBeforeAttach","msg","onAfterDetach","onUpdateRequest","targetRect","alignItems","justifyContent","innerHTML","button","container","CellEditorController","_editor","_cell","_typeBasedOverrides","Map","_metadataBasedOverrides","setEditor","identifier","editor","set","key","_metadataIdentifierToKey","_onCommit","_onCancel","_getEditor","response","_getDataTypeKey","_objectToKey","object","str","_metadataMatchesIdentifier","hasOwnProperty","identifierValue","metadataValue","_getMetadataBasedEditor","editorMatched","dtKey","has","DataModel","emptyMetadata","MutableDataModel","freeze","GraphicsContext","context","_context","_state","Private$3","State","next","restore","strokeStyle","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","imageSmoothingEnabled","globalAlpha","globalCompositeOperation","getLineDash","setLineDash","segments","rotate","angle","scale","transform","m11","m12","m21","m22","translate","setTransform","save","closePath","isPointInPath","fillRule","arc","radius","startAngle","endAngle","anticlockwise","arcTo","x1","y1","x2","y2","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","ellipse","radiusX","radiusY","rotation","lineTo","moveTo","quadraticCurveTo","cpx","cpy","w","h","fill","stroke","clearRect","maxWidth","strokeRect","strokeText","createLinearGradient","x0","y0","createRadialGradient","r0","createPattern","image","repetition","createImageData","apply","getImageData","sw","sh","putImageData","drawImage","drawFocusIfNeeded","element","Private$2","Private$1","pi","pool","state","other","RendererMap","fallback","_values","_fallback","err","SectionList","_count","_length","_sections","_minimumSize","minimumSize","_defaultSize","defaultSize","count","prev","curr","offset","clampSize","ArrayExt","lowerBound","offsetCmp","section","span","offsetOf","indexCmp","extentOf","sizeOf","resize","insert","removed","k","move","destination","i1","k1","i2","k2","upperBound","pivot","count1","count2","span1","span2","k3","reset","DataGrid","_scrollX","_scrollY","_viewportWidth","_viewportHeight","_mousedown","_keyHandler","_mouseHandler","_vScrollBarMinWidth","_hScrollBarMinHeight","_dpiRatio","ceil","devicePixelRatio","_dataModel","_selectionModel","_editingEnabled","_style","defaultStyle","_stretchLastRow","stretchLastRow","_stretchLastColumn","stretchLastColumn","_headerVisibility","headerVisibility","_cellRenderers","_copyConfig","copyConfig","defaultCopyConfig","_onRenderersChanged","minimumSizes","_rowSections","_columnSections","_rowHeaderSections","rowHeaderWidth","_columnHeaderSections","columnHeaderHeight","_canvas","createCanvas","_buffer","_overlay","_canvasGC","_bufferGC","_overlayGC","_viewport","tabIndex","outline","_vScrollBar","ScrollBar","orientation","_hScrollBar","_scrollCorner","_editorController","MessageLoop","installMessageHook","hide","thumbMoved","_onThumbMoved","pageRequested","_onPageRequested","stepRequested","_onStepRequested","GridLayout","setCellConfig","layout","rowSpacing","columnSpacing","fitPolicy","setRowStretch","setColumnStretch","addWidget","_releaseMouse","disconnect","_onDataModelChanged","_syncViewport","_onSelectionsChanged","repaintOverlay","keyHandler","mouseHandler","repaintContent","totalWidth","totalHeight","controller","editingEnabled","enabled","canvasGC","rowSections","columnSections","rowHeaderSections","columnHeaderSections","nr","vy1","vy2","nc","vx1","vx2","iter","currentSel","dir","rows","columns","postMessage","ScrollRequest","bh","ph","bw","pw","RowResizeRequest","ColumnResizeRequest","resetRows","resetColumns","fitColumnNames","area","padding","numCols","colsRemaining","rowColumnCount","_fitRowColumnHeaders","bodyColumnCount","_fitBodyColumnHeaders","from","alert","br","bc","rhc","chr","separator","headers","warningThreshold","colCount","cellCount","confirm","cells","map","ClipboardExt","copyText","processMessage","vsbLimits","ElementExt","sizeLimits","hsbLimits","minWidth","minHeight","messageHook","handler","_processViewportMessage","activate","_evtKeyDown","_evtMouseMove","_evtMouseUp","_evtMouseDoubleClick","_evtMouseLeave","_evtContextMenu","_evtWheel","_refreshDPI","onActivateRequest","preventScroll","onBeforeShow","onResize","_syncScrollState","PaintRequest","repaintRegion","OverlayPaintRequest","_getMaxWidthInColumn","columnRegion","columnHeaderRegion","_getMaxWidthInArea","rowRegion","numRows","configs","_val","idx","_getConfig","sort","_getTextToRender","_getCellTextWidth","col","location","_getCellValue","_getCellMetadata","_resizeCanvasIfNeeded","maxW","maxH","curW","curH","expW","expH","needBlit","hasVScroll","isHidden","hasHScroll","vsw","hsh","apw","aph","needVScroll","needHScroll","setHidden","sendMessage","Msg","FitRequest","page","_scrollTo","_onViewportResize","_onViewportScrollRequest","_onViewportPaintRequest","_onViewportOverlayPaintRequest","_onViewportRowResizeRequest","_onViewportColumnResizeRequest","isVisible","offsetWidth","round","oldWidth","oldHeight","paintContent","_paintOverlay","bx","by","xMax","yMax","rs","rhs","chs","_resizeRow","_resizeColumnHeader","_resizeColumn","_resizeRowHeader","_onRowsInserted","_onColumnsInserted","_onRowsRemoved","_onColumnsRemoved","_onRowsMoved","_onColumnsMoved","_onCellsChanged","_onModelReset","rowSpan","columnSpan","nrh","nch","drh","dch","dpiRatio","oldSize","newSize","vw","vh","pos","_blitContent","cellGroups","paintRgn","xMin","yMin","headerBackgroundColor","_paintMergedCells","adjustedSize","contentX","contentY","contentWidth","contentHeight","dxArea","dyArea","cellgroups","source","rx","ry","rw","rh","_drawVoidRegion","_drawBodyRegion","_drawRowHeaderRegion","_drawColumnHeaderRegion","drawCornerHeaderRegion","_drawBodySelections","_drawRowHeaderSelections","_drawColumnHeaderSelections","_drawCursor","_drawShadows","voidColor","contentW","contentH","rowSizes","columnSizes","dh","dw","_drawBackground","_drawRowBackground","rowBackgroundColor","_drawColumnBackground","columnBackgroundColor","_drawCells","_drawHorizontalGridLines","horizontalGridLineColor","gridLineColor","_drawVerticalGridLines","verticalGridLineColor","cellGroupInteresectsRegion","headerHorizontalGridLineColor","headerGridLineColor","headerVerticalGridLineColor","colorFn","_getColumnSize","_getRowSize","isReady","paintPlaceholder","load","then","rgnR1","rgnR2","rgnC1","rgnC2","dm","selectionFillColor","selectionBorderColor","tmp","headerSelectionFillColor","headerSelectionBorderColor","maxCol","cursorFillColor","cursorBorderColor","shadow","scrollShadow","sxMax","syMax","grad","addColorStop","color1","color2","color3","copyFormatGeneric","ConflatableMessage","regionHasMergedCells","_region","_r1","_c1","_r2","_c2","conflate","_index","_size","JSONModel","splitFields","schema","_data","_bodyFields","bodyFields","_headerFields","headerFields","_missingValues","createMissingMap","field","name","title","primaryKeys","primaryKey","fields","missingValues","PERCENTAGE_REGEX","PIXEL_REGEX","ImageRenderer","placeholder","dataCache","loadedPromise","PromiseDelegate","img","Image","onload","resolve","src","promise","drawPlaceholder","widthPercentageMatch","widthPixelMatch","heightPercentageMatch","heightPixelMatch","requestedWidth","requestedHeight","match"],"sourceRoot":""}