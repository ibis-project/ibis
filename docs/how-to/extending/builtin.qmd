---
freeze: auto
---

# Reference built-in functions


## Scalar functions

Functions that aren't exposed in ibis directly can be accessed using the
`@ibis.udf.scalar.builtin` decorator.

::: {.callout-tip}
### [Ibis APIs](../../reference/index.qmd) may already exist for your function.

Builtin scalar UDFs are designed to be an escape hatch when Ibis doesn't have
a defined API for a built-in database function.

See [the reference documentation](../../reference/index.qmd) for existing APIs.
:::

### DuckDB

Ibis doesn't directly expose many of the DuckDB [text similarity
functions](https://duckdb.org/docs/sql/functions/char.html#text-similarity-functions).
Let's expose the `mismatches` API.

```{python}
from ibis import udf

@udf.scalar.builtin
def mismatches(left: str, right: str) -> int:
    ...
```

The [`...`](https://docs.python.org/3/library/constants.html#Ellipsis) is
a visual indicator that the function definition is unknown to Ibis.

::: {.callout-note collapse="true"}
### Ibis does not do anything with the function body.

Ibis will not execute the function body or otherwise inspect it. Any code you
write in the function body **will be ignored**.
:::

We can now call this function on any ibis expression:

```{python}
import ibis

con = ibis.duckdb.connect()  # <1>
```

1. Connect to an in-memory DuckDB database

```{python}
expr = mismatches("duck", "luck")
con.execute(expr)
```

Like any other ibis expression you can inspect the SQL:

```{python}
import ibis

ibis.to_sql(expr, dialect="duckdb")  # <1>
```

1. The `dialect` keyword argument must be passed, because we constructed
   a literal expression which has no backend attached.

Because built-in UDFs are ultimately Ibis expressions, they compose with the
rest of the library:

```{python}
ibis.options.interactive = True

@udf.scalar.builtin
def jaro_winkler_similarity(a: str, b: str) -> float:
   ...

pkgs = ibis.read_parquet(
   "https://storage.googleapis.com/ibis-tutorial-data/pypi/packages.parquet"
)
pandas_ish = pkgs[jaro_winkler_similarity(pkgs.name, "pandas") >= 0.9]
pandas_ish
```

Let's count the results:

```{python}
pandas_ish.count()
```

There are a good number of packages that look similar to `pandas`!

### Snowflake

Similarly we can expose Snowflake's
[`jarowinkler_similarity`](https://docs.snowflake.com/en/sql-reference/functions/jarowinkler_similarity)
function.

Let's alias it to `jw_sim` to illustrate some more of the Ibis `udf` API:

```{python}
@udf.scalar.builtin(name="jarowinkler_similarity")  # <1>
def jw_sim(left: str, right: str) -> float:
    ...
```

1. `target` is the name of the function in the backend. This argument is
   required in this because the function name is different than the name of the
   function in ibis.


Now let's connect to Snowflake and call our `jw_sim` function:

```{python}
import os

con = ibis.connect(os.environ["SNOWFLAKE_URL"])
```

```{python}
expr = jw_sim("snow", "shoe")
con.execute(expr)
```

And let's take a look at the SQL

```{python}
ibis.to_sql(expr, dialect="snowflake")
```

### Input types

Sometimes the input types of builtin functions are difficult to spell.

Consider a function that computes the length of any array: the elements in the
array can be floats, integers, strings and even other arrays. Spelling that
type is difficult.

Fortunately the `udf.scalar.builtin` decorator doesn't require you to specify
input types in these cases:

```{python}
@udf.scalar.builtin(name="array_size")
def cardinality(arr) -> int:
   ...
```

::: {.callout-caution}
## The return type annotation **is always required**.
:::

We can pass arrays with different element types to our `cardinality` function:

```{python}
con.execute(cardinality([1, 2, 3]))
```

```{python}
con.execute(cardinality(["a", "b"]))
```

When you bypass input types the errors you get back are backend dependent:

```{python}
#| error: true
con.execute(cardinality("foo"))
```

Here, Snowflake is informing us that the `ARRAY_SIZE` function does not accept
strings as input.


## Aggregate functions

Aggregate functions that aren't exposed in ibis directly can be accessed using
the `@ibis.udf.agg.builtin` decorator.

::: {.callout-tip}
### [Ibis APIs](../../reference/index.qmd) may already exist for your function.

Builtin aggregate UDFs are designed to be an escape hatch when Ibis doesn't have
a defined API for a built-in database function.

See [the reference documentation](../../reference/index.qmd) for existing APIs.
:::

Let's the use the DuckDB backend to demonstrate how to access an aggregate
function that isn't exposed in ibis:
[`kurtosis`](https://en.wikipedia.org/wiki/Kurtosis).

### DuckDB

First, define the builtin aggregate function:

```{python}
@udf.agg.builtin
def kurtosis(x: float) -> float:  # <1>
   ...
```

1. Both the input and return type annotations indicate the **element** type of
   the input, not the shape (column or scalar). Aggregations can only be called
   on column expressions.

One of the powerful features of this API is that you can define your UD(A)Fs at
any point during your analysis. You don't need to connect to the database to
define your functions.

Let's compute the kurtosis of the number of votes across all movies:

```{python}
from ibis import _

expr = (
   ibis.examples.imdb_title_ratings.fetch()
   .rename("snake_case")
   .agg(kurt=lambda t: kurtosis(t.num_votes))
)
expr
```

Since this is an aggregate function, it has the same capabilities as other,
builtin aggregates like `sum`: it can be used in a group by as well as in
a window function expression.

Let's compute kurtosis for all the different types of productions (shorts,
movies, TV, etc):

```{python}
basics = (
   ibis.examples.imdb_title_basics.fetch()
   .rename("snake_case")
   .filter(_.is_adult == 0)
)
ratings = ibis.examples.imdb_title_ratings.fetch().rename("snake_case")

basics_ratings = ratings.join(basics, "tconst")

expr = (
   basics_ratings.group_by("title_type")
   .agg(kurt=lambda t: kurtosis(t.num_votes))
   .order_by(_.kurt.desc())
   .head()
)
expr
```

Similarly for window functions:

```{python}
expr = (
   basics_ratings.mutate(
      kurt=lambda t: kurtosis(t.num_votes).over(group_by="title_type")
   )
   .relocate("kurt", after="tconst")
   .filter(
      [
         _.original_title.lower().contains("godfather"),
         _.title_type == "movie",
         _.genres.contains("Crime") & _.genres.contains("Drama"),
      ]
   )
)
expr
```
