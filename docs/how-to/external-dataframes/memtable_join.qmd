# pandas `DataFrame`s

You might have an in-memory DataFrame that you want to join to an ibis table expression.

For example, you might have a file on your local machine that you don't want to upload to
your backend, but you need to join it to a table in that backend.

You can perform joins on local data to ibis expressions from your backend using ibis `memtable`s.

In this guide, you will learn how to work effectively using pandas DataFrames with ibis.

## Setup

In this example, we will create two DataFrames:

* One containing events
* One containing event names

We will save the events to a parquet file and read that as an ibis expression
using the DuckDB backend.

We will then convert the event names pandas `DataFrame` to an ibis `memtable`,
and join the two expressions together.

First, we'll start off by working only with pandas DataFrames.

```{python}
import pandas as pd
from datetime import date

# create a pandas DataFrame that we will convert to a
# PandasInMemoryTable (Ibis MemTable)
events = pd.DataFrame(
    {
        'event_id': range(4),
        'event_name': [f'e{k}' for k in range(4)],
    }
)
```

Next, let's create some measurement data that we'll write to an Apache Parquet file.

```{python}

# Create a parquet file that we will read in using the DuckDB backend
# as a TableExpression
measures = pd.DataFrame({
    "event_id": [0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3],
    "measured_on": map(
        date,
        [2021] * 12,
        [6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 7, 7],
        range(1, 13),
    ),
    "measurement": None
})

measures.loc[[1, 4, 5, 7], "measurement"] = [5.0, 42.0, 42.0, 11.0]

measures.head()
```

Let's save `measures` to Parquet.

```{python}
measures.to_parquet('measures.parquet')
```

Now let's create an in-memory DuckDB backend with ibis and turn on [interactive mode](../configure/basics.qmd#interactive-mode).

```{python}
#| echo: false
import ibis
```

```{python}
import ibis

ibis.options.interactive = True

con = ibis.connect('duckdb://')
measures = con.read_parquet("measures.parquet")

measures
```

Converting a pandas `DataFrame` to an ibis expression is as simple as feeding it to `ibis.memtable`:

```{python}
mem_events = ibis.memtable(events)
mem_events
```

and joining is the same as joining any two table expressions:

```{python}
joined = measures.join(mem_events, "event_id")
joined
```

For maximum convenience, you can avoid calling `ibis.memtable(events)` and
pass in the `events` `DataFrame` as the right hand side of the join:

```{python}
joined = measures.join(events, "event_id")
joined
```

In this case, Ibis is calling `ibis.memtable(events)` for you.
