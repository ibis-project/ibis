# Trino

[https://trino.io](https://trino.io)

{{< include /_callouts/experimental_backend.qmd >}}

![](https://img.shields.io/badge/memtables-fallback-yellow?style=flat-square) ![](https://img.shields.io/badge/inputs-Trino tables-blue?style=flat-square) ![](https://img.shields.io/badge/outputs-Trino tables | CSV | pandas | Parquet | PyArrow-orange?style=flat-square)

## Install

Install Ibis and dependencies for the Trino backend:

::: {.panel-tabset}

## `pip`

Install with the `trino` extra:

```{.bash}
pip install 'ibis-framework[trino]'
```

And connect:

```{.python}
import ibis

con = ibis.trino.connect()  # <1>
```

1. Adjust connection parameters as needed.

## `conda`

Install for Trino:

```{.bash}
conda install -c conda-forge ibis-trino
```

And connect:

```{.python}
import ibis

con = ibis.trino.connect()  # <1>
```

1. Adjust connection parameters as needed.

## `mamba`

Install for Trino:

```{.bash}
mamba install -c conda-forge ibis-trino
```

And connect:

```{.python}
import ibis

con = ibis.trino.connect()  # <1>
```

1. Adjust connection parameters as needed.

:::


## Connect

### `ibis.trino.connect`

```python
con = ibis.trino.connect(
    user="user",
    password="password",
    port=8080,
    database="database",
    schema="default",
)
```

::: {.callout-note}
`ibis.trino.connect` is a thin wrapper around [`ibis.backends.trino.Backend.do_connect`](#ibis.backends.trino.Backend.do_connect)."
:::

### Connection Parameters

```{python}
#| echo: false
#| output: asis
from _utils import render_do_connect

render_do_connect("trino")
```

```{python}
#| echo: false
BACKEND = "Trino"
```

{{< include ./_templates/api.qmd >}}
