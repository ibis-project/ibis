---
description: "Connect to DuckDB with Ibis, the portable dataframe library"
keywords:
    - Python
    - Ibis
---

# DuckDB

[https://duckdb.org](https://duckdb.org)

![](https://img.shields.io/badge/memtables-native-green?style=flat-square) ![](https://img.shields.io/badge/inputs-DuckDB tables | CSV | Delta Lake | JSON | pandas | Parquet | Postgres | PyArrow | SQLite-blue?style=flat-square) ![](https://img.shields.io/badge/outputs-DuckDB tables | CSV | Delta Lake |  pandas | Parquet | PyArrow | PyTorch-orange?style=flat-square)

## Install

Install Ibis and dependencies for the DuckDB backend:

::: {.panel-tabset}

## `pip`

Install with the DuckDB extra:

```{.bash}
pip install 'ibis-framework[duckdb]'
```

And connect:

```{.python}
import ibis

con = ibis.duckdb.connect()  # <1>
```

1. Adjust connection parameters as needed.

## `conda`

Install for DuckDB:

```{.bash}
conda install -c conda-forge ibis-duckdb
```

And connect:

```{.python}
import ibis

con = ibis.duckdb.connect()  # <1>
```

1. Adjust connection parameters as needed.

## `mamba`

Install for DuckDB:

```{.bash}
mamba install -c conda-forge ibis-duckdb
```

And connect:

```{.python}
import ibis

con = ibis.duckdb.connect()  # <1>
```

1. Adjust connection parameters as needed.

:::

## Connect

### `ibis.duckdb.connect`

```python
con = ibis.duckdb.connect()  # (1)
```

1. Use an ephemeral, in-memory database

```python
con = ibis.duckdb.connect("mydb.duckdb")  # (1)
```

1. Connect to, or create, a local DuckDB file

::: {.callout-note}
ibis.duckdb.connect` is a thin wrapper around [`ibis.backends.duckdb.Backend.do_connect`][ibis.backends.duckdb.Backend.do_connect].
:::

### Connection Parameters

<!-- prettier-ignore-start -->
::: ibis.backends.duckdb.Backend.do_connect
    options:
      heading_level: 4
<!-- prettier-ignore-end -->

### `ibis.connect` URL format

In addition to `ibis.duckdb.connect`, you can also connect to DuckDB by
passing a properly formatted DuckDB connection URL to `ibis.connect`

```{.python}
con = ibis.connect("duckdb:///path/to/local/file")
```

```{.python}
con = ibis.connect("duckdb://") # (1)
```

1. ephemeral, in-memory database

## MotherDuck

The DuckDB backend supports [MotherDuck](https://motherduck.com). If you have an
account, you can connect to MotherDuck by passing in the string `md:` or
`motherduck:`. `ibis` will trigger the authentication prompt in-browser.

```{.python}
import ibis

con = ibis.duckdb.connect("md:")
```

::: {.callout-note}
Authentication to MotherDuck will trigger on the first call that requires retrieving information (in this case `list_tables`)
:::

```{.python}
con.list_tables()
Attempting to automatically open the SSO authorization page in your default browser.
1. Please open this link to login into your account: https://auth.motherduck.com/activate
2. Enter the following code: ZSRQ-GJQS


Token successfully retrieved âœ…
You can store it as an environment variable to avoid having to log in again:
  $ export motherduck_token='****************'

['penguins']
```

## File Support

<!-- prettier-ignore-start -->
::: ibis.backends.duckdb.Backend.read_csv
    options:
      heading_level: 4
      show_docstring_returns: false
::: ibis.backends.duckdb.Backend.read_parquet
    options:
      heading_level: 4
      show_docstring_returns: false
::: ibis.backends.duckdb.Backend.read_delta
    options:
      heading_level: 4
      show_docstring_returns: false
::: ibis.backends.duckdb.Backend.read_json
    options:
      heading_level: 4
      show_docstring_returns: false
::: ibis.backends.duckdb.Backend.read_in_memory
    options:
      heading_level: 4
      show_docstring_returns: false
::: ibis.backends.duckdb.Backend.read_sqlite
    options:
      heading_level: 4
      show_docstring_examples: false
      show_docstring_returns: false
::: ibis.backends.duckdb.Backend.read_postgres
    options:
      heading_level: 4
      show_docstring_returns: false
<!-- prettier-ignore-end -->
