---
title: "Varchar in a Haystack"
author: "Tyler White"
error: false
date: "2024-03-28"
image: thumbnail.png
categories:
  - blog
  - data analysis
  - puzzle
---

## The Scenario

You're a data analyst, and a new ticket landed in your queue.

> Subject: Urgent: Data Discovery Needed for Critical Analysis
>
> Hi Data Team,
>
> I hope this message finds you well. I'm reaching out with an urgent request
> that directly impacts the company's most critical project. We need to locate
> a specific value within our database but do not know which column it's in.
> Unfortunately, we don't have documentation for this particular table. We are
> looking for the value "NEEDLE" in the table.
>
> We think it is in the X database, Y schema, and Z table. We appreciate your
> help with this urgent matter!

Whelp, let's give this a try.

## The Table

To set up this particular problem, we can use Pandas to create a table with 5
columns and 100 rows. We can use the `at` method to update a row with the value
"NEEDLE" to simulate what we need to find.

```{python}
#| code-fold: true
import pandas as pd
import random
import string
from ibis.interactive import *


def random_string(length=10):
    return "".join(
        random.choice(string.ascii_letters + string.digits) for _ in range(length)
    )


data = [[random_string() for _ in range(5)] for _ in range(100)]
column_names = [f"col{i+1}" for i in range(5)]
df = pd.DataFrame(data, columns=column_names)
df.at[42, 'col4'] = "NEEDLE"
t = ibis.memtable(df, name="Z")
```

```{python}
t
```

## The Solution(s)
There are a few ways we could solve for this.

### Options 1 & 2: SQL or Dynamic SQL

To find a specific value in an unknown column in a table, we can either iterate
through each column and check for the value or dynamically create an SQL query
to search all columns. Either option may be time-consuming and
resource-intensive, especially as the number of columns grows.

### Option 3

We can make use of `selectors`!

```{python}
expr = t.filter(s.if_any(s.of_type("string"), _ == "NEEDLE"))

expr
```

We can see the **NEEDLE** value hiding in `col4`.

## The Explanation

`s.of_type("string")` was used to select string columns, then `s.if_any()`
builds up the ORs. The `_ == "NEEDLE"` part is the condition itself, checking
each column for the value.

Here's the SQL that was generated to help us find it!
```{python}
#| echo: false
ibis.to_sql(expr)
```

## The Conclusion

Now that we've found the "NEEDLE" value, we can provide the information to the
requester. Urgent requests like this require quick and precise responses.

Our use of Ibis demonstrates how easy it is to simplify navigating large
datasets, and in this case, undocumented ones.

Please get in touch with us on [GitHub](https://github.com/ibis-project) or
[Zulip](https://ibis-project.zulipchat.com/). We'd love to hear from you!
