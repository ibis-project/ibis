---
title: "Geospatial analysis with Ibis and DuckDB (redux)"
author: Naty Clementi and Gil Forsyth
date: 2024-01-09
categories:
  - blog
  - duckdb
  - geospatial
execute:
  freeze: false
---

Spatial Dev Guru wrote a great [tutorial](https://spatial-dev.guru/2023/12/09/geospatial-analysis-using-duckdb/)
that walks you through a step-by-step geospatial analysis of bike sharing data using DuckDB.

Ibis has support for all the geospatial functions used on the tutorial, and we
decided to replicate it and share it with you.

## Data

The parquet file used in the original tutorial is available at
https://github.com/iamgeoknight/common_datasets/tree/main/parquet. The original
data is also available from the citibike
[source](https://s3.amazonaws.com/tripdata/index.html) but as a `.csv` file.

```{python}
from pathlib import Path
import tarfile
from urllib.request import urlretrieve

# Download data
url = "https://github.com/iamgeoknight/common_datasets/raw/main/parquet/202003-citibike-tripdata.tar.xz"
tar_path = Path("202003-citibike-tripdata.tar.xz")
parquet_path = Path("202003-citibike-tripdata.parquet")

if not tar_path.exists():
    urlretrieve(url, tar_path)

if not parquet_path.exists():
    with tarfile.open(tar_path, "r:xz") as t:
        t.extract("202003-citibike-tripdata.parquet")
```

Now that we have the data, we import Ibis and turn on the interactive mode, to
easily explore the output of our queries.

```{python}
from ibis.interactive import *
```

## Let's get started

Because this dataset does not contain any geometries, we have to load the spatial
extension. If the dataset included any geometry columns, Ibis is smart enough to
load the extension for us upon reading the data.

```{python}
con = ibis.duckdb.connect("biketrip.ddb")
con.load_extension("spatial")

# read data and rename columns to use snake case
biketrip = con.read_parquet("202003-citibike-tripdata.parquet").rename("snake_case")
biketrip
```

We have the information about the longitude and latitude for start and end stations,
to create geometry points and put the spatial features to use.

## Create bike trip table

In the original tutorial, Spatial Dev Guru creates a table with transformed
"Pickup" and "Dropoff" points. In DuckDB the `st_transform` function takes by default
points as `YX` (latitude/longitude) while in Ibis, we assume data in the form
`XY` (longitude/latitude) to be consistent with PostGIS and Geopandas.

```{python}
# Notice longitude/latitude order
pickup = _.start_station_longitude.point(_.start_station_latitude)
dropoff = _.end_station_longitude.point(_.end_station_latitude)

# convert is the equivalent of `st_transform`
biketrip = biketrip.mutate(
    pickup_point=pickup.convert("EPSG:4326", "EPSG:3857"),
    dropoff_point=dropoff.convert("EPSG:4326", "EPSG:3857"),
)

biketrip[["pickup_point", "dropoff_point"]]
```

Using `mutate` we add two new columns to our `biketrip` table with transformed
spatial points for pickup and dropoff locations, that are in the Web Mercator projection ([EPSG:3857](https://epsg.io/3857)).

## Identify popular starts and end stations

The following queries retrieve a list of bike start and end stations with their respective trip count in descending order.

**Top 10 start stations by trip count**

```{python}
biketrip.group_by(biketrip.start_station_name).agg(trips=ibis._.count()).order_by(
    ibis.desc("trips")
)
```

Similarly, in Ibis you can use the [`topk`](https://ibis-project.org/tutorials/ibis-for-sql-users#top-k-operations) operation:

```{python}
biketrip.start_station_name.topk(10)
```

**Top 10 end stations by trip count**

```{python}
biketrip.end_station_name.topk(10)
```

## Explore trip patterns by user type

We can also calculate the average trip duration and distance traveled for each
user type. According to the [data dictionary](https://ride.citibikenyc.com/system-data), user type can be "customer" or "subscriber" where:

- Customer = 24-hour pass or 3-day pass user
- Subscriber = Annual Member

```{python}
biketrip.group_by(_.usertype).aggregate(
    avg_duration=_.tripduration.mean(),
    avg_distance=_.pickup_point.distance(_.dropoff_point).mean()
)
```

## Analyzing efficiency: trip duration vs linear distance

The original tutorial defines `efficiency_ratio` as the `trip_duration` / `linear_distance`, where a higher efficiency ratio could mean a more direct
route or faster travel times.

```{python}
# linear distance
trip_distance = biketrip.pickup_point.distance(biketrip.dropoff_point)

biketrip = biketrip.mutate(
    linear_distance=trip_distance,
    efficiency_ratio=_.tripduration / trip_distance,
)

biketrip[["pickup_point", "dropoff_point", "linear_distance", "efficiency_ratio"]]
```

Let's take take a look at the table in descending order for the `linear_distance`, for trips that are longer than 0 meters.

```{python}
biketrip.filter(_.linear_distance > 0).order_by(ibis.desc("linear_distance"))
```

## Analyzing bike trips within a 500 meters radius

In the original tutorial, the author choses a point (first point on the table),
and it creates a buffer of 500 m radius around it. In our table we already have
the point in meters, since we converted them in a previous query.

The following query shows all the bike trips whose pickup point falls within a
500 meter radius of the first point of the table with `long=-74.00552427` and
`lat=40.71146364`.

```{python}
# grab the first row of the data
first_point = biketrip.limit(1)

trips_within_500 = biketrip.filter(
    _.pickup_point.within(first_point.select(_.pickup_point.buffer(500)).to_array())
)

trips_within_500
```

## Acknowledgements and resources

Thank you to [Spatial Dev Guru](https://spatial-dev.guru/), for the amazing
tutorial showcasing DuckDB spatial features. It was fun to replicate the tutorial
using Ibis.

If you are interested in learning more about Ibis-DuckDB geospatial support,
here is another blog post [bis + DuckDB geospatial: a match made on Earth](https://ibis-project.org/posts/ibis-duckdb-geospatial/).

Here are some resources to learn more about Ibis:

- [Ibis Docs](https://ibis-project.org/)
- [Ibis GitHub](https://github.com/ibis-project/ibis)

Chat with us on Zulip:

- [Ibis Zulip Chat](https://ibis-project.zulipchat.com/)
