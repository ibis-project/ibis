---
hide:
  - toc
---

# Setting up a development environment

## Required dependencies

- [`git`](https://git-scm.com/)

::: {.panel-tabset}

::: {.callout-note}
## MacOS users on arm64 CPUs must use a different setup
If you are working with an `arm64` architecture (Mac M1/M2) refer directly to
the `conda/mamba` setup and refer to the comment related to `arm64`
architectures.
:::

## Conda/Mamba

### Support matrix [^conda-callout]

|      Python Version {{< fa arrow-right >}} |                   Python 3.9 |   Python 3.10    |   Python 3.11    |
| -----------------------------------------: | :--------------------------: | :--------------: | :--------------: |
| **Operating System** {{< fa arrow-down >}} |                              |                  |                  |
|                                  **Linux** | {{< fa check >}}[^supported] | {{< fa check >}} | {{< fa check >}} |
|                         **macOS (x86_64)** |             {{< fa check >}} | {{< fa check >}} | {{< fa check >}} |
|                        **macOS (aarch64)** |             {{< fa check >}} | {{< fa check >}} | {{< fa check >}} |
|                                **Windows** |             {{< fa check >}} | {{< fa check >}} | {{< fa check >}} |

::: {.panel-tabset}

```{python}
#| echo: false
#| output: asis

managers = {
    "conda": {
        "name": "Miniconda",
        "url": "https://docs.conda.io/en/latest/miniconda.html",
    },
    "mamba": {
        "name": "Mamba",
        "url": "https://github.com/mamba-org/mamba",
    },
}

for manager, params in managers.items():
    name = params["name"]
    url = params["url"]

    print(f"## `{manager}`")
    print()
    print(f"1. Install [{name}]({url})")
    print()
    print(f"1. Install `gh`")
    print()
    print("    ```sh")
    print(f"    {manager} install -c conda-forge gh")
    print("    ```")
    print()
    print(f"1. Fork and clone the ibis repository:")
    print()
    print("    ```sh")
    print("    gh repo fork --clone --remote ibis-project/ibis")
    print("    ```")
    print()
    print(f"1. Create a Conda environment using `environment.yml`")
    print()
    print("    ```sh")
    print("    cd ibis")
    print(f"    {manager} env create --file conda/environment.yml")
    print("    ```")
    print()
    if manager == "conda" or manager == "mamba":
        print()
        print(
            "    If you're using arm64 architecture (Mac M1/M2), use "
            "`conda/environment-arm64.yml` for setting up a dev environment for all the "
            "backends that are possible to install excluding Flink; use "
            "`conda/environment-arm64-flink.yml` for setting up a dev environment for all "
            "the backends that are possible to install including Flink. The reason to have "
            "two separate environments is because `apache-flink` forces `pyarrow` to "
            "downgrade to 11.0, which causes conflicts in other backends."
        )
        print()
    print(f"1. Activate the environment")
    print()
    print("    ```sh")
    print(f"    {manager} activate ibis-dev")
    print("    ```")
    print()
    print(
        f"1. Install your local copy of `ibis` into the {manager.capitalize()} environment"
    )
    print()
    print("    ```sh")
    print("    pip install -e .")
    print("    ```")
    print()
```

:::

## Nix

### Support matrix

|      Python Version {{< fa arrow-right >}} |  Python 3.9                  |  Python 3.10              |   Python 3.11             |
| -----------------------------------------: | :--------------------------: | :-----------------------: | :-----------------------: |
| **Operating System** {{< fa arrow-down >}} |                              |                           |                           |
|                                  **Linux** | {{< fa check >}}[^supported] | {{< fa check >}}          | {{< fa check >}}          |
|                         **macOS (x86_64)** | {{< fa check >}}             | {{< fa check >}}          | {{< fa check >}}          |
|                    **macOS (arm64/M1/M2)** | {{< fa ban >}}[^m1]          | {{< fa ban >}}[^m1]       | {{< fa ban >}}[^m1]       |
|                                **Windows** | {{< fa ban >}}[^unlikely]    | {{< fa ban >}}[^unlikely] | {{< fa ban >}}[^unlikely] |

1.  [Install `nix`](https://nixos.org/download.html)
1.  Configure `nix`

    Edit/create your `nix.conf` file (`$XDG_CONFIG_HOME/nix/nix.conf`) and add the line

    ```sh
    experimental-features = nix-command flakes
    ```

1.  Install `gh`:

    ::: {.panel-tabset}

    ## `nix-shell`

    ```sh
    nix-shell -p gh
    ```

    ## `nix-env`

    ```sh
    nix-env -iA gh
    ```

    :::

1.  Fork and clone the ibis repository:

    ```sh
    gh repo fork --clone --remote ibis-project/ibis
    ```

1.  Set up the public `ibis` Cachix cache to pull pre-built dependencies:

    ```sh
    nix-shell -p cachix --run 'cachix use ibis'
    ```

1.  Run `nix develop` in the checkout directory:

    ```sh
    cd ibis
    nix develop
    ```

    This will launch a `bash` shell with all of the required dependencies installed.
    This may take a while due to artifact download from the cache.


## pip

::: {.callout-warning}
## `pip` will not handle installation of system dependencies

`pip` will not install system dependencies needed for some packages such as `psycopg2` and `kerberos`.

For a better development experience see the `conda/mamba` or `nix` setup instructions.
:::

1. [Install `gh`](https://cli.github.com/manual/installation)

1. Fork and clone the ibis repository:

   ```sh
   gh repo fork --clone --remote ibis-project/ibis
   ```

1. Change directory into `ibis`:

   ```sh
   cd ibis
   ```

1. Install development dependencies

   ```sh
   pip install 'poetry==1.8.2'
   pip install -r requirements-dev.txt
   ```

1. Install ibis in development mode

   ```sh
   pip install -e .
   ```

:::

## Code style and formatting

Ibis uses several code linters and has a style guide for documentation, please
checkout the [style and formatting guide](./03_style.qmd) for instructions on how to set things up.

## Building the docs

Install [`just`](https://just.systems/man/en/chapter_4.html) (if you installed
via `conda/mamba` you are covered) and run

```bash
just docs-preview
```

to build and serve the documentation.

[^conda-callout]: Some optional dependencies for Windows and Mac OS are not available through `conda`/`mamba`
[^supported]: Tested in CI. If this doesn't work for you, please [file an issue](https://github.com/ibis-project/ibis/issues/new).
[^m1]: Not working as of March 2024. See https://github.com/ibis-project/ibis/issues/8696
[^unlikely]: Unlikely to ever be supported or no upstream support.
