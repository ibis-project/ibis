project:
  type: website
  output-dir: _output
  preview:
    port: 8000
  post-render:
    - ../gen_redirects.py

highlight-style: ayu

execute:
  warning: false
  error: false

website:
  title: "Ibis"
  site-url: https://ibis-project.org
  description: "the portable Python dataframe library"
  favicon: logo.svg

  # search
  search:
    location: navbar
    type: overlay

  # options
  reader-mode: false
  twitter-card: true
  back-to-top-navigation: true
  repo-url: https://github.com/ibis-project/ibis
  repo-actions: [edit, issue]
  issue-url: https://github.com/ibis-project/ibis/issues/new/choose

  # footer
  page-footer:
    border: false
    left: ""
    right:
      - icon: github
        href: https://github.com/ibis-project
      - icon: slack
        href: https://gitter.im/ibis-dev/Lobby
      - icon: rss
        href: https://ibis-project.org/posts.xml

  # nav
  navbar:
    logo: logo.svg
    tools:
      - icon: github
        menu:
          - text: Source code
            url: https://github.com/ibis-project/ibis
          - text: Report a bug
            url: https://github.com/ibis-project/ibis/issues/new?assignees=&labels=bug&projects=&template=bug-report.yml&title=bug
          - text: Submit a feature request
            url: https://github.com/ibis-project/ibis/issues/new?assignees=&labels=feature&projects=&template=feature-request.yml&title=feat
          - text: Ask the community for help
            url: https://github.com/ibis-project/ibis/discussions/new?category=q-a
    left:
      - sidebar:getting-started
      - sidebar:concepts
      - sidebar:backends
      - sidebar:how-to
      - sidebar:reference
    right:
      - posts.qmd
      - community.qmd

  sidebar:
    - id: ""
    - id: getting-started
      title: "Getting started"
      style: "docked"
      collapse-level: 2
      contents:
        - why.qmd
        - install.qmd
        - auto: tutorials/*.qmd
    - id: concepts
      title: "Concepts"
      style: "docked"
      collapse-level: 2
      contents:
        - what.qmd
        - auto: concepts/*.qmd
    - id: backends
      title: "Backends"
      style: "docked"
      collapse-level: 2
      contents:
        - support_matrix.qmd
        - auto: backends/*.qmd
    - id: how-to
      title: "How-to"
      style: "docked"
      collapse-level: 2
      contents:
        - auto: "how-to/configure"
        - auto: "how-to/input-output"
        - auto: "how-to/analytics"
        - auto: "how-to/visualization"
        - auto: "how-to/external-dataframes"
        - auto: "how-to/old"
    - id: community
      title: "Community"
      style: "docked"
      collapse-level: 2
      contents:
        - auto: community
    - id: presentations
      title: "Presentations"
      style: "docked"
      collapse-level: 2
      contents: presentations
    - id: reference
      title: "Reference"
      style: "docked"
      collapse-level: 2
      contents:
        - auto: reference/*.qmd
        - release_notes.md

format:
  html:
    theme:
      light: flatly
      dark: [darkly, theme-dark.scss]
    css: styles.css
    toc: true

quartodoc:
  package: ibis
  title: Reference
  sidebar: reference/_sidebar.yml
  sections:
    - title: Expressions
      desc: ""
      package: ibis.expr.types
      contents:
        - kind: page
          package: ibis
          path: top_level
          summary:
            name: Top-level APIs
            desc: These methods and objects are available directly on the `ibis` module.
          contents:
            - name: and_
              dynamic: true

        - kind: page
          path: expression-tables
          package: ibis.expr.types.relations
          summary:
            name: Table Expressions
            desc: Table expressions form the basis for most Ibis expressions.
          contents:
            - Table
            - GroupedTable

        - kind: page
          path: expression-generic
          package: ibis.expr.types.generic
          summary:
            name: Generic Expression APIs
            desc: These expressions are available on scalars and columns of any element type.
          contents:
            - Value
            - Column
            - Scalar

        - kind: page
          path: expression-numeric
          package: ibis.expr.types.numeric
          summary:
            name: Numeric and Boolean Expressions
            desc: These APIs are available on numeric and boolean expressions.
          contents:
            - NumericValue
            - NumericColumn
            - IntegerValue
            - IntegerColumn
            - FloatingValue
            - DecimalValue
            - name: BooleanValue
              package: ibis.expr.types.logical

        - kind: page
          path: expression-strings
          package: ibis.expr.types.strings
          summary:
            name: String Expressions
            desc: All string operations are valid for both scalars and columns.
          contents:
            - StringValue
        - temporal

        - kind: page
          path: expression-collections
          summary:
            name: Complex Type Expressions
            desc: These APIs are available on arrays, maps and structs.
          contents:
            - name: ArrayValue
              package: ibis.expr.types.arrays
            - name: StructValue
              package: ibis.expr.types.structs
            - name: MapValue
              package: ibis.expr.types.maps

        - kind: page
          path: expression-geospatial
          package: ibis.expr.types.geospatial
          summary:
            name: Geospatial Expressions
            desc: Ibis supports the following geospatial expression APIs
          contents:
            - GeoSpatialValue
            - GeoSpatialColumn
    - title: Other
      desc: ""
      package: ibis
      contents:
        # # Column Selectors
        - selectors

        # # Schemas
        #
        # This module contains APIs for interacting with table schemas.
        - expr.schema.Schema

        # # Configuration Options
        - config.Options
        - config.Repr
        - config.SQL
        - config.ContextAdjustment

        # # Data Types
        #
        # This module contains classes for handling the different logical types that
        # occur in databases.
        #
        # All data type constructors take a `nullable: bool` parameter whose default
        # value is [`True`][True].
        - expr.datatypes.core
