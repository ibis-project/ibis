{
  "hash": "5ebc6bd415b604954f24510c32dd5bea",
  "result": {
    "markdown": "---\nexecute:\n  freeze: auto\n---\n\n# Tutorial: Ibis for dplyr users\n\n[R](https://www.r-project.org/) users familiar with\n[dplyr](https://dplyr.tidyverse.org/), [tidyr](https://tidyr.tidyverse.org/),\nand other packages in the [Tidyverse](https://www.tidyverse.org/) are likely to\nfind Ibis familiar.\n\nIn fact, some Ibis features were even inspired by similar features in the\n[Tidyverse](https://www.tidyverse.org/).\n\nHowever, due to differences between Python and R and the design and goals of\nIbis itself, you may notice some big differences right away:\n\n- **No pipe:** The handy [magrittr pipe](https://magrittr.tidyverse.org/)\n  (`%>%`) or R's newer native pipe (`|>`) don't exist in Python so you instead\n  have to chain sequences of operations together with a period (`.`). The `.`\n  in Python is analogous to R's `$` which lets you access attributes and\n  methods on objects.\n- **No unquoted column names:** Non-standard evaluation is common in R but not\n  present in Python. To reference a column in Ibis, you can pass a string,\n  property on a table (e.g., `tbl.some_column`), or you can make use of\n  [selectors](../reference/selectors.qmd).\n- **Ibis is lazy by default:** Similar to\n  [dbplyr](https://dbplyr.tidyverse.org/) and its `collect()` method, Ibis does\n  not evaluate our queries until we call `.to_pandas()`. For the purposes of\n  this document, we set `ibis.options.interactive = True` which limits results\n  to 10 rows, executes automatically, and prints a nicely-formatted table.\n\nUsing the same example data and similar operations as in [Introduction to\ndplyr](https://dplyr.tidyverse.org/articles/dplyr.html), below you will find\nsome examples of the more common dplyr and tidyr operations and their Ibis\nequivalents.\n\n## Loading Ibis\n\nTo start using dplyr in R we would run:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\nTo load Ibis:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport ibis\n```\n:::\n\n\nAnd then also load and alias some helpers to make our code more concise:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport ibis.selectors as s\nfrom ibis import _\n```\n:::\n\n\nLast, as mentioned above, to get Ibis to automatically execute our queries and\nshow the results in a nicely-formatted table, we run:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nibis.options.interactive = True\n```\n:::\n\n\n## Loading example data\n\nIn R, datasets are typically lazily loaded with packages. For instance, the\n`starwars` dataset is packaged with dplyr, but is not loaded in memory before\nyou start using it. Ibis provides many datasets in the `ibis.examples` module.\nSo to be able to use the `starwars` dataset, you can use:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars = ibis.examples.starwars.fetch()\n```\n:::\n\n\nSimilar to dplyr, if we evaluate the name of a table, we get a nicely-formatted\ntable:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━┓\n┃ name               ┃ height ┃ mass    ┃ hair_color    ┃ skin_color  ┃ … ┃\n┡━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━┩\n│ string             │ int64  │ float64 │ string        │ string      │ … │\n├────────────────────┼────────┼─────────┼───────────────┼─────────────┼───┤\n│ Luke Skywalker     │    172 │    77.0 │ blond         │ fair        │ … │\n│ C-3PO              │    167 │    75.0 │ NULL          │ gold        │ … │\n│ R2-D2              │     96 │    32.0 │ NULL          │ white, blue │ … │\n│ Darth Vader        │    202 │   136.0 │ none          │ white       │ … │\n│ Leia Organa        │    150 │    49.0 │ brown         │ light       │ … │\n│ Owen Lars          │    178 │   120.0 │ brown, grey   │ light       │ … │\n│ Beru Whitesun lars │    165 │    75.0 │ brown         │ light       │ … │\n│ R5-D4              │     97 │    32.0 │ NULL          │ white, red  │ … │\n│ Biggs Darklighter  │    183 │    84.0 │ black         │ light       │ … │\n│ Obi-Wan Kenobi     │    182 │    77.0 │ auburn, white │ fair        │ … │\n│ …                  │      … │       … │ …             │ …           │ … │\n└────────────────────┴────────┴─────────┴───────────────┴─────────────┴───┘\n```\n\n\n:::\n:::\n\n\nIn addition to printing a nicely-formatted table and automatically executing,\nsetting `ibis.options.interactive` to `True` also causes our query to be\nlimited to 10 rows. To get Ibis to give us all rows, we can directly call\n`to_pandas` and save the result as a pandas DataFrame:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars_df = starwars.to_pandas()\n```\n:::\n\n\nWhich then gives us all of the data as a pandas DataFrame:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              name  height   mass hair_color  ... species films  vehicles starships\n0   Luke Skywalker   172.0   77.0      blond  ...   Human  None      None      None\n1            C-3PO   167.0   75.0       None  ...   Droid  None      None      None\n2            R2-D2    96.0   32.0       None  ...   Droid  None      None      None\n3      Darth Vader   202.0  136.0       none  ...   Human  None      None      None\n4      Leia Organa   150.0   49.0      brown  ...   Human  None      None      None\n..             ...     ...    ...        ...  ...     ...   ...       ...       ...\n82             Rey     NaN    NaN      brown  ...   Human  None      None      None\n83     Poe Dameron     NaN    NaN      brown  ...   Human  None      None      None\n84             BB8     NaN    NaN       none  ...   Droid  None      None      None\n85  Captain Phasma     NaN    NaN    unknown  ...    None  None      None      None\n86   Padmé Amidala   165.0   45.0      brown  ...   Human  None      None      None\n\n[87 rows x 14 columns]\n```\n\n\n:::\n:::\n\n\nDirectly calling `to_pandas` and saving the result to a variable is useful for\npassing the results of Ibis table expressions to other packages (e.g.,\n[`matplotlib`](https://matplotlib.org/).\n\n## Inspecting the dataset with `head()`\n\nJust like in R, you can use `head()` to inspect the beginning of a dataset. You\ncan also specify the number of rows you want to get back by using the parameter\n`n` (default `n = 5`).\n\nIn R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(starwars) # or starwars |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n2 C-3PO        167    75 <NA>       gold       yellow         112   none  mascu…\n3 R2-D2         96    32 <NA>       white, bl… red             33   none  mascu…\n4 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n5 Leia Org…    150    49 brown      light      brown           19   fema… femin…\n6 Owen Lars    178   120 brown, gr… light      blue            52   male  mascu…\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\nWith Ibis:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.head(6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━┓\n┃ name           ┃ height ┃ mass    ┃ hair_color  ┃ skin_color  ┃ … ┃\n┡━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━┩\n│ string         │ int64  │ float64 │ string      │ string      │ … │\n├────────────────┼────────┼─────────┼─────────────┼─────────────┼───┤\n│ Luke Skywalker │    172 │    77.0 │ blond       │ fair        │ … │\n│ C-3PO          │    167 │    75.0 │ NULL        │ gold        │ … │\n│ R2-D2          │     96 │    32.0 │ NULL        │ white, blue │ … │\n│ Darth Vader    │    202 │   136.0 │ none        │ white       │ … │\n│ Leia Organa    │    150 │    49.0 │ brown       │ light       │ … │\n│ Owen Lars      │    178 │   120.0 │ brown, grey │ light       │ … │\n└────────────────┴────────┴─────────┴─────────────┴─────────────┴───┘\n```\n\n\n:::\n:::\n\n\nThere is no `tail()` in Ibis because most databases do not support this\noperation.\n\nAnother method you can use to limit the number of rows returned by a query is\n`limit()` which also takes the `n` parameter.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.limit(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━┳━━━┓\n┃ name           ┃ height ┃ mass    ┃ hair_color ┃ skin_color  ┃ eye_color ┃ … ┃\n┡━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━╇━━━┩\n│ string         │ int64  │ float64 │ string     │ string      │ string    │ … │\n├────────────────┼────────┼─────────┼────────────┼─────────────┼───────────┼───┤\n│ Luke Skywalker │    172 │    77.0 │ blond      │ fair        │ blue      │ … │\n│ C-3PO          │    167 │    75.0 │ NULL       │ gold        │ yellow    │ … │\n│ R2-D2          │     96 │    32.0 │ NULL       │ white, blue │ red       │ … │\n└────────────────┴────────┴─────────┴────────────┴─────────────┴───────────┴───┘\n```\n\n\n:::\n:::\n\n\n## Filtering rows with `filter()`\n\nIbis, like dplyr, has `filter` to select rows based on conditions.\n\nWith dplyr:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |>\n  filter(skin_color == \"light\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Leia Or…    150    49 brown      light      brown             19 fema… femin…\n 2 Owen La…    178   120 brown, gr… light      blue              52 male  mascu…\n 3 Beru Wh…    165    75 brown      light      blue              47 fema… femin…\n 4 Biggs D…    183    84 black      light      brown             24 male  mascu…\n 5 Lobot       175    79 none       light      blue              37 male  mascu…\n 6 Cordé       157    NA brown      light      brown             NA fema… femin…\n 7 Dormé       165    NA brown      light      brown             NA fema… femin…\n 8 Raymus …    188    79 brown      light      brown             NA male  mascu…\n 9 Rey          NA    NA brown      light      hazel             NA fema… femin…\n10 Poe Dam…     NA    NA brown      light      brown             NA male  mascu…\n11 Padmé A…    165    45 brown      light      brown             46 fema… femin…\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\nIn Ibis:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.filter(_.skin_color == \"light\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━┓\n┃ name               ┃ height ┃ mass    ┃ hair_color  ┃ skin_color ┃ … ┃\n┡━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━┩\n│ string             │ int64  │ float64 │ string      │ string     │ … │\n├────────────────────┼────────┼─────────┼─────────────┼────────────┼───┤\n│ Leia Organa        │    150 │    49.0 │ brown       │ light      │ … │\n│ Owen Lars          │    178 │   120.0 │ brown, grey │ light      │ … │\n│ Beru Whitesun lars │    165 │    75.0 │ brown       │ light      │ … │\n│ Biggs Darklighter  │    183 │    84.0 │ black       │ light      │ … │\n│ Lobot              │    175 │    79.0 │ none        │ light      │ … │\n│ Cordé              │    157 │     nan │ brown       │ light      │ … │\n│ Dormé              │    165 │     nan │ brown       │ light      │ … │\n│ Raymus Antilles    │    188 │    79.0 │ brown       │ light      │ … │\n│ Rey                │   NULL │     nan │ brown       │ light      │ … │\n│ Poe Dameron        │   NULL │     nan │ brown       │ light      │ … │\n│ …                  │      … │       … │ …           │ …          │ … │\n└────────────────────┴────────┴─────────┴─────────────┴────────────┴───┘\n```\n\n\n:::\n:::\n\n\nIn dplyr, you can specify multiple conditions separated with `,` that are then\ncombined with the `&` operator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |>\n  filter(skin_color == \"light\", eye_color == \"brown\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n1 Leia Org…    150    49 brown      light      brown             19 fema… femin…\n2 Biggs Da…    183    84 black      light      brown             24 male  mascu…\n3 Cordé        157    NA brown      light      brown             NA fema… femin…\n4 Dormé        165    NA brown      light      brown             NA fema… femin…\n5 Raymus A…    188    79 brown      light      brown             NA male  mascu…\n6 Poe Dame…     NA    NA brown      light      brown             NA male  mascu…\n7 Padmé Am…    165    45 brown      light      brown             46 fema… femin…\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\nIn Ibis, you can do the same by putting multiple conditions in a list:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.filter([_.skin_color == \"light\", _.eye_color == \"brown\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━┓\n┃ name              ┃ height ┃ mass    ┃ hair_color ┃ skin_color ┃ … ┃\n┡━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━┩\n│ string            │ int64  │ float64 │ string     │ string     │ … │\n├───────────────────┼────────┼─────────┼────────────┼────────────┼───┤\n│ Leia Organa       │    150 │    49.0 │ brown      │ light      │ … │\n│ Biggs Darklighter │    183 │    84.0 │ black      │ light      │ … │\n│ Cordé             │    157 │     nan │ brown      │ light      │ … │\n│ Dormé             │    165 │     nan │ brown      │ light      │ … │\n│ Raymus Antilles   │    188 │    79.0 │ brown      │ light      │ … │\n│ Poe Dameron       │   NULL │     nan │ brown      │ light      │ … │\n│ Padmé Amidala     │    165 │    45.0 │ brown      │ light      │ … │\n└───────────────────┴────────┴─────────┴────────────┴────────────┴───┘\n```\n\n\n:::\n:::\n\n\nIn previous code, we used the `_` helper we imported earlier. The `_` is\nshorthand for the table returned by the previous step in the chained sequence\nof operations (in this case, `starwars`). We could have also written the more\nverbose form,\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.filter([starwars.skin_color == \"light\", starwars.eye_color == \"brown\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━┓\n┃ name              ┃ height ┃ mass    ┃ hair_color ┃ skin_color ┃ … ┃\n┡━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━┩\n│ string            │ int64  │ float64 │ string     │ string     │ … │\n├───────────────────┼────────┼─────────┼────────────┼────────────┼───┤\n│ Leia Organa       │    150 │    49.0 │ brown      │ light      │ … │\n│ Biggs Darklighter │    183 │    84.0 │ black      │ light      │ … │\n│ Cordé             │    157 │     nan │ brown      │ light      │ … │\n│ Dormé             │    165 │     nan │ brown      │ light      │ … │\n│ Raymus Antilles   │    188 │    79.0 │ brown      │ light      │ … │\n│ Poe Dameron       │   NULL │     nan │ brown      │ light      │ … │\n│ Padmé Amidala     │    165 │    45.0 │ brown      │ light      │ … │\n└───────────────────┴────────┴─────────┴────────────┴────────────┴───┘\n```\n\n\n:::\n:::\n\n\nIf you want to combine multiple conditions, in dplyr, you could do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |>\n  filter(\n      (skin_color == \"light\" & eye_color == \"brown\") |\n       species == \"Droid\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 C-3PO       167    75 <NA>       gold       yellow           112 none  mascu…\n 2 R2-D2        96    32 <NA>       white, bl… red               33 none  mascu…\n 3 Leia Or…    150    49 brown      light      brown             19 fema… femin…\n 4 R5-D4        97    32 <NA>       white, red red               NA none  mascu…\n 5 Biggs D…    183    84 black      light      brown             24 male  mascu…\n 6 IG-88       200   140 none       metal      red               15 none  mascu…\n 7 Cordé       157    NA brown      light      brown             NA fema… femin…\n 8 Dormé       165    NA brown      light      brown             NA fema… femin…\n 9 R4-P17       96    NA none       silver, r… red, blue         NA none  femin…\n10 Raymus …    188    79 brown      light      brown             NA male  mascu…\n11 Poe Dam…     NA    NA brown      light      brown             NA male  mascu…\n12 BB8          NA    NA none       none       black             NA none  mascu…\n13 Padmé A…    165    45 brown      light      brown             46 fema… femin…\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\nIn Ibis, this would be:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.filter(\n    ((_.skin_color == \"light\") & (_.eye_color == \"brown\")) |\n    (_.species == \"Droid\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━┓\n┃ name              ┃ height ┃ mass    ┃ hair_color ┃ skin_color  ┃ … ┃\n┡━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━┩\n│ string            │ int64  │ float64 │ string     │ string      │ … │\n├───────────────────┼────────┼─────────┼────────────┼─────────────┼───┤\n│ C-3PO             │    167 │    75.0 │ NULL       │ gold        │ … │\n│ R2-D2             │     96 │    32.0 │ NULL       │ white, blue │ … │\n│ R5-D4             │     97 │    32.0 │ NULL       │ white, red  │ … │\n│ IG-88             │    200 │   140.0 │ none       │ metal       │ … │\n│ Leia Organa       │    150 │    49.0 │ brown      │ light       │ … │\n│ Biggs Darklighter │    183 │    84.0 │ black      │ light       │ … │\n│ Cordé             │    157 │     nan │ brown      │ light       │ … │\n│ Dormé             │    165 │     nan │ brown      │ light       │ … │\n│ R4-P17            │     96 │     nan │ none       │ silver, red │ … │\n│ BB8               │   NULL │     nan │ none       │ none        │ … │\n│ …                 │      … │       … │ …          │ …           │ … │\n└───────────────────┴────────┴─────────┴────────────┴─────────────┴───┘\n```\n\n\n:::\n:::\n\n\n## Sorting your data with `order_by()`\n\nTo sort a column, dplyr has the verb `arrange`. For instance, to sort the\ncolumn `height` using dplyr:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |>\n   arrange(height)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Yoda         66    17 white      green      brown            896 male  mascu…\n 2 Ratts T…     79    15 none       grey, blue unknown           NA male  mascu…\n 3 Wicket …     88    20 brown      brown      brown              8 male  mascu…\n 4 Dud Bolt     94    45 none       blue, grey yellow            NA male  mascu…\n 5 R2-D2        96    32 <NA>       white, bl… red               33 none  mascu…\n 6 R4-P17       96    NA none       silver, r… red, blue         NA none  femin…\n 7 R5-D4        97    32 <NA>       white, red red               NA none  mascu…\n 8 Sebulba     112    40 none       grey, red  orange            NA male  mascu…\n 9 Gasgano     122    NA none       white, bl… black             NA male  mascu…\n10 Watto       137    NA black      blue, grey yellow            NA male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\nIbis has the `order_by` method, so to perform the same operation:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.order_by(_.height)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━┓\n┃ name                  ┃ height ┃ mass    ┃ hair_color ┃ skin_color  ┃ … ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━┩\n│ string                │ int64  │ float64 │ string     │ string      │ … │\n├───────────────────────┼────────┼─────────┼────────────┼─────────────┼───┤\n│ Yoda                  │     66 │    17.0 │ white      │ green       │ … │\n│ Ratts Tyerell         │     79 │    15.0 │ none       │ grey, blue  │ … │\n│ Wicket Systri Warrick │     88 │    20.0 │ brown      │ brown       │ … │\n│ Dud Bolt              │     94 │    45.0 │ none       │ blue, grey  │ … │\n│ R2-D2                 │     96 │    32.0 │ NULL       │ white, blue │ … │\n│ R4-P17                │     96 │     nan │ none       │ silver, red │ … │\n│ R5-D4                 │     97 │    32.0 │ NULL       │ white, red  │ … │\n│ Sebulba               │    112 │    40.0 │ none       │ grey, red   │ … │\n│ Gasgano               │    122 │     nan │ none       │ white, blue │ … │\n│ Watto                 │    137 │     nan │ black      │ blue, grey  │ … │\n│ …                     │      … │       … │ …          │ …           │ … │\n└───────────────────────┴────────┴─────────┴────────────┴─────────────┴───┘\n```\n\n\n:::\n:::\n\n\nYou might notice that while dplyr puts missing values at the end, Ibis places\nthem at the top. This behavior can actually vary from backend to backend and is\nsomething to be aware of when using Ibis.\n\nIf you want to order using multiple variables, you can pass them as a list:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.order_by([_.height, _.mass]) # or starwars.order_by([\"height\", \"mass\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━┓\n┃ name                  ┃ height ┃ mass    ┃ hair_color ┃ skin_color  ┃ … ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━┩\n│ string                │ int64  │ float64 │ string     │ string      │ … │\n├───────────────────────┼────────┼─────────┼────────────┼─────────────┼───┤\n│ Yoda                  │     66 │    17.0 │ white      │ green       │ … │\n│ Ratts Tyerell         │     79 │    15.0 │ none       │ grey, blue  │ … │\n│ Wicket Systri Warrick │     88 │    20.0 │ brown      │ brown       │ … │\n│ Dud Bolt              │     94 │    45.0 │ none       │ blue, grey  │ … │\n│ R2-D2                 │     96 │    32.0 │ NULL       │ white, blue │ … │\n│ R4-P17                │     96 │     nan │ none       │ silver, red │ … │\n│ R5-D4                 │     97 │    32.0 │ NULL       │ white, red  │ … │\n│ Sebulba               │    112 │    40.0 │ none       │ grey, red   │ … │\n│ Gasgano               │    122 │     nan │ none       │ white, blue │ … │\n│ Watto                 │    137 │     nan │ black      │ blue, grey  │ … │\n│ …                     │      … │       … │ …          │ …           │ … │\n└───────────────────────┴────────┴─────────┴────────────┴─────────────┴───┘\n```\n\n\n:::\n:::\n\n\nTo order a column in descending order, there are two ways to do it. Note that\nmissing values remain at the top.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.order_by(_.height.desc()) # or: starwars.order_by(ibis.desc(\"height\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━┓\n┃ name         ┃ height ┃ mass    ┃ hair_color ┃ skin_color   ┃ … ┃\n┡━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━┩\n│ string       │ int64  │ float64 │ string     │ string       │ … │\n├──────────────┼────────┼─────────┼────────────┼──────────────┼───┤\n│ Yarael Poof  │    264 │     nan │ none       │ white        │ … │\n│ Tarfful      │    234 │   136.0 │ brown      │ brown        │ … │\n│ Lama Su      │    229 │    88.0 │ none       │ grey         │ … │\n│ Chewbacca    │    228 │   112.0 │ brown      │ unknown      │ … │\n│ Roos Tarpals │    224 │    82.0 │ none       │ grey         │ … │\n│ Grievous     │    216 │   159.0 │ none       │ brown, white │ … │\n│ Taun We      │    213 │     nan │ none       │ grey         │ … │\n│ Rugor Nass   │    206 │     nan │ none       │ green        │ … │\n│ Tion Medon   │    206 │    80.0 │ none       │ grey         │ … │\n│ Darth Vader  │    202 │   136.0 │ none       │ white        │ … │\n│ …            │      … │       … │ …          │ …            │ … │\n└──────────────┴────────┴─────────┴────────────┴──────────────┴───┘\n```\n\n\n:::\n:::\n\n\n## Selecting columns with `select()`\n\nIbis, like dplyr, has a `select` method to include or exclude columns:\n\nWith dplyr:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |>\n    select(hair_color)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 1\n   hair_color   \n   <chr>        \n 1 blond        \n 2 <NA>         \n 3 <NA>         \n 4 none         \n 5 brown        \n 6 brown, grey  \n 7 brown        \n 8 <NA>         \n 9 black        \n10 auburn, white\n# ℹ 77 more rows\n```\n\n\n:::\n:::\n\n\nIn Ibis:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.select(_.hair_color)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━┓\n┃ hair_color    ┃\n┡━━━━━━━━━━━━━━━┩\n│ string        │\n├───────────────┤\n│ blond         │\n│ NULL          │\n│ NULL          │\n│ none          │\n│ brown         │\n│ brown, grey   │\n│ brown         │\n│ NULL          │\n│ black         │\n│ auburn, white │\n│ …             │\n└───────────────┘\n```\n\n\n:::\n:::\n\n\nNote: A common pitfall to be aware of when referencing column names in Ibis is\nwhen column names collide with built-in methods on the Ibis Table object, such\nas `count`. In this situation, you will have to reference `count` like\n`table[\"count\"]` or `_[\"count\"]`.\n\ndplyr also allows selecting more than one column at a time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |>\n    select(hair_color, skin_color, eye_color)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 3\n   hair_color    skin_color  eye_color\n   <chr>         <chr>       <chr>    \n 1 blond         fair        blue     \n 2 <NA>          gold        yellow   \n 3 <NA>          white, blue red      \n 4 none          white       yellow   \n 5 brown         light       brown    \n 6 brown, grey   light       blue     \n 7 brown         light       blue     \n 8 <NA>          white, red  red      \n 9 black         light       brown    \n10 auburn, white fair        blue-gray\n# ℹ 77 more rows\n```\n\n\n:::\n:::\n\n\nIn Ibis, we can either quote the names:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.select(\"hair_color\", \"skin_color\", \"eye_color\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━┓\n┃ hair_color    ┃ skin_color  ┃ eye_color ┃\n┡━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━┩\n│ string        │ string      │ string    │\n├───────────────┼─────────────┼───────────┤\n│ blond         │ fair        │ blue      │\n│ NULL          │ gold        │ yellow    │\n│ NULL          │ white, blue │ red       │\n│ none          │ white       │ yellow    │\n│ brown         │ light       │ brown     │\n│ brown, grey   │ light       │ blue      │\n│ brown         │ light       │ blue      │\n│ NULL          │ white, red  │ red       │\n│ black         │ light       │ brown     │\n│ auburn, white │ fair        │ blue-gray │\n│ …             │ …           │ …         │\n└───────────────┴─────────────┴───────────┘\n```\n\n\n:::\n:::\n\n\nOr use the `_` helper:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.select(_.hair_color, _.skin_color, _.eye_color)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━┓\n┃ hair_color    ┃ skin_color  ┃ eye_color ┃\n┡━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━┩\n│ string        │ string      │ string    │\n├───────────────┼─────────────┼───────────┤\n│ blond         │ fair        │ blue      │\n│ NULL          │ gold        │ yellow    │\n│ NULL          │ white, blue │ red       │\n│ none          │ white       │ yellow    │\n│ brown         │ light       │ brown     │\n│ brown, grey   │ light       │ blue      │\n│ brown         │ light       │ blue      │\n│ NULL          │ white, red  │ red       │\n│ black         │ light       │ brown     │\n│ auburn, white │ fair        │ blue-gray │\n│ …             │ …           │ …         │\n└───────────────┴─────────────┴───────────┘\n```\n\n\n:::\n:::\n\n\nTo select columns by name based on a condition, dplyr has helpers such as:\n\n- `starts_with()`: Starts with a prefix.\n- `ends_with()`: Ends with a suffix.\n- `contains()`: Contains a literal string.\n\nThese and many more [selectors](../reference/selectors.qmd) are available in\nIbis as well, with slightly different names:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.select(s.startswith(\"h\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━┓\n┃ height ┃ hair_color    ┃ homeworld ┃\n┡━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━┩\n│ int64  │ string        │ string    │\n├────────┼───────────────┼───────────┤\n│    172 │ blond         │ Tatooine  │\n│    167 │ NULL          │ Tatooine  │\n│     96 │ NULL          │ Naboo     │\n│    202 │ none          │ Tatooine  │\n│    150 │ brown         │ Alderaan  │\n│    178 │ brown, grey   │ Tatooine  │\n│    165 │ brown         │ Tatooine  │\n│     97 │ NULL          │ Tatooine  │\n│    183 │ black         │ Tatooine  │\n│    182 │ auburn, white │ Stewjon   │\n│      … │ …             │ …         │\n└────────┴───────────────┴───────────┘\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.select(s.endswith(\"color\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━┓\n┃ hair_color    ┃ skin_color  ┃ eye_color ┃\n┡━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━┩\n│ string        │ string      │ string    │\n├───────────────┼─────────────┼───────────┤\n│ blond         │ fair        │ blue      │\n│ NULL          │ gold        │ yellow    │\n│ NULL          │ white, blue │ red       │\n│ none          │ white       │ yellow    │\n│ brown         │ light       │ brown     │\n│ brown, grey   │ light       │ blue      │\n│ brown         │ light       │ blue      │\n│ NULL          │ white, red  │ red       │\n│ black         │ light       │ brown     │\n│ auburn, white │ fair        │ blue-gray │\n│ …             │ …           │ …         │\n└───────────────┴─────────────┴───────────┘\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.select(s.contains(\"world\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━┓\n┃ homeworld ┃\n┡━━━━━━━━━━━┩\n│ string    │\n├───────────┤\n│ Tatooine  │\n│ Tatooine  │\n│ Naboo     │\n│ Tatooine  │\n│ Alderaan  │\n│ Tatooine  │\n│ Tatooine  │\n│ Tatooine  │\n│ Tatooine  │\n│ Stewjon   │\n│ …         │\n└───────────┘\n```\n\n\n:::\n:::\n\n\nSee the Ibis [Column Selectors](../reference/selectors.qmd) documentation for\nthe full list of selectors in Ibis.\n\n## Renaming columns with `rename()`\n\nIbis allows you to rename columns using `rename()` which provides similar\nfunctionality to `rename()` in dplyr.\n\nIn dplyr:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |>\n    rename(\"home_world\" = \"homeworld\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 <NA>       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: home_world <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\nIn Ibis, use `rename` and pass a `dict` of name mappings:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.rename(home_world=\"homeworld\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━┓\n┃ name               ┃ height ┃ mass    ┃ hair_color    ┃ skin_color  ┃ … ┃\n┡━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━┩\n│ string             │ int64  │ float64 │ string        │ string      │ … │\n├────────────────────┼────────┼─────────┼───────────────┼─────────────┼───┤\n│ Luke Skywalker     │    172 │    77.0 │ blond         │ fair        │ … │\n│ C-3PO              │    167 │    75.0 │ NULL          │ gold        │ … │\n│ R2-D2              │     96 │    32.0 │ NULL          │ white, blue │ … │\n│ Darth Vader        │    202 │   136.0 │ none          │ white       │ … │\n│ Leia Organa        │    150 │    49.0 │ brown         │ light       │ … │\n│ Owen Lars          │    178 │   120.0 │ brown, grey   │ light       │ … │\n│ Beru Whitesun lars │    165 │    75.0 │ brown         │ light       │ … │\n│ R5-D4              │     97 │    32.0 │ NULL          │ white, red  │ … │\n│ Biggs Darklighter  │    183 │    84.0 │ black         │ light       │ … │\n│ Obi-Wan Kenobi     │    182 │    77.0 │ auburn, white │ fair        │ … │\n│ …                  │      … │       … │ …             │ …           │ … │\n└────────────────────┴────────┴─────────┴───────────────┴─────────────┴───┘\n```\n\n\n:::\n:::\n\n\n## Add new columns with `mutate()`\n\nIbis, like dplyr, uses the `mutate` verb to add columns.\n\nIn dplyr,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |>\n    mutate(height_m = height / 100) |>\n    select(name, height_m)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 2\n   name               height_m\n   <chr>                 <dbl>\n 1 Luke Skywalker         1.72\n 2 C-3PO                  1.67\n 3 R2-D2                  0.96\n 4 Darth Vader            2.02\n 5 Leia Organa            1.5 \n 6 Owen Lars              1.78\n 7 Beru Whitesun lars     1.65\n 8 R5-D4                  0.97\n 9 Biggs Darklighter      1.83\n10 Obi-Wan Kenobi         1.82\n# ℹ 77 more rows\n```\n\n\n:::\n:::\n\n\nIn Ibis:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(\n    starwars\n        .mutate(height_m = _.height / 100)\n        .select(\"name\", \"height_m\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┓\n┃ name               ┃ height_m ┃\n┡━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━┩\n│ string             │ float64  │\n├────────────────────┼──────────┤\n│ Luke Skywalker     │     1.72 │\n│ C-3PO              │     1.67 │\n│ R2-D2              │     0.96 │\n│ Darth Vader        │     2.02 │\n│ Leia Organa        │     1.50 │\n│ Owen Lars          │     1.78 │\n│ Beru Whitesun lars │     1.65 │\n│ R5-D4              │     0.97 │\n│ Biggs Darklighter  │     1.83 │\n│ Obi-Wan Kenobi     │     1.82 │\n│ …                  │        … │\n└────────────────────┴──────────┘\n```\n\n\n:::\n:::\n\n\nA big difference between dplyr's `mutate` and Ibis' `mutate` is that, in Ibis,\nyou have to chain separate `mutate` calls together when you reference\nnewly-created columns in the same `mutate` whereas in dplyr, you can put them\nall in the same call. This makes Ibis' `mutate` more similar to `transform` in\nbase R.\n\nIn dplyr, we only need one `mutate` call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>%\n  mutate(\n    height_m = height / 100,\n    BMI = mass / (height_m^2)\n  ) %>%\n  select(BMI, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 16\n     BMI name      height  mass hair_color skin_color eye_color birth_year sex  \n   <dbl> <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr>\n 1  26.0 Luke Sky…    172    77 blond      fair       blue            19   male \n 2  26.9 C-3PO        167    75 <NA>       gold       yellow         112   none \n 3  34.7 R2-D2         96    32 <NA>       white, bl… red             33   none \n 4  33.3 Darth Va…    202   136 none       white      yellow          41.9 male \n 5  21.8 Leia Org…    150    49 brown      light      brown           19   fema…\n 6  37.9 Owen Lars    178   120 brown, gr… light      blue            52   male \n 7  27.5 Beru Whi…    165    75 brown      light      blue            47   fema…\n 8  34.0 R5-D4         97    32 <NA>       white, red red             NA   none \n 9  25.1 Biggs Da…    183    84 black      light      brown           24   male \n10  23.2 Obi-Wan …    182    77 auburn, w… fair       blue-gray       57   male \n# ℹ 77 more rows\n# ℹ 7 more variables: gender <chr>, homeworld <chr>, species <chr>,\n#   films <list>, vehicles <list>, starships <list>, height_m <dbl>\n```\n\n\n:::\n:::\n\n\nIn Ibis, for `BMI` to reference `height_m`, it needs to be in a separate `mutate` call:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(starwars\n    .mutate(\n        height_m = _.height / 100\n    )\n    .mutate(\n        BMI = _.mass / (_.height_m**2)\n    )\n    .select(\"BMI\", ~s.matches(\"BMI\"))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━┓\n┃ BMI       ┃ name               ┃ height ┃ mass    ┃ hair_color    ┃ … ┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━┩\n│ float64   │ string             │ int64  │ float64 │ string        │ … │\n├───────────┼────────────────────┼────────┼─────────┼───────────────┼───┤\n│ 26.027582 │ Luke Skywalker     │    172 │    77.0 │ blond         │ … │\n│ 26.892323 │ C-3PO              │    167 │    75.0 │ NULL          │ … │\n│ 34.722222 │ R2-D2              │     96 │    32.0 │ NULL          │ … │\n│ 33.330066 │ Darth Vader        │    202 │   136.0 │ none          │ … │\n│ 21.777778 │ Leia Organa        │    150 │    49.0 │ brown         │ … │\n│ 37.874006 │ Owen Lars          │    178 │   120.0 │ brown, grey   │ … │\n│ 27.548209 │ Beru Whitesun lars │    165 │    75.0 │ brown         │ … │\n│ 34.009990 │ R5-D4              │     97 │    32.0 │ NULL          │ … │\n│ 25.082863 │ Biggs Darklighter  │    183 │    84.0 │ black         │ … │\n│ 23.245985 │ Obi-Wan Kenobi     │    182 │    77.0 │ auburn, white │ … │\n│         … │ …                  │      … │       … │ …             │ … │\n└───────────┴────────────────────┴────────┴─────────┴───────────────┴───┘\n```\n\n\n:::\n:::\n\n\n## Summarize values with `aggregate()`\n\nTo summarize tables, dplyr has the verbs `summarise`/`summarize`:\n\nIn dplyr:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>%\n    summarise(height = mean(height, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  height\n   <dbl>\n1   174.\n```\n\n\n:::\n:::\n\n\nIn Ibis, the corresponding verb is `aggregate`:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars.aggregate(height = _.height.mean())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━┓\n┃ height     ┃\n┡━━━━━━━━━━━━┩\n│ float64    │\n├────────────┤\n│ 174.358025 │\n└────────────┘\n```\n\n\n:::\n:::\n\n\n**Note**: Throughout this guide, where dplyr uses R generics, Ibis uses Python\nmethods.  In the previous code cell, `aggregate` is a method on a _table_ and\n`mean` is a method on a _column_.  If you want to perform aggregations on\nmultiple columns, you can call the method that you want on the column you want\nto apply it to.\n\n## Join tables with `left_join()`\n\nTo demonstrate how to do joins with Ibis, we'll load two more example datasets\nthat also come from the example datasets included in dplyr:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nband_members = ibis.examples.band_members.fetch()\nband_instruments = ibis.examples.band_instruments.fetch()\n```\n:::\n\n\nIn dplyr, we can perform a left join of these two tables like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members |>\n    left_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n\n\n:::\n:::\n\n\nIn Ibis:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nband_members.left_join(band_instruments, \"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━┓\n┃ name   ┃ band    ┃ name_right ┃ plays  ┃\n┡━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━┩\n│ string │ string  │ string     │ string │\n├────────┼─────────┼────────────┼────────┤\n│ John   │ Beatles │ John       │ guitar │\n│ Paul   │ Beatles │ Paul       │ bass   │\n│ Mick   │ Stones  │ NULL       │ NULL   │\n└────────┴─────────┴────────────┴────────┘\n```\n\n\n:::\n:::\n\n\nThere are two main differences between Ibis and dplyr here:\n\n- Ibis requires us to explicitly specify our join key (\"name\", in this example)\n  whereas in dplyr, if the join key is missing, we get the natural join of the\n  two tables which joins across all shared column names\n- Ibis keeps columns for join keys from each table whereas dplyr does not by\n  default\n\nTo replicate the result we'd get by default in dplyr but using Ibis, we need to\nincorporate two other verbs we've already seen in this tutorial:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(\n    band_members\n        .left_join(band_instruments, \"name\")\n        .select(~s.contains(\"_right\"))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━┳━━━━━━━━━┳━━━━━━━━┓\n┃ name   ┃ band    ┃ plays  ┃\n┡━━━━━━━━╇━━━━━━━━━╇━━━━━━━━┩\n│ string │ string  │ string │\n├────────┼─────────┼────────┤\n│ John   │ Beatles │ guitar │\n│ Paul   │ Beatles │ bass   │\n│ Mick   │ Stones  │ NULL   │\n└────────┴─────────┴────────┘\n```\n\n\n:::\n:::\n\n\n## Pivot data with `pivot_wider()` and `pivot_longer()`\n\ndplyr users are likely to be familiar with the `pivot_wider` and `pivot_longer`\nfunctions from the [tidyr](https://tidyr.tidyverse.org) package which convert\ntables between wide and long formats, respectively.\n\n`pivot_longer` in dplyr + tidyr:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n\nstarwars_colors <-\n    starwars |>\n        select(name, matches(\"color\")) |>\n        pivot_longer(matches(\"color\"), names_to = \"attribute\", values_to = \"color\")\n```\n:::\n\n\nIn Ibis:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars_colors = (\n    starwars\n        .select(\"name\", s.matches(\"color\"))\n        .pivot_longer(s.matches(\"color\"), names_to=\"attribute\", values_to=\"color\")\n)\n\nstarwars_colors\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━┓\n┃ name           ┃ attribute  ┃ color       ┃\n┡━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━┩\n│ string         │ string     │ string      │\n├────────────────┼────────────┼─────────────┤\n│ Luke Skywalker │ hair_color │ blond       │\n│ Luke Skywalker │ skin_color │ fair        │\n│ Luke Skywalker │ eye_color  │ blue        │\n│ C-3PO          │ hair_color │ NULL        │\n│ C-3PO          │ skin_color │ gold        │\n│ C-3PO          │ eye_color  │ yellow      │\n│ R2-D2          │ hair_color │ NULL        │\n│ R2-D2          │ skin_color │ white, blue │\n│ R2-D2          │ eye_color  │ red         │\n│ Darth Vader    │ hair_color │ none        │\n│ …              │ …          │ …           │\n└────────────────┴────────────┴─────────────┘\n```\n\n\n:::\n:::\n\n\nAnd `pivot_wider`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars_colors |>\n    pivot_wider(names_from = \"attribute\", values_from = \"color\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 4\n   name               hair_color    skin_color  eye_color\n   <chr>              <chr>         <chr>       <chr>    \n 1 Luke Skywalker     blond         fair        blue     \n 2 C-3PO              <NA>          gold        yellow   \n 3 R2-D2              <NA>          white, blue red      \n 4 Darth Vader        none          white       yellow   \n 5 Leia Organa        brown         light       brown    \n 6 Owen Lars          brown, grey   light       blue     \n 7 Beru Whitesun lars brown         light       blue     \n 8 R5-D4              <NA>          white, red  red      \n 9 Biggs Darklighter  black         light       brown    \n10 Obi-Wan Kenobi     auburn, white fair        blue-gray\n# ℹ 77 more rows\n```\n\n\n:::\n:::\n\n\nIn Ibis:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(\n    starwars_colors.\n        pivot_wider(names_from=\"attribute\", values_from=\"color\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n┏━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━┓\n┃ name               ┃ hair_color    ┃ skin_color  ┃ eye_color ┃\n┡━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━┩\n│ string             │ string        │ string      │ string    │\n├────────────────────┼───────────────┼─────────────┼───────────┤\n│ Luke Skywalker     │ blond         │ fair        │ blue      │\n│ C-3PO              │ NULL          │ gold        │ yellow    │\n│ R2-D2              │ NULL          │ white, blue │ red       │\n│ Darth Vader        │ none          │ white       │ yellow    │\n│ Leia Organa        │ brown         │ light       │ brown     │\n│ Owen Lars          │ brown, grey   │ light       │ blue      │\n│ Beru Whitesun lars │ brown         │ light       │ blue      │\n│ R5-D4              │ NULL          │ white, red  │ red       │\n│ Biggs Darklighter  │ black         │ light       │ brown     │\n│ Obi-Wan Kenobi     │ auburn, white │ fair        │ blue-gray │\n│ …                  │ …             │ …           │ …         │\n└────────────────────┴───────────────┴─────────────┴───────────┘\n```\n\n\n:::\n:::\n\n\n## Next Steps\n\nNow that you've gotten an introduction to the common differences between dplyr\nand Ibis, head over to [Getting started with ibis](./getting_started.qmd) for a\nfull introduction. If you're familiar with SQL, check out [Ibis for SQL\nusers](./ibis-for-sql-users.qmd). If you're\nfamiliar with pandas, take a look at [Ibis for pandas\nusers](./ibis-for-pandas-users.qmd)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}