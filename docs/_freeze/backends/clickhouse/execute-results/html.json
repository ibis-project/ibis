{
  "hash": "d7d652378e73534de8400a7133016093",
  "result": {
    "markdown": "---\nexecute:\n  freeze: auto\ntitle: ClickHouse\n---\n\n\n\n\n\n[https://clickhouse.com](https://clickhouse.com)\n\n![](https://img.shields.io/badge/memtables-native-green?style=flat-square) ![](https://img.shields.io/badge/inputs-ClickHouse tables-blue?style=flat-square) ![](https://img.shields.io/badge/outputs-ClickHouse tables | CSV | pandas | Parquet | PyArrow-orange?style=flat-square)\n\n## Install\n\nInstall Ibis and dependencies for the ClickHouse backend:\n\n::: {.panel-tabset}\n\n## `pip`\n\nInstall with the `clickhouse` extra:\n\n```{.bash}\npip install 'ibis-framework[clickhouse]'\n```\n\nAnd connect:\n\n```{.python}\nimport ibis\n\ncon = ibis.clickhouse.connect()  # <1>\n```\n\n1. Adjust connection parameters as needed.\n\n## `conda`\n\nInstall for ClickHouse:\n\n```{.bash}\nconda install -c conda-forge ibis-clickhouse\n```\n\nAnd connect:\n\n```{.python}\nimport ibis\n\ncon = ibis.clickhouse.connect()  # <1>\n```\n\n1. Adjust connection parameters as needed.\n\n## `mamba`\n\nInstall for ClickHouse:\n\n```{.bash}\nmamba install -c conda-forge ibis-clickhouse\n```\n\nAnd connect:\n\n```{.python}\nimport ibis\n\ncon = ibis.clickhouse.connect()  # <1>\n```\n\n1. Adjust connection parameters as needed.\n\n:::\n\n## Connect\n\n### `ibis.clickhouse.connect`\n\n```python\ncon = ibis.clickhouse.connect(\n    user=\"username\",\n    password=\"password\",\n    host=\"hostname\",\n)\n```\n\n::: {.callout-note}\n`ibis.clickhouse.connect` is a thin wrapper around [`ibis.backends.clickhouse.Backend.do_connect`](#ibis.backends.clickhouse.Backend.do_connect).\n:::\n\n### Connection Parameters\n\n\n\n\n#### do_connect { #ibis.backends.clickhouse.Backend.do_connect }\n\n\n`do_connect(self, host='localhost', port=None, database='default', user='default', password='', client_name='ibis', secure=None, compression=True, **kwargs)`\n\n\nCreate a ClickHouse client for use with Ibis.\n\n##### Parameters\n\n| Name          | Type         | Description                                                                                                                           | Default       |\n|---------------|--------------|---------------------------------------------------------------------------------------------------------------------------------------|---------------|\n| `host`        | str          | Host name of the clickhouse server                                                                                                    | `'localhost'` |\n| `port`        | int \\| None  | ClickHouse HTTP server's port. If not passed, the value depends on whether `secure` is `True` or `False`.                             | `None`        |\n| `database`    | str          | Default database when executing queries                                                                                               | `'default'`   |\n| `user`        | str          | User to authenticate with                                                                                                             | `'default'`   |\n| `password`    | str          | Password to authenticate with                                                                                                         | `''`          |\n| `client_name` | str          | Name of client that will appear in clickhouse server logs                                                                             | `'ibis'`      |\n| `secure`      | bool \\| None | Whether or not to use an authenticated endpoint                                                                                       | `None`        |\n| `compression` | str \\| bool  | The kind of compression to use for requests. See https://clickhouse.com/docs/en/integrations/python#compression for more information. | `True`        |\n| `kwargs`      | Any          | Client specific keyword arguments                                                                                                     | `{}`          |\n\n##### Examples\n\n```python\n>>> import ibis\n>>> client = ibis.clickhouse.connect()\n>>> client\n<ibis.clickhouse.client.ClickhouseClient object at 0x...>\n```\n\n\n### `ibis.connect` URL format\n\nIn addition to `ibis.clickhouse.connect`, you can also connect to ClickHouse by\npassing a properly formatted ClickHouse connection URL to `ibis.connect`\n\n```python\ncon = ibis.connect(f\"clickhouse://{user}:{password}@{host}:{port}?secure={secure}\")\n```\n\n## ClickHouse playground\n\nClickHouse provides a free playground with several datasets that you can connect to using Ibis:\n\n::: {#7d05ccde .cell execution_count=2}\n``` {.python .cell-code}\nfrom ibis.interactive import *\n\ncon = ibis.connect(\"clickhouse://play:clickhouse@play.clickhouse.com:443?secure=True\")\nactors = con.table(\"actors\")\nactors\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> login            </span>┃<span style=\"font-weight: bold\"> type    </span>┃<span style=\"font-weight: bold\"> site_admin </span>┃<span style=\"font-weight: bold\"> name         </span>┃<span style=\"font-weight: bold\"> company             </span>┃<span style=\"font-weight: bold\"> blog                </span>┃<span style=\"font-weight: bold\"> location          </span>┃<span style=\"font-weight: bold\"> email                     </span>┃<span style=\"font-weight: bold\"> hireable </span>┃<span style=\"font-weight: bold\"> bio                                       </span>┃<span style=\"font-weight: bold\"> twitter_username </span>┃<span style=\"font-weight: bold\"> public_repos </span>┃<span style=\"font-weight: bold\"> public_gists </span>┃<span style=\"font-weight: bold\"> followers </span>┃<span style=\"font-weight: bold\"> following </span>┃<span style=\"font-weight: bold\"> created_at          </span>┃<span style=\"font-weight: bold\"> updated_at          </span>┃\n┡━━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!string</span>          │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!boolean</span>   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!string</span>      │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!string</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!string</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!string</span>           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!string</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!boolean</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!string</span>                                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!string</span>          │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!int64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!int64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!int64</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!int64</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!timestamp(0)</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">!timestamp(0)</span>       │\n├──────────────────┼─────────┼────────────┼──────────────┼─────────────────────┼─────────────────────┼───────────────────┼───────────────────────────┼──────────┼───────────────────────────────────────────┼──────────────────┼──────────────┼──────────────┼───────────┼───────────┼─────────────────────┼─────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">0000Blaze       </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">User   </span> │ False      │ <span style=\"color: #008000; text-decoration-color: #008000\">RohanChhetry</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Pulchowk Campus,IOE</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">rohanchhetry.com.np</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Sanepa , Lalitpur</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                         │ True     │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                                         │ <span style=\"color: #008000; text-decoration-color: #008000\">rohanchhetry9   </span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">56</span> │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">57</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">83</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2019-02-24 02:31:21</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2023-07-30 11:30:14</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">007developforfun</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">User   </span> │ False      │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>            │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                 │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                         │ False    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                                         │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2015-08-07 11:28:01</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2022-08-12 08:45:30</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">00arthur00      </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">User   </span> │ False      │ <span style=\"color: #008000; text-decoration-color: #008000\">Arthur      </span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #008000; text-decoration-color: #008000\">Beijing, China   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">yang_yapo@126.com        </span> │ False    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                                         │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">72</span> │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">61</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2017-04-01 13:37:01</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2023-06-15 14:50:12</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">010001          </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">User   </span> │ False      │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>            │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                 │ <span style=\"color: #008000; text-decoration-color: #008000\">1025394547@qq.com        </span> │ False    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                                         │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">15</span> │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2015-02-05 03:11:59</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2023-03-17 06:07:01</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">01001101ilad    </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">User   </span> │ False      │ <span style=\"color: #008000; text-decoration-color: #008000\">Milad       </span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                 │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                         │ False    │ <span style=\"color: #008000; text-decoration-color: #008000\">Programmer, Writer and Full-Time Learner.</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10</span> │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2016-10-31 19:12:55</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2023-07-24 11:43:03</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">010227leo       </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">User   </span> │ False      │ <span style=\"color: #008000; text-decoration-color: #008000\">zucker      </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">trip.com           </span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #008000; text-decoration-color: #008000\">Shanghai, China  </span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                         │ False    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                                         │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">11</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2012-01-11 06:23:15</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2023-07-24 03:35:26</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">010ric          </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">User   </span> │ False      │ <span style=\"color: #008000; text-decoration-color: #008000\">Mario Turic </span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #008000; text-decoration-color: #008000\">Munich           </span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                         │ True     │ <span style=\"color: #008000; text-decoration-color: #008000\">Enthusiast and Maker                     </span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">19</span> │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">23</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">68</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2017-10-27 14:00:07</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2023-08-04 18:44:35</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">01egen          </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">User   </span> │ False      │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>            │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                 │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                         │ False    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                                         │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2019-02-27 08:59:00</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2023-06-20 04:02:51</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">0400H           </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">User   </span> │ False      │ <span style=\"color: #008000; text-decoration-color: #008000\">0400H       </span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #008000; text-decoration-color: #008000\">Shanghai         </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">git@0400h.cn             </span> │ True     │ <span style=\"color: #008000; text-decoration-color: #008000\">HPC &amp; MLSys &amp; PPML                       </span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17</span> │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2015-12-20 17:38:00</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2023-07-21 11:28:22</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">0442A403        </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">User   </span> │ False      │ <span style=\"color: #008000; text-decoration-color: #008000\">Damir Petrov</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                   │ <span style=\"color: #008000; text-decoration-color: #008000\">Moscow           </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">petrovdamir2235@gmail.com</span> │ False    │ <span style=\"color: #008000; text-decoration-color: #008000\">HSE student                              </span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">19</span> │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">15</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">30</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2016-11-05 18:59:38</span> │ <span style=\"color: #800080; text-decoration-color: #800080\">2023-06-22 06:08:50</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>                │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>          │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>            │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>                 │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>                         │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>                                         │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>                │            <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │            <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │         <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │         <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>                   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>                   │\n└──────────────────┴─────────┴────────────┴──────────────┴─────────────────────┴─────────────────────┴───────────────────┴───────────────────────────┴──────────┴───────────────────────────────────────────┴──────────────────┴──────────────┴──────────────┴───────────┴───────────┴─────────────────────┴─────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n\n\n## `clickhouse.Backend` { #ibis.backends.clickhouse.Backend }\n\n\n### close { #ibis.backends.clickhouse.Backend.close }\n\n\n`close(self)`\n\n\nClose ClickHouse connection.\n\n\n### compile { #ibis.backends.clickhouse.Backend.compile }\n\n\n`compile(self, expr, limit=None, params=None, **kwargs)`\n\n\nCompile an Ibis expression to a ClickHouse SQL string.\n\n\n### create_database { #ibis.backends.clickhouse.Backend.create_database }\n\n\n`create_database(self, name, *, force=False, engine='Atomic')`\n\n\nCreate a new database.\n\n#### Parameters\n\n| Name    | Type   | Description                                                        | Default    |\n|---------|--------|--------------------------------------------------------------------|------------|\n| `name`  | str    | Name of the new database.                                          | _required_ |\n| `force` | bool   | If `False`, an exception is raised if the database already exists. | `False`    |\n\n\n### create_table { #ibis.backends.clickhouse.Backend.create_table }\n\n\n`create_table(self, name, obj=None, *, schema=None, database=None, temp=False, overwrite=False, engine='MergeTree', order_by=None, partition_by=None, sample_by=None, settings=None)`\n\n\nCreate a table in a ClickHouse database.\n\n#### Parameters\n\n| Name           | Type                                         | Description                                                                                                                                                                                                                                                                                                                                               | Default       |\n|----------------|----------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|\n| `name`         | str                                          | Name of the table to create                                                                                                                                                                                                                                                                                                                               | _required_    |\n| `obj`          | pd.DataFrame \\| pa.Table \\| ir.Table \\| None | Optional data to create the table with                                                                                                                                                                                                                                                                                                                    | `None`        |\n| `schema`       | ibis.Schema \\| None                          | Optional names and types of the table                                                                                                                                                                                                                                                                                                                     | `None`        |\n| `database`     | str \\| None                                  | Database to create the table in                                                                                                                                                                                                                                                                                                                           | `None`        |\n| `temp`         | bool                                         | Create a temporary table. This is not yet supported, and exists for API compatibility.                                                                                                                                                                                                                                                                    | `False`       |\n| `overwrite`    | bool                                         | Whether to overwrite the table                                                                                                                                                                                                                                                                                                                            | `False`       |\n| `engine`       | str                                          | The table engine to use. See [ClickHouse's `CREATE TABLE` documentation](https://clickhouse.com/docs/en/sql-reference/statements/create/table) for specifics. Defaults to [`MergeTree`](https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree) with `ORDER BY tuple()` because `MergeTree` is the most feature-complete engine. | `'MergeTree'` |\n| `order_by`     | Iterable\\[str\\] \\| None                      | String column names to order by. Required for some table engines like `MergeTree`.                                                                                                                                                                                                                                                                        | `None`        |\n| `partition_by` | Iterable\\[str\\] \\| None                      | String column names to partition by                                                                                                                                                                                                                                                                                                                       | `None`        |\n| `sample_by`    | str \\| None                                  | String column names to sample by                                                                                                                                                                                                                                                                                                                          | `None`        |\n| `settings`     | Mapping\\[str, Any\\] \\| None                  | Key-value pairs of settings for table creation                                                                                                                                                                                                                                                                                                            | `None`        |\n\n#### Returns\n\n| Type   | Description   |\n|--------|---------------|\n| Table  | The new table |\n\n\n### create_view { #ibis.backends.clickhouse.Backend.create_view }\n\n\n`create_view(self, name, obj, *, database=None, overwrite=False)`\n\n\nCreate a new view from an expression.\n\n#### Parameters\n\n| Name        | Type        | Description                                                                                          | Default    |\n|-------------|-------------|------------------------------------------------------------------------------------------------------|------------|\n| `name`      | str         | Name of the new view.                                                                                | _required_ |\n| `obj`       | ir.Table    | An Ibis table expression that will be used to create the view.                                       | _required_ |\n| `database`  | str \\| None | Name of the database where the view will be created, if not provided the database's default is used. | `None`     |\n| `overwrite` | bool        | Whether to clobber an existing view with the same name                                               | `False`    |\n\n#### Returns\n\n| Type   | Description                |\n|--------|----------------------------|\n| Table  | The view that was created. |\n\n\n### drop_database { #ibis.backends.clickhouse.Backend.drop_database }\n\n\n`drop_database(self, name, *, force=False)`\n\n\nDrop a database with name `name`.\n\n#### Parameters\n\n| Name    | Type   | Description                                                        | Default    |\n|---------|--------|--------------------------------------------------------------------|------------|\n| `name`  | str    | Database to drop.                                                  | _required_ |\n| `force` | bool   | If `False`, an exception is raised if the database does not exist. | `False`    |\n\n\n### drop_table { #ibis.backends.clickhouse.Backend.drop_table }\n\n\n`drop_table(self, name, database=None, force=False)`\n\n\nDrop a table.\n\n#### Parameters\n\n| Name       | Type        | Description                                                      | Default    |\n|------------|-------------|------------------------------------------------------------------|------------|\n| `name`     | str         | Name of the table to drop.                                       | _required_ |\n| `database` | str \\| None | Name of the database where the table exists, if not the default. | `None`     |\n| `force`    | bool        | If `False`, an exception is raised if the table does not exist.  | `False`    |\n\n\n### drop_view { #ibis.backends.clickhouse.Backend.drop_view }\n\n\n`drop_view(self, name, *, database=None, force=False)`\n\n\nDrop a view.\n\n#### Parameters\n\n| Name       | Type        | Description                                                     | Default    |\n|------------|-------------|-----------------------------------------------------------------|------------|\n| `name`     | str         | Name of the view to drop.                                       | _required_ |\n| `database` | str \\| None | Name of the database where the view exists, if not the default. | `None`     |\n| `force`    | bool        | If `False`, an exception is raised if the view does not exist.  | `False`    |\n\n\n### execute { #ibis.backends.clickhouse.Backend.execute }\n\n\n`execute(self, expr, limit='default', external_tables=None, **kwargs)`\n\n\nExecute an expression.\n\n\n### get_schema { #ibis.backends.clickhouse.Backend.get_schema }\n\n\n`get_schema(self, table_name, database=None)`\n\n\nReturn a Schema object for the indicated table and database.\n\n#### Parameters\n\n| Name         | Type        | Description                                                                           | Default    |\n|--------------|-------------|---------------------------------------------------------------------------------------|------------|\n| `table_name` | str         | May **not** be fully qualified. Use `database` if you want to qualify the identifier. | _required_ |\n| `database`   | str \\| None | Database name                                                                         | `None`     |\n\n#### Returns\n\n| Type       | Description   |\n|------------|---------------|\n| sch.Schema | Ibis schema   |\n\n\n### has_operation { #ibis.backends.clickhouse.Backend.has_operation }\n\n\n`has_operation(cls, operation)`\n\n\nReturn whether the backend implements support for `operation`.\n\n#### Parameters\n\n| Name        | Type              | Description                            | Default    |\n|-------------|-------------------|----------------------------------------|------------|\n| `operation` | type\\[ops.Value\\] | A class corresponding to an operation. | _required_ |\n\n#### Returns\n\n| Type   | Description                                   |\n|--------|-----------------------------------------------|\n| bool   | Whether the backend implements the operation. |\n\n#### Examples\n\n```python\n>>> import ibis\n>>> import ibis.expr.operations as ops\n>>> ibis.sqlite.has_operation(ops.ArrayIndex)\nFalse\n>>> ibis.postgres.has_operation(ops.ArrayIndex)\nTrue\n```\n\n\n### insert { #ibis.backends.clickhouse.Backend.insert }\n\n\n`insert(self, name, obj, settings=None, **kwargs)`\n\n\n\n\n\n### list_databases { #ibis.backends.clickhouse.Backend.list_databases }\n\n\n`list_databases(self, like=None)`\n\n\nList existing databases in the current connection.\n\n#### Parameters\n\n| Name   | Type        | Description                                                           | Default   |\n|--------|-------------|-----------------------------------------------------------------------|-----------|\n| `like` | str \\| None | A pattern in Python's regex format to filter returned database names. | `None`    |\n\n#### Returns\n\n| Type        | Description                                                                                         |\n|-------------|-----------------------------------------------------------------------------------------------------|\n| list\\[str\\] | The database names that exist in the current connection, that match the `like` pattern if provided. |\n\n\n### list_tables { #ibis.backends.clickhouse.Backend.list_tables }\n\n\n`list_tables(self, like=None, database=None)`\n\n\nReturn the list of table names in the current database.\n\nFor some backends, the tables may be files in a directory,\nor other equivalent entities in a SQL database.\n\n#### Parameters\n\n| Name       | Type        | Description                                                                            | Default   |\n|------------|-------------|----------------------------------------------------------------------------------------|-----------|\n| `like`     | str \\| None | A pattern in Python's regex format.                                                    | `None`    |\n| `database` | str \\| None | The database from which to list tables. If not provided, the current database is used. | `None`    |\n\n#### Returns\n\n| Type        | Description                                                |\n|-------------|------------------------------------------------------------|\n| list\\[str\\] | The list of the table names that match the pattern `like`. |\n\n\n### raw_sql { #ibis.backends.clickhouse.Backend.raw_sql }\n\n\n`raw_sql(self, query, external_tables=None, **kwargs)`\n\n\nExecute a SQL string `query` against the database.\n\n#### Parameters\n\n| Name              | Type                                 | Description                                                                             | Default    |\n|-------------------|--------------------------------------|-----------------------------------------------------------------------------------------|------------|\n| `query`           | str \\| sg.exp.Expression             | Raw SQL string                                                                          | _required_ |\n| `external_tables` | Mapping\\[str, pd.DataFrame\\] \\| None | Mapping of table name to pandas DataFrames providing external datasources for the query | `None`     |\n| `kwargs`          |                                      | Backend specific query arguments                                                        | `{}`       |\n\n#### Returns\n\n| Type   | Description       |\n|--------|-------------------|\n| Cursor | Clickhouse cursor |\n\n\n### read_csv { #ibis.backends.clickhouse.Backend.read_csv }\n\n\n`read_csv(self, path, table_name=None, engine='MergeTree', **kwargs)`\n\n\nRegister a CSV file as a table in the current backend.\n\n#### Parameters\n\n| Name         | Type        | Description                                                                                    | Default    |\n|--------------|-------------|------------------------------------------------------------------------------------------------|------------|\n| `path`       | str \\| Path | The data source. A string or Path to the CSV file.                                             | _required_ |\n| `table_name` | str \\| None | An optional name to use for the created table. This defaults to a sequentially generated name. | `None`     |\n| `**kwargs`   | Any         | Additional keyword arguments passed to the backend loading function.                           | `{}`       |\n\n#### Returns\n\n| Type     | Description               |\n|----------|---------------------------|\n| ir.Table | The just-registered table |\n\n\n### read_parquet { #ibis.backends.clickhouse.Backend.read_parquet }\n\n\n`read_parquet(self, path, table_name=None, engine='MergeTree', **kwargs)`\n\n\nRegister a parquet file as a table in the current backend.\n\n#### Parameters\n\n| Name         | Type        | Description                                                                                    | Default    |\n|--------------|-------------|------------------------------------------------------------------------------------------------|------------|\n| `path`       | str \\| Path | The data source.                                                                               | _required_ |\n| `table_name` | str \\| None | An optional name to use for the created table. This defaults to a sequentially generated name. | `None`     |\n| `**kwargs`   | Any         | Additional keyword arguments passed to the backend loading function.                           | `{}`       |\n\n#### Returns\n\n| Type     | Description               |\n|----------|---------------------------|\n| ir.Table | The just-registered table |\n\n\n### sql { #ibis.backends.clickhouse.Backend.sql }\n\n\n`sql(self, query, schema=None, dialect=None)`\n\n\n\n\n\n### table { #ibis.backends.clickhouse.Backend.table }\n\n\n`table(self, name, database=None)`\n\n\nConstruct a table expression.\n\n#### Parameters\n\n| Name       | Type        | Description   | Default    |\n|------------|-------------|---------------|------------|\n| `name`     | str         | Table name    | _required_ |\n| `database` | str \\| None | Database name | `None`     |\n\n#### Returns\n\n| Type   | Description      |\n|--------|------------------|\n| Table  | Table expression |\n\n\n### to_pyarrow { #ibis.backends.clickhouse.Backend.to_pyarrow }\n\n\n`to_pyarrow(self, expr, *, params=None, limit=None, external_tables=None, **kwargs)`\n\n\nExecute expression and return results in as a pyarrow table.\n\nThis method is eager and will execute the associated expression\nimmediately.\n\n#### Parameters\n\n| Name     | Type                              | Description                                                                                                        | Default    |\n|----------|-----------------------------------|--------------------------------------------------------------------------------------------------------------------|------------|\n| `expr`   | ir.Expr                           | Ibis expression to export to pyarrow                                                                               | _required_ |\n| `params` | Mapping\\[ir.Scalar, Any\\] \\| None | Mapping of scalar parameter expressions to value.                                                                  | `None`     |\n| `limit`  | int \\| str \\| None                | An integer to effect a specific row limit. A value of `None` means \"no limit\". The default is in `ibis/config.py`. | `None`     |\n| `kwargs` | Any                               | Keyword arguments                                                                                                  | `{}`       |\n\n#### Returns\n\n| Type   | Description                                                     |\n|--------|-----------------------------------------------------------------|\n| Table  | A pyarrow table holding the results of the executed expression. |\n\n\n### to_pyarrow_batches { #ibis.backends.clickhouse.Backend.to_pyarrow_batches }\n\n\n`to_pyarrow_batches(self, expr, *, limit=None, params=None, external_tables=None, chunk_size=1000000, **_)`\n\n\nExecute expression and return an iterator of pyarrow record batches.\n\nThis method is eager and will execute the associated expression\nimmediately.\n\n#### Parameters\n\n| Name              | Type                              | Description                                                                                                        | Default    |\n|-------------------|-----------------------------------|--------------------------------------------------------------------------------------------------------------------|------------|\n| `expr`            | ir.Expr                           | Ibis expression to export to pyarrow                                                                               | _required_ |\n| `limit`           | int \\| str \\| None                | An integer to effect a specific row limit. A value of `None` means \"no limit\". The default is in `ibis/config.py`. | `None`     |\n| `params`          | Mapping\\[ir.Scalar, Any\\] \\| None | Mapping of scalar parameter expressions to value.                                                                  | `None`     |\n| `external_tables` | Mapping\\[str, Any\\] \\| None       | External data                                                                                                      | `None`     |\n| `chunk_size`      | int                               | Maximum number of row to return in a single chunk                                                                  | `1000000`  |\n\n#### Returns\n\n| Type    | Description       |\n|---------|-------------------|\n| results | RecordBatchReader |\n\n#### Notes\n\nThere are a variety of ways to implement clickhouse -> record batches.\n\n1. FORMAT ArrowStream -> record batches via raw_query\n   This has the same type conversion problem(s) as `to_pyarrow`.\n   It's harder to address due to lack of `cast` on `RecordBatch`.\n   However, this is a ClickHouse problem: we should be able to get\n   string data out without a bunch of settings/permissions rigmarole.\n2. Native -> Python objects -> pyarrow batches\n   This is what is implemented, using `query_column_block_stream`.\n3. Native -> Python objects -> DataFrame chunks -> pyarrow batches\n   This is not implemented because it adds an unnecessary pandas step in\n   between Python object -> arrow. We can go directly to record batches\n   without pandas in the middle.\n\n\n### truncate_table { #ibis.backends.clickhouse.Backend.truncate_table }\n\n\n`truncate_table(self, name, database=None)`\n\n\n\n\n\n",
    "supporting": [
      "clickhouse_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}