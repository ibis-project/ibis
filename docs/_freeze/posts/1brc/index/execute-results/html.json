{
  "hash": "2535533709f9050aabea0ff0ff5b2649",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Using one Python dataframe API to take the billion row challenge with DuckDB, Polars, and DataFusion\"\nauthor: \"Cody\"\ndate: \"2024-01-40\"\ncategories:\n    - blog\n    - duckdb\n    - polars\n    - datafusion\n---\n\n## Overview\n\nThis is an implementation of the [The One Billion Row\nChallenge](https://www.morling.dev/blog/one-billion-row-challenge/):\n\n> Let’s kick off 2024 true coder style—​I’m excited to announce the One Billion\n> Row Challenge (1BRC), running from Jan 1 until Jan 31.\n\n> Your mission, should you decide to accept it, is deceptively simple: write a\n> Java program for retrieving temperature measurement values from a text file and\n> calculating the min, mean, and max temperature per weather station. There’s just\n> one caveat: the file has 1,000,000,000 rows!\n\nI haven't written Java since dropping a computer science course my second year\nof college that forced us to do functional programming exclusively in Java.\nHowever, I'll gladly take the challenge in Python using Ibis! In fact, I did\nsomething like this (generating a billion rows with 26 columns of random numbers\nand doing basic aggregations) to test out DuckDB and Polars.\n\nIn this blog, we'll demonstrate how Ibis provides a single Python dataframe API\nto take the billion row challenge with DuckDB, Polars, and DataFusion.\n\n## Setup\n\nWe need to generate the data from the challenge. First, clone the repo:\n\n```{.bash}\ngh repo clone gunnarmorling/1brc\n```\n\nThen change into the Python directory and run the generation script with the\nnumber of rows you want to generate:\n\n```{.bash}\ncd 1brc/src/main/python\npython create_measurements.py 1_000_000_000\n```\n\nThis will generate a file called `measurements.txt` in the `data` directory at\nthe root of the repo. It is 15GB on disk:\n\n```{.bash}\n(venv) cody@voda 1brc % du 1brc/data/*\n 15G    1brc/data/measurements.txt\n808K    1brc/data/weather_stations.csv\n```\n\nAnd consists of one billion rows with two columns separated by a semicolon:\n\n```{.bash}\n(venv) cody@voda 1brc % head 1brc/data/measurements.txt \nKusugal;-67.2\nIpil;-88.6\nSohna;-31.2\nLubuagan;-2.3\nSzentes;29.2\nSylvan Lake;-70.7\nAmbato;-35.2\nBerkine;97.0\nWernau;73.4\nKennewick;-19.9\n```\n\nAlso, you'll need to install Ibis with the three backends we'll use:\n\n```{.bash}\npip install ibis-framework[duckdb,polars,datafusion]\n```\n\n## Understanding Ibis\n\nIbis provides a standard dataframe API decoupled from the execution engine. It\ncompiles Ibis expressions to a form of intermediary representation (often SQL)\nthat can be executed by different backends.\n\nThis allows us to write a single Ibis expression to complete the challenge with\nmany different execution engine backends.\n\n:::{.callout-warning}\nWhile Ibis does its best to abstract away the differences between backends, this\ncannot be done in some areas like data input and output. For example, the\n`read_csv` function across various backends (in their SQL and Python forms) have\ndifferent parameters. We'll handle that with different `kwargs` dictionaries for\nthese backends in this post.\n\nIn general, besides creating a connection and data input/output, the Ibis API is\nthe same across backends.\n:::\n\n## Completing the challenge thrice\n\nWe'll use three great options for local backends -- DuckDB, Polars, and\nDataFusion -- to complete the challenge.\n\n### Setup\n\nBefore we get started, we'll make some imports, turn on interactive mode, and\ndefine the `kwargs` dictionariy for the backends corresponding to their\n`read_csv` function:\n\n::: {#4dcdf939 .cell execution_count=1}\n``` {.python .cell-code}\nimport ibis\nimport polars as pl\nimport pyarrow as pa\n\nibis.options.interactive = True\n\nduckdb_kwargs = {\n    \"delim\": \";\",\n    \"header\": False,\n    \"columns\": {\"station\": \"VARCHAR\", \"temperature\": \"DOUBLE\"},\n}\n\npolars_kwargs = {\n    \"separator\": \";\",\n    \"has_header\": False,\n    \"new_columns\": [\"station\", \"temperature\"],\n    \"schema\": {\"station\": pl.Utf8, \"temperature\": pl.Float64},\n}\n\ndatafusion_kwargs = {\n    \"delimiter\": \";\",\n    \"has_header\": False,\n    \"schema\": pa.schema(\n        [\n            (\n                \"station\",\n                pa.string(),\n            ),\n            (\n                \"temperature\",\n                pa.float64(),\n            ),\n        ]\n    ),\n    \"file_extension\": \".txt\",\n}\n```\n:::\n\n\n### Completing the challenge\n\nLet's complete the challenge with each backend.\n\n::: {.panel-tabset}\n\n## DuckDb\n\nFirst let's set the backend to DuckDB (redundantly since it's the default) and\nthe `kwargs` dictionary:\n\n::: {#5fd5ce08 .cell execution_count=2}\n``` {.python .cell-code}\nibis.set_backend(\"duckdb\") # <1>\nkwargs = duckdb_kwargs\n```\n:::\n\n\n1. Redundant given DuckDB is the default\n\nNext, we'll read in the data and take a look at the table:\n\n::: {#031d5f6a .cell execution_count=3}\n``` {.python .cell-code}\nt = ibis.read_csv(\"1brc/data/measurements.txt\", **kwargs)\nt.limit(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> station </span>┃<span style=\"font-weight: bold\"> temperature </span>┃\n┡━━━━━━━━━╇━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>     │\n├─────────┼─────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Kusugal</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-67.2</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Ipil   </span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-88.6</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Sohna  </span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-31.2</span> │\n└─────────┴─────────────┘\n</pre>\n```\n:::\n:::\n\n\nThen let's confirm it's **a billion** rows:\n\n::: {#6e64e36b .cell execution_count=4}\n``` {.python .cell-code}\nf\"{t.count().to_pandas():,}\"\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"6da69ac729c841fda51e08f0e649cc83\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'1,000,000,000'\n```\n:::\n:::\n\n\nFinally, we'll compute the min, mean, and max temperature per weather station:\n\n::: {#2877a165 .cell execution_count=5}\n``` {.python .cell-code}\nres = (\n    t.group_by(ibis._.station)\n    .agg(\n        min_temp=ibis._.temperature.min(),\n        mean_temp=ibis._.temperature.mean(),\n        max_temp=ibis._.temperature.max(),\n    )\n    .order_by(ibis._.station.desc())\n)\nres\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"a67f927b25f6469b8e8c06d268f41cad\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> station            </span>┃<span style=\"font-weight: bold\"> min_temp </span>┃<span style=\"font-weight: bold\"> mean_temp </span>┃<span style=\"font-weight: bold\"> max_temp </span>┃\n┡━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>  │\n├────────────────────┼──────────┼───────────┼──────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">’s-Hertogenbosch  </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.021648</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">’Aïn el Hammam    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.213882</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">’Aïn Abid         </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.240846</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">’Ali Ben Sliman   </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.247012</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">‘Aqrah            </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.022524</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">‘Ajmān            </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.058018</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">‘Abasān al Kabīrah</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.367529</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Ấp Tân Ngãi       </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.163204</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Ấp Khánh Hòa      </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.015509</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Ḩā’il             </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.359516</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>                  │        <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │         <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │        <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└────────────────────┴──────────┴───────────┴──────────┘\n</pre>\n```\n:::\n:::\n\n\n## Polars\n\nFirst let's set the backend to Polars and the `kwargs` dictionary:\n\n::: {#64deab44 .cell execution_count=6}\n``` {.python .cell-code}\nibis.set_backend(\"polars\") # <1>\nkwargs = polars_kwargs\n```\n:::\n\n\n1. Set Polars as the default backend used\n\nNext, we'll read in the data and take a look at the table:\n\n::: {#c17b9c4e .cell execution_count=7}\n``` {.python .cell-code}\nt = ibis.read_csv(\"1brc/data/measurements.txt\", **kwargs)\nt.limit(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> station </span>┃<span style=\"font-weight: bold\"> temperature </span>┃\n┡━━━━━━━━━╇━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>     │\n├─────────┼─────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Kusugal</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-67.2</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Ipil   </span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-88.6</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Sohna  </span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-31.2</span> │\n└─────────┴─────────────┘\n</pre>\n```\n:::\n:::\n\n\nThen let's confirm it's **a billion** rows:\n\n::: {#ba7e5de7 .cell execution_count=8}\n``` {.python .cell-code}\nf\"{t.count().to_pandas():,}\"\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'1,000,000,000'\n```\n:::\n:::\n\n\nFinally, we'll compute the min, mean, and max temperature per weather station:\n\n::: {#33627c55 .cell execution_count=9}\n``` {.python .cell-code}\nres = (\n    t.group_by(ibis._.station)\n    .agg(\n        min_temp=ibis._.temperature.min(),\n        mean_temp=ibis._.temperature.mean(),\n        max_temp=ibis._.temperature.max(),\n    )\n    .order_by(ibis._.station.desc())\n)\nres\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> station            </span>┃<span style=\"font-weight: bold\"> min_temp </span>┃<span style=\"font-weight: bold\"> mean_temp </span>┃<span style=\"font-weight: bold\"> max_temp </span>┃\n┡━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>  │\n├────────────────────┼──────────┼───────────┼──────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">’s-Hertogenbosch  </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.021648</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">’Aïn el Hammam    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.213882</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">’Aïn Abid         </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.240846</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">’Ali Ben Sliman   </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.247012</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">‘Aqrah            </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.022524</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">‘Ajmān            </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.058018</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">‘Abasān al Kabīrah</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.367529</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Ấp Tân Ngãi       </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.163204</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Ấp Khánh Hòa      </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.015509</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Ḩā’il             </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.359516</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>                  │        <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │         <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │        <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└────────────────────┴──────────┴───────────┴──────────┘\n</pre>\n```\n:::\n:::\n\n\n## DataFusion\n\nFirst let's set the backend to DataFusion and the `kwargs` dictionary:\n\n::: {#73754bc0 .cell execution_count=10}\n``` {.python .cell-code}\nibis.set_backend(\"datafusion\") # <1>\nkwargs = datafusion_kwargs\n```\n:::\n\n\n1. Set DataFusion as the default backend used\n\nNext, we'll read in the data and take a look at the table:\n\n::: {#4064bd17 .cell execution_count=11}\n``` {.python .cell-code}\nt = ibis.read_csv(\"1brc/data/measurements.txt\", **kwargs)\nt.limit(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> station </span>┃<span style=\"font-weight: bold\"> temperature </span>┃\n┡━━━━━━━━━╇━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>     │\n├─────────┼─────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Kusugal</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-67.2</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Ipil   </span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-88.6</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Sohna  </span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-31.2</span> │\n└─────────┴─────────────┘\n</pre>\n```\n:::\n:::\n\n\nThen let's confirm it's **a billion** rows:\n\n::: {#270eb4ca .cell execution_count=12}\n``` {.python .cell-code}\nf\"{t.count().to_pandas():,}\"\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n'1,000,000,000'\n```\n:::\n:::\n\n\nFinally, we'll compute the min, mean, and max temperature per weather station:\n\n::: {#931f2ba0 .cell execution_count=13}\n``` {.python .cell-code}\nres = (\n    t.group_by(ibis._.station)\n    .agg(\n        min_temp=ibis._.temperature.min(),\n        mean_temp=ibis._.temperature.mean(),\n        max_temp=ibis._.temperature.max(),\n    )\n    .order_by(ibis._.station.desc())\n)\nres\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> station            </span>┃<span style=\"font-weight: bold\"> min_temp </span>┃<span style=\"font-weight: bold\"> mean_temp </span>┃<span style=\"font-weight: bold\"> max_temp </span>┃\n┡━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>  │\n├────────────────────┼──────────┼───────────┼──────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">’s-Hertogenbosch  </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.021648</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">’Aïn el Hammam    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.213882</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">’Aïn Abid         </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.240846</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">’Ali Ben Sliman   </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.247012</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">‘Aqrah            </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.022524</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">‘Ajmān            </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.058018</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">‘Abasān al Kabīrah</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.367529</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Ấp Tân Ngãi       </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.163204</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Ấp Khánh Hòa      </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.015509</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Ḩā’il             </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-99.9</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.359516</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">99.9</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>                  │        <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │         <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │        <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└────────────────────┴──────────┴───────────┴──────────┘\n</pre>\n```\n:::\n:::\n\n\n:::\n\n## Bonus: more billion row data generation\n\nWhile we're here, I'll share the code I've used in the past to generate a\nbillion rows of random data:\n\n```{.python}\nimport ibis\n\ncon = ibis.connect(\"duckdb://data.ddb\")\n\nROWS = 1_000_000_000\n\nsql_str = \"\"\nsql_str += \"select\\n\"\nfor c in list(map(chr, range(ord(\"a\"), ord(\"z\") + 1))):\n    sql_str += f\"  random() as {c},\\n\"\nsql_str += f\"from generate_series(1, {ROWS})\"\n\nt = con.sql(sql_str)\ncon.create_table(\"billion\", t, overwrite=True)\n```\n\nHappy coding!\n\n## Conclusion\n\nWhile the one billion row challenge isn't a great benchmark, it's a fun way to\ndemonstrate how Ibis provides a single Python dataframe API to take the billion\nrow challenge with DuckDB, Polars, and DataFusion. Feel free to try it out with\nother backends!\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script src=\"https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js\" crossorigin=\"anonymous\"></script>\n"
      ],
      "include-after-body": [
        "<script type=application/vnd.jupyter.widget-state+json>\n{\"state\":{\"481cd6be39714bf8b19f4eaa62ceda18\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":\"auto\"}},\"6da69ac729c841fda51e08f0e649cc83\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_481cd6be39714bf8b19f4eaa62ceda18\",\"max\":100,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_d48ec4e82cc742f1a4a8b3a7f2a645b8\",\"tabbable\":null,\"tooltip\":null,\"value\":100}},\"a67f927b25f6469b8e8c06d268f41cad\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_fe9b0304166544f29418ea4a6c3df892\",\"max\":100,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_af0e15da69f7483293458602729f56b3\",\"tabbable\":null,\"tooltip\":null,\"value\":100}},\"af0e15da69f7483293458602729f56b3\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":\"black\",\"description_width\":\"\"}},\"d48ec4e82cc742f1a4a8b3a7f2a645b8\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":\"black\",\"description_width\":\"\"}},\"fe9b0304166544f29418ea4a6c3df892\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":\"auto\"}}},\"version_major\":2,\"version_minor\":0}\n</script>\n"
      ]
    }
  }
}