{
  "hash": "6d8d26567c4ca7cd60cf8e5002a2dfd5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Using DuckDB for RAG\"\nauthor: \"Cody Peterson\"\ndate: \"2024-02-29\"\ncategories:\n    - blog\n    - llms\n    - duckdb\n---\n\n## Overview\n\nIn this post, we'll demonstrate retrieval-augmented generating (RAG) using Ibis,\nDuckDB, and OpenAI.\n\n::: {.callout-warning title=\"I dislike RAG as terminology\"}\nWe'll get into why, with code examples, below.\n\nThis post will be a little more opinionated than usual...\n:::\n\n## What is RAG?\n\nI was going to write my own summary, but the first thing I came across from\nGoogle was [AWS's page on\nRAG](https://aws.amazon.com/what-is/retrieval-augmented-generation/), which is\npretty good. Quoting their summary:\n\n> Retrieval-Augmented Generation (RAG) is the process of optimizing the output\n> of a large language model, so it references an authoritative knowledge base\n> outside of its training data sources before generating a response. Large\n> Language Models (LLMs) are trained on vast volumes of data and use billions of\n> parameters to generate original output for tasks like answering questions,\n> translating languages, and completing sentences. RAG extends the already\n> powerful capabilities of LLMs to specific domains or an organization's internal\n> knowledge base, all without the need to retrain the model. It is a\n> cost-effective approach to improving LLM output so it remains relevant,\n> accurate, and useful in various contexts.\n\nRight below, they explain why RAG is useful:\n\n> LLMs are a key artificial intelligence (AI) technology powering intelligent\n> chatbots and other natural language processing (NLP) applications. The goal is\n> to create bots that can answer user questions in various contexts by\n> cross-referencing authoritative knowledge sources. Unfortunately, the nature of\n> LLM technology introduces unpredictability in LLM responses. Additionally, LLM\n> training data is static and introduces a cut-off date on the knowledge it has.\n>\n> Known challenges of LLMs include:\n>\n> - Presenting false information when it does not have the answer.\n> - Presenting out-of-date or generic information when the user expects a\n specific, current response.\n> - Creating a response from non-authoritative sources.\n> - Creating inaccurate responses due to terminology confusion, wherein\n different training sources use the same terminology to talk about different\n things.\n> - You can think of the Large Language Model as an over-enthusiastic new\n employee who refuses to stay informed with current events but will always answer\n every question with absolute confidence. Unfortunately, such an attitude can\n negatively impact user trust and is not something you want your chatbots to\n emulate!\n>\n> RAG is one approach to solving some of these challenges. It redirects the LLM\n> to retrieve relevant information from authoritative, pre-determined knowledge\n> sources. Organizations have greater control over the generated text output, and\n> users gain insights into how the LLM generates the response.\n\n### What are LLMs?\n\nTo understand why RAG has become a thing, it's important to understand large\nlanguage models (LLMs) -- in particular their **context length**. LLMs are, put\nsimply, just neural networks trained on massive amounts of text data. Neural\nnetworks cannot actually work with text directly, they need numbers. So, text is\nconverted into numbers before the training process begins.\n\nIn cases like using neural networks for classification, you might take a very\nsimple approach to assign numbers to categorical strings:\n\n| category | number |\n|----------|--------|\n| dog      | 1      |\n| fish     | 2      |\n| bird     | 3      |\n\n...but this would imply ordering to the categories (\"dog\" < \"fish\" < \"bird\") and\nthat \"bird\" is more similar to \"fish\" than \"dog\". This is not the case (citation\nneeded), so we tend to one-hot encode:\n\n| category | one-hot encoding |\n|----------|------------------|\n| dog      | [1, 0, 0]        |\n| fish     | [0, 1, 0]        |\n| bird     | [0, 0, 1]        |\n\nNotice now that each category is equally distant from each other and there is no\nimplied ordering.\n\nFor LLMs, we encode text as numbers as well -- typically called **tokens**. The\ntokens are then fed into the neural network both for training and for inference.\nThe neural network is trained to predict the next token in a sequence of tokens.\n\nWhen you inference the LLM, you are effectively asking it to fill in the most\nlikely sequence of tokens (text) to complete the input text. Additional\ntechniques are used to **instruct** fine-tune LLMs to follow instructions and\nwork well in mult-turn conversational settings.\n\n**Why does any of this matter?** It's important to both understand, at a basic\nlevel, how LLMs work and what they work well at. As noted in the previous\nsection, grounding the LLM with useful information in the context is crucial to\ngetting good results. However, the beauty of LLMs (and neural networks) is\ntheir ability to generalize and learn complex tasks from data. This is why\nLLMs are so powerful -- they can, in a sense, do things typically only reserved\nfor humans. This is true in other areas for neural networks as well.\n\n### Why I dislike RAG as terminology\n\n> \"I would like to abolish the term RAG and instead just agree that we should\n> always try to provide models with the appropriate context to provide high\n> quality answers.\" - [Hamel\n> Husain](https://twitter.com/HamelHusain/status/1709740984643596768)\n\nRAG has become synonymous with turning your text data into \"embeddings\"\n(numbers), running a similarity search (e.g. cosine similarity) over those\nnumbers against input text, and taking the top `k` results to feed into the LLM.\nThis loses out on the semantic understanding LLMs are so powerful for and often\nresults in bespoke technology stacks that are unnecessary.\n\n### Context length issues\n\nWhen GPT-4 launched, it supported a context length of about 8,000 tokens.\nTypically, one word is about two tokens, so we can call this about 4,000 input\nwords. While that is a lot of words, much of the length gets taken up by the\n**system prompt** that instructs the LLM on what to do and other metadata that\nmay be used as input. In practice, 8k token context length is not much.\n\nOver time, these context lengths have been increasing -- 16k, then 32k, and now\n128k for GPT-4-turbo models. Other LLMs have even higher context lengths, with\nGoogle's Gemini family reporting 1M and 10M token context lengths. However, even\nthese large context lengths do not solve some key problems. For one, LLMs may\nignore or even be confused by context. While you can feed in a full textbook on\nmachine learning, if you're just asking for information on k-means clustering\nyou should probably only include that chapter. Additionally, you are charged\nmoney by the number of input tokens (and response tokens) and the time it takes\nto inference is proportional to that number. Regardless of the context length of\nthe model, for the foreseeable future you want to be as efficient as possible.\n\nThus, you need to have some method of retrieving and augmentign your input text\nwith the most relevant information for the task at hand.\n\n## Setup\n\nAnother reason I dislike RAG is, like traditional ML (and even software\nengineering), is that the best approach is often \"**it depends**\". What are you\ntrying to accomplish? What are your constraints on resources?\n\n### Scenario\n\nFor this blog, we'll use a scenario: we are trying to build a state-of-the-art\nexploratory data analysis (EDA) chatbot. I want to be able to ask it questions\nabout my data, have it generate accurate SQL, and run that SQL on my behalf.\n\nWe'll be using toy data (our favorite penguins dataset!) and LLM-generated\nEnglish and SQL queries, but the same principles should apply for real-world use\ncases.\n\n### Setup code\n\nFirst, we need to install the necessary packages:\n\n```bash\npip install 'ibis-framework[duckdb,examples]' openai marvin python-dotenv\n```\n\nThen import them:\n\n::: {#d3e5696e .cell execution_count=1}\n``` {.python .cell-code}\nimport ibis\nimport marvin\n\nfrom openai import OpenAI\n\nfrom dotenv import load_dotenv\n```\n:::\n\n\nYou need to set the `OPENAI_API_KEY` environment variable to your OpenAI API\nkey. You can do this by creating a `.env` file in the same directory as your\ncode and adding the following line:\n\n```\nOPENAI_API_KEY=<your-api-key>\n```\n\nThen, you can load the environment variables with the following code:\n\n::: {#b5db1e5b .cell execution_count=2}\n``` {.python .cell-code}\nload_dotenv()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nTrue\n```\n:::\n:::\n\n\nNow, we're ready to make LLM calls. Let's setup Ibis for interactive use:\n\n::: {#7f9ab8b6 .cell execution_count=3}\n``` {.python .cell-code}\nibis.options.interactive = True\nibis.options.repr.interactive.max_rows = 20\nibis.options.repr.interactive.max_columns = None\n```\n:::\n\n\nand setup Marvin to used the latest GPT-4-turbo model:\n\n::: {#d55b9f44 .cell execution_count=4}\n``` {.python .cell-code}\nmarvin.settings.openai.chat.completions.model = \"gpt-4-0125-preview\"\nmarvin.settings.openai.chat.completions.model\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'gpt-4-0125-preview'\n```\n:::\n:::\n\n\nand get our penguins:\n\n::: {#0fba5cb9 .cell execution_count=5}\n``` {.python .cell-code}\npenguins = ibis.examples.penguins.fetch()\npenguins.limit(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃<span style=\"font-weight: bold\"> flipper_length_mm </span>┃<span style=\"font-weight: bold\"> body_mass_g </span>┃<span style=\"font-weight: bold\"> sex    </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├─────────┼───────────┼────────────────┼───────────────┼───────────────────┼─────────────┼────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.7</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">181</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3750</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.5</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.4</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">186</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3800</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">40.3</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.0</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">195</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3250</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n└─────────┴───────────┴────────────────┴───────────────┴───────────────────┴─────────────┴────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n## Demonstration\n\nWe'll start with a slightly modified text-to-SQL function [stolen from our\nprevious \"LMs for data\" blog](../lms-for-data/index.qmd):\n\n::: {#be5f95b6 .cell execution_count=6}\n`````` {.python .cell-code}\n@marvin.fn\ndef _text_to_sql(\n    text: str,\n    table_name: str,\n    table_schema: str,\n    table_preview: str,\n) -> str:\n    \"\"\"Writes a SQL SELECT statement for the `text` given the provided\n    `table_name`, `table_schema`, and `table_preview`.\n\n    Spell out all column names, never use SELECT *. Include ALL columns unless told otherwise.\n    Use newlines and indentation for readability. Use LIMIT, not TOP.\n    Select FROM the `table_name` only (penguins), you have no access to other tables.\n    \"\"\"\n\n\ndef text_to_sql(\n    text: str,\n    table_name: str,\n    table_schema: str,\n    table_preview: str,\n) -> str:\n    sql = _text_to_sql(text, table_name, table_schema, table_preview)\n    return sql.strip().strip(\";\")\n``````\n:::\n\n\nThis will take the user's English (or really, any language the LLM sufficiently\nknows) query and turn it into SQL.\n\n:::{.callout-info title=\"Isn't this already RAG?\"}\nWe have retrieved information (a table name, schema, and preview) augmented our\nmodel's input with that information, and generated a response.\n:::\n\nOur hypothetical service takes text as input, generates SQL, and runs it against\nthe database on behalf of the user. We need some metric to evaluate the user's\nfeedback on the generated SQL. This could be an explicit input from the user\n(rate it from 1 to 10, or simply upvote/downvote the response) or inferred based\non user behavior (did the curse out the bot or ask it to modify the SQL after\ninitial generation). We'll ignore this feedback component for now, but in\npractice this would be a crucial piece of the system.\n\nAdditionally, we might bootstrap the system with a set of known English and SQL\nquery pairs to improve accuracy of the model. For demonstration purposes, we'll\nuse those. These would likely be handwritten, but I'm lazy so let's write one\nand generate the rest with a LLM.\n\nFirst, we define the data object we want to generate and create a single\nexample:\n\n::: {#14e42c21 .cell execution_count=7}\n``` {.python .cell-code}\nfrom rich import print\nfrom pydantic import BaseModel, Field\n\n\nclass EnglishAndSQL(BaseModel):\n    \"\"\"Represents a pair of English and equivalent SQL queries on data.\"\"\"\n\n    english: str = Field(..., description=\"The English query a user might ask.\")\n    sql: str = Field(..., description=\"The equivalent SQL query.\")\n\nexample_1 = EnglishAndSQL(\n    english=\"the first 10 rows of the penguins, ordered by body_mass_g from heaviest to lightest\",\n    sql=\"SELECT * FROM penguins ORDER BY body_mass_g DESC LIMIT 10\",\n)\nprint(example_1)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">EnglishAndSQL</span><span style=\"font-weight: bold\">(</span>\n    <span style=\"color: #808000; text-decoration-color: #808000\">english</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'the first 10 rows of the penguins, ordered by body_mass_g from heaviest to lightest'</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">sql</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'SELECT * FROM penguins ORDER BY body_mass_g DESC LIMIT 10'</span>\n<span style=\"font-weight: bold\">)</span>\n</pre>\n```\n:::\n:::\n\n\nThen write some instructions for the LLM, including that example:\n\n::: {#bfa7d60b .cell execution_count=8}\n``` {.python .cell-code}\ninstructions = \"\"\"Generate English queries a typical analytics engineer\nexploring the penguins dataset for the first time might ask a SOTA EDA chatbot,\nalongside the SQL the chatbot would then generate to answer the question.\"\"\"\n\ninstructions += f\"\\n\\nExample:\\n\\tEnglish: {example_1.english}\\n\\tSQL: {example_1.sql}\"\n\nprint(instructions)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Generate English queries a typical analytics engineer\nexploring the penguins dataset for the first time might ask a SOTA EDA chatbot,\nalongside the SQL the chatbot would then generate to answer the question.\n\nExample:\n        English: the first <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10</span> rows of the penguins, ordered by body_mass_g from heaviest to lightest\n        SQL: SELECT * FROM penguins ORDER BY body_mass_g DESC LIMIT <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10</span>\n</pre>\n```\n:::\n:::\n\n\nAnd generate more examples:\n\n::: {#1883bf2c .cell execution_count=9}\n``` {.python .cell-code}\nexamples = marvin.generate(\n    target=EnglishAndSQL,\n    n=9,\n    instructions=instructions,\n)\nprint(examples)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">[</span>\n    <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">EnglishAndSQL</span><span style=\"font-weight: bold\">(</span>\n        <span style=\"color: #808000; text-decoration-color: #808000\">english</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'the summary statistics of flipper_length_mm for each penguin species'</span>,\n        <span style=\"color: #808000; text-decoration-color: #808000\">sql</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'SELECT species, AVG(flipper_length_mm) AS average_flipper_length, MIN(flipper_length_mm) AS </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">min_flipper_length, MAX(flipper_length_mm) AS max_flipper_length FROM penguins GROUP BY species'</span>\n    <span style=\"font-weight: bold\">)</span>,\n    <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">EnglishAndSQL</span><span style=\"font-weight: bold\">(</span>\n        <span style=\"color: #808000; text-decoration-color: #808000\">english</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'the count of penguins by island'</span>,\n        <span style=\"color: #808000; text-decoration-color: #808000\">sql</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'SELECT island, COUNT(*) AS penguin_count FROM penguins GROUP BY island'</span>\n    <span style=\"font-weight: bold\">)</span>,\n    <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">EnglishAndSQL</span><span style=\"font-weight: bold\">(</span>\n        <span style=\"color: #808000; text-decoration-color: #808000\">english</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'the average body mass of female penguins compared to male penguins'</span>,\n        <span style=\"color: #808000; text-decoration-color: #808000\">sql</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'SELECT sex, AVG(body_mass_g) AS average_body_mass FROM penguins GROUP BY sex'</span>\n    <span style=\"font-weight: bold\">)</span>,\n    <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">EnglishAndSQL</span><span style=\"font-weight: bold\">(</span>\n        <span style=\"color: #808000; text-decoration-color: #808000\">english</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'penguins with body mass greater than 5000 grams'</span>,\n        <span style=\"color: #808000; text-decoration-color: #808000\">sql</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'SELECT * FROM penguins WHERE body_mass_g &gt; 5000'</span>\n    <span style=\"font-weight: bold\">)</span>,\n    <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">EnglishAndSQL</span><span style=\"font-weight: bold\">(</span>\n        <span style=\"color: #808000; text-decoration-color: #808000\">english</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'the most common species of penguin on each island'</span>,\n        <span style=\"color: #808000; text-decoration-color: #808000\">sql</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'SELECT island, species, COUNT(species) AS species_count FROM penguins GROUP BY island, species ORDER </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">BY species_count DESC LIMIT 1'</span>\n    <span style=\"font-weight: bold\">)</span>,\n    <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">EnglishAndSQL</span><span style=\"font-weight: bold\">(</span>\n        <span style=\"color: #808000; text-decoration-color: #808000\">english</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'the distribution of flipper length across different species'</span>,\n        <span style=\"color: #808000; text-decoration-color: #808000\">sql</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'SELECT species, flipper_length_mm FROM penguins ORDER BY species, flipper_length_mm'</span>\n    <span style=\"font-weight: bold\">)</span>,\n    <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">EnglishAndSQL</span><span style=\"font-weight: bold\">(</span>\n        <span style=\"color: #808000; text-decoration-color: #808000\">english</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'the oldest penguin recorded by year'</span>,\n        <span style=\"color: #808000; text-decoration-color: #808000\">sql</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'SELECT * FROM penguins ORDER BY year DESC LIMIT 1'</span>\n    <span style=\"font-weight: bold\">)</span>,\n    <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">EnglishAndSQL</span><span style=\"font-weight: bold\">(</span>\n        <span style=\"color: #808000; text-decoration-color: #808000\">english</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'the average bill length for each species'</span>,\n        <span style=\"color: #808000; text-decoration-color: #808000\">sql</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'SELECT species, AVG(bill_length_mm) AS average_bill_length FROM penguins GROUP BY species'</span>\n    <span style=\"font-weight: bold\">)</span>,\n    <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">EnglishAndSQL</span><span style=\"font-weight: bold\">(</span>\n        <span style=\"color: #808000; text-decoration-color: #808000\">english</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'the total number of penguins recorded by year'</span>,\n        <span style=\"color: #808000; text-decoration-color: #808000\">sql</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'SELECT year, COUNT(*) AS penguin_count FROM penguins GROUP BY year'</span>\n    <span style=\"font-weight: bold\">)</span>\n<span style=\"font-weight: bold\">]</span>\n</pre>\n```\n:::\n:::\n\n\n### Vector search over embeddings for RAG\n\nWe'll put those examples in an Ibis table for easy and fast processing with\nDuckDB:\n\n::: {#f27b5f64 .cell execution_count=10}\n``` {.python .cell-code}\nt = ibis.memtable({\"english\": [example_1.english], \"sql\": [example_1.sql]})\nt = t.union(ibis.memtable([r.model_dump() for r in examples]))\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> english                                                                          </span>┃<span style=\"font-weight: bold\"> sql                                                                              </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                                                                           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                                                                           │\n├──────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">the first 10 rows of the penguins, ordered by body_mass_g from heaviest to ligh…</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins ORDER BY body_mass_g DESC LIMIT 10                       </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">the summary statistics of flipper_length_mm for each penguin species            </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, AVG(flipper_length_mm) AS average_flipper_length, MIN(flipper_l…</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">the count of penguins by island                                                 </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT island, COUNT(*) AS penguin_count FROM penguins GROUP BY island          </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">the average body mass of female penguins compared to male penguins              </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT sex, AVG(body_mass_g) AS average_body_mass FROM penguins GROUP BY sex    </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">penguins with body mass greater than 5000 grams                                 </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins WHERE body_mass_g &gt; 5000                                 </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">the most common species of penguin on each island                               </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT island, species, COUNT(species) AS species_count FROM penguins GROUP BY …</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">the distribution of flipper length across different species                     </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, flipper_length_mm FROM penguins ORDER BY species, flipper_lengt…</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">the oldest penguin recorded by year                                             </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins ORDER BY year DESC LIMIT 1                               </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">the average bill length for each species                                        </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, AVG(bill_length_mm) AS average_bill_length FROM penguins GROUP …</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">the total number of penguins recorded by year                                   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT year, COUNT(*) AS penguin_count FROM penguins GROUP BY year              </span> │\n└──────────────────────────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\nNow, we need to define a user-defined function (UDF) to add the embedding column\nfor the text:\n\n::: {#8d8110d8 .cell execution_count=11}\n``` {.python .cell-code}\n@ibis.udf.scalar.python\ndef embed(text: str) -> list[float]:\n    \"\"\"Text to fixed-length array embedding.\"\"\"\n    model = \"text-embedding-3-small\"\n    text = text.replace(\"\\n\", \" \")\n    client = OpenAI()\n    return client.embeddings.create(input=[text], model=model).data[0].embedding\n```\n:::\n\n\nWe'll use DuckDB's built-in cosine similarity function to compute the similarity\nbetween any two vectors:\n\n::: {#cea57f56 .cell execution_count=12}\n``` {.python .cell-code}\n@ibis.udf.scalar.builtin\ndef list_cosine_similarity(x, y) -> float:\n    \"\"\"Compute cosine similarity between two vectors\"\"\"\n    ...\n```\n:::\n\n\nAnd then modify the English and SQL table to add the embeddings for the English\ntext:\n\n::: {#39b7e6d6 .cell execution_count=13}\n``` {.python .cell-code}\nt = (\n    t.mutate(\n        english_embedding=embed(t.english),\n    )\n    .relocate(\"english_embedding\")\n    .cache()\n)\nt\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"83e38fdbc3454b2486320d841b05cc6d\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> english_embedding                                        </span>┃<span style=\"font-weight: bold\"> english                                                                          </span>┃<span style=\"font-weight: bold\"> sql                                                                              </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;float64&gt;</span>                                           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                                                                           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                                                                           │\n├──────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.04711375758051872</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.005878608673810959</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>   │ <span style=\"color: #008000; text-decoration-color: #008000\">the first 10 rows of the penguins, ordered by body_mass_g from heaviest to ligh…</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins ORDER BY body_mass_g DESC LIMIT 10                       </span> │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.03198261559009552</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0048516723327338696</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>  │ <span style=\"color: #008000; text-decoration-color: #008000\">the summary statistics of flipper_length_mm for each penguin species            </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, AVG(flipper_length_mm) AS average_flipper_length, MIN(flipper_l…</span> │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.009100770577788353</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.031439024955034256</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">the count of penguins by island                                                 </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT island, COUNT(*) AS penguin_count FROM penguins GROUP BY island          </span> │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.06790360063314438</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.006546262186020613</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>   │ <span style=\"color: #008000; text-decoration-color: #008000\">the average body mass of female penguins compared to male penguins              </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT sex, AVG(body_mass_g) AS average_body_mass FROM penguins GROUP BY sex    </span> │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.05458223819732666</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.001736039761453867</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>  │ <span style=\"color: #008000; text-decoration-color: #008000\">penguins with body mass greater than 5000 grams                                 </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins WHERE body_mass_g &gt; 5000                                 </span> │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0351392887532711</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.0257494505494833</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>     │ <span style=\"color: #008000; text-decoration-color: #008000\">the most common species of penguin on each island                               </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT island, species, COUNT(species) AS species_count FROM penguins GROUP BY …</span> │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0533464141190052</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.01909574121236801</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>     │ <span style=\"color: #008000; text-decoration-color: #008000\">the distribution of flipper length across different species                     </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, flipper_length_mm FROM penguins ORDER BY species, flipper_lengt…</span> │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.019362766295671463</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6.106181535869837e-05</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">the oldest penguin recorded by year                                             </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins ORDER BY year DESC LIMIT 1                               </span> │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0655469074845314</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.010585048235952854</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>   │ <span style=\"color: #008000; text-decoration-color: #008000\">the average bill length for each species                                        </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, AVG(bill_length_mm) AS average_bill_length FROM penguins GROUP …</span> │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.009281445294618607</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.009736858308315277</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">the total number of penguins recorded by year                                   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT year, COUNT(*) AS penguin_count FROM penguins GROUP BY year              </span> │\n└──────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\nWe can test out our vector search by ensurring we get one, or close to it, by\ntesting on our first example:\n\n::: {#62825bf9 .cell execution_count=14}\n``` {.python .cell-code}\ns = (\n    t.mutate(\n        similarity=list_cosine_similarity(t.english_embedding, embed(example_1.english))\n    )\n    .relocate(\"similarity\")\n    .order_by(ibis._[\"similarity\"].desc())\n    .cache()\n)\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> similarity </span>┃<span style=\"font-weight: bold\"> english_embedding                                        </span>┃<span style=\"font-weight: bold\"> english                                                                          </span>┃<span style=\"font-weight: bold\"> sql                                                                              </span>┃\n┡━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;float64&gt;</span>                                           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                                                                           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                                                                           │\n├────────────┼──────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────┤\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.999999</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.04711375758051872</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.005878608673810959</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>   │ <span style=\"color: #008000; text-decoration-color: #008000\">the first 10 rows of the penguins, ordered by body_mass_g from heaviest to ligh…</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins ORDER BY body_mass_g DESC LIMIT 10                       </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.684914</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.05458223819732666</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.001736039761453867</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>  │ <span style=\"color: #008000; text-decoration-color: #008000\">penguins with body mass greater than 5000 grams                                 </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins WHERE body_mass_g &gt; 5000                                 </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.609588</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.06790360063314438</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.006546262186020613</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>   │ <span style=\"color: #008000; text-decoration-color: #008000\">the average body mass of female penguins compared to male penguins              </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT sex, AVG(body_mass_g) AS average_body_mass FROM penguins GROUP BY sex    </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.526872</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.03198261559009552</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0048516723327338696</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>  │ <span style=\"color: #008000; text-decoration-color: #008000\">the summary statistics of flipper_length_mm for each penguin species            </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, AVG(flipper_length_mm) AS average_flipper_length, MIN(flipper_l…</span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.521021</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.009100770577788353</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.031439024955034256</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">the count of penguins by island                                                 </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT island, COUNT(*) AS penguin_count FROM penguins GROUP BY island          </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.512375</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.009281445294618607</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.009736858308315277</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">the total number of penguins recorded by year                                   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT year, COUNT(*) AS penguin_count FROM penguins GROUP BY year              </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.496602</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0351392887532711</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.0257494505494833</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>     │ <span style=\"color: #008000; text-decoration-color: #008000\">the most common species of penguin on each island                               </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT island, species, COUNT(species) AS species_count FROM penguins GROUP BY …</span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.485363</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.019362766295671463</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6.106181535869837e-05</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">the oldest penguin recorded by year                                             </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins ORDER BY year DESC LIMIT 1                               </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.381961</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0533464141190052</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.01909574121236801</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>     │ <span style=\"color: #008000; text-decoration-color: #008000\">the distribution of flipper length across different species                     </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, flipper_length_mm FROM penguins ORDER BY species, flipper_lengt…</span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.370681</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0655469074845314</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.010585048235952854</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>   │ <span style=\"color: #008000; text-decoration-color: #008000\">the average bill length for each species                                        </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, AVG(bill_length_mm) AS average_bill_length FROM penguins GROUP …</span> │\n└────────────┴──────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\nCongratulations! You have a working RAG system using DuckDB with just a bit of\ncode.\n\n### Where vector search RAG fails\n\nConsider switching the ordering of \"from heaviest to lightest\":\n\n::: {#b1003989 .cell execution_count=15}\n``` {.python .cell-code}\nenglish = \"\"\"the first 10 rows of the penguins, ordered by body_mass_g from\nlightest to heaviest\"\"\"\n\ns = (\n    t.mutate(similarity=list_cosine_similarity(t.english_embedding, embed(english)))\n    .relocate(\"similarity\")\n    .order_by(ibis._[\"similarity\"].desc())\n    .cache()\n)\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> similarity </span>┃<span style=\"font-weight: bold\"> english_embedding                                        </span>┃<span style=\"font-weight: bold\"> english                                                                          </span>┃<span style=\"font-weight: bold\"> sql                                                                              </span>┃\n┡━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;float64&gt;</span>                                           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                                                                           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                                                                           │\n├────────────┼──────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────┤\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.993429</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.04711375758051872</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.005878608673810959</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>   │ <span style=\"color: #008000; text-decoration-color: #008000\">the first 10 rows of the penguins, ordered by body_mass_g from heaviest to ligh…</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins ORDER BY body_mass_g DESC LIMIT 10                       </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.683713</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.05458223819732666</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.001736039761453867</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>  │ <span style=\"color: #008000; text-decoration-color: #008000\">penguins with body mass greater than 5000 grams                                 </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins WHERE body_mass_g &gt; 5000                                 </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.597946</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.06790360063314438</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.006546262186020613</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>   │ <span style=\"color: #008000; text-decoration-color: #008000\">the average body mass of female penguins compared to male penguins              </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT sex, AVG(body_mass_g) AS average_body_mass FROM penguins GROUP BY sex    </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.526648</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.03198261559009552</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0048516723327338696</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>  │ <span style=\"color: #008000; text-decoration-color: #008000\">the summary statistics of flipper_length_mm for each penguin species            </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, AVG(flipper_length_mm) AS average_flipper_length, MIN(flipper_l…</span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.521030</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.009100770577788353</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.031439024955034256</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">the count of penguins by island                                                 </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT island, COUNT(*) AS penguin_count FROM penguins GROUP BY island          </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.509799</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.009281445294618607</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.009736858308315277</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">the total number of penguins recorded by year                                   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT year, COUNT(*) AS penguin_count FROM penguins GROUP BY year              </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.494654</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0351392887532711</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.0257494505494833</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>     │ <span style=\"color: #008000; text-decoration-color: #008000\">the most common species of penguin on each island                               </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT island, species, COUNT(species) AS species_count FROM penguins GROUP BY …</span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.484585</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.019362766295671463</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6.106181535869837e-05</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">the oldest penguin recorded by year                                             </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins ORDER BY year DESC LIMIT 1                               </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.374224</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0533464141190052</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.01909574121236801</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>     │ <span style=\"color: #008000; text-decoration-color: #008000\">the distribution of flipper length across different species                     </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, flipper_length_mm FROM penguins ORDER BY species, flipper_lengt…</span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.363293</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0655469074845314</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.010585048235952854</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>   │ <span style=\"color: #008000; text-decoration-color: #008000\">the average bill length for each species                                        </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, AVG(bill_length_mm) AS average_bill_length FROM penguins GROUP …</span> │\n└────────────┴──────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\nThis is an entirely different meaning, and yet the computed similarity is close\nto one. Embeddings miss out on much of the semantic understanding for LLMs. Try\nit out yourself, using Marvin and GPT-4 to see if it can tell the different\nbetween these two English queries any better!\n\nWe can verify that the SQL would be different:\n\n::: {.panel-tabset}\n\n## Initial example\n\n::: {#fe0d2f76 .cell execution_count=16}\n``` {.python .cell-code}\nsql = text_to_sql(\n    example_1.english,\n    table_name=penguins.get_name(),\n    table_schema=penguins.schema(),\n    table_preview=str(penguins),\n)\nibis.to_sql(penguins.sql(sql))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=16}\n```sql\nSELECT\n  species,\n  island,\n  bill_length_mm,\n  bill_depth_mm,\n  flipper_length_mm,\n  body_mass_g,\n  sex,\n  year\nFROM penguins\nORDER BY\n  body_mass_g DESC\nLIMIT 10\n```\n:::\n:::\n\n\n::: {#a31a7619 .cell execution_count=17}\n``` {.python .cell-code}\npenguins.sql(sql).limit(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> island </span>┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃<span style=\"font-weight: bold\"> flipper_length_mm </span>┃<span style=\"font-weight: bold\"> body_mass_g </span>┃<span style=\"font-weight: bold\"> sex    </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├─────────┼────────┼────────────────┼───────────────┼───────────────────┼─────────────┼────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">49.2</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">15.2</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">221</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6300</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">59.6</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.0</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">230</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6050</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">51.1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">16.3</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">220</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6000</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2008</span> │\n└─────────┴────────┴────────────────┴───────────────┴───────────────────┴─────────────┴────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n## Modified example\n\n::: {#104abf64 .cell execution_count=18}\n``` {.python .cell-code}\nsql = text_to_sql(\n    english,\n    table_name=penguins.get_name(),\n    table_schema=penguins.schema(),\n    table_preview=str(penguins),\n)\nibis.to_sql(penguins.sql(sql))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=18}\n```sql\nSELECT\n  species,\n  island,\n  bill_length_mm,\n  bill_depth_mm,\n  flipper_length_mm,\n  body_mass_g,\n  sex,\n  year\nFROM penguins\nORDER BY\n  body_mass_g ASC\nLIMIT 10\n```\n:::\n:::\n\n\n::: {#0472794d .cell execution_count=19}\n``` {.python .cell-code}\npenguins.sql(sql).limit(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species   </span>┃<span style=\"font-weight: bold\"> island </span>┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃<span style=\"font-weight: bold\"> flipper_length_mm </span>┃<span style=\"font-weight: bold\"> body_mass_g </span>┃<span style=\"font-weight: bold\"> sex    </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├───────────┼────────┼────────────────┼───────────────┼───────────────────┼─────────────┼────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Chinstrap</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream </span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">46.9</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">16.6</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">192</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2700</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2008</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">36.5</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">16.6</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">181</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2850</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2008</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">36.4</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.1</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">184</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2850</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2008</span> │\n└───────────┴────────┴────────────────┴───────────────┴───────────────────┴─────────────┴────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n:::\n\nDespite high similarity of the English queries in the embedding space, the\nintended results and SQL are very different (descending vs ascending order). If\nyou were to retrieve and augment your input to the text-to-SQL function with the\nmost similar SQL from past samples, you might confused the model!\n\nDemonstrating this further, let's modify the English query to be equivalent but\nuse very different words:\n\n::: {#4d5acab1 .cell execution_count=20}\n``` {.python .cell-code}\nenglish = \"\"\"of the birds retrieve the initial ten opposite-of-columns,\nsorted from biggest to smallest by weight\"\"\"\n\ns = (\n    t.mutate(similarity=list_cosine_similarity(t.english_embedding, embed(english)))\n    .relocate(\"similarity\")\n    .order_by(ibis._[\"similarity\"].desc())\n    .cache()\n)\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> similarity </span>┃<span style=\"font-weight: bold\"> english_embedding                                        </span>┃<span style=\"font-weight: bold\"> english                                                                          </span>┃<span style=\"font-weight: bold\"> sql                                                                              </span>┃\n┡━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;float64&gt;</span>                                           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                                                                           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                                                                           │\n├────────────┼──────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────┤\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.562025</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.04711375758051872</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.005878608673810959</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>   │ <span style=\"color: #008000; text-decoration-color: #008000\">the first 10 rows of the penguins, ordered by body_mass_g from heaviest to ligh…</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins ORDER BY body_mass_g DESC LIMIT 10                       </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.368465</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.03198261559009552</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0048516723327338696</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>  │ <span style=\"color: #008000; text-decoration-color: #008000\">the summary statistics of flipper_length_mm for each penguin species            </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, AVG(flipper_length_mm) AS average_flipper_length, MIN(flipper_l…</span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.346382</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.009100770577788353</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.031439024955034256</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">the count of penguins by island                                                 </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT island, COUNT(*) AS penguin_count FROM penguins GROUP BY island          </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.332327</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.05458223819732666</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.001736039761453867</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>  │ <span style=\"color: #008000; text-decoration-color: #008000\">penguins with body mass greater than 5000 grams                                 </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins WHERE body_mass_g &gt; 5000                                 </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.328244</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0533464141190052</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.01909574121236801</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>     │ <span style=\"color: #008000; text-decoration-color: #008000\">the distribution of flipper length across different species                     </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, flipper_length_mm FROM penguins ORDER BY species, flipper_lengt…</span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.322591</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.06790360063314438</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.006546262186020613</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>   │ <span style=\"color: #008000; text-decoration-color: #008000\">the average body mass of female penguins compared to male penguins              </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT sex, AVG(body_mass_g) AS average_body_mass FROM penguins GROUP BY sex    </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.318061</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0351392887532711</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.0257494505494833</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>     │ <span style=\"color: #008000; text-decoration-color: #008000\">the most common species of penguin on each island                               </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT island, species, COUNT(species) AS species_count FROM penguins GROUP BY …</span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.299250</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.019362766295671463</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6.106181535869837e-05</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">the oldest penguin recorded by year                                             </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT * FROM penguins ORDER BY year DESC LIMIT 1                               </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.292203</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.009281445294618607</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.009736858308315277</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">the total number of penguins recorded by year                                   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT year, COUNT(*) AS penguin_count FROM penguins GROUP BY year              </span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.288274</span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0655469074845314</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.010585048235952854</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1534</span><span style=\"font-weight: bold\">]</span>   │ <span style=\"color: #008000; text-decoration-color: #008000\">the average bill length for each species                                        </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">SELECT species, AVG(bill_length_mm) AS average_bill_length FROM penguins GROUP …</span> │\n└────────────┴──────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\nIn this case, despite resulting in what would be the same generated SQL, the\ncosine similarity of the vectors in their embedding space are much further\napart.\n\nWe can verify that the SQL would be effectively equivalent:\n\n::: {.panel-tabset}\n\n## Initial example\n\n::: {#0a977d5a .cell execution_count=21}\n``` {.python .cell-code}\nsql = text_to_sql(\n    example_1.english,\n    table_name=penguins.get_name,\n    table_schema=penguins.schema,\n    table_preview=str(penguins),\n)\nibis.to_sql(penguins.sql(sql))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=21}\n```sql\nSELECT\n  species,\n  island,\n  bill_length_mm,\n  bill_depth_mm,\n  flipper_length_mm,\n  body_mass_g,\n  sex,\n  year\nFROM penguins\nORDER BY\n  body_mass_g DESC\nLIMIT 10\n```\n:::\n:::\n\n\n::: {#f25230e8 .cell execution_count=22}\n``` {.python .cell-code}\npenguins.sql(sql).limit(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> island </span>┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃<span style=\"font-weight: bold\"> flipper_length_mm </span>┃<span style=\"font-weight: bold\"> body_mass_g </span>┃<span style=\"font-weight: bold\"> sex    </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├─────────┼────────┼────────────────┼───────────────┼───────────────────┼─────────────┼────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">49.2</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">15.2</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">221</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6300</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">59.6</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.0</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">230</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6050</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">51.1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">16.3</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">220</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6000</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2008</span> │\n└─────────┴────────┴────────────────┴───────────────┴───────────────────┴─────────────┴────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n## Modified example\n\n::: {#bb44c771 .cell execution_count=23}\n``` {.python .cell-code}\nsql = text_to_sql(\n    english,\n    table_name=penguins.get_name,\n    table_schema=penguins.schema,\n    table_preview=str(penguins),\n)\nibis.to_sql(penguins.sql(sql))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=23}\n```sql\nSELECT\n  species,\n  island,\n  bill_length_mm,\n  bill_depth_mm,\n  flipper_length_mm,\n  sex,\n  year\nFROM penguins\nORDER BY\n  body_mass_g DESC\nLIMIT 10\n```\n:::\n:::\n\n\n::: {#66743813 .cell execution_count=24}\n``` {.python .cell-code}\npenguins.sql(sql).limit(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> island </span>┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃<span style=\"font-weight: bold\"> flipper_length_mm </span>┃<span style=\"font-weight: bold\"> sex    </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├─────────┼────────┼────────────────┼───────────────┼───────────────────┼────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">49.2</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">15.2</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">221</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">59.6</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.0</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">230</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">51.1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">16.3</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">220</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2008</span> │\n└─────────┴────────┴────────────────┴───────────────┴───────────────────┴────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n:::\n\nDespite low similarity, these English queries are effectively the same. Using\nour embedding similarity RAG, we might miss this example as it could be under\nthe similarity threshold we set. Yet, a LLM can tell that these are semantically\nequivalent, as shown by the SQL it generates for each.\n\n## Discussion\n\nI am by no means an expert on any of this. I studied neural networks to an\nextent in college and I've kept up with all the hype around LLMs, but I'm not a\nresearcher nor a practitioner building products.\n\nThat said, I have noticed a pattern of tech-debt-inducing code for new machine\nlearning technologies when implemented in practice. I hope this blog has\nprovoked some thoughts around:\n\n- using bespoke databases when you may be using one that works just fine for the\n job to be done\n- using embeddings and similarity search for semantic ranking of text\n- alternative approaches for getting the right context into your language models\n\nAlso, keep in mind that we're making external API calls to OpenAI for the\nembeddings. This may be costly (though embeddings calls are relatively cheap)\nand time consuming depending on your quantity of data. You could consider using\na self-hosted open source embedding model processing data where it lives to\nreduce this overhead.\n\nLet me know below or in [Zulip](https://ibis-project.zulipchat.com) if you have\nany thoughts or disagreements!\n\n## Next steps\n\nTry this out yourself! All you need is an OpenAI account and the code above.\n\nIt's never been a better time to get involved with Ibis. [Join us on Zulip and\nintroduce yourself!](https://ibis-project.zulipchat.com/) More Ibis + language\nmodel content coming soon.\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script src=\"https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js\" crossorigin=\"anonymous\"></script>\n"
      ],
      "include-after-body": [
        "<script type=application/vnd.jupyter.widget-state+json>\n{\"state\":{\"17cf350b611c45e7822a17221b33d8d6\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":\"auto\"}},\"83e38fdbc3454b2486320d841b05cc6d\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_17cf350b611c45e7822a17221b33d8d6\",\"max\":100,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_b01a634498f247138b8b0b3519b41296\",\"tabbable\":null,\"tooltip\":null,\"value\":100}},\"b01a634498f247138b8b0b3519b41296\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":\"black\",\"description_width\":\"\"}}},\"version_major\":2,\"version_minor\":0}\n</script>\n"
      ]
    }
  }
}