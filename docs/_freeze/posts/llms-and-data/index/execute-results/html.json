{
  "hash": "bc1c5ec547ca752c4d979e1017206ac7",
  "result": {
    "markdown": "---\ntitle: LLMs and data\nauthor: \"Cody Peterson\"\ndate: \"2023-09-27\"\nfreeze: auto\ncategories:\n    - blog\n    - ai\n    - llm\n---\n\n## Introduction\n\nWhile large-language models (LLMs) have been around for years, recent versions\nand innovations have made it possible to create instruction-following,\nconversational bots that can perform tasks on behalf of the user. The\nthought of using natural language to transform and analyze data is appealing.\n\n## Approaches\n\nWhen discussed internally at Voltron Data, we identified three distinct\napproaches to applying LLMs to data analytics that can be implemented today:\n\n1. LLM writes SQL\n2. LLM writes a subroutine (Python UDF or another language)\n3. Use LLM in a subroutine\n\nWhile these three approaches are not an exhaustive list of how LLMs can be\napplied to data, they can be easily understood and implemented with\nIbis and [Marvin](https://www.askmarvin.ai/welcome/what_is_marvin/), an AI\nengineering framework for building natural language interfaces. Together with\nthese two open-source tools, we can build a natural language interface for\ndata analytics that supports 18+ backends. But first, let's demonstrate the\nthree approaches in code.\n\n### Approach 1: LLM writes SQL\n\nState of the art (SoTA) LLMs are decent at generating SQL out of the box. We can\nbe clever to handle errors, retries, and more, but in its simplest form:\n\n::: {#0c556499 .cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport ibis  # <1>\nimport marvin  # <1>\n\nfrom dotenv import load_dotenv  # <1>\n\nload_dotenv()  # <2>\n\ncon = ibis.connect(\"duckdb://penguins.ddb\")  # <3>\nt = ibis.examples.penguins.fetch()  # <3>\nt = con.create_table(\"penguins\", t.to_pyarrow(), overwrite=True)  # <3>\n```\n:::\n\n\n1. Import the libraries we need.\n2. Load the environment variable to setup Marvin to call our OpenAI account.\n3. Setup the demo datain an Ibis backend.\n\n::: {#8ea585fb .cell execution_count=2}\n``` {.python .cell-code}\nimport ibis  # <1>\nimport marvin  # <1>\n\nfrom ibis.expr.schema import Schema  # <1>\nfrom ibis.expr.types.relations import Table  # <1>\n\nibis.options.interactive = True  # <2>\nmarvin.settings.llm_model = \"openai/gpt-4\"  # <2>\n\ncon = ibis.connect(\"duckdb://penguins.ddb\")  # <3>\nt = con.table(\"penguins\")  # <3>\n```\n:::\n\n\n1. Import Ibis and Marvin.\n2. Configure Ibis (interactive) and Marvin (GPT-4).\n3. Connect to the data and load a table into a variable.\n\n::: {#a55b25a4 .cell execution_count=3}\n``` {.python .cell-code}\n@marvin.ai_fn  # <1>\ndef _generate_sql_select(\n    text: str, table_name: str, table_schema: Schema\n) -> str:  # <1>\n    \"\"\"Generate SQL SELECT from text.\"\"\"  # <1>\n\n\ndef sql_from_text(text: str, t: Table) -> Table:  # <2>\n    \"\"\"Run SQL from text.\"\"\"  # <2>\n    return t.sql(_generate_sql_select(text, t.get_name(), t.schema()).strip(\";\"))  # <2>\n```\n:::\n\n\n1. A non-deterministic, LLM-powered AI function.\n2. A deterministic, human-authored function that calls the AI function.\n\n::: {#65d8ef11 .cell execution_count=4}\n``` {.python .cell-code}\nt2 = sql_from_text(\"the unique combination of species and islands\", t)\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species   </span>┃<span style=\"font-weight: bold\"> island    </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │\n├───────────┼───────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Chinstrap</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │\n└───────────┴───────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#e2d9e105 .cell execution_count=5}\n``` {.python .cell-code}\nt3 = sql_from_text(\n    \"the unique combination of species and islands, with their counts, ordered from highest to lowest, and name that column just 'count'\",\n    t,\n)\nt3\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species   </span>┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> count </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├───────────┼───────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">124</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Chinstrap</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">68</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">56</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">52</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">44</span> │\n└───────────┴───────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\nThis works well-enough for simple cases and can be expanded to handle complex\nones. In many scenarios, it may be easier to express a query in English or\nanother language than to write it in SQL, especially if working across multiple\nSQL dialects.\n\n### Approach 2: LLM writes a subroutine\n\nIf more complex logic needs to be expressed, SoTA LLMs are also decent at\nwriting Python and a number of other programming languages. Many data platforms\nsupport user-defined functions (UDFs) in Python or some other language. We'll\nstick to scalar Python UDFs via DuckDB to demonstrate the concept:\n\n::: {#becbd664 .cell execution_count=6}\n``` {.python .cell-code}\n@marvin.ai_fn  # <1>\ndef _generate_python_function(text: str) -> str:  # <1>\n    \"\"\"Generate a simple, typed, correct Python function from text.\"\"\"  # <1>\n\n\ndef create_udf_from_text(text: str) -> str:  # <2>\n    \"\"\"Create a UDF from text.\"\"\"  # <2>\n    return f\"\"\"\nimport ibis\n\n@ibis.udf.scalar.python\n{_generate_python_function(text)}\n\"\"\".strip()  # <2>\n```\n:::\n\n\n1. A non-deterministic, LLM-powered AI function.\n2. A deterministic, human-authored function that calls the AI function.\n\n::: {#c7a78637 .cell execution_count=7}\n``` {.python .cell-code}\nudf = create_udf_from_text(\n    \"a function named count_vowels that given an input string, returns an int w/ the number of vowels (y_included as a boolean option defaulted to False)\"\n)\nprint(udf)\nexec(udf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nimport ibis\n\n@ibis.udf.scalar.python\ndef count_vowels(input_string: str, y_included: bool = False) -> int:\n    vowels = 'aeiou'\n    if y_included:\n        vowels += 'y'\n    return sum(1 for char in input_string if char.lower() in vowels)\n```\n:::\n:::\n\n\n::: {#6632a178 .cell execution_count=8}\n``` {.python .cell-code}\nt4 = t3.mutate(\n    species_vowel_count=count_vowels(t3.species),\n    island_vowel_count=count_vowels(t3.island),\n)\nt4\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species   </span>┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> count </span>┃<span style=\"font-weight: bold\"> species_vowel_count </span>┃<span style=\"font-weight: bold\"> island_vowel_count </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>               │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>              │\n├───────────┼───────────┼───────┼─────────────────────┼────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">124</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Chinstrap</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">68</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">56</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">52</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">44</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n└───────────┴───────────┴───────┴─────────────────────┴────────────────────┘\n</pre>\n```\n:::\n:::\n\n\nIn this case, there's no reason not to have a human in the loop\nreviewing the output code and committing it for production use. This could be\nuseful for quick prototyping or, given a box of tools in the form of UDFs,\nworking through a natural language interface.\n\n### Approach 3: Use LLM in a subroutine\n\nWe can also call the LLM once-per-row in the table via a subroutine. For variety,\nwe'll use an [AI model](https://www.askmarvin.ai/components/ai_model/) instead\nof an [AI function](https://www.askmarvin.ai/components/ai_function/):\n\n::: {#7da74152 .cell execution_count=9}\n``` {.python .cell-code}\nfrom pydantic import BaseModel, Field  # <1>\n\n# save some money and avoid rate limiting\nmarvin.settings.llm_model = \"openai/gpt-3.5-turbo-16k\"  # <2>\n\n\n@marvin.ai_model  # <3>\nclass VowelCounter(BaseModel):  # <3>\n    \"\"\"Count vowels in a string.\"\"\"  # <3>\n\n    include_y: bool = Field(False, description=\"Include 'y' as a vowel.\")  # <3>\n    # num_a: int = Field(..., description=\"The number of 'a' vowels.\") # <3>\n    # num_e: int = Field(..., description=\"The number of 'e' vowels.\") # <3>\n    # num_i: int = Field(..., description=\"The number of 'i' vowels.\") # <3>\n    # num_o: int = Field(..., description=\"The number of 'o' vowels.\") # <3>\n    # num_u: int = Field(..., description=\"The number of 'u' vowels.\") # <3>\n    # num_y: int = Field(..., description=\"The number of 'y' vowels.\") # <3>\n    num_total: int = Field(..., description=\"The total number of vowels.\")  # <3>\n\n\nVowelCounter(\"hello world\")  # <4>\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nVowelCounter(include_y=False, num_total=3)\n```\n:::\n:::\n\n\n1. Additional imports for Pydantic.\n2. Configure Marvin to use a cheaper model.\n3. A non-deterministic, LLM-powered AI model.\n4. Call the AI model on some text.\n\nThen we'll have the LLM write the UDF, just to be fancy:\n\n::: {#11a657a4 .cell execution_count=10}\n``` {.python .cell-code}\nudf = create_udf_from_text(\n    \"a function named count_vowels_ai that given an input string, calls VowelCounter on it and returns the num_total attribute of that result\"\n)\nprint(udf)\nexec(udf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nimport ibis\n\n@ibis.udf.scalar.python\ndef count_vowels_ai(input_string: str) -> int:\n    result = VowelCounter(input_string)\n    return result.num_total\n```\n:::\n:::\n\n\n::: {#bf52781d .cell execution_count=11}\n``` {.python .cell-code}\nt5 = t3.mutate(\n    species_vowel_count=count_vowels_ai(t3.species),\n    island_vowel_count=count_vowels_ai(t3.island),\n)\nt5\n```\n\n::: {.cell-output .cell-output-error}\n```\nProgrammingError: (duckdb.InvalidInputException) Invalid Input Error: Python exception occurred while executing the UDF: Timeout: Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600.0)\n\nAt:\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/openai/api_requestor.py(607): request_raw\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/openai/api_requestor.py(288): request\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/openai/api_resources/abstract/engine_api_resource.py(153): create\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/openai/api_resources/chat_completion.py(26): create\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/marvin/core/ChatCompletion/providers/openai.py(99): _send_request\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/marvin/core/ChatCompletion/abstract.py(156): create\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/marvin/components/ai_model.py(260): call\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/marvin/components/ai_model.py(74): __init__\n  <string>(5): count_vowels_ai\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/duckdb_engine/__init__.py(144): execute\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/sqlalchemy/engine/default.py(736): do_execute\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py(1910): _execute_context\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py(1577): _execute_clauseelement\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/sqlalchemy/sql/elements.py(334): _execute_on_connection\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/sqlalchemy/engine/base.py(1385): execute\n  /Users/cody/repos/ibis/ibis/backends/base/sql/alchemy/__init__.py(194): _safe_raw_sql\n  /Users/cody/.local/share/rtx/installs/python/latest/lib/python3.11/contextlib.py(137): __enter__\n  /Users/cody/repos/ibis/ibis/backends/base/sql/__init__.py(334): execute\n  /Users/cody/repos/ibis/ibis/expr/types/core.py(322): execute\n  /Users/cody/repos/ibis/ibis/expr/types/pretty.py(229): to_rich_table\n  /Users/cody/repos/ibis/ibis/expr/types/relations.py(315): __interactive_rich_console__\n  /Users/cody/repos/ibis/ibis/expr/types/core.py(54): __rich_console__\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/rich/console.py(1311): render\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/rich/jupyter.py(48): _repr_mimebundle_\n  /Users/cody/repos/ibis/ibis/expr/types/core.py(36): _repr_mimebundle_\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/IPython/core/formatters.py(974): __call__\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/IPython/core/formatters.py(223): catch_format_error\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/decorator.py(232): fun\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/IPython/core/formatters.py(149): format\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/IPython/core/displayhook.py(157): compute_format_data\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/IPython/core/displayhook.py(268): __call__\n  /var/folders/yw/tcbzll5n539dhg6_t4rftz1w0000gn/T/ipykernel_88691/1701099287.py(5): <module>\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/IPython/core/interactiveshell.py(3508): run_code\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/IPython/core/interactiveshell.py(3448): run_ast_nodes\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/IPython/core/interactiveshell.py(3269): run_cell_async\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/IPython/core/async_helpers.py(129): _pseudo_sync_runner\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/IPython/core/interactiveshell.py(3064): _run_cell\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/IPython/core/interactiveshell.py(3009): run_cell\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/ipykernel/zmqshell.py(546): run_cell\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/ipykernel/ipkernel.py(422): do_execute\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/ipykernel/kernelbase.py(740): execute_request\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/ipykernel/kernelbase.py(412): dispatch_shell\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/ipykernel/kernelbase.py(505): process_one\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/ipykernel/kernelbase.py(516): dispatch_queue\n  /Users/cody/.local/share/rtx/installs/python/latest/lib/python3.11/asyncio/events.py(80): _run\n  /Users/cody/.local/share/rtx/installs/python/latest/lib/python3.11/asyncio/base_events.py(1922): _run_once\n  /Users/cody/.local/share/rtx/installs/python/latest/lib/python3.11/asyncio/base_events.py(607): run_forever\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/tornado/platform/asyncio.py(195): start\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/ipykernel/kernelapp.py(736): start\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/traitlets/config/application.py(1043): launch_instance\n  /Users/cody/repos/ibis/venv/lib/python3.11/site-packages/ipykernel_launcher.py(17): <module>\n  <frozen runpy>(88): _run_code\n  <frozen runpy>(198): _run_module_as_main\n\n[SQL: WITH _ibis_view_1 AS \n(SELECT species, island, COUNT(*) as count FROM penguins GROUP BY species, island ORDER BY count DESC)\n SELECT t0.species, t0.island, t0.count, count_vowels_ai(t0.species) AS species_vowel_count, count_vowels_ai(t0.island) AS island_vowel_count \nFROM _ibis_view_1 AS t0 \n LIMIT ?]\n[parameters: (11,)]\n(Background on this error at: https://sqlalche.me/e/14/f405)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━┓\n┃<span class=\"ansi-bold\"> </span><span class=\"ansi-bold\">species</span><span class=\"ansi-bold\">  </span><span class=\"ansi-bold\"> </span>┃<span class=\"ansi-bold\"> </span><span class=\"ansi-bold\">island</span><span class=\"ansi-bold\">   </span><span class=\"ansi-bold\"> </span>┃<span class=\"ansi-bold\"> </span><span class=\"ansi-bold\">count</span><span class=\"ansi-bold\"> </span>┃<span class=\"ansi-bold\"> </span><span class=\"ansi-bold\">species_vowel_count</span><span class=\"ansi-bold\"> </span>┃<span class=\"ansi-bold\"> </span><span class=\"ansi-bold\">island_vowel_count</span><span class=\"ansi-bold\"> </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━┩\n│ string    │ string    │ int64 │ int64               │ int64              │\n├───────────┼───────────┼───────┼─────────────────────┼────────────────────┤\n│ <span class=\"ansi-green-fg\">Gentoo   </span> │ <span class=\"ansi-green-fg\">Biscoe   </span> │   <span class=\"ansi-cyan-fg ansi-bold\">124</span> │                   <span class=\"ansi-cyan-fg ansi-bold\">3</span> │                  <span class=\"ansi-cyan-fg ansi-bold\">3</span> │\n│ <span class=\"ansi-green-fg\">Chinstrap</span> │ <span class=\"ansi-green-fg\">Dream    </span> │    <span class=\"ansi-cyan-fg ansi-bold\">68</span> │                   <span class=\"ansi-cyan-fg ansi-bold\">2</span> │                  <span class=\"ansi-cyan-fg ansi-bold\">2</span> │\n│ <span class=\"ansi-green-fg\">Adelie   </span> │ <span class=\"ansi-green-fg\">Dream    </span> │    <span class=\"ansi-cyan-fg ansi-bold\">56</span> │                   <span class=\"ansi-cyan-fg ansi-bold\">3</span> │                  <span class=\"ansi-cyan-fg ansi-bold\">2</span> │\n│ <span class=\"ansi-green-fg\">Adelie   </span> │ <span class=\"ansi-green-fg\">Torgersen</span> │    <span class=\"ansi-cyan-fg ansi-bold\">52</span> │                   <span class=\"ansi-cyan-fg ansi-bold\">3</span> │                  <span class=\"ansi-cyan-fg ansi-bold\">3</span> │\n│ <span class=\"ansi-green-fg\">Adelie   </span> │ <span class=\"ansi-green-fg\">Biscoe   </span> │    <span class=\"ansi-cyan-fg ansi-bold\">44</span> │                   <span class=\"ansi-cyan-fg ansi-bold\">3</span> │                  <span class=\"ansi-cyan-fg ansi-bold\">3</span> │\n└───────────┴───────────┴───────┴─────────────────────┴────────────────────┘</pre>\n```\n:::\n\n:::\n:::\n\n\nNotice that in this UDF, unlike in the previous example, a LLM is being\ncalled (possibly several times) for each row in the table. This is a very expensive\noperation and we'll need to be careful about how we use it in practice.\n\n## Summary\n\nTo summarize this post:\n\n::: {#0761ca9f .cell execution_count=12}\n``` {.python .cell-code}\nfrom rich import print\n\nwith open(\"index.qmd\", \"r\") as f:\n    self_text = f.read()\n\n\n@marvin.ai_model\nclass Summary(BaseModel):\n    \"\"\"Summary of text.\"\"\"\n\n    summary_line: str = Field(..., description=\"The one-line summary of the text.\")\n    summary_paragraph: str = Field(\n        ..., description=\"The one-paragraph summary of the text.\"\n    )\n    conclusion: str = Field(\n        ..., description=\"The conclusion the reader should draw from the text.\"\n    )\n    key_points: list[str] = Field(..., description=\"The key points of the text.\")\n    critiques: list[str] = Field(\n        ..., description=\"Professional, fair critiques of the text.\"\n    )\n    suggested_improvements: list[str] = Field(\n        ..., description=\"Suggested improvements for the text.\"\n    )\n    sentiment: float = Field(..., description=\"The sentiment of the text.\")\n    sentiment_label: str = Field(..., description=\"The sentiment label of the text.\")\n    author_bias: str = Field(..., description=\"The author bias of the text.\")\n\n\nprint(Summary(self_text))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">Summary</span><span style=\"font-weight: bold\">(</span>\n    <span style=\"color: #808000; text-decoration-color: #808000\">summary_line</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'LLMs and data'</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">summary_paragraph</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'This blog post discusses the application of large-language models (LLMs) to data analytics. </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">Three approaches are presented: LLM writes SQL, LLM writes a subroutine, and using LLM in a subroutine. The post </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">demonstrates each approach with code examples. The author emphasizes the potential of natural language interfaces </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">for data analytics and suggests getting involved with the Ibis Birdbrain project.'</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">conclusion</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'The post highlights the versatility of LLMs in transforming and analyzing data using natural </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">language. It showcases three approaches to implement LLMs in data analytics and encourages engagement with the Ibis</span>\n<span style=\"color: #008000; text-decoration-color: #008000\">Birdbrain project.'</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">key_points</span>=<span style=\"font-weight: bold\">[</span>\n        <span style=\"color: #008000; text-decoration-color: #008000\">'LLMs can be applied to data analytics to create instruction-following, conversational bots'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'Three approaches to implementing LLMs in data analytics are presented: LLM writes SQL, LLM writes a </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">subroutine, and using LLM in a subroutine'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'Ibis and Marvin can be used to build a natural language interface for data analytics supporting multiple </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">backends'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'Using LLMs in data analytics enables expressing queries in natural language instead of SQL'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'LLMs can also be used to generate Python subroutines and user-defined functions (UDFs)'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'Calling LLMs in a subroutine allows for more complex logic and flexibility in data analytics'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'The Ibis Birdbrain project offers an opportunity to contribute to natural language interfaces for data </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">analytics'</span>\n    <span style=\"font-weight: bold\">]</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">critiques</span>=<span style=\"font-weight: bold\">[</span>\n        <span style=\"color: #008000; text-decoration-color: #008000\">'The post lacks details on the limitations and challenges of using LLMs in data analytics'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'It would be helpful to provide examples of real-world use cases for each approach'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'More explanation on how LLMs are trained and fine-tuned for specific tasks would enhance the </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">understanding'</span>\n    <span style=\"font-weight: bold\">]</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">suggested_improvements</span>=<span style=\"font-weight: bold\">[</span>\n        <span style=\"color: #008000; text-decoration-color: #008000\">'Include a section on the limitations and challenges of using LLMs in data analytics'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'Provide real-world use cases or scenarios for each approach to demonstrate their practical applications'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">\"Add a brief explanation of LLM training and fine-tuning process to improve reader's understanding\"</span>\n    <span style=\"font-weight: bold\">]</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">sentiment</span>=<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.75</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">sentiment_label</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'positive'</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">author_bias</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'The author presents a positive bias towards the application of LLMs in data analytics and </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">encourages engagement with the Ibis Birdbrain project.'</span>\n<span style=\"font-weight: bold\">)</span>\n</pre>\n```\n:::\n:::\n\n\n## Next steps\n\nYou can get involved with [Ibis\nBirdbrain](https://github.com/ibis-project/ibis-birdbrain), our open-source data\n& AI project for building next-generation natural language interfaces to data.\n\n## Discussions\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}