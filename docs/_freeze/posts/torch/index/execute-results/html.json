{
  "hash": "5514134cca52fbc689047fdd25453e0c",
  "result": {
    "markdown": "---\ntitle: \"Ibis on &#x1F525;: Supercharge Your Workflow with DuckDB and PyTorch\"\nauthor: \"Phillip Cloud\"\ndate: \"2023-06-27\"\ncategories:\n    - blog\n    - case study\n    - machine learning\n    - ecosystem\n    - new feature\n---\n\nIn this blog post we show how to leverage ecosystem tools to build an end-to-end ML pipeline using Ibis, DuckDB and PyTorch.\n\nCheck out the live stream of this notebook below!\n\n\n{{< video https://www.youtube.com/embed/L4_deAdStKs >}}\n\n\n\nLet's get started!\n\n::: {#00698153 .cell execution_count=1}\n``` {.python .cell-code}\nimport ibis\nimport ibis.expr.datatypes as dt\n\nfrom ibis import _, selectors as s, udf\n\nibis.options.interactive = True\n```\n:::\n\n\n## Define a Function to Clean Inputs\n\nLet's define a function to clean the data in a few different ways:\n\n- Remove outliers (Z-score based)\n- Remove negative trip distances and negative fare amounts\n- Cast inputs to `float32`, since that's what PyTorch wants\n\nWe use a function here to ensure that we can run the same code on the test data set before prediction.\n\n::: {#958d91ec .cell execution_count=2}\n``` {.python .cell-code}\ndef clean_input(path):\n    return (\n        # load parquet\n        ibis.read_parquet(path)\n        # compute fare_amount_zscore and trip_distance_zscore\n        .mutate(s.across([\"fare_amount\", \"trip_distance\"], dict(zscore=(_ - _.mean()) / _.std())))\n        # filter out negative trip distance and bizarre transactions\n        .filter([_.trip_distance > 0.0, _.fare_amount >= 0.0])\n        # keep values that within 2 standard deviations\n        .filter(s.if_all(s.endswith(\"_zscore\"), _.abs() <= 2))\n        # drop columns that aren't necessary for further analysis\n        .drop(s.endswith(\"_zscore\"))\n        # select the columns we care about\n        .select(s.across([\"fare_amount\", \"trip_distance\"], _.cast(\"float32\")))\n    )\n```\n:::\n\n\n::: {#859cdcf4 .cell execution_count=3}\n``` {.python .cell-code}\ntraining_data = clean_input(\"https://storage.googleapis.com/ibis-tutorial-data/nyctaxi/yellow/yellow_tripdata_2016-01.parquet\")\ntraining_data\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> trip_distance </span>┃<span style=\"font-weight: bold\"> fare_amount </span>┃\n┡━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float32</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float32</span>     │\n├───────────────┼─────────────┤\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.20</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">14.0</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.00</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">9.5</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.90</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6.0</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.80</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5.0</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.80</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">11.0</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.30</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">11.0</span> │\n│         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">13.80</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">43.0</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.46</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">20.0</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.83</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5.5</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.87</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7.0</span> │\n│             <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │           <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└───────────────┴─────────────┘\n</pre>\n```\n:::\n:::\n\n\n## Execute the Query and Convert to Torch Tensors\n\nNew in Ibis 6.0 is the `to_torch` method, which executes a query and returns the results as a dictionary of `torch.Tensor`s keyed by column names.\n\nWe'll use that to get our input data for training.\n\n::: {#0e01d8f2 .cell execution_count=4}\n``` {.python .cell-code}\nimport torch\n\ntorch_training_data: dict[str, torch.Tensor] = training_data.to_torch()\ntorch_training_data\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n{'trip_distance': tensor([3.2000, 1.0000, 0.9000,  ..., 5.6300, 0.7700, 1.2600]),\n 'fare_amount': tensor([14.0000,  9.5000,  6.0000,  ..., 18.5000,  5.0000,  6.5000])}\n```\n:::\n:::\n\n\n## Train the Model\n\nLet's assume for now we don't have access to the model code. Maybe your co-worker wrote the model or it's part of an API that you don't control. Either way, it's a black box to us.\n\nThe API looks like this:\n\n::: {#4345f20d .cell execution_count=5}\n``` {.python .cell-code}\nimport pyarrow\n\n\nclass PredictCabFare:\n    def __init__(self, data: dict[str, torch.Tensor]) -> None:\n        \"\"\"Initialize the model with training data.\"\"\"\n\n    def train(self) -> None:\n        \"\"\"Train the model.\"\"\"\n\n    def __call__(self, input: pyarrow.ChunkedArray) -> pyarrow.Array:\n        \"\"\"Invoke the trained model on unseen input.\"\"\"\n```\n:::\n\n\n::: {#f1f6ccd5 .cell execution_count=6}\n``` {.python .cell-code}\nfrom model import PredictCabFare\n\n\nmodel = PredictCabFare(torch_training_data)\nmodel.train()\n```\n:::\n\n\n## Define an Ibis UDF that predicts fares\n\nNow we get to the meaty part: defining an Ibis UDF (user-defined function) that invokes our model on unseen data!\n\n::: {#190a3ea6 .cell execution_count=7}\n``` {.python .cell-code}\nfrom ibis.expr.operations import udf\n\n\n@udf.scalar.pyarrow\ndef predict_fare(distance: dt.float64) -> dt.float32:\n    return model(distance)\n```\n:::\n\n\nLet's run our UDF\n\n::: {#ce8225d3 .cell execution_count=8}\n``` {.python .cell-code}\nprediction = (\n    clean_input(\"https://storage.googleapis.com/ibis-tutorial-data/nyctaxi/yellow/yellow_tripdata_2016-02.parquet\")\n    .limit(10_000)\n    .mutate(predicted_fare=lambda t: predict_fare(t.trip_distance.cast(\"float32\")))\n)\nprediction\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> trip_distance </span>┃<span style=\"font-weight: bold\"> fare_amount </span>┃<span style=\"font-weight: bold\"> predicted_fare </span>┃\n┡━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float32</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float32</span>     │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float32</span>        │\n├───────────────┼─────────────┼────────────────┤\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">9.1</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">27.0</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">29.085516</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.3</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">11.5</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">12.626410</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.5</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4.0</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4.680637</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7.4</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">26.5</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">24.261295</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.6</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7.5</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7.802191</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.8</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">16.0</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">14.045299</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.1</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6.0</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6.383303</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6.8</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">21.0</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">22.558630</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.9</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">12.0</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">11.491301</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.2</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6.5</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6.667080</span> │\n│             <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │           <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │              <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└───────────────┴─────────────┴────────────────┘\n</pre>\n```\n:::\n:::\n\n\n## Prepare the Data for Plotting\n\nHere we [tidy up our data](https://r4ds.had.co.nz/tidy-data.html) to make it easier to adjust plotting style based on the data.\n\nIn this case, we're interested in visually distinguishing the model's **predicted** fare amount from the **actual** fare amount so we\npivot the data into a [longer form](https://r4ds.had.co.nz/tidy-data.html#longer) which adds a string column `metric`\nthat indicates the kind of fare a given row contains.\n\n::: {#e4794df0 .cell execution_count=9}\n``` {.python .cell-code}\npivoted_prediction = prediction.pivot_longer(\n    s.contains(\"fare\"),\n    values_to=\"fare\",\n    names_to=\"metric\",\n)\npivoted_prediction\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> trip_distance </span>┃<span style=\"font-weight: bold\"> metric         </span>┃<span style=\"font-weight: bold\"> fare      </span>┃\n┡━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float32</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>         │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float32</span>   │\n├───────────────┼────────────────┼───────────┤\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">9.1</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">fare_amount   </span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">27.000000</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">9.1</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">predicted_fare</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">29.085516</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.3</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">fare_amount   </span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">11.500000</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.3</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">predicted_fare</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">12.626410</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.5</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">fare_amount   </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4.000000</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.5</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">predicted_fare</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4.680637</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7.4</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">fare_amount   </span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">26.500000</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7.4</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">predicted_fare</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">24.261295</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.6</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">fare_amount   </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7.500000</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.6</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">predicted_fare</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7.802191</span> │\n│             <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>              │         <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└───────────────┴────────────────┴───────────┘\n</pre>\n```\n:::\n:::\n\n\n## Plot the Results\n\nThere are a bunch of strange and interesting data points and observations that don't have an obvious explanation:\n\n- There seem to be a good number of \\\\$50-ish rides regardless of distance. What's going on there?\n- What's going on with the extreme outliers? For instance, the 50 mile ride that only cost about \\\\$60 or the 25 mile ride that cost about \\\\$140.\n\n::: {#eb2af3ac .cell execution_count=10}\n``` {.python .cell-code}\nfrom plotnine import aes, ggtitle, ggplot, geom_point, xlab, ylab\n\n(\n    ggplot(pivoted_prediction, aes(x=\"trip_distance\", y=\"fare\", color=\"metric\"))\n    + geom_point()\n    + xlab(\"Trip Distance\")\n    + ylab(\"Fare\")\n    + ggtitle(\"Predicted Fare vs Actual Fare by Trip Distance\")\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n# Appendix: `model.py`\n\n```python\n\"\"\"Linear regression model for predicting cab fares using PyTorch.\n\nAdapted from https://gist.github.com/pdet/e8d38734232c08e6c15aba79b4eb8368#file-taxi_prediction_example-py.\n\"\"\"\nfrom __future__ import annotations\n\nimport pyarrow as pa\nimport torch\nimport tqdm\nfrom torch import nn\n\n\nclass LinearRegression(nn.Module):\n    def __init__(self, input_dim, output_dim):\n        super().__init__()\n        self.linear = nn.Linear(input_dim, output_dim)\n\n    def forward(self, distances):\n        return self.linear(distances)\n\n\nclass PredictCabFare:\n    def __init__(self, data, learning_rate: float = 0.01, epochs: int = 100) -> None:\n        # Define the input and output dimensions\n        input_dim = 1\n        output_dim = 1\n\n        # Create a linear regression model instance\n        self.data = data\n        self.model = LinearRegression(input_dim, output_dim)\n        self.learning_rate = learning_rate\n        self.epochs = epochs\n\n    def train(self):\n        distances = self.data[\"trip_distance\"].reshape(-1, 1)\n        fares = self.data[\"fare_amount\"].reshape(-1, 1)\n\n        # Define the loss function\n        criterion = nn.MSELoss()\n\n        # Define the optimizer\n        optimizer = torch.optim.SGD(self.model.parameters(), lr=self.learning_rate)\n\n        # Train the model\n        for _ in tqdm.trange(self.epochs):\n            # Forward pass\n            y_pred = self.model(distances)\n\n            # Compute loss\n            loss = criterion(y_pred, fares)\n\n            # Backward pass and optimize\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n\n    def predict(self, input):\n        with torch.no_grad():\n            return self.model(input)\n\n    def __call__(self, input: pa.ChunkedArray):\n        # Convert the input to numpy so it can be fed to the model\n        #\n        # .copy() to avoid the warning about undefined behavior from torch\n        input = torch.from_numpy(input.to_numpy().copy())[:, None]\n        predicted = self.predict(input).ravel()\n        return pa.array(predicted.numpy())\n\n```\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}