{
  "hash": "c9c0c5a5ec917b4a7330cc70c6a6bb69",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Classification metrics on the backend\"\nauthor: \"Tyler White\"\ndate: \"2024-12-05\"\nimage: thumbnail.png\ncategories:\n    - blog\n    - machine learning\n    - portability\n---\n\nA review of binary classification models, metrics used to evaluate them, and\ncorresponding metric calculations with Ibis.\n\nWe're going explore common classification metrics such as accuracy, precision, recall,\nand F1 score, demonstrating how to compute each one using Ibis. In this example, we'll\nuse DuckDB, the default Ibis backend, but we could use this same code to execute\nagainst another backend such as Postgres or Snowflake. This capability is useful as it\noffers an easy and performant way to evaluate model performance without extracting data\nfrom the source system.\n\n## Classification models\n\nIn machine learning, classification entails categorizing data into different groups.\nBinary classification, which is what we'll be covering in this post, specifically\ninvolves sorting data into only two distinct groups. For example, a model could\ndifferentiate between whether or not an email is spam.\n\n## Model evaluation\n\nIt's important to validate the performance of the model to ensure it makes correct\npredictions consistently and doesn’t only perform well on the data it was trained on.\nThese metrics help us understand not just the errors the model makes, but also the\ntypes of errors. For example, we might want to know if the model is more likely to\npredict a positive outcome when the actual outcome is negative.\n\nThe easiest way to break down how this works is to look at a confusion matrix.\n\n### Confusion matrix\n\nA confusion matrix is a table used to describe the performance of a classification\nmodel on a set of data for which the true values are known. As binary classification\nonly involves two categories, the confusion matrix only contains true positives, false\npositives, false negatives, and true negatives.\n\n![](confusion_matrix.png)\n\nHere's a breakdown of the terms with examples.\n\nTrue Positives (TP)\n: Correctly predicted positive examples.\n\nWe guessed it was a spam email, and it was. This email is going straight to the junk\nfolder.\n\nFalse Positives (FP)\n: Incorrectly predicted as positive.\n\nWe guessed it was a spam email, but it actually wasn’t. Hopefully, the recipient\ndoesn’t miss anything important as this email is going to the junk folder.\n\nFalse Negatives (FN)\n: Incorrectly predicted as negative.\n\nWe didn't guess it was a spam email, but it really was. Hopefully, the recipient\ndoesn’t click any links!\n\nTrue Negatives (TN)\n: Correctly predicted negative examples.\n\nWe guessed it was not a spam email, and it actually was not. The recipient can read\nthis email as intended.\n\n### Building a confusion matrix\n\n#### Sample dataset\n\nLet's create a sample dataset that includes twelve rows with two columns: `actual` and\n`prediction`. The `actual` column contains the true values, and the `prediction` column\ncontains the model's predictions.\n\n::: {#a9745342 .cell execution_count=1}\n``` {.python .cell-code}\nfrom ibis.interactive import *\n\nt = ibis.memtable(\n    {\n        \"id\": range(1, 13),\n        \"actual\": [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1],\n        \"prediction\": [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1],\n    }\n)\n\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> id    </span>┃<span style=\"font-weight: bold\"> actual </span>┃<span style=\"font-weight: bold\"> prediction </span>┃\n┡━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>      │\n├───────┼────────┼────────────┤\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">8</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">9</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │      <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │          <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└───────┴────────┴────────────┘\n</pre>\n```\n:::\n:::\n\n\nWe can use the `case` function to create a new column that categorizes the outcomes.\n\n::: {#89f71974 .cell execution_count=2}\n``` {.python .cell-code}\ncase_expr = ibis.cases(\n    ((_.actual == 0) & (_.prediction == 0), \"TN\"),\n    ((_.actual == 0) & (_.prediction == 1), \"FP\"),\n    ((_.actual == 1) & (_.prediction == 0), \"FN\"),\n    ((_.actual == 1) & (_.prediction == 1), \"TP\"),\n)\n\nt = t.mutate(outcome=case_expr)\n\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> id    </span>┃<span style=\"font-weight: bold\"> actual </span>┃<span style=\"font-weight: bold\"> prediction </span>┃<span style=\"font-weight: bold\"> outcome </span>┃\n┡━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>      │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │\n├───────┼────────┼────────────┼─────────┤\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">TP     </span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">TN     </span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">TN     </span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">TP     </span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">FN     </span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">TN     </span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">FP     </span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">8</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">FP     </span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">9</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">FN     </span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">TP     </span> │\n│     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │      <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │          <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>       │\n└───────┴────────┴────────────┴─────────┘\n</pre>\n```\n:::\n:::\n\n\nTo create the confusion matrix, we'll group by the outcome, count the occurrences, and\nuse `pivot_wider`. Widening our data makes it possible to perform column-wise\noperations on the table expression for metric calculations.\n\n::: {#3f519230 .cell execution_count=3}\n``` {.python .cell-code}\ncm = (\n    t.group_by(\"outcome\")\n    .agg(counted=_.count())\n    .pivot_wider(names_from=\"outcome\", values_from=\"counted\")\n    .select(\"TP\", \"FP\", \"FN\", \"TN\")\n)\n\ncm\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> TP    </span>┃<span style=\"font-weight: bold\"> FP    </span>┃<span style=\"font-weight: bold\"> FN    </span>┃<span style=\"font-weight: bold\"> TN    </span>┃\n┡━━━━━━━╇━━━━━━━╇━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├───────┼───────┼───────┼───────┤\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n└───────┴───────┴───────┴───────┘\n</pre>\n```\n:::\n:::\n\n\nWe can plot the confusion matrix to visualize the results.\n\n::: {#a7d0ce20 .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndata = cm.to_pyarrow().to_pydict()\n\nplt.figure(figsize=(6, 4))\nsns.heatmap(\n    [[data[\"TP\"][0], data[\"FP\"][0]], [data[\"FN\"][0], data[\"TN\"][0]]],\n    annot=True,\n    fmt=\"d\",\n    cmap=\"Blues\",\n    cbar=False,\n    xticklabels=[\"Predicted Positive\", \"Predicted Negative\"],\n    yticklabels=[\"Actual Positive\", \"Actual Negative\"],\n)\nplt.title(\"Confusion Matrix\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=488 height=357}\n:::\n:::\n\n\nNow that we've built a confusion matrix, we're able to more easily calculate a few\ncommon classification metrics.\n\n### Metrics\n\nHere are the metrics we'll calculate as well as a brief description of each.\n\nAccuracy\n: The proportion of correct predictions out of all predictions made. This measures the\noverall effectiveness of the model across all classes.\n\nPrecision\n: The proportion of true positive predictions out of all positive predictions made.\nThis tells us how many of the predicted positives were actually correct.\n\nRecall\n: The proportion of true positive predictions out of all actual positive examples. This\nmeasures how well the model identifies all actual positives.\n\nF1 Score\n: A metric that combines precision and recall into a single score by taking their\nweighted average. This balances the trade-off between precision and recall, making it\nespecially useful for imbalanced datasets.\n\nWe can calculate these metrics using the columns from the confusion matrix we created\nearlier.\n\n::: {#fb7ebbe7 .cell execution_count=5}\n``` {.python .cell-code}\naccuracy_expr = (_.TP + _.TN) / (_.TP + _.TN + _.FP + _.FN)\nprecision_expr = _.TP / (_.TP + _.FP)\nrecall_expr = _.TP / (_.TP + _.FN)\nf1_score_expr = 2 * (precision_expr * recall_expr) / (precision_expr + recall_expr)\n\nmetrics = cm.select(\n    accuracy=accuracy_expr,\n    precision=precision_expr,\n    recall=recall_expr,\n    f1_score=f1_score_expr,\n)\n\nmetrics\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> accuracy </span>┃<span style=\"font-weight: bold\"> precision </span>┃<span style=\"font-weight: bold\"> recall   </span>┃<span style=\"font-weight: bold\"> f1_score </span>┃\n┡━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>  │\n├──────────┼───────────┼──────────┼──────────┤\n│ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.583333</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.666667</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.571429</span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.615385</span> │\n└──────────┴───────────┴──────────┴──────────┘\n</pre>\n```\n:::\n:::\n\n\n## A more efficient approach\n\nIn the illustrative example above, we used a case expression and pivoted the data to\ndemonstrate where the values would fall in the confusion matrix before performing our\nmetric calculations using the pivoted data. We can actually skip this step using column\naggregation.\n\n::: {#49c69b2f .cell execution_count=6}\n``` {.python .cell-code}\ntp = (t.actual * t.prediction).sum()\nfp = t.prediction.sum() - tp\nfn = t.actual.sum() - tp\ntn = t.actual.count() - tp - fp - fn\n\naccuracy_expr = (t.actual == t.prediction).mean()\nprecision_expr = tp / t.prediction.sum()\nrecall_expr = tp / t.actual.sum()\nf1_score_expr = 2 * tp / (t.actual.sum() + t.prediction.sum())\n\nprint(\n    f\"accuracy={accuracy_expr.to_pyarrow().as_py()}\",\n    f\"precision={precision_expr.to_pyarrow().as_py()}\",\n    f\"recall_expr={recall_expr.to_pyarrow().as_py()}\",\n    f\"f1_score={f1_score_expr.to_pyarrow().as_py()}\",\n    sep=\"\\n\",\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\naccuracy=0.5833333333333334\nprecision=0.6666666666666666\nrecall_expr=0.5714285714285714\nf1_score=0.6153846153846154\n```\n:::\n:::\n\n\n## Conclusion\n\nBy pushing the computation down to the backend, the performance is as powerful as the\nbackend we're connected to. This capability allows us to easily scale to different\nbackends without modifying any code.\n\nWe hope you give this a try and let us know how it goes. If you have any questions or\nfeedback, please reach out to us on [GitHub](https://github.com/ibis-project) or\n[Zulip](https://ibis-project.zulipchat.com/).\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}