{
  "hash": "11a33fda6aef0f256ced3d8488292de6",
  "result": {
    "markdown": "---\ntitle: Ibis v6.0.0\nauthor: \"Ibis team\"\ndate: \"2023-07-03\"\ncategories:\n    - release\n    - blog\n---\n\n## Overview\n\nIbis 6.0.0 adds the Oracle backend, revamped UDF support, and many new features. This release also includes a number of refactors, bug fixes, and performance improvements. You can view the full changelog in [the release notes](../../../release_notes.md).\n\nIf you're new to Ibis, see [how to install](../../../install.qmd) and [the getting started tutorial](../../../tutorials/getting_started.qmd).\n\nTo follow along with this blog, ensure you're on `'ibis-framework>=6,<7'`. First, we'll setup Ibis and fetch some sample data to use.\n\n::: {#df4d0de1 .cell execution_count=1}\n``` {.python .cell-code}\nimport ibis\nimport ibis.selectors as s\n\nibis.options.interactive = True\nibis.options.repr.interactive.max_rows = 3\n```\n:::\n\n\nNow, fetch the penguins dataset.\n\n::: {#4967a305 .cell execution_count=2}\n``` {.python .cell-code}\nt = ibis.examples.penguins.fetch()\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃<span style=\"font-weight: bold\"> flipper_length_mm </span>┃<span style=\"font-weight: bold\"> body_mass_g </span>┃<span style=\"font-weight: bold\"> sex    </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├─────────┼───────────┼────────────────┼───────────────┼───────────────────┼─────────────┼────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.7</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">181</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3750</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.5</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.4</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">186</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3800</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">40.3</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.0</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">195</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3250</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>         │              <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │             <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │                 <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │           <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>      │     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└─────────┴───────────┴────────────────┴───────────────┴───────────────────┴─────────────┴────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n## Breaking changes\n\n### Join duplicate column names\n\nPreviously when joining tables with duplicate column names, `_x` and `_y` suffixes would be appended by default to the left and right tables respectively. You could override this with the `suffix` argument, which is now removed in favor of `lname` and `rname` arguments. The default is changed to no suffix for the left table and `_right` for the right table.\n\n::: {#63b558d3 .cell execution_count=3}\n``` {.python .cell-code}\nt.join(t, \"island\").select(s.startswith(\"species\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> species_right </span>┃\n┡━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>        │\n├─────────┼───────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie       </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie       </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie       </span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>             │\n└─────────┴───────────────┘\n</pre>\n```\n:::\n:::\n\n\nTo replicate the previous behavior:\n\n::: {#8870c8c1 .cell execution_count=4}\n``` {.python .cell-code}\nt.join(t, \"island\", lname=\"{name}_x\", rname=\"{name}_y\").select(\n    s.startswith(\"species\")\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species_x </span>┃<span style=\"font-weight: bold\"> species_y </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │\n├───────────┼───────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>         │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>         │\n└───────────┴───────────┘\n</pre>\n```\n:::\n:::\n\n\n### `.count()` column names no longer named `count` automatically\n\nColumns created with the `.count()` aggregation are no longer automatically named `count`. This is to follow convention with other aggregations and reduce the likelihood of name collisions.\n\n::: {#07597e82 .cell execution_count=5}\n``` {.python .cell-code}\nt.group_by(\"species\").agg(ibis._.species.count())\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species   </span>┃<span style=\"font-weight: bold\"> Count(species) </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>          │\n├───────────┼────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">152</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo   </span> │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">124</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Chinstrap</span> │             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">68</span> │\n└───────────┴────────────────┘\n</pre>\n```\n:::\n:::\n\n\nTo reproduce the old behavior, you can rename the column to `count` with:\n\n\n```python\nt.group_by(\"species\").agg(count=ibis._.species.count())\n```\n\n## Backends\n\n### Oracle\n\nThe Oracle backend was added! See the [Voltron Data blog](https://voltrondata.com/resources/ibis-6-0-oracle-backend-support) for more details.\n\n```python\nibis.connect(f\"oracle://user:password@host\")\n```\n\n### DuckDB\n\nThere were various DuckDB improvements, but one notable new feature is the ability to attach to a SQLite database through DuckDB. This allows you to run OLAP queries via DuckDB significantly faster on source data from SQLite.\n\nFirst we'll create a DuckDB connection and show it has no tables:\n\n::: {#8ba6caec .cell execution_count=6}\n``` {.python .cell-code}\nduckdb_con = ibis.connect(\"duckdb://\")\nduckdb_con.list_tables()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n[]\n```\n:::\n:::\n\n\nThen create a SQLite database with a table:\n\n::: {#7a85bcc6 .cell execution_count=7}\n``` {.python .cell-code}\nsqlite_con = ibis.connect(\"sqlite://penguins.db\")\nsqlite_con.create_table(\"penguins\", t.to_pandas(), overwrite=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃<span style=\"font-weight: bold\"> flipper_length_mm </span>┃<span style=\"font-weight: bold\"> body_mass_g </span>┃<span style=\"font-weight: bold\"> sex    </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>     │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├─────────┼───────────┼────────────────┼───────────────┼───────────────────┼─────────────┼────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.7</span> │             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">181.0</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3750.0</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.5</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.4</span> │             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">186.0</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3800.0</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">40.3</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.0</span> │             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">195.0</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3250.0</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>         │              <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │             <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │                 <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │           <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>      │     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└─────────┴───────────┴────────────────┴───────────────┴───────────────────┴─────────────┴────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\nAnd attach it:\n\n::: {#e75c55eb .cell execution_count=8}\n``` {.python .cell-code}\nduckdb_con.attach_sqlite(\"./penguins.db\")\nduckdb_con.list_tables()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n['penguins']\n```\n:::\n:::\n\n\n#### MotherDuck support!\n\nMotherDuck launched recently and is now supported in Ibis!\n\nSimply connect with the DuckDB backend using `md:` or `motherduck:` as the database.\n\n\n```python\nibis.connect(\"duckdb://md:\")\n```\n\n### Polars\n\nThe Polars backend received many improvements from community members [@alexander-beedie](https://github.com/alexander-beedie) and [@mesejo](https://github.com/mesejo), with plenty of operations now supported.\n\nSome additions in this version include:\n\n- `any` and `all` reductions\n- `argmin` and `argmax`\n- `identical_to`\n- `corr`\n- support for `.sql()`\n\nGive it a try by setting your backend to Polars with `ibis.set_backend(\"polars\")`.\n\n## Functionality\n\n### UDFs\n\nUser-defined functions (UDFs) have been revamped with a new syntax and new backends added. To get started, import the decorator:\n\n::: {#c85c3821 .cell execution_count=9}\n``` {.python .cell-code}\nfrom ibis import udf\n```\n:::\n\n\nDefine a UDF:\n\n::: {#1cf149ea .cell execution_count=10}\n``` {.python .cell-code}\n@udf.scalar.python\ndef num_vowels(s: str, include_y: bool = False) -> int:\n    return sum(map(s.lower().count, \"aeiou\" + (\"y\" * include_y)))\n```\n:::\n\n\nAnd call it:\n\n::: {#158fdd6a .cell execution_count=11}\n``` {.python .cell-code}\nnum_vowels(t[:1].species.execute()[0])\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">4</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#aab3553e .cell execution_count=12}\n``` {.python .cell-code}\nt.group_by(num_vowels=num_vowels(t.species)).agg(\n    num_vowels_island_count=t.island.count()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> num_vowels </span>┃<span style=\"font-weight: bold\"> num_vowels_island_count </span>┃\n┡━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>      │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>                   │\n├────────────┼─────────────────────────┤\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │                     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">152</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │                     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">124</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │                      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">68</span> │\n└────────────┴─────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#9307cb71 .cell execution_count=13}\n``` {.python .cell-code}\nt.filter(num_vowels(t.species) < 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> island </span>┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃<span style=\"font-weight: bold\"> flipper_length_mm </span>┃<span style=\"font-weight: bold\"> body_mass_g </span>┃<span style=\"font-weight: bold\"> sex    </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├─────────┼────────┼────────────────┼───────────────┼───────────────────┼─────────────┼────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">46.1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">13.2</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">211</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4500</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">50.0</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">16.3</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">230</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5700</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">48.7</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">14.1</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">210</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4450</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>      │              <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │             <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │                 <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │           <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>      │     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└─────────┴────────┴────────────────┴───────────────┴───────────────────┴─────────────┴────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n### `to_torch` API\n\nA new `to_torch` output method was added. Combined with UDFs, this brings powerful ML capabilities into Ibis. See a complete example in the [Ibis + DuckDB + PyTorch blog](../torch).\n\n::: {#33e48456 .cell execution_count=14}\n``` {.python .cell-code}\nimport torch\n\ntorch.set_printoptions(threshold=10)\n```\n:::\n\n\n::: {#867cc0d3 .cell execution_count=15}\n``` {.python .cell-code}\nt.select(s.numeric()).to_torch()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n{'bill_length_mm': tensor([39.1000, 39.5000, 40.3000,  ..., 49.6000, 50.8000, 50.2000],\n        dtype=torch.float64),\n 'bill_depth_mm': tensor([18.7000, 17.4000, 18.0000,  ..., 18.2000, 19.0000, 18.7000],\n        dtype=torch.float64),\n 'flipper_length_mm': tensor([181, 186, 195,  ..., 193, 210, 198]),\n 'body_mass_g': tensor([3750, 3800, 3250,  ..., 3775, 4100, 3775]),\n 'year': tensor([2007, 2007, 2007,  ..., 2009, 2009, 2009])}\n```\n:::\n:::\n\n\n### Array zip support\n\nA new zip operation was added on array data types, allowing you to zip together multiple arrays.\n\n::: {#f0880cfc .cell execution_count=16}\n``` {.python .cell-code}\narrays = ibis.memtable(\n    {\"numbers\": [[3, 2], [], None], \"strings\": [[\"a\", \"c\"], None, [\"e\"]]}\n)\narrays\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> numbers      </span>┃<span style=\"font-weight: bold\"> strings       </span>┃\n┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;string&gt;</span> │\n├──────────────┼───────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">]</span>       │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'c'</span><span style=\"font-weight: bold\">]</span>    │\n│ <span style=\"font-weight: bold\">[]</span>           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>          │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>         │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'e'</span><span style=\"font-weight: bold\">]</span>         │\n└──────────────┴───────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#cac84c5c .cell execution_count=17}\n``` {.python .cell-code}\narrays.numbers.zip(arrays.strings)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayZip()                           </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;struct&lt;f1: int64, f2: string&gt;&gt;</span> │\n├──────────────────────────────────────┤\n│ <span style=\"font-weight: bold\">[{</span><span style=\"color: #808000; text-decoration-color: #808000\">...</span><span style=\"font-weight: bold\">}</span>, <span style=\"font-weight: bold\">{</span><span style=\"color: #808000; text-decoration-color: #808000\">...</span><span style=\"font-weight: bold\">}]</span>                       │\n│ <span style=\"font-weight: bold\">[]</span>                                   │\n│ <span style=\"font-weight: bold\">[{</span><span style=\"color: #808000; text-decoration-color: #808000\">...</span><span style=\"font-weight: bold\">}]</span>                              │\n└──────────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#4e961ab3 .cell execution_count=18}\n``` {.python .cell-code}\narrays.numbers.zip(arrays.strings).unnest()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayZip()                    </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">struct&lt;f1: int64, f2: string&gt;</span> │\n├───────────────────────────────┤\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'f1'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'f2'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'a'</span><span style=\"font-weight: bold\">}</span>          │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'f1'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'f2'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'c'</span><span style=\"font-weight: bold\">}</span>          │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'f1'</span>: <span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'f2'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'e'</span><span style=\"font-weight: bold\">}</span>       │\n└───────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### Try cast support\n\nA new `try_cast()` operation was added that allows you to cast a column to a type, but return null if the cast fails.\n\n::: {#d8e748e5 .cell execution_count=19}\n``` {.python .cell-code}\nibis.literal(\"a\").try_cast(\"int\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=19}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span style=\"font-style:italic\" class=\"ansi-magenta-fg\">None</span></pre>\n```\n:::\n\n:::\n:::\n\n\n```python\nibis.literal(0).try_cast(\"float\")\n```\n\n### `__dataframe__` support\n\nIbis now supports the [dataframe interchange protocol](https://data-apis.org/dataframe-protocol/latest/index.html), allowing Ibis expressions to be used in any framework that supports it. Adoption of the protocol is still in its early stages, but we expect this to enable Ibis to be used in many new places going forward.\n\n::: {#418f5bdb .cell execution_count=20}\n``` {.python .cell-code}\nt.__dataframe__()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n<ibis.expr.types.dataframe_interchange.IbisDataFrame at 0x7f7bf415d9c0>\n```\n:::\n:::\n\n\n### Streamlit experimental connection interface\n\nA new experimental connection interface was added for Streamlit. See [how-to write a Streamlit app with Ibis](../../../how-to/visualization/streamlit.qmd).\n\n### SQL dialect parameter\n\nIn SQL methods, you can now pass the `dialect` parameter to specify the SQL dialect used. This leverages [`sqlglot`](https://github.com/tobymao/sqlglot) under the hood.\n\n::: {#da81bb20 .cell execution_count=21}\n``` {.python .cell-code}\nbigquery_sql = \"\"\"\nSELECT\n  t0.`species`,\n  COUNT(t0.`species`) AS `count`,\n  CAST(COUNT(DISTINCT t0.`island`) AS FLOAT64) AS `islands`\nFROM penguins AS t0\nGROUP BY\n  1\n\"\"\"\n\nduckdb_con.sql(bigquery_sql, dialect=\"bigquery\")\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species   </span>┃<span style=\"font-weight: bold\"> count </span>┃<span style=\"font-weight: bold\"> islands </span>┃\n┡━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span> │\n├───────────┼───────┼─────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">152</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.0</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo   </span> │   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">124</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.0</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Chinstrap</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">68</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.0</span> │\n└───────────┴───────┴─────────┘\n</pre>\n```\n:::\n:::\n\n\n### Delta Lake read/write support for some backends\n\n[Delta Lake tables](https://delta-io) are supported through the [`deltalake` package](https://github.com/delta-io/delta-rs) with `read_delta()` implemented for DuckDB, Polars, and DataFusion.\n\n::: {#202f5c55 .cell execution_count=22}\n``` {.python .cell-code}\nt.to_delta(\"penguins.delta\", mode=\"overwrite\")\n```\n:::\n\n\n::: {#4e3e2b24 .cell execution_count=23}\n``` {.python .cell-code}\nt = ibis.read_delta(\"penguins.delta\")\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃<span style=\"font-weight: bold\"> flipper_length_mm </span>┃<span style=\"font-weight: bold\"> body_mass_g </span>┃<span style=\"font-weight: bold\"> sex    </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├─────────┼───────────┼────────────────┼───────────────┼───────────────────┼─────────────┼────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.7</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">181</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3750</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.5</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.4</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">186</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3800</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">40.3</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.0</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">195</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3250</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>         │              <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │             <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │                 <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │           <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>      │     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└─────────┴───────────┴────────────────┴───────────────┴───────────────────┴─────────────┴────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n### Selectors\n\nSome minor selectors improvements were added including the ability to use abstract type names and lists of strings.\n\n::: {#4b1a65d9 .cell execution_count=24}\n``` {.python .cell-code}\nt.select(s.of_type(\"string\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> sex    </span>┃\n┡━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │\n├─────────┼───────────┼────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>         │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>      │\n└─────────┴───────────┴────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#7a7f62d3 .cell execution_count=25}\n``` {.python .cell-code}\nt.agg(s.across([\"species\", \"island\"], ibis._.count()))\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> island </span>┃\n┡━━━━━━━━━╇━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>  │\n├─────────┼────────┤\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">344</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">344</span> │\n└─────────┴────────┘\n</pre>\n```\n:::\n:::\n\n\n## Refactors\n\nSeveral internal refactors that shouldn't affect normal usage were made. See [the release notes](../../release_notes.md) for more details.\n\n## Wrapping up\n\nIbis v6.0.0 brings exciting new features that enable future support for ML and streaming workloads.\n\nAs always, try Ibis by [installing](../../install.qmd) and [getting started](../../tutorials/getting_started.qmd).\n\nIf you run into any issues or find support is lacking for your backend, [open an issue](https://github.com/ibis-project/issues/new/choose) or [discussion](https://github.com/ibis-project/discussions/new/choose) and let us know!\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}