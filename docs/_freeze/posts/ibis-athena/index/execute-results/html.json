{
  "hash": "79dc903bd8bff9c20a4e1998500d9de6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Querying Amazon Athena from the comfort of your Python interpreter\"\nauthor: \"Anja Boskovic\"\nerror: false\ndate: \"2025-02-04\"\ncategories:\n    - blog\n    - athena\n---\n\nHave you ever wanted to harness the power of AWS Athena, but found yourself\ntangled up in Presto SQL syntax? Good news! Ibis now supports [Amazon\nAthena](https://aws.amazon.com/athena/) as its [newest\nbackend](https://ibis-project.org/backends/athena), bringing you the familiar\ncomfort of DataFrame operations while tapping into AWS's robust data lake\narchitecture.\n\n## Why?\n\nThere's even more to love about this integration. Athena's pay-per-query\npricing model means that users pay for each query they run. With Ibis' query\noptimisation before execution, you can potentially reduce costs without needing\nto agonise over query efficiency. Plus, since Athena can query data directly\nfrom S3, this new backend lets you analyse your data lake contents with beloved\nPython libraries like PyArrow and pandas without the hassle of downloading or\nmoving massive datasets.\n\n## Installation Prerequisites\n\nMake sure you have an [IAM\naccount](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-prereqs.html)\nand that your [credentials are in an expected location in your local\nenvironment](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html).\n\nAdditionally, using the same account and region that you are using for Athena,\nyou will need to [create an S3\nbucket](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/create-bucket.html)\nwhere Athena can dump query results. This bucket will be set to\n`s3_staging_dir` in the connection call to the Athena backend.\n\n::: {.callout-note}\nIf you are not able to query Athena through awscli, your queries will similarly\nnot work on Ibis. Please note that AWS charges will apply for queries to Athena\nexecuted in following this tutorial.\n:::\n\n## Installation\n\nInstall Ibis with the dependencies needed to work with AWS Athena:\n\n```bash\n$ pip install 'ibis-framework[athena]'\n```\n\n## Data\n\nWe are going to be creating some sample ecological data about ibis behaviour.\nThe data will contain multiple columns with information about species,\nlocation, weather, group size, behaviour, and location temperature.\n\n::: {#eb6a158a .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\n\ndef create_observations(n: int, seed: int = 42) -> pd.DataFrame:\n    ibis_species = [\"Sacred Ibis\", \"Scarlet Ibis\", \"Glossy Ibis\", \"White Ibis\"]\n    locations = [\"Wetland\", \"Grassland\", \"Coastal\"]\n    behaviors = [\"Feeding\", \"Nesting\", \"Flying\"]\n    weather_conditions = [\"Sunny\", \"Rainy\"]\n\n    np.random.seed(seed)  # For reproducibility\n\n    return pd.DataFrame(\n        {\n            \"observation_date\": np.full(n, np.datetime64(\"2024-01-01\"))\n                + np.random.randint(0, 365, size=n).astype(\"timedelta64[D]\"),\n            \"species\": np.random.choice(ibis_species, size=n),\n            \"location\": np.random.choice(locations, size=n),\n            \"group_size\": np.random.randint(1, 20, size=n),\n            \"behavior\": np.random.choice(behaviors, size=n),\n            \"weather\": np.random.choice(weather_conditions, size=n),\n            \"temperature_c\": np.random.normal(25, 5, size=n)  # Mean 25°C, std 5°C\n        }\n    )\n\n\nibis_observations = create_observations(1000)\n```\n:::\n\n\n## Demo\n\nLet's start by opening a connection to AWS Athena with Ibis, using the S3\nbucket we created to store query results.\n\n::: {#60b87df9 .cell execution_count=2}\n``` {.python .cell-code}\nfrom ibis.interactive import *\n\ncon = ibis.athena.connect(\n    s3_staging_dir=\"s3://aws-athena-query-results-ibis-testing\",\n    region_name=\"us-east-2\",\n)\n```\n:::\n\n\nLet's create some data using our `ibis_observations` pandas DataFrame.\n\n::: {#d6ff6be5 .cell execution_count=3}\n``` {.python .cell-code}\ncon.create_database(\"mydatabase\", force=True)\ncon.drop_table(\"ibis_observations\", force=True)\ncon.create_table(\"ibis_observations\", obj=ibis_observations, database=\"mydatabase\")\ncon.list_tables(database=\"mydatabase\")\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n['ibis_observations']\n```\n:::\n:::\n\n\nAnd we can grab information about table schemas to help us out with our\nqueries:\n\n::: {#ed99ac80 .cell execution_count=4}\n``` {.python .cell-code}\ncon.get_schema(\"ibis_observations\", database=\"mydatabase\")\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nibis.Schema {\n  observation_date  timestamp\n  species           string\n  location          string\n  group_size        int64\n  behavior          string\n  weather           string\n  temperature_c     float64\n}\n```\n:::\n:::\n\n\nAnd now we are able to grab the table, and make some Ibis queries! Like what is\nthe average group size by species?\n\n::: {#a4ce5647 .cell execution_count=5}\n``` {.python .cell-code}\nt = con.table(\"ibis_observations\", database=\"mydatabase\")\n\n# Average group size by species\nt.group_by(\"species\").aggregate(avg_group=t.group_size.mean())\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┳━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species      </span>┃<span style=\"font-weight: bold\"> avg_group </span>┃\n┡━━━━━━━━━━━━━━╇━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>   │\n├──────────────┼───────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Glossy Ibis </span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10.003906</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Sacred Ibis </span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10.030075</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Scarlet Ibis</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">9.673307</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">White Ibis  </span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10.259912</span> │\n└──────────────┴───────────┘\n</pre>\n```\n:::\n:::\n\n\nAnd ibis does all the work on generating the Presto SQL that Athena can\nunderstand:\n\nHow about most common behaviour during rainy weather?\n\n::: {#d7b9db20 .cell execution_count=6}\n``` {.python .cell-code}\n(\n    t.filter(t.weather == \"Rainy\")\n    .group_by(\"behavior\")\n    .aggregate(count=lambda t: t.count())\n    .order_by(ibis.desc(\"count\"))\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> behavior </span>┃<span style=\"font-weight: bold\"> count </span>┃\n┡━━━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├──────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Feeding </span> │   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">172</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Nesting </span> │   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">168</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Flying  </span> │   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">166</span> │\n└──────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\nTemperature effects on behaviour?\n\n::: {#3a7dc031 .cell execution_count=7}\n``` {.python .cell-code}\nt.group_by(\"behavior\").aggregate(avg_temp=t.temperature_c.mean()).order_by(\"avg_temp\")\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━┳━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> behavior </span>┃<span style=\"font-weight: bold\"> avg_temp  </span>┃\n┡━━━━━━━━━━╇━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>   │\n├──────────┼───────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Feeding </span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">25.006455</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Flying  </span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">25.116323</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Nesting </span> │ <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">25.133050</span> │\n└──────────┴───────────┘\n</pre>\n```\n:::\n:::\n\n\nNow that we're nearing the end of this demo, I wanted to show you that you can\nalso delete tables and databases using ibis:\n\n::: {#47ca3c96 .cell execution_count=8}\n``` {.python .cell-code}\ncon.drop_table(\"ibis_observations\", database=\"mydatabase\")\ncon.drop_database(\"mydatabase\")\ncon.disconnect()\n```\n:::\n\n\nYou wouldn't need to fiddle with Athena's SDK!\n\n## How does this all work?\n\nUnder the hood, AWS Athena runs on a version of Trino (formerly known as Presto\nSQL). Instead of writing a completely new SQL compiler for Athena, we were able\nto leverage Ibis' existing Trino compiler with some careful adjustments.\n\nThis provides significant benefits in code efficiency - the Athena backend\nimplementation required only about 40 lines of unique code.\n\nThere are some nuances to note: since Athena runs on an older version of Trino,\nnot all of Trino's newest features are available. For a detailed comparison of\nsupported features across different backends, please check out the [Ibis\nbackend support matrix](ihttps://ibis-project.org/backends/support/matrix).\n\nIf you're new here, welcome. Here are some resources to learn more about Ibis:\n\n- [Ibis Docs](https://ibis-project.org/)\n- [Ibis GitHub](https://github.com/ibis-project/ibis)\n\nChat with us on Zulip:\n\n- [Ibis Zulip Chat](https://ibis-project.zulipchat.com/)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}