{
  "hash": "b190bbc9b3471d4a558035a39da3d746",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Varchar in a haystack\"\nauthor: \"Tyler White\"\nerror: false\ndate: \"2024-04-12\"\nimage: thumbnail.png\ncategories:\n  - blog\n  - data analysis\n  - puzzle\n---\n\n\n\n\n## The scenario\n\nYou're a data analyst, and a new ticket landed in your queue.\n\n> Subject: Urgent: Data Discovery Needed for Critical Analysis\n>\n> Hi Data Team,\n>\n> I hope this message finds you well. I'm reaching out with an urgent request\n> that directly impacts the company's most critical project. We need to locate\n> a specific value within our database but do not know which column it's in.\n> Unfortunately, we don't have documentation for this particular table. We are\n> looking for the value \"NEEDLE\" in the table.\n>\n> We think it is in the X database, Y schema, and Z table. We appreciate your\n> help with this urgent matter!\n\nWhelp, let's give this a try.\n\n## The table\n\nTo set up this particular problem, we can use pandas to create a table with 5\ncolumns and 100 rows. We can use the `at` method to update a row with the value\n\"NEEDLE\" to simulate what we need to find.\n\n::: {#a55889fb .cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport pandas as pd\nimport random\nimport string\nfrom ibis.interactive import *\n\n\ndef random_string(length=10):\n    return \"\".join(\n        random.choice(string.ascii_letters + string.digits) for _ in range(length)\n    )\n\n\ndata = [[random_string() for _ in range(5)] for _ in range(100)]\ncolumn_names = [f\"col{i+1}\" for i in range(5)]\ndf = pd.DataFrame(data, columns=column_names)\ndf.at[42, 'col4'] = \"NEEDLE\"\nt = ibis.memtable(df, name=\"Z\")\n```\n:::\n\n\n::: {#9070badd .cell execution_count=2}\n``` {.python .cell-code}\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> col1       </span>┃<span style=\"font-weight: bold\"> col2       </span>┃<span style=\"font-weight: bold\"> col3       </span>┃<span style=\"font-weight: bold\"> col4       </span>┃<span style=\"font-weight: bold\"> col5       </span>┃\n┡━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>     │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>     │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>     │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>     │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>     │\n├────────────┼────────────┼────────────┼────────────┼────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">BYjQTOia1f</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">pik8UBUQ06</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">JUhXgdJGCn</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">46O1svpUSW</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">hr0dmVIOkU</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">e973mLNHa1</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">eYWTWYGQiK</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">qfiMKFjwIu</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">KvtiH1nDL3</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">0MXkme4lzG</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">ZeyJBlraO8</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">9mk8NSwZBH</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">cHndFLt80M</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">urHnrgqtfA</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">kbVxhOiSD0</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">hRodaFvAES</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">EdTEcamHEV</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">EUZp5YpgNS</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">46R7bYiiqa</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">DIV8BWncTc</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Rm8IdoOhlh</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Lrrnf46MJd</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">lNVB18l0C7</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">fLTaFvH1We</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">ORIdNoFqbB</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">wUZRdFYUMo</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">oWovrqqovm</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">loW7UhXQVE</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Q5dXxPfaDA</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">d11VR54kbJ</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">jKNEfRoDXK</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">vOlfswJ9Hk</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">pFDTRA6tEf</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">AqmI3RyjJW</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">UawVq7XqaB</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">h1RqXsGL5c</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">vypyFxZWoP</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">zzMYrytrb6</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">0bbc0pDxQi</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">ncRR7A10sT</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">CHCKfLzLV0</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">eVv8jtfcV0</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">kKrVpaLs8i</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">HeUfW0VABs</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">5XyaKrpYk5</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">1FVJbxQUQt</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">s9p2LiMYf9</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">two9V1WZpa</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Y70W0uPLdk</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">gflm7xvysr</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>          │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>          │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>          │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>          │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>          │\n└────────────┴────────────┴────────────┴────────────┴────────────┘\n</pre>\n```\n:::\n:::\n\n\n## The solution(s)\n\nThere are a few ways we could solve this.\n\n#### Option 1: write SQL\n\nWe could always spell it out with SQL, including each column that we want to\ncheck in the `WHERE` clause. In this scenario, we know each column is a varchar,\nso we can check each one for the value \"NEEDLE\".\n\n```sql\nSELECT *\nFROM Z\nWHERE col1 = 'NEEDLE'\n   OR col2 = 'NEEDLE'\n   OR col3 = 'NEEDLE'\n   OR col4 = 'NEEDLE'\n   OR col5 = 'NEEDLE';\n```\n\nThis can be time-consuming. You might want something a little more dynamic.\n\n#### Option 2: write dynamic SQL\n\nDynamically constructing the SQL query at runtime can be more complex, but it\noffers more flexibility, especially if we have more than five columns.\n\n```sql\nDO $$\nDECLARE\n    sql text;\n    where_clause text := '';\nBEGIN\n    SELECT INTO where_clause\n           string_agg(quote_ident(column_name) || ' = ''NEEDLE''', ' OR ')\n    FROM information_schema.columns\n    WHERE table_name = 'Z'\n        AND table_schema = 'public'\n        AND data_type IN ('character varying', 'varchar', 'text', 'char');\n\n    sql := 'SELECT *\n            FROM Z\n            WHERE ' || where_clause;\n\n    EXECUTE sql;\nEND $$;\n```\n\nThis can be difficult to troubleshoot, and it is easy to get lost in the quote\ncharacters.\n\n#### Option 3: use Ibis\n\nWe can make use of [`selectors`](../../reference/selectors.qmd)!\n\n::: {#b8d80623 .cell execution_count=3}\n``` {.python .cell-code}\nexpr = t.filter(s.if_any(s.of_type(\"string\"), _ == \"NEEDLE\"))\n\nexpr\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> col1       </span>┃<span style=\"font-weight: bold\"> col2       </span>┃<span style=\"font-weight: bold\"> col3       </span>┃<span style=\"font-weight: bold\"> col4   </span>┃<span style=\"font-weight: bold\"> col5       </span>┃\n┡━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>     │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>     │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>     │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>     │\n├────────────┼────────────┼────────────┼────────┼────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">oB66pvwIS3</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">evpFlTLzgM</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">OqiRxZW7Ex</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">NEEDLE</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">VBxPEgTB8j</span> │\n└────────────┴────────────┴────────────┴────────┴────────────┘\n</pre>\n```\n:::\n:::\n\n\nWe can see the **NEEDLE** value hiding in `col4`.\n\n## The explanation\n\n`s.of_type(\"string\")` was used to select string columns, then `s.if_any()`\nbuilds up the ORs. The `_ == \"NEEDLE\"` part is the condition itself, checking\neach column for the value.\n\nHere's the SQL that was generated to help us find it, which is quite similar\nto what we would have had to write if we had gone with [Option 1](#option-1-write-sql).\n\n::: {#c7df06d6 .cell execution_count=4}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=4}\n```sql\nSELECT\n  \"t0\".\"col1\",\n  \"t0\".\"col2\",\n  \"t0\".\"col3\",\n  \"t0\".\"col4\",\n  \"t0\".\"col5\"\nFROM \"Z\" AS \"t0\"\nWHERE\n  (\n    (\n      (\n        (\n          \"t0\".\"col1\" = 'NEEDLE'\n        ) OR (\n          \"t0\".\"col2\" = 'NEEDLE'\n        )\n      )\n      OR (\n        \"t0\".\"col3\" = 'NEEDLE'\n      )\n    )\n    OR (\n      \"t0\".\"col4\" = 'NEEDLE'\n    )\n  )\n  OR (\n    \"t0\".\"col5\" = 'NEEDLE'\n  )\n```\n:::\n:::\n\n\n## The conclusion\n\nNow that we've found the `\"NEEDLE\"` value, we can provide the information to the\nrequester. Urgent requests like this require quick and precise responses.\n\nOur use of Ibis demonstrates how easy it is to simplify navigating large\ndatasets, and in this case, undocumented ones.\n\nPlease get in touch with us on [GitHub](https://github.com/ibis-project) or\n[Zulip](https://ibis-project.zulipchat.com/). We'd love to hear from you!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}