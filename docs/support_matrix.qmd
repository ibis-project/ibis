---
title: "Operation support matrix"
format: dashboard
hide:
  - toc
---

```{python}
#| echo: false
from pathlib import Path

import pandas as pd

import ibis
import ibis.expr.operations as ops


def get_backends(exclude=()):
    entry_points = sorted(ep.name for ep in ibis.util.backend_entry_points())
    return [
        (backend, getattr(ibis, backend))
        for backend in entry_points
        if backend not in exclude
    ]


def get_leaf_classes(op):
    for child_class in op.__subclasses__():
        if not child_class.__subclasses__():
            yield child_class
        else:
            yield from get_leaf_classes(child_class)


public_ops = frozenset(get_leaf_classes(ops.Value))
support = {"Operation": [f"{op.__module__}.{op.__name__}" for op in public_ops]}
support.update(
    (name, list(map(backend.has_operation, public_ops)))
    for name, backend in get_backends()
)

support_matrix = (
    pd.DataFrame(support)
    .assign(splits=lambda df: df.Operation.str.findall("[a-zA-Z_][a-zA-Z_0-9]*"))
    .assign(
        Category=lambda df: df.splits.str[-2],
        Operation=lambda df: df.splits.str[-1],
    )
    .drop(["splits"], axis=1)
    .set_index(["Category", "Operation"])
    .sort_index()
)
all_visible_ops_count = len(support_matrix)
coverage = pd.Index(
    support_matrix.sum()
    .map(lambda n: f"{n} ({round(100 * n / all_visible_ops_count)}%)")
    .T
)
support_matrix.columns = pd.MultiIndex.from_tuples(
    list(zip(support_matrix.columns, coverage)), names=("Backend", "API coverage")
)
support_matrix = support_matrix.replace({True: "âœ”", False: "ðŸš«"})
```

## {height=25%}

::: {.card title="Welcome to the operation support matrix!"}

This is a [Quarto dashboard](https://quarto.org/docs/dashboards/) that shows
the operations each backend supports.

Due to differences in SQL dialects and upstream support for different
operations in different backends, support for the full breadth of the Ibis API
varies.

::: {.callout-tip}
Backends with low coverage are good places to start contributing!

Each backend implements operations differently, but this is usually very similar to other backends. If you want to start contributing to ibis, it's a good idea to start by adding missing operations to backends that have low operation coverage.
:::

:::

### {width=25%}

```{python}
#| content: valuebox
#| title: "Number of backends"
import ibis

dict(
    value=len(ibis.util.backend_entry_points()),
    color="info",
    icon="signpost-split-fill",
)
```

### {width=25%}

```{python}
#| content: valuebox
#| title: "Number of SQL backends"
import importlib
from ibis.backends.base.sqlglot import SQLGlotBackend

sql_backends = sum(
    issubclass(
        importlib.import_module(f"ibis.backends.{entry_point.name}").Backend,
        SQLGlotBackend
    )
    for entry_point in ibis.util.backend_entry_points()
)
assert sql_backends > 0
dict(value=sql_backends, color="green", icon="database")
```

## {height=70%}

```{python}
from itables import show

show(support_matrix, ordering=False, paging=False, buttons=["copy", "excel", "csv"])
```
