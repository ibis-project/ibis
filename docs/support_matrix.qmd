---
title: "Operation support matrix"
format: dashboard
hide:
  - toc
---

```{python}
#| echo: false
!python ../gen_matrix.py
```

```{python}
#| echo: false
import pandas as pd

support_matrix = pd.read_csv("./backends/raw_support_matrix.csv")
support_matrix = support_matrix.assign(
    Category=support_matrix.Operation.map(lambda op: op.rsplit(".", 1)[0].rsplit(".", 1)[-1]),
    Operation=support_matrix.Operation.map(lambda op: op.rsplit(".", 1)[-1]),
).set_index(["Category", "Operation"])
all_visible_ops_count = len(support_matrix)
coverage = pd.Index(
    support_matrix.sum()
    .map(lambda n: f"{n} ({round(100 * n / all_visible_ops_count)}%)")
    .T
)
support_matrix.columns = pd.MultiIndex.from_tuples(
    list(zip(support_matrix.columns, coverage)), names=("Backend", "API coverage")
)
support_matrix = support_matrix.replace({True: "âœ”", False: "ðŸš«"})
```

## {height=25%}

::: {.card title="Welcome to the operation support matrix!"}

This is a [Quarto dashboard](https://quarto.org/docs/dashboards/) that shows
the operations each backend supports.

Due to differences in SQL dialects and upstream support for different
operations in different backends, support for the full breadth of the Ibis API
varies.

::: {.callout-tip}
Backends with low coverage are good places to start contributing!

Each backend implements operations differently, but this is usually very similar to other backends. If you want to start contributing to ibis, it's a good idea to start by adding missing operations to backends that have low operation coverage.
:::

:::

### {width=25%}

```{python}
#| content: valuebox
#| title: "Number of backends"
import ibis

dict(
    value=len(ibis.util.backend_entry_points()),
    color="info",
    icon="signpost-split-fill",
)
```

### {width=25%}

```{python}
#| content: valuebox
#| title: "Number of SQL backends"
import importlib
from ibis.backends.base.sql import BaseSQLBackend

sql_backends = sum(
    issubclass(
        importlib.import_module(f"ibis.backends.{entry_point.name}").Backend,
        BaseSQLBackend
    )
    for entry_point in ibis.util.backend_entry_points()
)
dict(value=sql_backends, color="green", icon="database")
```

## {height=70%}

```{python}
from itables import show

show(support_matrix, ordering=False, paging=False, buttons=["copy", "excel", "csv"])
```
