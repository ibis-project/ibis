---
title: "Test 20 databases on every commit"
subtitle: "It's not hyperbole"
author:
  - Phillip Cloud
execute:
  echo: true
format:
  revealjs:
    footer: <https://ibis-project.org>
    # https://quarto.org/docs/presentations/revealjs/themes.html#using-themes
---

## Who

:::: {.columns}

::: {.column width="50%"}
### Me

- Phillip Cloud
- Ibis project
- Voltron Data
- Data tools for 10+ years
:::

::: {.column width="50%"}
### Where

- {{< fa brands github >}} [`@cpcloud`](https://github.com/cpcloud)
- {{< fa brands youtube >}} [Phillip in the Cloud](https://www.youtube.com/@cpcloud)
- {{< fa brands twitter >}} [`@cpcloudy`](https://x.com/cpcloudy)
:::

::::

# What

## Maybe this is you

![](./docker-eye-roll.gif){fig-align="center"}

## Or this

![](./wonka.png){fig-align="center"}

## Or maybe even this

![](./basement-ci.jpeg){fig-align="center"}

## Not earth shattering

:::: {.columns}

::: {.column width="50%"}
### Overview

- What we learned about maintenance
- Day to day of 20+ databases
- Unique challenges
:::

::: {.column width="50%"}
### Tools

- Docker
- Packaging
- CI
- `pytest` plugins
:::
::::

# Overview of Ibis

## Ibis is a Python library for:

- Exploratory data analysis (EDA)
- Analytics
- Data engineering
- ML preprocessing
- Building your own DataFrame lib

::: {.r-fit-text}
_Dev to prod with the same API_
:::

## One API, 20+ backends {.smaller .scrollable}

```{python}
#| code-fold: true
#| echo: false
import ibis

ibis.options.interactive = True

t = ibis.examples.penguins.fetch()
t.to_parquet("penguins.parquet")
```

::: {.panel-tabset}

## DuckDB

```{python}
con = ibis.connect("duckdb://")
```

```{python}
t = con.read_parquet("penguins.parquet")
t.head(3)
```

```{python}
t.group_by("species", "island").agg(count=t.count()).order_by("count")
```

## Polars

```{python}
con = ibis.connect("polars://")
```

```{python}
t = con.read_parquet("penguins.parquet")
t.head(3)
```

```{python}
t.group_by("species", "island").agg(count=t.count()).order_by("count")
```

## DataFusion

```{python}
con = ibis.connect("datafusion://")
```

```{python}
t = con.read_parquet("penguins.parquet")
t.head(3)
```

```{python}
t.group_by("species", "island").agg(count=t.count()).order_by("count")
```

## PySpark

```{python}
con = ibis.connect("pyspark://")
```

```{python}
t = con.read_parquet("penguins.parquet")
t.head(3)
```

```{python}
t.group_by("species", "island").agg(count=t.count()).order_by("count")
```

## 16+ other things

![](./machine.gif){fig-align="center" width="100%" height="100%"}

:::

## How it works

```{python}
#| echo: false
#| fig-align: center

import os
import sys
sys.path.append(os.path.abspath("../.."))

from backends_sankey import fig
fig.show()
```

# What's in an Ibis?

## By the numbers {.smaller}

:::: {.columns}
::: {.column width="50%"}
### Backends
- **17** SQL
- **3** non-SQL
- **2** cloud
:::

::: {.column width="50%"}
### Engines + APIs
- **9** distributed SQL
- **3** dataframe
- oldest: **~45** years üëÄ
- youngest: **~2** years
:::
::::

### Other facts

- Latency is variable
- Deployment models vary

::: {.fragment}
::: {.r-fit-text}
_‚Ä¶ **Feature development**_‚ùì
:::
:::

## Bit of a pickle

![](./picklerick.png)

# How

## High level

### Goal: fast iteration

- fast env setup (dependency management)
- fast(ish) tests (test-running library)
- high **job** concurrency (ci/provider)
- **easy to run**: dev speed ([`just`](https://github.com/casey/just))

::: {.fragment}
::: {.r-fit-text}
_CI must complete "quickly"_
:::
:::

## Tools: overview

- üì¶ poetry
- üñ•Ô∏è GitHub Actions
- ü¶Å docker
- üêï docker
- üê± no special tx (duckdb, polars)
- üèÉ task runner (e.g.: `just up postgres`)

## Tools: poetry

::: {.callout-warning}
## Opinions follow
:::

- **Env setup needs to be _fast_**: avoid constraint solving
- Poetry is one way; there are others
- Get yourself a lockfile
- Downsides?

::: {.fragment}
::: {.r-fit-text}
‚Ä¶ _Are you doing that **now**_‚ùì
:::
:::

## This plot

::: {layout="[[-1], [1], [-1]]"}

![](./progress.png){fig-align="center"}

:::

::: {.fragment}
::: {.r-fit-text}
_We've added 3 or 4 new backends since the switch_
:::
:::

## Tools: docker

- Sure, docker
- But, do you to use it locally?
- Use health checks; "dumb" ones are fine
- Make it easy for devs to use

## Tools: GitHub Actions {.smaller}

::: {.callout-note}
### I don't work for GitHub
:::

- Pay for the [the Teams plan](https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits) to get more concurrency
- Automate dependency updates

::: {.columns}
::: {.column width="50%"}
### GHA concurrency limits

![](./gha.png)
:::

::: {.column width="50%"}
### Ibis CI cost

![](./bill.png)
:::
:::

## `pytest` {.smaller}

### Ibis problems

- Tests run across **ALL** backends
- Backends don't implement the same stuff
- Need to know when backend passes
- Answer questions like: "will it _ever_ blend?"

::: {.fragment}
### Markers + hooks

```python
@pytest.mark.never("duckdb")  # never gonna happen
@pytest.mark.notyet("impala")  # might happen
@pytest.mark.notimpl("snowflake")  # ibis devs: do some work
def test_soundex():
    ...

def pytest_ignore_collect(...):
    # pytest -m duckdb: don't collect things that aren't marked duckdb
    ...
```
:::

## `pytest` plugins you may like

**`pytest-`**

- `xdist`: make this work if you can
- `randomly`: break your bogus stateful assumptions
- `repeat`: when `randomly` exposes your assumptions
- `clarity`: readable test failure messages
- `snapshot`: better than the giant `f`-string you just wrote

**hypothesis** üëà that too, we don't use it enough

## Why `pytest-randomly`?

![](./heisenbug.png){fig-align="center"}

# Summary

- Use docker for dev **and** prod
- Lock your dependencies (dev only!)
- Auto update stuff
- `pytest` probably has a thing for that
- Spend time on dev ex
- Track CI run durations, look at them too

# Questions?
