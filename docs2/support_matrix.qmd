---
hide:
  - toc
---

# Operation support matrix

::: {.callout-tip}
Backends with low coverage are good places to start contributing!

Each backend implements operations differently, but this is usually very similar to other backends. If you want to start contributing to ibis, it's a good idea to start by adding missing operations to backends that have low operation coverage.
:::

<div class="streamlit-app">
  <iframe class="streamlit-app-inner" width=760 height=600 src="https://ibis-project.streamlit.app/?embedded=true"></iframe>
</div>

::: {.callout-note}
This app is built using [`streamlit`](https://streamlit.io/).

You can develop the app locally by editing `docs/backends/app/backend_info_app.py` and opening a PR with your changes.

Test your changes locally by running

```sh
$ streamlit run docs/backends/app/backend_info_app.py
```

The changes will show up in the dev docs when your PR is merged!
:::

## Raw Data

You can also download data from the above tables in [CSV format](./raw_support_matrix.csv).

The code used to generate the linked CSV file is below.

```{python}
#| code-fold: true
from pathlib import Path

import pandas as pd

import ibis
import ibis.expr.operations as ops


def get_backends(exclude=()):
    entry_points = sorted(ep.name for ep in ibis.util.backend_entry_points())
    return [
        (backend, getattr(ibis, backend))
        for backend in entry_points
        if backend not in exclude
    ]


def get_leaf_classes(op):
    for child_class in op.__subclasses__():
        if not child_class.__subclasses__():
            yield child_class
        else:
            yield from get_leaf_classes(child_class)


INTERNAL_OPS = {
    # Never translates into anything
    ops.UnresolvedExistsSubquery,
    ops.UnresolvedNotExistsSubquery,
    ops.ScalarParameter,
}

PUBLIC_OPS = frozenset(get_leaf_classes(ops.Value)) - INTERNAL_OPS


support = {"operation": [f"{op.__module__}.{op.__name__}" for op in PUBLIC_OPS]}
support.update(
    (name, list(map(backend.has_operation, PUBLIC_OPS)))
    # exclude flink until https://github.com/apache/flink/pull/23141 is
    # merged and released we also need to roll it into poetry
    for name, backend in get_backends(exclude=("flink",))
)

df = pd.DataFrame(support).set_index("operation").sort_index()

with open("raw_support_matrix.csv", mode="w") as f:
    df.to_csv(f, index_label="FullOperation")
```
