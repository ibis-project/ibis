# name: test_agg_and_non_agg_filter
  '''
  SELECT *
  FROM (
    SELECT *
    FROM my_table
    WHERE `a` < 100
  ) t0
  WHERE (`a` = (
    SELECT max(`a`) AS `max`
    FROM my_table
    WHERE `a` < 100
  )) AND
        (`b` = 'a')
  '''
# ---
# name: test_agg_filter
  '''
  WITH t0 AS (
    SELECT *, `b` * 2 AS `b2`
    FROM my_table
  ),
  t1 AS (
    SELECT t0.`a`, t0.`b2`
    FROM t0
    WHERE t0.`a` < 100
  )
  SELECT t1.*
  FROM t1
  WHERE t1.`a` = (
    SELECT max(`a`) AS `blah`
    FROM t1
  )
  '''
# ---
# name: test_agg_filter_with_alias
  '''
  WITH t0 AS (
    SELECT *, `b` * 2 AS `b2`
    FROM my_table
  ),
  t1 AS (
    SELECT t0.`a`, t0.`b2`
    FROM t0
    WHERE t0.`a` < 100
  )
  SELECT t1.*
  FROM t1
  WHERE t1.`a` = (
    SELECT max(`a`) AS `blah`
    FROM t1
  )
  '''
# ---
# name: test_column_distinct
  '''
  SELECT DISTINCT `string_col`
  FROM functional_alltypes
  '''
# ---
# name: test_column_distinct.1
  '''
  import ibis
  
  
  functional_alltypes = ibis.table(
      name="functional_alltypes",
      schema={
          "id": "int32",
          "bool_col": "boolean",
          "tinyint_col": "int8",
          "smallint_col": "int16",
          "int_col": "int32",
          "bigint_col": "int64",
          "float_col": "float32",
          "double_col": "float64",
          "date_string_col": "string",
          "string_col": "string",
          "timestamp_col": "timestamp",
          "year": "int32",
          "month": "int32",
      },
  )
  
  result = functional_alltypes.select(functional_alltypes.string_col).distinct()
  
  '''
# ---
# name: test_column_expr_default_name
  '''
  SELECT `int_col` + 4 AS `Add(int_col, 4)`
  FROM int_col_table
  '''
# ---
# name: test_column_expr_default_name.1
  '''
  import ibis
  
  
  int_col_table = ibis.table(name="int_col_table", schema={"int_col": "int32"})
  
  result = int_col_table.int_col + 4
  
  '''
# ---
# name: test_column_expr_retains_name
  '''
  SELECT `int_col` + 4 AS `foo`
  FROM int_col_table
  '''
# ---
# name: test_column_expr_retains_name.1
  '''
  import ibis
  
  
  int_col_table = ibis.table(name="int_col_table", schema={"int_col": "int32"})
  
  result = (int_col_table.int_col + 4).name("foo")
  
  '''
# ---
# name: test_count_distinct
  '''
  SELECT `string_col`, count(DISTINCT `int_col`) AS `nunique`
  FROM functional_alltypes
  WHERE `bigint_col` > 0
  GROUP BY 1
  '''
# ---
# name: test_count_distinct.1
  '''
  import ibis
  
  
  functional_alltypes = ibis.table(
      name="functional_alltypes",
      schema={
          "id": "int32",
          "bool_col": "boolean",
          "tinyint_col": "int8",
          "smallint_col": "int16",
          "int_col": "int32",
          "bigint_col": "int64",
          "float_col": "float32",
          "double_col": "float64",
          "date_string_col": "string",
          "string_col": "string",
          "timestamp_col": "timestamp",
          "year": "int32",
          "month": "int32",
      },
  )
  
  result = (
      functional_alltypes.filter(functional_alltypes.bigint_col > 0)
      .group_by(functional_alltypes.string_col)
      .aggregate(functional_alltypes.int_col.nunique().name("nunique"))
  )
  
  '''
# ---
# name: test_difference_project_column
  '''
  SELECT `key`
  FROM (
    SELECT `string_col` AS `key`, CAST(`float_col` AS double) AS `value`
    FROM functional_alltypes
    WHERE `int_col` > 0
    EXCEPT
    SELECT `string_col` AS `key`, `double_col` AS `value`
    FROM functional_alltypes
    WHERE `int_col` <= 0
  ) t0
  '''
# ---
# name: test_difference_project_column.1
  '''
  import ibis
  
  
  lit = ibis.literal(0)
  functional_alltypes = ibis.table(
      name="functional_alltypes",
      schema={
          "id": "int32",
          "bool_col": "boolean",
          "tinyint_col": "int8",
          "smallint_col": "int16",
          "int_col": "int32",
          "bigint_col": "int64",
          "float_col": "float32",
          "double_col": "float64",
          "date_string_col": "string",
          "string_col": "string",
          "timestamp_col": "timestamp",
          "year": "int32",
          "month": "int32",
      },
  )
  alias = functional_alltypes.string_col.name("key")
  difference = (
      functional_alltypes.select(
          [alias, functional_alltypes.float_col.cast("float64").name("value")]
      )
      .filter(functional_alltypes.int_col > lit)
      .difference(
          functional_alltypes.select(
              [alias, functional_alltypes.double_col.name("value")]
          ).filter(functional_alltypes.int_col <= lit),
          distinct=True,
      )
  )
  
  result = difference.select(difference.key)
  
  '''
# ---
# name: test_having_from_filter
  '''
  SELECT `b`, sum(`a`) AS `sum`
  FROM t
  WHERE `b` = 'm'
  GROUP BY 1
  HAVING max(`a`) = 2
  '''
# ---
# name: test_having_from_filter.1
  '''
  import ibis
  
  
  t = ibis.table(name="t", schema={"a": "int64", "b": "string"})
  
  result = (
      t.filter(t.b == "m")
      .group_by(t.b)
      .having(t.a.max().name("max") == 2)
      .aggregate(t.a.sum().name("sum"))
  )
  
  '''
# ---
# name: test_having_size
  '''
  SELECT `string_col`, count(1) AS `count`
  FROM functional_alltypes
  GROUP BY 1
  HAVING max(`double_col`) = 1
  '''
# ---
# name: test_intersect_project_column
  '''
  SELECT `key`
  FROM (
    SELECT `string_col` AS `key`, CAST(`float_col` AS double) AS `value`
    FROM functional_alltypes
    WHERE `int_col` > 0
    INTERSECT
    SELECT `string_col` AS `key`, `double_col` AS `value`
    FROM functional_alltypes
    WHERE `int_col` <= 0
  ) t0
  '''
# ---
# name: test_intersect_project_column.1
  '''
  import ibis
  
  
  lit = ibis.literal(0)
  functional_alltypes = ibis.table(
      name="functional_alltypes",
      schema={
          "id": "int32",
          "bool_col": "boolean",
          "tinyint_col": "int8",
          "smallint_col": "int16",
          "int_col": "int32",
          "bigint_col": "int64",
          "float_col": "float32",
          "double_col": "float64",
          "date_string_col": "string",
          "string_col": "string",
          "timestamp_col": "timestamp",
          "year": "int32",
          "month": "int32",
      },
  )
  alias = functional_alltypes.string_col.name("key")
  intersection = (
      functional_alltypes.select(
          [alias, functional_alltypes.float_col.cast("float64").name("value")]
      )
      .filter(functional_alltypes.int_col > lit)
      .intersect(
          functional_alltypes.select(
              [alias, functional_alltypes.double_col.name("value")]
          ).filter(functional_alltypes.int_col <= lit),
          distinct=True,
      )
  )
  
  result = intersection.select(intersection.key)
  
  '''
# ---
# name: test_multiple_count_distinct
  '''
  SELECT `string_col`, count(DISTINCT `int_col`) AS `int_card`,
         count(DISTINCT `smallint_col`) AS `smallint_card`
  FROM functional_alltypes
  GROUP BY 1
  '''
# ---
# name: test_multiple_count_distinct.1
  '''
  import ibis
  
  
  functional_alltypes = ibis.table(
      name="functional_alltypes",
      schema={
          "id": "int32",
          "bool_col": "boolean",
          "tinyint_col": "int8",
          "smallint_col": "int16",
          "int_col": "int32",
          "bigint_col": "int64",
          "float_col": "float32",
          "double_col": "float64",
          "date_string_col": "string",
          "string_col": "string",
          "timestamp_col": "timestamp",
          "year": "int32",
          "month": "int32",
      },
  )
  
  result = functional_alltypes.group_by(functional_alltypes.string_col).aggregate(
      [
          functional_alltypes.int_col.nunique().name("int_card"),
          functional_alltypes.smallint_col.nunique().name("smallint_card"),
      ]
  )
  
  '''
# ---
# name: test_pushdown_with_or
  '''
  SELECT *
  FROM functional_alltypes
  WHERE (`double_col` > 3.14) AND
        (locate('foo', `string_col`) - 1 >= 0) AND
        (((`int_col` - 1) = 0) OR (`float_col` <= 1.34))
  '''
# ---
# name: test_simple_agg_filter
  '''
  SELECT *
  FROM (
    SELECT *
    FROM my_table
    WHERE `a` < 100
  ) t0
  WHERE `a` = (
    SELECT max(`a`) AS `max`
    FROM my_table
    WHERE `a` < 100
  )
  '''
# ---
# name: test_subquery_where_location
  '''
  SELECT count(`foo`) AS `count`
  FROM (
    SELECT `string_col`, sum(`float_col`) AS `foo`
    FROM (
      SELECT `float_col`, `timestamp_col`, `int_col`, `string_col`
      FROM alltypes
      WHERE `timestamp_col` < '20140101'
    ) t1
    GROUP BY 1
  ) t0
  '''
# ---
# name: test_subquery_where_location.1
  '''
  import ibis
  
  
  param = ibis.param("timestamp")
  alltypes = ibis.table(
      name="alltypes",
      schema={
          "float_col": "float32",
          "timestamp_col": "timestamp",
          "int_col": "int32",
          "string_col": "string",
      },
  )
  proj = alltypes.select(
      [alltypes.float_col, alltypes.timestamp_col, alltypes.int_col, alltypes.string_col]
  ).filter(alltypes.timestamp_col < param)
  
  result = (
      proj.group_by(proj.string_col)
      .aggregate(proj.float_col.sum().name("foo"))
      .foo.count()
      .name("count")
  )
  
  '''
# ---
# name: test_table_difference
  '''
  SELECT `string_col` AS `key`, CAST(`float_col` AS double) AS `value`
  FROM functional_alltypes
  WHERE `int_col` > 0
  EXCEPT
  SELECT `string_col` AS `key`, `double_col` AS `value`
  FROM functional_alltypes
  WHERE `int_col` <= 0
  '''
# ---
# name: test_table_difference.1
  '''
  import ibis
  
  
  lit = ibis.literal(0)
  functional_alltypes = ibis.table(
      name="functional_alltypes",
      schema={
          "id": "int32",
          "bool_col": "boolean",
          "tinyint_col": "int8",
          "smallint_col": "int16",
          "int_col": "int32",
          "bigint_col": "int64",
          "float_col": "float32",
          "double_col": "float64",
          "date_string_col": "string",
          "string_col": "string",
          "timestamp_col": "timestamp",
          "year": "int32",
          "month": "int32",
      },
  )
  alias = functional_alltypes.string_col.name("key")
  
  result = (
      functional_alltypes.select(
          [alias, functional_alltypes.float_col.cast("float64").name("value")]
      )
      .filter(functional_alltypes.int_col > lit)
      .difference(
          functional_alltypes.select(
              [alias, functional_alltypes.double_col.name("value")]
          ).filter(functional_alltypes.int_col <= lit),
          distinct=True,
      )
  )
  
  '''
# ---
# name: test_table_distinct
  '''
  SELECT DISTINCT `string_col`, `int_col`
  FROM functional_alltypes
  '''
# ---
# name: test_table_distinct.1
  '''
  import ibis
  
  
  functional_alltypes = ibis.table(
      name="functional_alltypes",
      schema={
          "id": "int32",
          "bool_col": "boolean",
          "tinyint_col": "int8",
          "smallint_col": "int16",
          "int_col": "int32",
          "bigint_col": "int64",
          "float_col": "float32",
          "double_col": "float64",
          "date_string_col": "string",
          "string_col": "string",
          "timestamp_col": "timestamp",
          "year": "int32",
          "month": "int32",
      },
  )
  
  result = functional_alltypes.select(
      [functional_alltypes.string_col, functional_alltypes.int_col]
  ).distinct()
  
  '''
# ---
# name: test_table_drop_with_filter
  '''
  SELECT t0.*
  FROM (
    SELECT t2.`a`
    FROM (
      SELECT `a`, `b`, '2018-01-01T00:00:00' AS `the_date`
      FROM (
        SELECT *
        FROM (
          SELECT `a`, `b`, `c` AS `C`
          FROM t
        ) t5
        WHERE `C` = '2018-01-01T00:00:00'
      ) t4
    ) t2
      INNER JOIN s t1
        ON t2.`b` = t1.`b`
  ) t0
  WHERE t0.`a` < 1.0
  '''
# ---
# name: test_table_drop_with_filter.1
  '''
  import ibis
  
  
  lit = ibis.timestamp("2018-01-01 00:00:00")
  s = ibis.table(name="s", schema={"b": "string"})
  t = ibis.table(name="t", schema={"a": "int64", "b": "string", "c": "timestamp"})
  proj = t.select([t.a, t.b, t.c.name("C")])
  proj1 = proj.filter(proj.C == lit)
  proj2 = proj1.select([proj1.a, proj1.b, lit.name("the_date")])
  proj3 = proj2.inner_join(s, proj2.b == s.b).select(proj2.a)
  
  result = proj3.filter(proj3.a < 1.0)
  
  '''
# ---
# name: test_table_intersect
  '''
  SELECT `string_col` AS `key`, CAST(`float_col` AS double) AS `value`
  FROM functional_alltypes
  WHERE `int_col` > 0
  INTERSECT
  SELECT `string_col` AS `key`, `double_col` AS `value`
  FROM functional_alltypes
  WHERE `int_col` <= 0
  '''
# ---
# name: test_table_intersect.1
  '''
  import ibis
  
  
  lit = ibis.literal(0)
  functional_alltypes = ibis.table(
      name="functional_alltypes",
      schema={
          "id": "int32",
          "bool_col": "boolean",
          "tinyint_col": "int8",
          "smallint_col": "int16",
          "int_col": "int32",
          "bigint_col": "int64",
          "float_col": "float32",
          "double_col": "float64",
          "date_string_col": "string",
          "string_col": "string",
          "timestamp_col": "timestamp",
          "year": "int32",
          "month": "int32",
      },
  )
  alias = functional_alltypes.string_col.name("key")
  
  result = (
      functional_alltypes.select(
          [alias, functional_alltypes.float_col.cast("float64").name("value")]
      )
      .filter(functional_alltypes.int_col > lit)
      .intersect(
          functional_alltypes.select(
              [alias, functional_alltypes.double_col.name("value")]
          ).filter(functional_alltypes.int_col <= lit),
          distinct=True,
      )
  )
  
  '''
# ---
# name: test_union_project_column
  '''
  SELECT `key`
  FROM (
    SELECT `string_col` AS `key`, CAST(`float_col` AS double) AS `value`
    FROM functional_alltypes
    WHERE `int_col` > 0
    UNION ALL
    SELECT `string_col` AS `key`, `double_col` AS `value`
    FROM functional_alltypes
    WHERE `int_col` <= 0
  ) t0
  '''
# ---
# name: test_union_project_column.1
  '''
  import ibis
  
  
  lit = ibis.literal(0)
  functional_alltypes = ibis.table(
      name="functional_alltypes",
      schema={
          "id": "int32",
          "bool_col": "boolean",
          "tinyint_col": "int8",
          "smallint_col": "int16",
          "int_col": "int32",
          "bigint_col": "int64",
          "float_col": "float32",
          "double_col": "float64",
          "date_string_col": "string",
          "string_col": "string",
          "timestamp_col": "timestamp",
          "year": "int32",
          "month": "int32",
      },
  )
  alias = functional_alltypes.string_col.name("key")
  union = (
      functional_alltypes.select(
          [alias, functional_alltypes.float_col.cast("float64").name("value")]
      )
      .filter(functional_alltypes.int_col > lit)
      .union(
          functional_alltypes.select(
              [alias, functional_alltypes.double_col.name("value")]
          ).filter(functional_alltypes.int_col <= lit)
      )
  )
  
  result = union.select(union.key)
  
  '''
# ---
