# name: test_assign
  '''
  function f() {
      let a = 1;
      a = 2;
      console.log(a);
      return 1;
  }
  '''
# ---
# name: test_binary_operators[mul]
  '''
  function mul(x, y) {
      return (x * y);
  }
  '''
# ---
# name: test_class
  '''
  class Rectangle {
      constructor(width, height) {
          this.width = width;
          this.height = height;
      }
      area() {
          return (this.width * this.height);
      }
  }
  '''
# ---
# name: test_class_with_properties
  '''
  class FancyRectangle extends Rectangle {
      get perimeter() {
          return ((this.width * 2) + (this.height * 2));
      }
  }
  '''
# ---
# name: test_continue
  '''
  function f() {
      let i = 0;
      for (let i of [1, 2, 3]) {
          if ((i === 1)) {
              continue;
          }
      }
      return i;
  }
  '''
# ---
# name: test_delete
  '''
  function f(a) {
      let x = [a, 1, 2, 3];
      let y = {['a']: 1};
      delete x[0];
      delete x[1];
      delete x[(0 + 3)];
      delete y.a;
      return 1;
  }
  '''
# ---
# name: test_dict
  '''
  function f() {
      let a = {['a']: 1, ['b']: 2};
      return a;
  }
  '''
# ---
# name: test_floordiv
  '''
  function f() {
      let a = 1;
      return Math.floor(a / 2);
  }
  '''
# ---
# name: test_function_def
  '''
  function f(a, b) {
      return (a + b);
  }
  '''
# ---
# name: test_lambda_with_splat
  '''
  function f() {
      function sum(sequence) {
          let total = 0;
          for (let value of sequence) {
              total += value;
          }
          return total;
      }
      let splat_sum = ((...args) => sum(args));
      return splat_sum(1, 2, 3);
  }
  '''
# ---
# name: test_len_rewrite
  '''
  function my_func(a) {
      return a.length;
  }
  '''
# ---
# name: test_list_comp
  '''
  function f() {
      let x = [[1, 2], [3, 4], [5, 6]].filter((([a, b]) => ((a > 1) && (b > 2)))).map((([a, b]) => (a + b)));
      return x;
  }
  '''
# ---
# name: test_logical_not
  '''
  function f() {
      let a = true;
      let b = false;
      return ((!a) && (!b));
  }
  '''
# ---
# name: test_missing_vararg
  '''
  function my_range(n) {
      return [n].map(((x) => 1));
  }
  '''
# ---
# name: test_pow
  '''
  function f() {
      let a = 1;
      return Math.pow(a, 2);
  }
  '''
# ---
# name: test_scope_with_while
  '''
  function f() {
      class Foo {
          do_stuff() {
              while (true) {
                  let i = 1;
                  (i + 1);
                  break;
              }
              while (true) {
                  let i = 1;
                  (i + 1);
                  break;
              }
              return 1;
          }
      }
  }
  '''
# ---
# name: test_set_to_object
  '''
  function f(a) {
      let x = (new Set());
      let y = 1;
      x.add(y);
      return y;
  }
  '''
# ---
# name: test_setitem
  '''
  function f(a) {
      let x = {};
      let y = '2';
      x[y] = y;
      return x;
  }
  '''
# ---
# name: test_splat
  '''
  function f(x, y, z) {
      function g(a, b, c) {
          return ((a - b) - c);
      }
      let args = [x, y, z];
      return g(...args);
  }
  '''
# ---
# name: test_str
  '''
  function f() {
      let a = 'abc';
      return a;
  }
  '''
# ---
# name: test_true_false_none
  '''
  function f() {
      let a = true;
      let b = false;
      let c = null;
      return ((c !== null) ? a : b);
  }
  '''
# ---
# name: test_tuple
  '''
  function f() {
      let a = ['a', 'b', 'c'];
      return a;
  }
  '''
# ---
# name: test_unary_minus
  '''
  function f() {
      let a = 1;
      return (-a);
  }
  '''
# ---
# name: test_unary_plus
  '''
  function f() {
      let a = 1;
      return (+a);
  }
  '''
# ---
# name: test_varargs
  '''
  function f(...args) {
      return sum(...args);
  }
  '''
# ---
# name: test_variable_declaration
  '''
  function f() {
      let c = 1;
      return (c + 2);
  }
  '''
# ---
# name: test_yield
  '''
  function* f(a) {
      yield* [1, 2, 3];
  }
  '''
# ---
# name: test_yield_from
  '''
  function* f(a) {
      yield* [1, 2, 3];
  }
  '''
# ---
