import pytest
from pytest import param

import ibis.expr.datatypes as dt
from ibis.backends.duckdb.parser import parse_type

EXPECTED_SCHEMA = dict(
    a=dt.int64,
    b=dt.int64,
    c=dt.int64,
    d=dt.boolean,
    e=dt.boolean,
    f=dt.boolean,
    g=dt.binary,
    h=dt.binary,
    i=dt.binary,
    j=dt.binary,
    k=dt.date,
    l=dt.float64,
    m=dt.float64,
    n=dt.Decimal(18, 3),
    o=dt.Decimal(18, 3),
    p=dt.Decimal(10, 3),
    q=dt.int32,
    r=dt.int32,
    s=dt.int32,
    t=dt.int32,
    u=dt.interval,
    v=dt.float32,
    w=dt.float32,
    x=dt.float32,
    y=dt.int16,
    z=dt.int16,
    A=dt.int16,
    B=dt.time,
    C=dt.Timestamp('UTC'),
    D=dt.Timestamp('UTC'),
    E=dt.int8,
    F=dt.int8,
    G=dt.uint64,
    H=dt.uint32,
    I=dt.uint16,
    J=dt.uint8,
    K=dt.uuid,
    L=dt.string,
    M=dt.string,
    N=dt.string,
    O=dt.string,
    P=dt.string,
    Q=dt.Array(dt.int32),
    R=dt.Map(dt.string, dt.int64),
    S=dt.Struct.from_dict(
        dict(
            a=dt.int32,
            b=dt.string,
            c=dt.Array(dt.Array(dt.Map(dt.string, dt.Array(dt.float64)))),
        )
    ),
)


@pytest.mark.parametrize(
    ("column", "type"),
    [
        param("a", "BIGINT", id="bigint"),
        param("b", "INT8", id="int8"),
        param("c", "LONG", id="long"),
        param("d", "BOOLEAN", id="boolean"),
        param("e", "BOOL", id="bool"),
        param("f", "LOGICAL", id="logical"),
        param("g", "BLOB", id="blob"),
        param("h", "BYTEA", id="bytea"),
        param("i", "BINARY", id="binary"),
        param("j", "VARBINARY", id="varbinary"),
        param("k", "DATE", id="date"),
        param("l", "DOUBLE", id="double"),
        param("m", "FLOAT8", id="float8"),
        param("n", "NUMERIC", id="numeric"),
        param("o", "DECIMAL", id="decimal"),
        param("p", "DECIMAL(10, 3)", id="decimal_with_params"),
        param("q", "INTEGER", id="integer"),
        param("r", "INT4", id="int4"),
        param("s", "INT", id="int"),
        param("t", "SIGNED", id="signed"),
        param("u", "INTERVAL", id="interval"),
        param("v", "REAL", id="real"),
        param("w", "FLOAT4", id="float4"),
        param("x", "FLOAT", id="float"),
        param("y", "SMALLINT", id="smallint"),
        param("z", "INT2", id="int2"),
        param("A", "SHORT", id="short"),
        param("B", "TIME", id="time"),
        param("C", "TIMESTAMP", id="timestamp"),
        param("D", "DATETIME", id="datetime"),
        param("E", "TINYINT", id="tinyint"),
        param("F", "INT1", id="int1"),
        param("G", "UBIGINT", id="ubigint"),
        param("H", "UINTEGER", id="uinteger"),
        param("I", "USMALLINT", id="usmallint"),
        param("J", "UTINYINT", id="utinyint"),
        param("K", "UUID", id="uuid"),
        param("L", "VARCHAR", id="varchar"),
        param("M", "CHAR", id="char"),
        param("N", "BPCHAR", id="bpchar"),
        param("O", "TEXT", id="text"),
        param("P", "STRING", id="string"),
        param("Q", "LIST<INTEGER>", id="list"),
        param("R", "MAP<STRING, BIGINT>", id="map"),
        param(
            "S",
            "STRUCT<a: INTEGER, b: STRING, c: LIST<LIST<MAP<TEXT, LIST<FLOAT8>>>>>",  # noqa: E501
            id="struct",
        ),
    ],
)
def test_parser(column, type):
    ty = parse_type(type)
    assert ty == EXPECTED_SCHEMA[column]
