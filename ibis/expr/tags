!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	l,local	/local variables/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Python	x,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	z,parameter	/function parameters/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/70a6275/
Abs	operations.py	/^class Abs(UnaryOp):$/;"	c
Add	operations.py	/^class Add(BinaryOp):$/;"	c
AggregateSelection	operations.py	/^class AggregateSelection(object):$/;"	c
Aggregation	operations.py	/^class Aggregation(TableNode, HasSchema):$/;"	c
All	operations.py	/^class All(ValueOp):$/;"	c
AnalyticOp	operations.py	/^class AnalyticOp(ValueOp):$/;"	c
And	operations.py	/^class And(LogicalBinaryOp):$/;"	c
Any	operations.py	/^class Any(ValueOp):$/;"	c
ArrayCollect	operations.py	/^class ArrayCollect(Reduction):$/;"	c
ArrayConcat	operations.py	/^class ArrayConcat(ValueOp):$/;"	c
ArrayIndex	operations.py	/^class ArrayIndex(ValueOp):$/;"	c
ArrayLength	operations.py	/^class ArrayLength(UnaryOp):$/;"	c
ArrayRepeat	operations.py	/^class ArrayRepeat(ValueOp):$/;"	c
ArraySlice	operations.py	/^class ArraySlice(ValueOp):$/;"	c
BaseConvert	operations.py	/^class BaseConvert(ValueOp):$/;"	c
Between	operations.py	/^class Between(BooleanValueOp):$/;"	c
BetweenTime	operations.py	/^class BetweenTime(Between):$/;"	c
BinaryOp	operations.py	/^class BinaryOp(ValueOp):$/;"	c
BooleanValueOp	operations.py	/^class BooleanValueOp(ValueOp):$/;"	c
CMSMedian	operations.py	/^class CMSMedian(Reduction):$/;"	c
Capitalize	operations.py	/^class Capitalize(StringUnaryOp):$/;"	c
Cast	operations.py	/^class Cast(ValueOp):$/;"	c
Ceil	operations.py	/^class Ceil(UnaryOp):$/;"	c
Clip	operations.py	/^class Clip(ValueOp):$/;"	c
Coalesce	operations.py	/^class Coalesce(CoalesceLike):$/;"	c
CoalesceLike	operations.py	/^class CoalesceLike(ValueOp):$/;"	c
Comparison	operations.py	/^class Comparison(BinaryOp, BooleanValueOp):$/;"	c
Constant	operations.py	/^class Constant(ValueOp):$/;"	c
Contains	operations.py	/^class Contains(BooleanValueOp):$/;"	c
Count	operations.py	/^class Count(Reduction):$/;"	c
CountDistinct	operations.py	/^class CountDistinct(Reduction):$/;"	c
CrossJoin	operations.py	/^class CrossJoin(InnerJoin):$/;"	c
CumulativeAll	operations.py	/^class CumulativeAll(CumulativeOp):$/;"	c
CumulativeAny	operations.py	/^class CumulativeAny(CumulativeOp):$/;"	c
CumulativeMax	operations.py	/^class CumulativeMax(CumulativeOp):$/;"	c
CumulativeMean	operations.py	/^class CumulativeMean(CumulativeOp):$/;"	c
CumulativeMin	operations.py	/^class CumulativeMin(CumulativeOp):$/;"	c
CumulativeOp	operations.py	/^class CumulativeOp(AnalyticOp):$/;"	c
CumulativeSum	operations.py	/^class CumulativeSum(CumulativeOp):$/;"	c
DatabaseTable	operations.py	/^class DatabaseTable(PhysicalTable):$/;"	c
DecimalPrecision	operations.py	/^class DecimalPrecision(DecimalUnaryOp):$/;"	c
DecimalScale	operations.py	/^class DecimalScale(UnaryOp):$/;"	c
DecimalUnaryOp	operations.py	/^class DecimalUnaryOp(UnaryOp):$/;"	c
DeferredSortKey	operations.py	/^class DeferredSortKey(object):$/;"	c
DenseRank	operations.py	/^class DenseRank(RankBase):$/;"	c
Distinct	operations.py	/^class Distinct(TableNode, HasSchema):$/;"	c
DistinctColumn	operations.py	/^class DistinctColumn(ValueOp):$/;"	c
Divide	operations.py	/^class Divide(BinaryOp):$/;"	c
E	operations.py	/^class E(Constant):$/;"	c
Equals	operations.py	/^class Equals(Comparison):$/;"	c
Exp	operations.py	/^class Exp(RealUnaryOp):$/;"	c
ExtractDay	operations.py	/^class ExtractDay(ExtractTemporalField):$/;"	c
ExtractHour	operations.py	/^class ExtractHour(ExtractTimestampField):$/;"	c
ExtractMillisecond	operations.py	/^class ExtractMillisecond(ExtractTimestampField):$/;"	c
ExtractMinute	operations.py	/^class ExtractMinute(ExtractTimestampField):$/;"	c
ExtractMonth	operations.py	/^class ExtractMonth(ExtractTemporalField):$/;"	c
ExtractSecond	operations.py	/^class ExtractSecond(ExtractTimestampField):$/;"	c
ExtractTemporalField	operations.py	/^class ExtractTemporalField(TemporalUnaryOp):$/;"	c
ExtractTimestampField	operations.py	/^class ExtractTimestampField(TimestampUnaryOp):$/;"	c
ExtractYear	operations.py	/^class ExtractYear(ExtractTemporalField):$/;"	c
FindInSet	operations.py	/^class FindInSet(ValueOp):$/;"	c
FirstValue	operations.py	/^class FirstValue(AnalyticOp):$/;"	c
Floor	operations.py	/^class Floor(UnaryOp):$/;"	c
FloorDivide	operations.py	/^class FloorDivide(Divide):$/;"	c
FuzzySearch	operations.py	/^class FuzzySearch(BooleanValueOp):$/;"	c
Greater	operations.py	/^class Greater(Comparison):$/;"	c
GreaterEqual	operations.py	/^class GreaterEqual(Comparison):$/;"	c
Greatest	operations.py	/^class Greatest(CoalesceLike):$/;"	c
GroupConcat	operations.py	/^class GroupConcat(Reduction):$/;"	c
HLLCardinality	operations.py	/^class HLLCardinality(Reduction):$/;"	c
Hash	operations.py	/^class Hash(ValueOp):$/;"	c
IdenticalTo	operations.py	/^class IdenticalTo(Comparison):$/;"	c
IfNull	operations.py	/^class IfNull(ValueOp):$/;"	c
InnerJoin	operations.py	/^class InnerJoin(Join):$/;"	c
InnerSemiJoin	operations.py	/^class InnerSemiJoin(Join):$/;"	c
IsNull	operations.py	/^class IsNull(UnaryOp):$/;"	c
Join	operations.py	/^class Join(TableNode):$/;"	c
L	operations.py	/^        import ibis.expr.analysis as L$/;"	I	member:AggregateSelection._pushdown_exprs	file:
L	operations.py	/^        import ibis.expr.analysis as L$/;"	I	member:Join._clean_predicates	file:
L	operations.py	/^        import ibis.expr.analysis as L$/;"	I	member:Selection.__init__	file:
LPad	operations.py	/^class LPad(ValueOp):$/;"	c
LStrip	operations.py	/^class LStrip(StringUnaryOp):$/;"	c
Lag	operations.py	/^class Lag(ShiftBase):$/;"	c
LastValue	operations.py	/^class LastValue(AnalyticOp):$/;"	c
Lead	operations.py	/^class Lead(ShiftBase):$/;"	c
Least	operations.py	/^class Least(CoalesceLike):$/;"	c
LeftAntiJoin	operations.py	/^class LeftAntiJoin(Join):$/;"	c
LeftJoin	operations.py	/^class LeftJoin(Join):$/;"	c
LeftSemiJoin	operations.py	/^class LeftSemiJoin(Join):$/;"	c
Less	operations.py	/^class Less(Comparison):$/;"	c
LessEqual	operations.py	/^class LessEqual(Comparison):$/;"	c
Limit	operations.py	/^class Limit(TableNode):$/;"	c
Ln	operations.py	/^class Ln(Logarithm):$/;"	c
Log	operations.py	/^class Log(Logarithm):$/;"	c
Log10	operations.py	/^class Log10(Logarithm):$/;"	c
Log2	operations.py	/^class Log2(Logarithm):$/;"	c
Logarithm	operations.py	/^class Logarithm(RealUnaryOp):$/;"	c
LogicalBinaryOp	operations.py	/^class LogicalBinaryOp(BinaryOp):$/;"	c
Lowercase	operations.py	/^class Lowercase(StringUnaryOp):$/;"	c
MaterializedJoin	operations.py	/^class MaterializedJoin(TableNode, HasSchema):$/;"	c
Max	operations.py	/^class Max(Reduction):$/;"	c
Mean	operations.py	/^class Mean(Reduction):$/;"	c
Min	operations.py	/^class Min(Reduction):$/;"	c
MinRank	operations.py	/^class MinRank(RankBase):$/;"	c
Modulus	operations.py	/^class Modulus(BinaryOp):$/;"	c
MultiQuantile	operations.py	/^class MultiQuantile(Quantile):$/;"	c
Multiply	operations.py	/^class Multiply(BinaryOp):$/;"	c
NTile	operations.py	/^class NTile(AnalyticOp):$/;"	c
Negate	operations.py	/^class Negate(UnaryOp):$/;"	c
Not	operations.py	/^class Not(UnaryOp):$/;"	c
NotAll	operations.py	/^class NotAll(All):$/;"	c
NotAny	operations.py	/^class NotAny(Any):$/;"	c
NotContains	operations.py	/^class NotContains(Contains):$/;"	c
NotEquals	operations.py	/^class NotEquals(Comparison):$/;"	c
NotNull	operations.py	/^class NotNull(UnaryOp):$/;"	c
NthValue	operations.py	/^class NthValue(AnalyticOp):$/;"	c
NullIf	operations.py	/^class NullIf(ValueOp):$/;"	c
NullIfZero	operations.py	/^class NullIfZero(ValueOp):$/;"	c
Or	operations.py	/^class Or(LogicalBinaryOp):$/;"	c
OuterJoin	operations.py	/^class OuterJoin(Join):$/;"	c
ParseURL	operations.py	/^class ParseURL(ValueOp):$/;"	c
PercentRank	operations.py	/^class PercentRank(AnalyticOp):$/;"	c
PhysicalTable	operations.py	/^class PhysicalTable(TableNode, HasSchema):$/;"	c
Power	operations.py	/^class Power(BinaryOp):$/;"	c
Quantile	operations.py	/^class Quantile(Reduction):$/;"	c
RPad	operations.py	/^class RPad(ValueOp):$/;"	c
RStrip	operations.py	/^class RStrip(StringUnaryOp):$/;"	c
RankBase	operations.py	/^class RankBase(AnalyticOp):$/;"	c
RealUnaryOp	operations.py	/^class RealUnaryOp(UnaryOp):$/;"	c
Reduction	operations.py	/^class Reduction(ValueOp):$/;"	c
RegexExtract	operations.py	/^class RegexExtract(ValueOp):$/;"	c
RegexReplace	operations.py	/^class RegexReplace(ValueOp):$/;"	c
RegexSearch	operations.py	/^class RegexSearch(FuzzySearch):$/;"	c
Repeat	operations.py	/^class Repeat(ValueOp):$/;"	c
ReplaceValues	operations.py	/^class ReplaceValues(ValueOp):$/;"	c
Reverse	operations.py	/^class Reverse(StringUnaryOp):$/;"	c
RightJoin	operations.py	/^class RightJoin(Join):$/;"	c
Round	operations.py	/^class Round(ValueOp):$/;"	c
RowNumber	operations.py	/^class RowNumber(RankBase):$/;"	c
SQLQueryResult	operations.py	/^class SQLQueryResult(TableNode, HasSchema):$/;"	c
SearchedCase	operations.py	/^class SearchedCase(ValueOp):$/;"	c
SearchedCaseBuilder	operations.py	/^class SearchedCaseBuilder(object):$/;"	c
Selection	operations.py	/^class Selection(TableNode, HasSchema):$/;"	c
SelfReference	operations.py	/^class SelfReference(TableNode, HasSchema):$/;"	c
ShiftBase	operations.py	/^class ShiftBase(AnalyticOp):$/;"	c
Sign	operations.py	/^class Sign(UnaryOp):$/;"	c
SimpleCase	operations.py	/^class SimpleCase(ValueOp):$/;"	c
SimpleCaseBuilder	operations.py	/^class SimpleCaseBuilder(object):$/;"	c
SortKey	operations.py	/^class SortKey(ir.Node):$/;"	c
Sqrt	operations.py	/^class Sqrt(RealUnaryOp):$/;"	c
StandardDev	operations.py	/^class StandardDev(VarianceBase):$/;"	c
StrRight	operations.py	/^class StrRight(ValueOp):$/;"	c
Strftime	operations.py	/^class Strftime(ValueOp):$/;"	c
StringAscii	operations.py	/^class StringAscii(UnaryOp):$/;"	c
StringFind	operations.py	/^class StringFind(ValueOp):$/;"	c
StringJoin	operations.py	/^class StringJoin(ValueOp):$/;"	c
StringLength	operations.py	/^class StringLength(UnaryOp):$/;"	c
StringReplace	operations.py	/^class StringReplace(ValueOp):$/;"	c
StringSQLLike	operations.py	/^class StringSQLLike(FuzzySearch):$/;"	c
StringUnaryOp	operations.py	/^class StringUnaryOp(UnaryOp):$/;"	c
Strip	operations.py	/^class Strip(StringUnaryOp):$/;"	c
Substring	operations.py	/^class Substring(ValueOp):$/;"	c
Subtract	operations.py	/^class Subtract(BinaryOp):$/;"	c
Sum	operations.py	/^class Sum(Reduction):$/;"	c
SummaryFilter	operations.py	/^class SummaryFilter(ValueOp):$/;"	c
TableArrayView	operations.py	/^class TableArrayView(ValueOp):$/;"	c
TableNode	operations.py	/^class TableNode(Node):$/;"	c
TemporalUnaryOp	operations.py	/^class TemporalUnaryOp(UnaryOp):$/;"	c
Time	operations.py	/^class Time(UnaryOp):$/;"	c
TimestampDelta	operations.py	/^class TimestampDelta(ValueOp):$/;"	c
TimestampFromUNIX	operations.py	/^class TimestampFromUNIX(ValueOp):$/;"	c
TimestampNow	operations.py	/^class TimestampNow(Constant):$/;"	c
TimestampUnaryOp	operations.py	/^class TimestampUnaryOp(UnaryOp):$/;"	c
TopK	operations.py	/^class TopK(ValueOp):$/;"	c
TopKExpr	operations.py	/^class TopKExpr(ir.AnalyticExpr):$/;"	c
Translate	operations.py	/^class Translate(ValueOp):$/;"	c
Truncate	operations.py	/^class Truncate(ValueOp):$/;"	c
TypeOf	operations.py	/^class TypeOf(ValueOp):$/;"	c
UnaryOp	operations.py	/^class UnaryOp(ValueOp):$/;"	c
UnboundTable	operations.py	/^class UnboundTable(PhysicalTable):$/;"	c
Union	operations.py	/^class Union(TableNode, HasSchema):$/;"	c
Uppercase	operations.py	/^class Uppercase(StringUnaryOp):$/;"	c
Variance	operations.py	/^class Variance(VarianceBase):$/;"	c
VarianceBase	operations.py	/^class VarianceBase(Reduction):$/;"	c
Where	operations.py	/^class Where(ValueOp):$/;"	c
WindowOp	operations.py	/^class WindowOp(ValueOp):$/;"	c
Xor	operations.py	/^class Xor(LogicalBinaryOp):$/;"	c
ZeroIfNull	operations.py	/^class ZeroIfNull(UnaryOp):$/;"	c
__init__	operations.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:CrossJoin
__init__	operations.py	/^    def __init__(self, arg):$/;"	m	class:DistinctColumn
__init__	operations.py	/^    def __init__(self, arg, k, by=None):$/;"	m	class:TopK
__init__	operations.py	/^    def __init__(self, base, cases, results, default):$/;"	m	class:SimpleCase
__init__	operations.py	/^    def __init__(self, cases, results, default):$/;"	m	class:SearchedCase
__init__	operations.py	/^    def __init__(self, cases=None, results=None, default=None):$/;"	m	class:SearchedCaseBuilder
__init__	operations.py	/^    def __init__(self, expr, ascending=True):$/;"	m	class:SortKey
__init__	operations.py	/^    def __init__(self, expr, cases=None, results=None, default=None):$/;"	m	class:SimpleCaseBuilder
__init__	operations.py	/^    def __init__(self, expr, window):$/;"	m	class:WindowOp
__init__	operations.py	/^    def __init__(self, join_expr):$/;"	m	class:MaterializedJoin
__init__	operations.py	/^    def __init__(self, left, right):$/;"	m	class:BinaryOp
__init__	operations.py	/^    def __init__(self, left, right, distinct=False):$/;"	m	class:Union
__init__	operations.py	/^    def __init__(self, left, right, predicates):$/;"	m	class:Join
__init__	operations.py	/^    def __init__(self, name, schema, source):$/;"	m	class:DatabaseTable
__init__	operations.py	/^    def __init__(self, parent, metrics, by, having):$/;"	m	class:AggregateSelection
__init__	operations.py	/^    def __init__(self, query, schema, source):$/;"	m	class:SQLQueryResult
__init__	operations.py	/^    def __init__(self, schema, name=None):$/;"	m	class:UnboundTable
__init__	operations.py	/^    def __init__(self, table):$/;"	m	class:Distinct
__init__	operations.py	/^    def __init__(self, table):$/;"	m	class:TableArrayView
__init__	operations.py	/^    def __init__(self, table, metrics, by=None, having=None,$/;"	m	class:Aggregation
__init__	operations.py	/^    def __init__(self, table, n, offset=0):$/;"	m	class:Limit
__init__	operations.py	/^    def __init__(self, table_expr):$/;"	m	class:SelfReference
__init__	operations.py	/^    def __init__(self, table_expr, proj_exprs=None, predicates=None,$/;"	m	class:Selection
__init__	operations.py	/^    def __init__(self, value, options):$/;"	m	class:Contains
__init__	operations.py	/^    def __init__(self, what, ascending=True):$/;"	m	class:DeferredSortKey
__repr__	operations.py	/^    def __repr__(self):$/;"	m	class:SortKey
_arg_names	operations.py	/^    _arg_names = ['by', 'ascending']$/;"	v	class:SortKey
_arg_names	operations.py	/^    _arg_names = ['left', 'right', 'predicates']$/;"	v	class:Join
_arg_names	operations.py	/^    _arg_names = ['table', 'metrics', 'by', 'having',$/;"	v	class:Aggregation
_arg_names	operations.py	/^    _arg_names = ['table', 'selections', 'predicates', 'sort_keys']$/;"	v	class:Selection
_arg_names	operations.py	/^    _arg_names = [None, 'n', 'offset']$/;"	v	class:Limit
_array_binop_invariant_output_type	operations.py	/^def _array_binop_invariant_output_type(self):$/;"	f
_array_reduced_type	operations.py	/^def _array_reduced_type(self):$/;"	f
_assert_can_compare	operations.py	/^    def _assert_can_compare(self):$/;"	m	class:Between
_assert_can_compare	operations.py	/^    def _assert_can_compare(self):$/;"	m	class:Comparison
_attempt_pushdown	operations.py	/^    def _attempt_pushdown(self):$/;"	m	class:AggregateSelection
_ceil_floor_output	operations.py	/^def _ceil_floor_output(self):$/;"	f
_clean_predicates	operations.py	/^    def _clean_predicates(self, left, right, predicates):$/;"	m	class:Join
_coalesce_upcast	operations.py	/^def _coalesce_upcast(self):$/;"	f
_coerce_integer_to_double_type	operations.py	/^def _coerce_integer_to_double_type(self):$/;"	f
_decimal_scalar_ctor	operations.py	/^def _decimal_scalar_ctor(precision, scale):$/;"	f
_get_schema	operations.py	/^    def _get_schema(self):$/;"	m	class:InnerSemiJoin
_get_schema	operations.py	/^    def _get_schema(self):$/;"	m	class:Join
_get_schema	operations.py	/^    def _get_schema(self):$/;"	m	class:LeftAntiJoin
_get_schema	operations.py	/^    def _get_schema(self):$/;"	m	class:LeftSemiJoin
_get_schema	operations.py	/^    def _get_schema(self, table, projections):$/;"	m	class:Selection
_is_analytic	operations.py	/^    def _is_analytic(op):$/;"	f	function:is_analytic	file:
_make_distinct	operations.py	/^    def _make_distinct(self, left, right, predicates):$/;"	m	class:Join
_make_expr	operations.py	/^    def _make_expr(self):$/;"	m	class:SortKey
_make_expr	operations.py	/^    def _make_expr(self):$/;"	m	class:TableArrayView
_make_expr	operations.py	/^    def _make_expr(self):$/;"	m	class:TableNode
_maybe_cast_args	operations.py	/^    def _maybe_cast_args(self, left, right):$/;"	m	class:BinaryOp
_maybe_cast_args	operations.py	/^    def _maybe_cast_args(self, left, right):$/;"	m	class:Comparison
_maybe_convert_sort_keys	operations.py	/^def _maybe_convert_sort_keys(table, exprs):$/;"	f
_mean_output_type	operations.py	/^def _mean_output_type(self):$/;"	f
_min_max_output_rule	operations.py	/^def _min_max_output_rule(self):$/;"	f
_plain_subquery	operations.py	/^    def _plain_subquery(self):$/;"	m	class:AggregateSelection
_pushdown_exprs	operations.py	/^    def _pushdown_exprs(self, exprs):$/;"	m	class:AggregateSelection
_reduction	operations.py	/^    _reduction = True$/;"	v	class:All
_reduction	operations.py	/^    _reduction = True$/;"	v	class:Reduction
_reduction	operations.py	/^    def _reduction(self):$/;"	m	class:Any
_result_schema	operations.py	/^    def _result_schema(self):$/;"	m	class:Aggregation
_rewrite_exprs	operations.py	/^    def _rewrite_exprs(self, what):$/;"	m	class:Aggregation
_sum_output_type	operations.py	/^def _sum_output_type(self):$/;"	f
_table_getitem	operations.py	/^    def _table_getitem(self):$/;"	m	class:TopKExpr
_table_names	operations.py	/^_table_names = ('t{:d}'.format(i) for i in itertools.count())$/;"	v
_truncate_unit_aliases	operations.py	/^_truncate_unit_aliases = {$/;"	v
_truncate_unit_validate	operations.py	/^def _truncate_unit_validate(unit):$/;"	f
_truncate_units	operations.py	/^_truncate_units = [$/;"	v
_validate	operations.py	/^    def _validate(self):$/;"	m	class:Aggregation
_validate	operations.py	/^    def _validate(self):$/;"	m	class:Union
_validate	operations.py	/^    def _validate(self, table, exprs):$/;"	m	class:Selection
_validate_predicates	operations.py	/^    def _validate_predicates(self):$/;"	m	class:Aggregation
_validate_predicates	operations.py	/^    def _validate_predicates(self, table):$/;"	m	class:Selection
aggregate	operations.py	/^    def aggregate(self, this, metrics, by=None, having=None):$/;"	m	class:Selection
aggregate	operations.py	/^    def aggregate(self, this, metrics, by=None, having=None):$/;"	m	class:TableNode
blocks	operations.py	/^    def blocks(self):$/;"	m	class:Aggregation
blocks	operations.py	/^    def blocks(self):$/;"	m	class:Distinct
blocks	operations.py	/^    def blocks(self):$/;"	m	class:Limit
blocks	operations.py	/^    def blocks(self):$/;"	m	class:MaterializedJoin
blocks	operations.py	/^    def blocks(self):$/;"	m	class:PhysicalTable
blocks	operations.py	/^    def blocks(self):$/;"	m	class:SQLQueryResult
blocks	operations.py	/^    def blocks(self):$/;"	m	class:Selection
blocks	operations.py	/^    def blocks(self):$/;"	m	class:SelfReference
blocks	operations.py	/^    def blocks(self):$/;"	m	class:TopK
blocks	operations.py	/^    def blocks(self):$/;"	m	class:Union
can_add_filters	operations.py	/^    def can_add_filters(self, wrapped_expr, predicates):$/;"	m	class:Selection
change_name	operations.py	/^    def change_name(self, new_name):$/;"	m	class:DatabaseTable
com	operations.py	/^import ibis.common as com$/;"	I
count	operations.py	/^    def count(self):$/;"	m	class:DistinctColumn
dt	operations.py	/^import ibis.expr.datatypes as dt$/;"	I
else_	operations.py	/^    def else_(self, result_expr):$/;"	m	class:SearchedCaseBuilder
else_	operations.py	/^    def else_(self, result_expr):$/;"	m	class:SimpleCaseBuilder
end	operations.py	/^    def end(self):$/;"	m	class:SearchedCaseBuilder
end	operations.py	/^    def end(self):$/;"	m	class:SimpleCaseBuilder
equals	operations.py	/^    def equals(self, other, cache=None):$/;"	m	class:SortKey
find_all_base_tables	operations.py	/^def find_all_base_tables(expr, memo=None):$/;"	f
genname	operations.py	/^def genname():$/;"	f
get_result	operations.py	/^    def get_result(self):$/;"	m	class:AggregateSelection
get_schema	operations.py	/^    def get_schema(self):$/;"	m	class:Limit
get_type	operations.py	/^    def get_type(self, name):$/;"	m	class:TableNode
has_reduction	operations.py	/^    def has_reduction(op):$/;"	f	function:is_reduction	file:
has_schema	operations.py	/^    def has_schema(self):$/;"	m	class:Join
has_schema	operations.py	/^    def has_schema(self):$/;"	m	class:Limit
input_type	operations.py	/^    input_type = [$/;"	v	class:ArraySlice
input_type	operations.py	/^    input_type = [$/;"	v	class:Between
input_type	operations.py	/^    input_type = [$/;"	v	class:BetweenTime
input_type	operations.py	/^    input_type = [$/;"	v	class:Truncate
input_type	operations.py	/^    input_type = [boolean(name='bool_expr'),$/;"	v	class:Where
input_type	operations.py	/^    input_type = [list_of(boolean, name='cases'),$/;"	v	class:SearchedCase
input_type	operations.py	/^    input_type = [number(allow_boolean=False),$/;"	v	class:Log
input_type	operations.py	/^    input_type = [number(allow_boolean=False)]$/;"	v	class:Logarithm
input_type	operations.py	/^    input_type = [number(name='left'), number(name='right')]$/;"	v	class:Divide
input_type	operations.py	/^    input_type = [number]$/;"	v	class:Ceil
input_type	operations.py	/^    input_type = [number]$/;"	v	class:Floor
input_type	operations.py	/^    input_type = [number]$/;"	v	class:Negate
input_type	operations.py	/^    input_type = [number]$/;"	v	class:NullIfZero
input_type	operations.py	/^    input_type = [number]$/;"	v	class:RealUnaryOp
input_type	operations.py	/^    input_type = [rules.array(dt.any), integer(name='times')]$/;"	v	class:ArrayRepeat
input_type	operations.py	/^    input_type = [rules.array(dt.any), rules.array(dt.any)]$/;"	v	class:ArrayConcat
input_type	operations.py	/^    input_type = [rules.array(dt.any), rules.integer(name='index')]$/;"	v	class:ArrayIndex
input_type	operations.py	/^    input_type = [rules.array(dt.any)]$/;"	v	class:ArrayLength
input_type	operations.py	/^    input_type = [rules.boolean]$/;"	v	class:Not
input_type	operations.py	/^    input_type = [rules.collection, boolean(name='where', optional=True)]$/;"	v	class:Count
input_type	operations.py	/^    input_type = [rules.column(boolean)]$/;"	v	class:All
input_type	operations.py	/^    input_type = [rules.column(boolean)]$/;"	v	class:Any
input_type	operations.py	/^    input_type = [rules.column, boolean(name='where', optional=True),$/;"	v	class:VarianceBase
input_type	operations.py	/^    input_type = [rules.column, boolean(name='where', optional=True)]$/;"	v	class:Reduction
input_type	operations.py	/^    input_type = [rules.column, rules.integer(name='buckets')]$/;"	v	class:NTile
input_type	operations.py	/^    input_type = [rules.column, rules.integer(name='offset', optional=True),$/;"	v	class:ShiftBase
input_type	operations.py	/^    input_type = [rules.column, rules.integer]$/;"	v	class:NthValue
input_type	operations.py	/^    input_type = [rules.column, string(name='sep', default=',')]$/;"	v	class:GroupConcat
input_type	operations.py	/^    input_type = [rules.column]$/;"	v	class:ArrayCollect
input_type	operations.py	/^    input_type = [rules.column]$/;"	v	class:CountDistinct
input_type	operations.py	/^    input_type = [rules.column]$/;"	v	class:CumulativeOp
input_type	operations.py	/^    input_type = [rules.column]$/;"	v	class:DenseRank
input_type	operations.py	/^    input_type = [rules.column]$/;"	v	class:FirstValue
input_type	operations.py	/^    input_type = [rules.column]$/;"	v	class:LastValue
input_type	operations.py	/^    input_type = [rules.column]$/;"	v	class:MinRank
input_type	operations.py	/^    input_type = [rules.column]$/;"	v	class:PercentRank
input_type	operations.py	/^    input_type = [rules.decimal]$/;"	v	class:DecimalUnaryOp
input_type	operations.py	/^    input_type = [rules.one_of([integer, string]),$/;"	v	class:BaseConvert
input_type	operations.py	/^    input_type = [rules.temporal, rules.string(name='format_str')]$/;"	v	class:Strftime
input_type	operations.py	/^    input_type = [rules.temporal]$/;"	v	class:TemporalUnaryOp
input_type	operations.py	/^    input_type = [rules.timestamp, rules.timedelta(name='offset')]$/;"	v	class:TimestampDelta
input_type	operations.py	/^    input_type = [rules.timestamp]$/;"	v	class:TimestampUnaryOp
input_type	operations.py	/^    input_type = [rules.value(name='left'), rules.value(name='right')]$/;"	v	class:BinaryOp
input_type	operations.py	/^    input_type = [string(name='needle'), list_of(string, min_length=1)]$/;"	v	class:FindInSet
input_type	operations.py	/^    input_type = [string(name='sep'), list_of(string, min_length=1)]$/;"	v	class:StringJoin
input_type	operations.py	/^    input_type = [string, integer(name='length'),$/;"	v	class:LPad
input_type	operations.py	/^    input_type = [string, integer(name='length'),$/;"	v	class:RPad
input_type	operations.py	/^    input_type = [string, integer(name='nchars')]$/;"	v	class:StrRight
input_type	operations.py	/^    input_type = [string, integer(name='start'),$/;"	v	class:Substring
input_type	operations.py	/^    input_type = [string, integer(name='times')]$/;"	v	class:Repeat
input_type	operations.py	/^    input_type = [string, rules.string_options(['PROTOCOL', 'HOST', 'PATH',$/;"	v	class:ParseURL
input_type	operations.py	/^    input_type = [string, string(name='from_str'), string(name='to_str')]$/;"	v	class:Translate
input_type	operations.py	/^    input_type = [string, string(name='pattern'), integer(name='index')]$/;"	v	class:RegexExtract
input_type	operations.py	/^    input_type = [string, string(name='pattern'), string(name='replacement')]$/;"	v	class:RegexReplace
input_type	operations.py	/^    input_type = [string, string(name='pattern'), string(name='replacement')]$/;"	v	class:StringReplace
input_type	operations.py	/^    input_type = [string, string(name='pattern')]$/;"	v	class:FuzzySearch
input_type	operations.py	/^    input_type = [string, string(name='substr'),$/;"	v	class:StringFind
input_type	operations.py	/^    input_type = [string]$/;"	v	class:StringUnaryOp
input_type	operations.py	/^    input_type = [value(name='base'),$/;"	v	class:SimpleCase
input_type	operations.py	/^    input_type = [value, integer(name='digits', optional=True)]$/;"	v	class:Round
input_type	operations.py	/^    input_type = [value, rules.data_type]$/;"	v	class:Cast
input_type	operations.py	/^    input_type = [value, rules.string_options(['fnv'], name='how')]$/;"	v	class:Hash
input_type	operations.py	/^    input_type = [value, rules.string_options(['s', 'ms', 'us'], name='unit')]$/;"	v	class:TimestampFromUNIX
input_type	operations.py	/^    input_type = [value, value(name='ifnull_expr')]$/;"	v	class:IfNull
input_type	operations.py	/^    input_type = [value, value(name='null_if_expr')]$/;"	v	class:NullIf
input_type	operations.py	/^    input_type = [value,$/;"	v	class:Clip
input_type	operations.py	/^    input_type = [value,$/;"	v	class:MultiQuantile
input_type	operations.py	/^    input_type = [value,$/;"	v	class:Quantile
input_type	operations.py	/^    input_type = [value]$/;"	v	class:TypeOf
input_type	operations.py	/^    input_type = [value]$/;"	v	class:UnaryOp
input_type	operations.py	/^    input_type = rules.varargs(rules.value)$/;"	v	class:CoalesceLike
ir	operations.py	/^import ibis.expr.types as ir$/;"	I
is_analytic	operations.py	/^def is_analytic(expr, exclude_windows=False):$/;"	f
is_ancestor	operations.py	/^    def is_ancestor(self, other):$/;"	m	class:Selection
is_reduction	operations.py	/^def is_reduction(expr):$/;"	f
negate	operations.py	/^    def negate(self):$/;"	m	class:All
negate	operations.py	/^    def negate(self):$/;"	m	class:Any
negate	operations.py	/^    def negate(self):$/;"	m	class:NotAll
negate	operations.py	/^    def negate(self):$/;"	m	class:NotAny
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Add
output_type	operations.py	/^    def output_type(self):$/;"	m	class:All
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Any
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Between
output_type	operations.py	/^    def output_type(self):$/;"	m	class:BinaryOp
output_type	operations.py	/^    def output_type(self):$/;"	m	class:CMSMedian
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Cast
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Comparison
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Contains
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Count
output_type	operations.py	/^    def output_type(self):$/;"	m	class:CountDistinct
output_type	operations.py	/^    def output_type(self):$/;"	m	class:DistinctColumn
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Divide
output_type	operations.py	/^    def output_type(self):$/;"	m	class:E
output_type	operations.py	/^    def output_type(self):$/;"	m	class:FloorDivide
output_type	operations.py	/^    def output_type(self):$/;"	m	class:GroupConcat
output_type	operations.py	/^    def output_type(self):$/;"	m	class:HLLCardinality
output_type	operations.py	/^    def output_type(self):$/;"	m	class:IfNull
output_type	operations.py	/^    def output_type(self):$/;"	m	class:LogicalBinaryOp
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Modulus
output_type	operations.py	/^    def output_type(self):$/;"	m	class:MultiQuantile
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Multiply
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Power
output_type	operations.py	/^    def output_type(self):$/;"	m	class:RankBase
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Round
output_type	operations.py	/^    def output_type(self):$/;"	m	class:SearchedCase
output_type	operations.py	/^    def output_type(self):$/;"	m	class:SimpleCase
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Subtract
output_type	operations.py	/^    def output_type(self):$/;"	m	class:SummaryFilter
output_type	operations.py	/^    def output_type(self):$/;"	m	class:TimestampNow
output_type	operations.py	/^    def output_type(self):$/;"	m	class:TopK
output_type	operations.py	/^    def output_type(self):$/;"	m	class:Where
output_type	operations.py	/^    output_type = _ceil_floor_output$/;"	v	class:Ceil
output_type	operations.py	/^    output_type = _ceil_floor_output$/;"	v	class:Floor
output_type	operations.py	/^    output_type = _coalesce_upcast$/;"	v	class:CoalesceLike
output_type	operations.py	/^    output_type = rules.array_output($/;"	v	class:ArrayIndex
output_type	operations.py	/^    output_type = rules.array_output(_array_binop_invariant_output_type)$/;"	v	class:ArrayConcat
output_type	operations.py	/^    output_type = rules.array_output(_mean_output_type)$/;"	v	class:CumulativeMean
output_type	operations.py	/^    output_type = rules.array_output(_min_max_output_rule)$/;"	v	class:CumulativeMax
output_type	operations.py	/^    output_type = rules.array_output(_min_max_output_rule)$/;"	v	class:CumulativeMin
output_type	operations.py	/^    output_type = rules.array_output(_sum_output_type)$/;"	v	class:CumulativeSum
output_type	operations.py	/^    output_type = rules.array_output(lambda self: 'boolean')$/;"	v	class:CumulativeAll
output_type	operations.py	/^    output_type = rules.array_output(lambda self: 'boolean')$/;"	v	class:CumulativeAny
output_type	operations.py	/^    output_type = rules.array_output(lambda self: self.args[0].type())$/;"	v	class:ArrayRepeat
output_type	operations.py	/^    output_type = rules.scalar_output(_array_reduced_type)$/;"	v	class:ArrayCollect
output_type	operations.py	/^    output_type = rules.scalar_output(_coerce_integer_to_double_type)$/;"	v	class:Quantile
output_type	operations.py	/^    output_type = rules.scalar_output(_mean_output_type)$/;"	v	class:Mean
output_type	operations.py	/^    output_type = rules.scalar_output(_mean_output_type)$/;"	v	class:VarianceBase
output_type	operations.py	/^    output_type = rules.scalar_output(_min_max_output_rule)$/;"	v	class:Max
output_type	operations.py	/^    output_type = rules.scalar_output(_min_max_output_rule)$/;"	v	class:Min
output_type	operations.py	/^    output_type = rules.scalar_output(_sum_output_type)$/;"	v	class:Sum
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'boolean')$/;"	v	class:FuzzySearch
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'boolean')$/;"	v	class:IsNull
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'boolean')$/;"	v	class:Not
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'boolean')$/;"	v	class:NotNull
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'double')$/;"	v	class:PercentRank
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'double')$/;"	v	class:RealUnaryOp
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'float')$/;"	v	class:Sign
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'int32')$/;"	v	class:DecimalPrecision
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'int32')$/;"	v	class:DecimalScale
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'int32')$/;"	v	class:ExtractTemporalField
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'int32')$/;"	v	class:ExtractTimestampField
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'int32')$/;"	v	class:StringAscii
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'int32')$/;"	v	class:StringLength
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'int64')$/;"	v	class:ArrayLength
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'int64')$/;"	v	class:FindInSet
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'int64')$/;"	v	class:Hash
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'int64')$/;"	v	class:NTile
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'int64')$/;"	v	class:StringFind
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'string')$/;"	v	class:LPad
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'string')$/;"	v	class:ParseURL
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'string')$/;"	v	class:RPad
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'string')$/;"	v	class:RegexExtract
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'string')$/;"	v	class:RegexReplace
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'string')$/;"	v	class:Repeat
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'string')$/;"	v	class:StrRight
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'string')$/;"	v	class:Strftime
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'string')$/;"	v	class:StringReplace
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'string')$/;"	v	class:StringUnaryOp
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'string')$/;"	v	class:Substring
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'string')$/;"	v	class:Translate
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'string')$/;"	v	class:TypeOf
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'time')$/;"	v	class:Time
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'timestamp')$/;"	v	class:TimestampDelta
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'timestamp')$/;"	v	class:TimestampFromUNIX
output_type	operations.py	/^    output_type = rules.shape_like_arg(0, 'timestamp')$/;"	v	class:Truncate
output_type	operations.py	/^    output_type = rules.shape_like_flatargs('string')$/;"	v	class:BaseConvert
output_type	operations.py	/^    output_type = rules.shape_like_flatargs('string')$/;"	v	class:StringJoin
output_type	operations.py	/^    output_type = rules.type_of_arg(0)$/;"	v	class:Abs
output_type	operations.py	/^    output_type = rules.type_of_arg(0)$/;"	v	class:ArraySlice
output_type	operations.py	/^    output_type = rules.type_of_arg(0)$/;"	v	class:Clip
output_type	operations.py	/^    output_type = rules.type_of_arg(0)$/;"	v	class:FirstValue
output_type	operations.py	/^    output_type = rules.type_of_arg(0)$/;"	v	class:LastValue
output_type	operations.py	/^    output_type = rules.type_of_arg(0)$/;"	v	class:Negate
output_type	operations.py	/^    output_type = rules.type_of_arg(0)$/;"	v	class:NthValue
output_type	operations.py	/^    output_type = rules.type_of_arg(0)$/;"	v	class:NullIf
output_type	operations.py	/^    output_type = rules.type_of_arg(0)$/;"	v	class:NullIfZero
output_type	operations.py	/^    output_type = rules.type_of_arg(0)$/;"	v	class:ShiftBase
output_type	operations.py	/^    output_type = rules.type_of_arg(0)$/;"	v	class:WindowOp
output_type	operations.py	/^    output_type = rules.type_of_arg(0)$/;"	v	class:ZeroIfNull
over	operations.py	/^    def over(self, window):$/;"	m	class:WindowOp
resolve	operations.py	/^    def resolve(self, parent):$/;"	m	class:DeferredSortKey
root_tables	operations.py	/^    def root_tables(self):$/;"	m	class:Join
root_tables	operations.py	/^    def root_tables(self):$/;"	m	class:Limit
root_tables	operations.py	/^    def root_tables(self):$/;"	m	class:MaterializedJoin
root_tables	operations.py	/^    def root_tables(self):$/;"	m	class:SearchedCase
root_tables	operations.py	/^    def root_tables(self):$/;"	m	class:Selection
root_tables	operations.py	/^    def root_tables(self):$/;"	m	class:SelfReference
root_tables	operations.py	/^    def root_tables(self):$/;"	m	class:SimpleCase
root_tables	operations.py	/^    def root_tables(self):$/;"	m	class:SortKey
rules	operations.py	/^import ibis.expr.rules as rules$/;"	I
sort_by	operations.py	/^    def sort_by(self, expr, sort_exprs):$/;"	m	class:Aggregation
sort_by	operations.py	/^    def sort_by(self, expr, sort_exprs):$/;"	m	class:Selection
sort_by	operations.py	/^    def sort_by(self, expr, sort_exprs):$/;"	m	class:TableNode
substitute_table	operations.py	/^    def substitute_table(self, table_expr):$/;"	m	class:Aggregation
substitute_table	operations.py	/^    def substitute_table(self, table_expr):$/;"	m	class:Selection
to_aggregation	operations.py	/^    def to_aggregation(self, metric_name=None, parent_table=None,$/;"	m	class:TopKExpr
to_filter	operations.py	/^    def to_filter(self):$/;"	m	class:TopKExpr
to_sort_key	operations.py	/^def to_sort_key(table, key):$/;"	f
type	operations.py	/^    def type(self):$/;"	m	class:TopKExpr
util	operations.py	/^import ibis.util as util$/;"	I
when	operations.py	/^    def when(self, case_expr, result_expr):$/;"	m	class:SearchedCaseBuilder
when	operations.py	/^    def when(self, case_expr, result_expr):$/;"	m	class:SimpleCaseBuilder
