parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}Test

  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    AZURECI: 1
    conda.version: "4.7"
    PYTEST_BACKENDS: "pandas csv hdf5 parquet sqlite mysql"

  strategy:
    matrix:
      py37:
        python.major.version: "3"
        python.minor.version: "7"
        python.version: "$(python.major.version).$(python.minor.version)"
        python.no.dot.version: "$(python.major.version)$(python.minor.version)"
        conda.env: "ibis$(python.no.dot.version)"
        arrow.build: "py37h5e0360d_2"
      py38:
        python.major.version: "3"
        python.minor.version: "8"
        python.version: "$(python.major.version).$(python.minor.version)"
        python.no.dot.version: "$(python.major.version)$(python.minor.version)"
        conda.env: "ibis$(python.no.dot.version)"
        arrow.build: "py38h0e40e04_2"

  steps:
    - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
      displayName: Add conda to PATH

    - script: conda config --set always_yes True --set show_channel_urls True
      displayName: 'Set conda always_yes and show_channel_urls'

    - script: conda config --add channels conda-forge
      displayName: 'Add the conda-forge channel'

    - script: conda update --all conda=$(conda.version)
      displayName: 'Update conda and install an appropriate version'

    - script: |
        conda create --name $(conda.env) python=$(python.version)
        conda env update --name $(conda.env) --file=environment.yml
        conda install -n $(conda.env) --file=ci/deps/mysql.yml
        conda install -n $(conda.env) --file=ci/deps/postgres.yml
      displayName: 'Create conda environment'

    - script: |
        call activate $(conda.env)
        pip install --upgrade "pytest>=4.5"
        pip install --upgrade pytest-mock
      displayName: 'Install latest pytest'

    - script: conda info
      displayName: 'Show conda info'

    - script: conda list --name $(conda.env)
      displayName: 'Show installed packages'

    - script: conda list --export --name $(conda.env) > env.yml
      displayName: 'Capture installed packages'

    - task: PublishPipelineArtifact@1
      inputs:
        path: env.yml
        artifact: WindowsCondaEnvironment$(python.no.dot.version)
      displayName: 'Publish Windows environment YAML to Azure'
      condition: succeededOrFailed()  # pass or fail, but not cancelled

    - script: |
        call activate $(conda.env)
        python -c "import numpy"
      displayName: 'Import numpy'

    - script: |
        call activate $(conda.env)
        python -c "import pandas"
      displayName: 'Import pandas'

    - script: choco install -y mariadb --version=10.3.16
      displayName: 'Install mariadb (mysql) from chocolatey'

    - script: '"C:\\Program Files\\MariaDB 10.3\\bin\\mysql" -u root -e "CREATE OR REPLACE USER ibis@localhost IDENTIFIED BY ''ibis''"'
      displayName: 'Create ibis user and password in MySQL database'

    - script: '"C:\\Program Files\\MariaDB 10.3\\bin\\mysql" -u root -e "GRANT ALL PRIVILEGES ON *.* TO ibis@localhost"'
      displayName: 'Setup privileges for ibis user in MySQL'

    - script: choco install -y postgresql10 --params '/Password:postgres'
      displayName: 'Install postgres from chocolatey'

    - script: |
        call activate $(conda.env)
        pip install -e . --no-deps --ignore-installed --no-cache-dir
      displayName: 'Install ibis'

    - script: |
        call activate $(conda.env)
        python ci/datamgr.py download
      displayName: 'Download data'

    - script: |
        call activate $(conda.env)
        python ci/datamgr.py mysql
      displayName: 'Load MySQL data'

    - script: |
        call activate $(conda.env)
        python ci/datamgr.py postgres --no-plpython --psql-path="C:/Program Files/PostgreSQL/10/bin/psql.exe" -t functional_alltypes -t diamonds -t batting -t awards_players
      displayName: 'Load PostgreSQL data'

    - script: |
        call activate $(conda.env)
        python ci/datamgr.py sqlite
      displayName: 'Load SQLite data'

    - script: |
        call activate $(conda.env)
        python ci/datamgr.py parquet -i
      displayName: 'Load Parquet data'

    - script: |
        call activate $(conda.env)
        pytest ibis/tests ibis/backends/pandas/tests ibis/backends/csv/tests ibis/backends/hdf5/tests ibis/backends/parquet/tests -m "not hdfs" -ra --junitxml="junit-$(python.version).xml"
      displayName: 'Run tests'

    - task: PublishTestResults@2
      displayName: 'Publish test results from pytest JUnitXML'
      inputs:
        testResultsFiles: junit-$(python.version).xml
        testRunTitle: 'Publish test results'
        mergeTestResults: False
      condition: succeededOrFailed()  # pass or fail, but not cancelled
