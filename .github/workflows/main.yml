name: Main

on:
  push:
    branches: master
  pull_request:
    branches: master

jobs:
  Tests_pandas:
    name: Tests pandas / files
    runs-on: ${{ matrix.os }}
    env:
      BACKENDS: "pandas csv parquet hdf5"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python_version: ["3.7", "3.9"]
    steps:
    - name: checkout
      uses: actions/checkout@v1

    - name: set up environment
      run: ./ci/setup_env.sh "${{ matrix.python_version }}" "$BACKENDS"
      shell: bash

    - name: run tests
      run: PYTEST_BACKENDS=$BACKENDS ./ci/run_tests.sh
      shell: bash

  Tests_dask:
    name: Tests dask
    runs-on: ubuntu-latest
    env:
      BACKENDS: "dask"
    strategy:
      fail-fast: false
      matrix:
        python_version: ["3.7", "3.9"]
    steps:
    - name: checkout
      uses: actions/checkout@v1

    - name: set up environment
      run: ./ci/setup_env.sh "${{ matrix.python_version }}" "$BACKENDS"
      shell: bash

    - name: run tests
      run: PYTEST_BACKENDS=$BACKENDS ./ci/run_tests.sh
      shell: bash

  Tests_sql:
    name: Tests SQL
    runs-on: ubuntu-latest
    env:
      BACKENDS: "postgres mysql sqlite"
    strategy:
      fail-fast: false
      matrix:
        python_version: ["3.7", "3.9"]
    services:
      postgres:
        image: shajekpivotal/ibis-docker-postgres-9.5
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ''
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
      mysql:
        image: mariadb:10.4.12
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: ibis_testing
          MYSQL_USER: ibis
          MYSQL_PASSWORD: ibis
        options: --health-cmd="mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 3
    steps:
    - name: checkout
      uses: actions/checkout@v1

    - name: set up environment
      run: ./ci/setup_env.sh "${{ matrix.python_version }}" "$BACKENDS"

    - name: run tests
      run: PYTEST_BACKENDS=$BACKENDS PYTEST_EXPRESSION="not udf" ./ci/run_tests.sh

  Tests_impala_clickhouse:
    name: Tests Impala / Clickhouse
    runs-on: ubuntu-latest
    env:
      BACKENDS: "impala clickhouse"
      IBIS_TEST_NN_HOST: localhost
      IBIS_TEST_IMPALA_HOST: localhost
      IBIS_TEST_IMPALA_PORT: 21050
      IBIS_TEST_WEBHDFS_PORT: 50070
      IBIS_TEST_WEBHDFS_USER: hdfs
    strategy:
      fail-fast: false
      matrix:
        # TODO Latest impyla (0.16.3) doesn't support Python 3.9. Use 3.9 instead of 3.8 once a new impyla is released
        python_version: ["3.7", "3.8"]
    services:
      postgres:
        image: shajekpivotal/ibis-docker-postgres-9.5
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ''
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
      kudu-master:
        image: ibisproject/kudu:latest
        ports:
          - 7051:7051
          - 8051:8051
        env:
          KUDU_MASTER: "true"
        options: "--network-alias=kudu --cap-add=SYS_TIME"
      kudu-tserver:
        image: ibisproject/kudu:latest
        ports:
          - 7050:7050
          - 8050:8050
        env:
          KUDU_MASTER: "false"
        options: "--cap-add=SYS_TIME"
      impala:
        image: ibisproject/impala:latest
        env:
          PGPASSWORD: postgres
        ports:
          # HDFS
          - 9020:9020
          - 50070:50070
          - 50075:50075
          - 8020:8020
          - 8042:8042
          # Hive
          - 9083:9083

          # Impala
          - 21000:21000
          - 21050:21050
          - 25000:25000
          - 25010:25010
          - 25020:25020
        options: --hostname localhost --health-cmd "nc -z 127.0.0.1 21050 && nc -z 127.0.0.1 50070" --health-interval 30s --health-timeout 10s --health-retries 20
      clickhouse:
        # XXX does clickhouse backend require the impala container too?
        image: yandex/clickhouse-server:18.14
        ports:
          - 8123:8123
          - 9000:9000

    steps:
    - name: checkout
      uses: actions/checkout@v1

    - name: install boost
      run: sudo apt-get -qq update --yes && sudo apt-get -qq install --yes --no-install-recommends libboost-dev

    - name: set up environment
      run: ./ci/setup_env.sh "${{ matrix.python_version }}" "$BACKENDS"

    - name: run tests
      run: PYTEST_BACKENDS=$BACKENDS ./ci/run_tests.sh

  Tests_spark:
    name: Tests PySpark / Spark
    runs-on: ubuntu-18.04
    env:
      BACKENDS: "spark pyspark"
    strategy:
      fail-fast: false
      matrix:
        python_version: ["3.7", "3.9"]
    steps:
    - name: checkout
      uses: actions/checkout@v1

    - name: set up environment
      run: ./ci/setup_env.sh "${{ matrix.python_version }}" "$BACKENDS"

    - name: run tests
      run: PYTEST_BACKENDS=$BACKENDS ./ci/run_tests.sh


  Lint_and_benchmarks:
    name: Lint and benckmarks
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.9"
      BACKENDS: ""
      LOAD_TEST_DATA: "false"
    steps:

    - name: checkout
      uses: actions/checkout@v1

    - name: set up environment
      run: ./ci/setup_env.sh "$PYTHON_VERSION" "$BACKENDS" "$LOAD_TEST_DATA"

    - name: flake8
      run: flake8 .
      if: always()

    - name: black
      run: black --check .
      if: always()

    - name: mypy
      # TODO: mypy has errors that need to be fixed before it can be added
      run: mypy --ignore-missing-imports ibis || true
      if: always()

    - name: pydocstyle
      # TODO: change match-dir when docstrings are fixed for other backends
      run: pydocstyle --match-dir="(ibis|omniscidb)"
      if: always()

    - name: isort
      run: isort --check-only .
      if: always()

    - name: publish feedstock artifact
      uses: actions/upload-artifact@master
      with:
        name: LinuxCondaPackage
        path: /tmp/ibis/packages
      if: github.event_name == 'push'

    - name: benckmark
      run: asv machine --yes && asv dev
      if: always()

  Conda_package:
    name: Conda package
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.9"
      BACKENDS: ""
      LOAD_TEST_DATA: "false"
    steps:

    - name: checkout
      uses: actions/checkout@v1

    - name: set up environment
      run: ./ci/setup_env.sh "$PYTHON_VERSION" "$BACKENDS" "$LOAD_TEST_DATA"

    - name: clone feedstock repo
      run: git clone https://github.com/conda-forge/ibis-framework-feedstock /tmp/feedstock

    - name: update recipe file
      run: |
        set -x
        IBIS_PATH=`pwd`
        sed -i "s|url:.*|path: $IBIS_PATH|g" ci/recipe/meta.yaml
        IBIS_VERSION=`python -c "import ibis; print(ibis.__version__)"`
        sed -i "s/{{ version }}/$IBIS_VERSION/g" ci/recipe/meta.yaml
        cat ci/recipe/meta.yaml

    - name: build recipe
      run: conda build -c conda-forge --python 3.7 ci/recipe

    - name: deploy recipe package
      run: |
        mkdir /tmp/packages
        cp -r /usr/share/miniconda/conda-bld/noarch /tmp/packages/noarch
        cp -r /usr/share/miniconda/conda-bld/linux-64 /tmp/packages/linux-64
        conda index /tmp/packages

  Docs:
    name: Docs
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.8"
      BACKENDS: "bigquery clickhouse dask impala mysql parquet postgres pyspark spark"
      LOAD_TEST_DATA: "false"
    steps:

    - name: checkout
      uses: actions/checkout@v1

    - name: set up environment
      run: ./ci/setup_env.sh "$PYTHON_VERSION" "$BACKENDS" "$LOAD_TEST_DATA"

    - name: build web
      run: python -m pysuerga docs/web --target-path=/tmp/ibis-project.org/

    - name: build docs
      run: sphinx-build -b html docs/source /tmp/ibis-project.org/docs -W -T

    - name: Install github key
      run: |
        mkdir -m 700 -p ~/.ssh
        echo "${{ secrets.DOCS_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
      if: github.event_name == 'push'

    - name: Push docs
      run: |
        cd /tmp/ibis-project.org
        touch .nojekyll
        echo "ibis-project.org" > CNAME
        git init
        git remote add origin git@github.com:ibis-project/ibis-project.org
        git config user.name 'Ibis GitHub actions'
        git config user.email ''
        git add --all .
        git commit -m "Ibis docs - $(date) - $GITHUB_SHA"
        git push -f -u origin master
      if: github.event_name == 'push'
