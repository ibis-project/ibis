# vim: filetype=yaml
name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test_no_backends:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.7"
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: install poetry
        run: pip install poetry

      - name: cache dependencies linux
        uses: actions/cache@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          path: ~/.cache/pypoetry
          key: no-backends-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: cache dependencies windows
        uses: actions/cache@v2
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          path: ~\AppData\Local\pypoetry
          key: no-backends-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: install ibis
        run: poetry install

      - name: run tests
        shell: bash
        run: ./ci/run_tests.sh ibis/tests

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: no-backends-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit.xml

  test_simple_backends:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.7"
          - "3.9"
        backend:
          - name: csv
          - name: dask
          - name: dask
            deps:
              - "dask@2021.2.0 --extras array --extras dataframe"
          - name: hdf5
          - name: pandas
          - name: parquet
          - name: sqlite
        exclude:
          - os: windows-latest
            python-version: "3.9"
            backend:
              name: hdf5
        include:
          - os: windows-latest
            python-version: "3.8"
            backend:
              name: hdf5
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: install poetry
        run: pip install poetry

      - name: cache dependencies linux
        uses: actions/cache@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          path: ~/.cache/pypoetry
          key: ${{ matrix.backend.name }}-${{ join(matrix.backend.deps, '-') }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: cache dependencies windows
        uses: actions/cache@v2
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          path: ~\AppData\Local\pypoetry
          key: ${{ matrix.backend.name }}-${{ join(matrix.backend.deps, '-') }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: install minimum dask version
        if: ${{ matrix.backend.name == 'dask' && matrix.backend.deps != null }}
        run: poetry add --lock --optional ${{ join(matrix.backend.deps, ' ') }}

      - name: install ibis
        run: poetry install --extras ${{ matrix.backend.name }}

      - name: download backend data
        run: poetry run python ci/datamgr.py download

      - name: install backend data
        run: poetry run python ci/datamgr.py ${{ matrix.backend.name }}

      - name: run tests
        shell: bash
        env:
          PYTEST_BACKENDS: ${{ matrix.backend.name }}
        run: ./ci/run_tests.sh

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: ${{ matrix.backend.name }}-${{ join(matrix.backend.deps, '-') }}-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit.xml

  test_postgres:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.7"
          - "3.9"
        deps:
          - []
        include:
          - python-version: "3.7"
            deps: ["sqlalchemy@1.3", "psycopg2@2.7", "geoalchemy@0.6", "geopandas@0.6", "shapely@1.6"]
    services:
      postgres:
        image: shajekpivotal/ibis-docker-postgres-9.5
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ""
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: install poetry
        run: pip install poetry

      - name: install libgeos for shapely
        run: sudo apt-get install -qq -y build-essential libgeos-dev python-dev

      - name: cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: postgres-geospatial-${{ join(matrix.deps, '-') }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: install minimum postgres dependencies
        run: |
          for dep in ${{ join(matrix.deps, ' ') }}; do
            poetry add --lock --optional "$dep"
          done

      - name: install ibis
        run: poetry install --extras postgres --extras geospatial

      - name: download backend data
        run: poetry run python ci/datamgr.py download

      - name: install backend data
        run: poetry run python ci/datamgr.py postgres

      - name: run tests
        env:
          PYTEST_BACKENDS: postgres
        run: ./ci/run_tests.sh -m "not udf"

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: postgres-${{ join(matrix.deps, '-') }}-${{ matrix.python-version }}
          path: junit.xml

  test_pyspark:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.7"
          - "3.9"
        pyspark:
          - version: "2.4.3"
            jdk: "8"
            env:
              ARROW_PRE_0_15_IPC_FORMAT: 1
          - jdk: "11"
            env:
              ARROW_PRE_0_15_IPC_FORMAT: 0
        exclude:
          - python-version: "3.9"
            pyspark:
              version: "2.4.3"
              jdk: "8"
              env:
                ARROW_PRE_0_15_IPC_FORMAT: 1
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: ${{ matrix.pyspark.jdk }}

      - name: install poetry
        run: pip install poetry

      - name: cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}-pyspark-${{ matrix.pyspark.version }}

      - name: pin pyspark
        if: ${{ matrix.pyspark.version != null }}
        run: poetry add --lock --optional "pyspark@${{ matrix.pyspark.version }}"

      - name: install ibis
        run: poetry install --extras pyspark

      - name: download backend data
        run: poetry run python ci/datamgr.py download

      - name: run tests
        env:
          PYTEST_BACKENDS: pyspark
          ARROW_PRE_0_15_IPC_FORMAT: ${{ matrix.pyspark.env.ARROW_PRE_0_15_IPC_FORMAT }}
        run: ./ci/run_tests.sh

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: pyspark-${{ matrix.python-version }}-${{ matrix.pyspark.version }}-${{ matrix.pyspark.jdk }}-${{ matrix.pyspark.env.ARROW_PRE_0_15_IPC_FORMAT }}
          path: junit.xml

  test_impala:
    runs-on: ubuntu-latest
    env:
      IBIS_TEST_NN_HOST: localhost
      IBIS_TEST_IMPALA_HOST: localhost
      IBIS_TEST_IMPALA_PORT: 21050
      IBIS_TEST_WEBHDFS_PORT: 50070
      IBIS_TEST_WEBHDFS_USER: hdfs
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.7"
          - "3.9"
    services:
      postgres:
        image: shajekpivotal/ibis-docker-postgres-9.5
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ""
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
      kudu-master:
        image: ibisproject/kudu:latest
        ports:
          - 7051:7051
          - 8051:8051
        env:
          KUDU_MASTER: "true"
        options: "--network-alias=kudu --cap-add=SYS_TIME"
      kudu-tserver:
        image: ibisproject/kudu:latest
        ports:
          - 7050:7050
          - 8050:8050
        env:
          KUDU_MASTER: "false"
        options: "--cap-add=SYS_TIME"
      impala:
        image: ibisproject/impala:latest
        env:
          PGPASSWORD: postgres
        ports:
          # HDFS
          - 9020:9020
          - 50070:50070
          - 50075:50075
          - 8020:8020
          - 8042:8042
          # Hive
          - 9083:9083

          # Impala
          - 21000:21000
          - 21050:21050
          - 25000:25000
          - 25010:25010
          - 25020:25020
        options: --hostname localhost --health-cmd "nc -z 127.0.0.1 21050 && nc -z 127.0.0.1 50070" --health-interval 30s --health-timeout 10s --health-retries 20
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: install system dependencies
        run: sudo apt-get install -qq -y build-essential cmake krb5-config python-dev libkrb5-dev libboost-all-dev

      - name: install poetry
        run: pip install poetry

      - name: cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ matrix.backend }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: install ibis
        run: poetry install --extras impala

      - name: download backend data
        run: poetry run python ci/datamgr.py download

      - name: install backend data
        run: poetry run python ci/impalamgr.py load --data

      - name: run tests
        env:
          PYTEST_BACKENDS: impala
        run: ./ci/run_tests.sh

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: impala-${{ matrix.python-version }}
          path: junit.xml

  test_mysql_clickhouse:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.7"
          - "3.9"
        backend:
          - mysql
          - clickhouse
    services:
      mysql:
        image: mariadb:10.4.12
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: ibis_testing
          MYSQL_USER: ibis
          MYSQL_PASSWORD: ibis
        options: --health-cmd="mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 3
      clickhouse:
        image: yandex/clickhouse-server:18.14
        ports:
          - 8123:8123
          - 9000:9000
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: install poetry
        run: pip install poetry

      - name: cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ matrix.backend }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: install ibis
        run: poetry install --extras ${{ matrix.backend }}

      - name: download backend data
        run: poetry run python ci/datamgr.py download

      - name: install backend data
        run: poetry run python ci/datamgr.py ${{ matrix.backend }}

      - name: run tests
        env:
          PYTEST_BACKENDS: ${{ matrix.backend }}
        run: ./ci/run_tests.sh

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: ${{ matrix.backend }}-${{ matrix.python-version }}
          path: junit.xml

  benchmarks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: install system dependencies
        run: sudo apt-get install -qq -y build-essential cmake krb5-config python-dev libkrb5-dev libboost-all-dev

      - name: install poetry
        run: pip install poetry

      - name: cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: benchmarks-impala-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: install ibis
        run: poetry install --extras impala

      - name: benchmark
        run: |
          set -euo pipefail

          poetry run asv machine --yes
          poetry run asv dev

  docs:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install system dependencies
        run: sudo apt-get install -qq -y build-essential cmake krb5-config python-dev libkrb5-dev libboost-all-dev pandoc

      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: install poetry
        run: pip install poetry

      - name: cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: docs-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: install ibis
        run: poetry install --extras all

      - name: build web
        run: poetry run python -m pysuerga docs/web --target-path=docbuild

      - name: build docs
        run: poetry run sphinx-build -b html docs/source docbuild/docs -W -T

      - name: Add config to docs
        run: |
          set -euo pipefail

          touch docbuild/.nojekyll
          echo "ibis-project.org" > docbuild/CNAME

      - name: Push docs
        if: ${{ github.event_name == 'push' }}
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.IBIS_PROJECT_DOCS_PAT }}
        with:
          source-directory: docbuild
          destination-github-username: ibis-project
          destination-repository-name: ibis-project.org
          user-name: github-actions
          user-email: github-actions@github.com

      - name: Clean up doc build
        run: rm -r docbuild

  conda_package:
    # TODO: fully automate the conda-forge PR submission on release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.7"
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: update recipe file
        run: |
          set -euo pipefail

          # TODO: this is a hack that should be fixed by automatically generating
          # a recipe from pyproject.toml once we move to poetry
          set -x
          IBIS_PATH=`pwd`
          sed -i "s|url:.*|path: $IBIS_PATH|g" ci/recipe/meta.yaml
          IBIS_VERSION=$(grep -Po '(?<=^version = ").+(?=")' pyproject.toml)
          sed -i "s/{{ version }}/$IBIS_VERSION/g" ci/recipe/meta.yaml
          cat ci/recipe/meta.yaml

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          condarc-file: ci/condarc

      - name: install boa
        run: mamba install boa

      - name: build recipe
        run: conda mambabuild -c conda-forge --python "${{ matrix.python-version }}" ci/recipe/meta.yaml
