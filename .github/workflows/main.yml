name: Continuous Integration

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test_no_backends:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.7"
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          environment-file: environment.yml
          condarc-file: ci/condarc

      - name: install ibis
        run: pip install .

      - name: run tests
        run: ./ci/run_tests.sh ibis/tests --numprocesses auto

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: no_backends_${{ matrix.python-version }}-${{ matrix.os }}
          path: junit.xml

  test_simple_backends:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.7"
          - "3.9"
        additional-deps:
          - [dask-min]
          - []
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          condarc-file: ci/condarc

      - name: set backends
        id: set_backends
        run: echo '::set-output name=backends::["csv", "dask", "hdf5", "pandas", "parquet", "sqlite"]'

      - name: merge environments
        run: ./ci/merge_and_update_env.sh ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }} ${{ join(matrix.additional-deps, ' ') }}

      - name: install ibis
        run: pip install .

      - name: download backend data
        run: python ci/datamgr.py download

      - name: install backend data
        run: |
          set -euo pipefail

          for backend in ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}; do
            python ci/datamgr.py "$backend"
          done

      - name: run tests
        run: ./ci/run_tests.sh
        env:
          PYTEST_BACKENDS: ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: simple_backends_${{ matrix.python-version }}-${{ matrix.os }}-${{ join(matrix.additional-deps, '-') }}
          path: junit.xml

  test_pyspark:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        deps:
          - python-version: "3.7"
            additional-deps: [pyspark-min]
            env:
              ARROW_PRE_0_15_IPC_FORMAT: 1
          - python-version: "3.9"
            additional-deps: []
            env:
              ARROW_PRE_0_15_IPC_FORMAT: 0
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.deps.python-version }}
          condarc-file: ci/condarc

      - name: merge environments
        run: ./ci/merge_and_update_env.sh pyspark ${{ join(matrix.deps.additional-deps, ' ') }}

      - name: install ibis
        run: pip install .

      - name: download backend data
        run: python ci/datamgr.py download

      - name: install backend data
        run: python ci/datamgr.py pyspark

      - name: run tests
        run: ./ci/run_tests.sh --numprocesses auto
        env:
          PYTEST_BACKENDS: pyspark
          ARROW_PRE_0_15_IPC_FORMAT: ${{ matrix.deps.env.ARROW_PRE_0_15_IPC_FORMAT }}

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: pyspark_${{ matrix.deps.python-version }}-${{ matrix.dep.env.ARROW_PRE_0_15_IPC_FORMAT }}-${{ join(matrix.deps.additional-deps, '-') }}
          path: junit.xml
  #
  test_mysql_postgres:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.7"
          - "3.9"
        additional-deps:
          - [postgres-min]
          - []
        exclude:
          # FIXME: this combination is broken and untested in current CI
          - python-version: "3.9"
            additional-deps: [postgres-min]
    services:
      postgres:
        image: shajekpivotal/ibis-docker-postgres-9.5
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ""
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
      mysql:
        image: mariadb:10.4.12
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: ibis_testing
          MYSQL_USER: ibis
          MYSQL_PASSWORD: ibis
        options: --health-cmd="mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 3
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          condarc-file: ci/condarc

      - name: set backends
        id: set_backends
        run: echo '::set-output name=backends::["mysql", "postgres"]'

      - name: merge environments
        run: ./ci/merge_and_update_env.sh ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }} ${{ join(matrix.additional-deps, ' ') }}

      - name: install ibis
        run: pip install .

      - name: download backend data
        run: python ci/datamgr.py download

      - name: install backend data
        run: |
          set -euo pipefail

          # TODO: unify impala data loading?
          for backend in ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}; do
            python ci/datamgr.py "$backend"
          done

      - name: run tests
        run: ./ci/run_tests.sh -m "not udf" --numprocesses auto
        env:
          PYTEST_BACKENDS: ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: mysql_postgres_${{ matrix.python-version }}-${{ join(matrix.additional-deps, '-') }}
          path: junit.xml

  test_impala_clickhouse:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    env:
      IBIS_TEST_NN_HOST: localhost
      IBIS_TEST_IMPALA_HOST: localhost
      IBIS_TEST_IMPALA_PORT: 21050
      IBIS_TEST_WEBHDFS_PORT: 50070
      IBIS_TEST_WEBHDFS_USER: hdfs
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.7"
          - "3.8"
    services:
      postgres:
        image: shajekpivotal/ibis-docker-postgres-9.5
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ""
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
      mysql:
        image: mariadb:10.4.12
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: ibis_testing
          MYSQL_USER: ibis
          MYSQL_PASSWORD: ibis
        options: --health-cmd="mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 3
      kudu-master:
        image: ibisproject/kudu:latest
        ports:
          - 7051:7051
          - 8051:8051
        env:
          KUDU_MASTER: "true"
        options: "--network-alias=kudu --cap-add=SYS_TIME"
      kudu-tserver:
        image: ibisproject/kudu:latest
        ports:
          - 7050:7050
          - 8050:8050
        env:
          KUDU_MASTER: "false"
        options: "--cap-add=SYS_TIME"
      impala:
        image: ibisproject/impala:latest
        env:
          PGPASSWORD: postgres
        ports:
          # HDFS
          - 9020:9020
          - 50070:50070
          - 50075:50075
          - 8020:8020
          - 8042:8042
          # Hive
          - 9083:9083

          # Impala
          - 21000:21000
          - 21050:21050
          - 25000:25000
          - 25010:25010
          - 25020:25020
        options: --hostname localhost --health-cmd "nc -z 127.0.0.1 21050 && nc -z 127.0.0.1 50070" --health-interval 30s --health-timeout 10s --health-retries 20
      clickhouse:
        # XXX does clickhouse backend require the impala container too?
        image: yandex/clickhouse-server:18.14
        ports:
          - 8123:8123
          - 9000:9000

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          environment-file: environment.yml
          condarc-file: ci/condarc

      - name: set backends
        id: set_backends
        run: echo '::set-output name=backends::["impala", "clickhouse"]'

      - name: merge environments
        run: ./ci/merge_and_update_env.sh ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }} ${{ join(matrix.additional-deps, ' ') }}

      - name: install ibis
        run: pip install .

      - name: download backend data
        run: python ci/datamgr.py download

      - name: install impala data
        run: python ci/impalamgr.py load --data

      - name: install clickhouse data
        run: python ci/datamgr.py clickhouse

      - name: run tests
        run: ./ci/run_tests.sh
        env:
          PYTEST_BACKENDS: ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: impala_clickhouse_${{ matrix.python-version }}
          path: junit.xml

  benchmarks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          environment-file: environment.yml
          condarc-file: ci/condarc

      - name: install ibis
        run: pip install .

      - name: benchmark
        run: |
          set -euo pipefail

          asv machine --yes
          asv dev

  docs:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        # FIXME: docs are broken on 3.9
        python-version: ["3.8"]
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          condarc-file: ci/condarc

      - name: set backends
        id: set_backends
        run: echo '::set-output name=backends::["clickhouse", "csv", "dask", "hdf5", "impala", "mysql", "pandas", "parquet", "postgres", "pyspark", "spark", "sqlite"]'

      - name: merge environments
        run: ./ci/merge_and_update_env.sh ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}

      - name: install ibis
        run: pip install .

      - name: build web
        run: python -m pysuerga docs/web --target-path=docbuild

      - name: build docs
        run: sphinx-build -b html docs/source docbuild/docs -W -T

      - name: Add config to docs
        run: |
          set -euo pipefail

          touch docbuild/.nojekyll
          echo "ibis-project.org" > docbuild/CNAME

      - name: Push docs
        if: ${{ github.event_name == 'push' }}
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.IBIS_PROJECT_DOCS_PAT }}
        with:
          source-directory: docbuild
          destination-github-username: ibis-project
          destination-repository-name: ibis-project.org
          user-name: github-actions
          user-email: github-actions@github.com

      - name: Clean up doc build
        run: rm -r docbuild

  conda_package:
    # TODO: fully automate the conda-forge PR submission on release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7"]
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          environment-file: environment.yml
          condarc-file: ci/condarc

      # TODO: this isn't necessary if we generate the recipe from
      # pyproject.toml
      - name: install ibis
        run: pip install .

      - name: update recipe file
        run: |
          # TODO: this is a hack that should be fixed by automatically generating
          # a recipe from pyproject.toml once we move to poetry
          set -x
          IBIS_PATH=`pwd`
          sed -i "s|url:.*|path: $IBIS_PATH|g" ci/recipe/meta.yaml
          IBIS_VERSION=`python -c "import ibis; print(ibis.__version__)"`
          sed -i "s/{{ version }}/$IBIS_VERSION/g" ci/recipe/meta.yaml
          cat ci/recipe/meta.yaml

      - name: install boa
        run: mamba install boa

      - name: build recipe
        run: conda mambabuild -c conda-forge --python "${{ matrix.python-version }}" ci/recipe/meta.yaml
