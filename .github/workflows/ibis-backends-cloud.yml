name: Cloud Backends

on:
  push:
    # Skip the backend suite if all changes are in the docs directory
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - "**/*.qmd"
      - "codecov.yml"
      - ".envrc"
    branches:
      - main

permissions:
  # this allows extractions/setup-just to list releases for `just` at a higher
  # rate limit while restricting GITHUB_TOKEN permissions elsewhere
  contents: read

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1"
  SQLALCHEMY_WARN_20: "1"
  HYPOTHESIS_PROFILE: "ci"

jobs:
  test_backends:
    name: ${{ matrix.backend.title }} python-${{ matrix.python-version }}
    # only a single bigquery or snowflake run at a time, otherwise test data is
    # clobbered by concurrent runs
    concurrency:
      group: ${{ matrix.backend.name }}-${{ matrix.python-version }}
      cancel-in-progress: false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
          - "3.11"
        backend:
          - name: bigquery
            title: BigQuery
          - name: snowflake
            title: Snowflake
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: install poetry
        run: pipx install 'poetry==1.7.1'

      - name: install python
        uses: actions/setup-python@v5
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry

      - name: install ibis
        run: poetry install --without dev --without docs --extras ${{ matrix.backend.name }}

      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: download backend data
        run: just download-data

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: setup snowflake credentials
        if: matrix.backend.name == 'snowflake'
        run: |
          pyversion="${{ matrix.python-version }}"
          {
            echo "SNOWFLAKE_USER=${SNOWFLAKE_USER}"
            echo "SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}"
            echo "SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}"
            echo "SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}"
            echo "SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}_python${pyversion//./}"
            echo "SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}"
          } >> "$GITHUB_ENV"
        env:
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}

      - name: "run parallel tests: ${{ matrix.backend.name }}"
        run: just ci-check -m ${{ matrix.backend.name }} --numprocesses auto --dist=loadgroup

      - name: upload code coverage
        if: success()
        continue-on-error: true
        uses: codecov/codecov-action@v4
        with:
          flags: backend,${{ matrix.backend.name }},${{ runner.os }},python-${{ steps.install_python.outputs.python-version }}
