name: Backends

on:
  push:
    # Skip the backend suite if all changes are docs
    paths-ignore:
      - "docs/**"
      - "mkdocs.yml"
      - "**/*.md"
      - "codecov.yml"
    branches:
      - master
      - "*.x.x"
  pull_request:
    # Skip the backend suite if all changes are docs
    paths-ignore:
      - "docs/**"
      - "mkdocs.yml"
      - "**/*.md"
      - "codecov.yml"
    branches:
      - master
      - "*.x.x"

permissions:
  # this allows extractions/setup-just to list releases for `just` at a higher
  # rate limit while restricting GITHUB_TOKEN permissions elsewhere
  contents: read

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  test_backends:
    name: ${{ matrix.backend.title }} ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.8"
          - "3.10"
        backend:
          - name: dask
            title: Dask
            extras:
              - dask
          - name: duckdb
            title: DuckDB
            extras:
              - duckdb
          - name: pandas
            title: Pandas
            extras:
              - pandas
          - name: sqlite
            title: SQLite
            extras:
              - sqlite
          - name: datafusion
            title: Datafusion
            extras:
              - datafusion
          - name: pyspark
            title: PySpark
            extras:
              - pyspark
          - name: polars
            title: Polars
            extras:
              - polars
          - name: mysql
            title: MySQL
            services:
              - mysql
            extras:
              - mysql
              - geospatial
            sys-deps:
              - libgeos-dev
          - name: clickhouse
            title: ClickHouse
            services:
              - clickhouse
            extras:
              - clickhouse
          - name: postgres
            title: PostgreSQL
            extras:
              - postgres
              - geospatial
            services:
              - postgres
            sys-deps:
              - libgeos-dev
          - name: impala
            title: Impala
            extras:
              - impala
            services:
              - impala
              - kudu
            sys-deps:
              - cmake
              - ninja-build
          - name: mssql
            title: MS SQL Server
            extras:
              - mssql
            services:
              - mssql
            sys-deps:
              - libkrb5-dev
              - krb5-config
          - name: trino
            title: Trino
            extras:
              - trino
              - postgres
            services:
              - trino
        exclude:
          - os: windows-latest
            backend:
              name: mysql
              title: MySQL
              extras:
                - mysql
                - geospatial
              services:
                - mysql
              sys-deps:
                - libgeos-dev
          - os: windows-latest
            backend:
              name: clickhouse
              title: ClickHouse
              extras:
                - clickhouse
              services:
                - clickhouse
          - os: windows-latest
            backend:
              name: pyspark
              title: PySpark
              extras:
                - pyspark
          - os: windows-latest
            backend:
              name: postgres
              title: PostgreSQL
              extras:
                - postgres
                - geospatial
              services:
                - postgres
              sys-deps:
                - libgeos-dev
          - os: windows-latest
            backend:
              name: impala
              title: Impala
              extras:
                - impala
              services:
                - impala
                - kudu
              sys-deps:
                - cmake
                - ninja-build
          - os: windows-latest
            backend:
              name: mssql
              title: MS SQL Server
              extras:
                - mssql
              services:
                - mssql
              sys-deps:
                - libkrb5-dev
                - krb5-config
          - os: windows-latest
            backend:
              name: trino
              title: Trino
              services:
                - trino
              extras:
                - trino
                - postgres
    steps:
      - name: update and install system dependencies
        if: matrix.os == 'ubuntu-latest' && matrix.backend.sys-deps != null
        run: |
          set -euo pipefail

          sudo apt-get update -qq -y
          sudo apt-get install -qq -y build-essential ${{ join(matrix.backend.sys-deps, ' ') }}

      - name: install sqlite
        if: matrix.os == 'windows-latest' && matrix.backend.name == 'sqlite'
        run: choco install sqlite

      - uses: actions/setup-java@v3
        if: matrix.backend.name == 'pyspark'
        with:
          distribution: microsoft
          java-version: 17

      - name: checkout
        uses: actions/checkout@v3

      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: download backend data
        run: just download-data

      - name: start services
        if: matrix.backend.services != null
        run: docker compose up --wait ${{ join(matrix.backend.services, ' ') }}

      - name: install python
        uses: actions/setup-python@v4
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - uses: syphar/restore-virtualenv@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: ${{ matrix.backend.name }}-${{ steps.install_python.outputs.python-version }}

      - uses: syphar/restore-pip-download-cache@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: ${{ matrix.backend.name }}-${{ steps.install_python.outputs.python-version }}

      - run: python -m pip install --upgrade pip 'poetry>=1.2'

      - name: install ibis
        run: poetry install --without dev --without docs --extras "${{ join(matrix.backend.extras, ' ') }}"

      - name: "run parallel tests: ${{ matrix.backend.name }}"
        if: matrix.backend.name != 'impala' && matrix.backend.name != 'pyspark'
        run: just ci-check -m ${{ matrix.backend.name }} --numprocesses auto --dist=loadgroup

      - name: "run serial tests: ${{ matrix.backend.name }}"
        if: matrix.backend.name == 'impala' || matrix.backend.name == 'pyspark'
        run: just ci-check -m ${{ matrix.backend.name }}
        env:
          IBIS_TEST_NN_HOST: localhost
          IBIS_TEST_IMPALA_HOST: localhost
          IBIS_TEST_IMPALA_PORT: 21050
          IBIS_TEST_WEBHDFS_PORT: 50070
          IBIS_TEST_WEBHDFS_USER: hdfs

      - name: upload code coverage
        if: success()
        uses: codecov/codecov-action@v3
        with:
          flags: backend,${{ matrix.backend.name }},${{ runner.os }},python-${{ steps.install_python.outputs.python-version }}

      - name: publish test report
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ matrix.backend.name }}-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit.xml

  test_backends_min_version:
    name: ${{ matrix.backend.title }} Min Version ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.8"
          - "3.10"
        backend:
          - name: dask
            title: Dask
            deps:
              - "dask[array,dataframe]@2022.9.1"
            extras:
              - dask
          - name: postgres
            title: PostgreSQL
            deps:
              - "psycopg2@2.8.4"
              - "GeoAlchemy2@0.6.3"
              - "geopandas@0.6"
              - "Shapely@1.6"
            services:
              - postgres
            extras:
              - postgres
              - geospatial
        exclude:
          - os: windows-latest
            backend:
              name: postgres
              title: PostgreSQL
              deps:
                - "psycopg2@2.8.4"
                - "GeoAlchemy2@0.6.3"
                - "geopandas@0.6"
                - "Shapely@1.6"
              services:
                - postgres
              extras:
                - postgres
                - geospatial
          - python-version: "3.10"
            backend:
              name: postgres
              title: PostgreSQL
              deps:
                - "psycopg2@2.8.4"
                - "GeoAlchemy2@0.6.3"
                - "geopandas@0.6"
                - "Shapely@1.6"
              services:
                - postgres
              extras:
                - postgres
                - geospatial
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install libgeos for shapely
        if: matrix.backend.name == 'postgres'
        run: sudo apt-get install -qq -y build-essential libgeos-dev

      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: download backend data
        run: just download-data

      - name: start services
        if: matrix.backend.services != null
        run: docker compose up --wait ${{ join(matrix.backend.services, ' ') }}

      - name: install python
        uses: actions/setup-python@v4
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - run: python -m pip install --upgrade pip 'poetry>=1.2'

      - name: install minimum versions
        run: poetry add --lock --optional ${{ join(matrix.backend.deps, ' ') }}

      - name: checkout the lock file
        run: git checkout poetry.lock

      - name: lock with no updates
        # poetry add is aggressive and will update other dependencies like
        # numpy and pandas so we keep the pyproject.toml edits and then relock
        # without updating anything except the requested versions
        run: poetry lock --no-update

      - name: install ibis
        run: poetry install --without dev --without docs --extras "${{ join(matrix.backend.extras, ' ') }}"

      - name: run tests
        run: just ci-check -m ${{ matrix.backend.name }} --numprocesses auto --dist=loadgroup

      - name: upload code coverage
        if: success()
        uses: codecov/codecov-action@v3
        with:
          flags: backend,${{ matrix.backend.name }},${{ runner.os }},python-${{ steps.install_python.outputs.python-version }}

      - name: publish test report
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ matrix.backend.name }}-min-version-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit.xml

  backends:
    # this job exists so that we can use a single job from this workflow to gate merging
    runs-on: ubuntu-latest
    needs:
      - test_backends_min_version
      - test_backends
    steps:
      - run: exit 0
