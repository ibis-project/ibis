# vim: filetype=yaml
name: Backends

on:
  push:
    # Skip the backend suite if all changes are in the docs directory
    paths-ignore:
      - "docs/**"
    branches:
      - master
  pull_request:
    # Skip the backend suite if all changes are in the docs directory
    paths-ignore:
      - "docs/**"
    branches:
      - master

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  test_simple_backends:
    name: ${{ matrix.backend.title }} ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.8"
          - "3.10"
        backend:
          - name: dask
            title: Dask
          - name: duckdb
            title: DuckDB
          - name: pandas
            title: Pandas
          - name: sqlite
            title: SQLite
          - name: datafusion
            title: Datafusion
          - name: pyspark
            title: PySpark
        exclude:
          - os: windows-latest
            python-version: "3.8"
            backend:
              name: pyspark
              title: PySpark
          - os: windows-latest
            python-version: "3.10"
            backend:
              name: pyspark
              title: PySpark
    steps:
      - name: install sqlite
        if: ${{ matrix.os == 'windows-latest' && matrix.backend.name == 'sqlite' }}
        run: choco install sqlite

      - uses: actions/setup-java@v3
        if: ${{ matrix.backend.name == 'pyspark' }}
        with:
          distribution: temurin
          java-version: 11

      - name: checkout
        uses: actions/checkout@v3

      - name: install python
        uses: actions/setup-python@v3
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - uses: syphar/restore-virtualenv@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: ${{ matrix.backend.name }}-${{ steps.install_python.outputs.python-version }}

      - uses: syphar/restore-pip-download-cache@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: ${{ matrix.backend.name }}-${{ steps.install_python.outputs.python-version }}

      - run: python -m pip install --upgrade pip poetry

      - name: install ibis
        run: poetry install --extras ${{ matrix.backend.name }}

      - uses: extractions/setup-just@v1

      - name: download backend data
        run: just download-data

      - name: install backend data
        run: poetry run python ci/datamgr.py load ${{ matrix.backend.name }}

      - name: run non-pyspark tests
        if: ${{ matrix.backend.name != 'pyspark' }}
        run: just ci-check -m ${{ matrix.backend.name }} --numprocesses auto --dist=loadgroup

      - name: run pyspark tests
        if: ${{ matrix.backend.name == 'pyspark' }}
        run: just ci-check -m ${{ matrix.backend.name }}

      - name: upload code coverage
        if: success()
        uses: codecov/codecov-action@v2
        with:
          flags: backend,${{ matrix.backend.name }},${{ runner.os }},python-${{ steps.install_python.outputs.python-version }}

      - name: publish test report
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ matrix.backend.name }}-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit.xml

  test_dask_min_version:
    name: Dask Min Version ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.8"
          - "3.10"
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install python
        uses: actions/setup-python@v3
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - run: python -m pip install --upgrade pip poetry

      - name: install minimum dask version
        run: poetry add --lock --optional dask@2021.10.0 --extras array --extras dataframe

      - uses: extractions/setup-just@v1

      - name: install ibis
        run: poetry install --extras dask

      - name: download backend data
        run: just download-data

      - name: run tests
        run: just ci-check -m dask --numprocesses auto

      - name: upload code coverage
        if: success()
        uses: codecov/codecov-action@v2
        with:
          flags: backend,dask,${{ runner.os }},python-${{ steps.install_python.outputs.python-version }}

      - name: publish test report
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: dask-min-version-${{ join(matrix.backend.deps, '-') }}-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit.xml

  test_postgres_min_version:
    name: PostgreSQL deps-bounded python-3.8
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: start postgres container
        run: docker compose up --build -d postgres

      - name: install python
        uses: actions/setup-python@v3
        id: install_python
        with:
          python-version: "3.8"

      - name: install libgeos for shapely
        run: sudo apt-get install -qq -y build-essential libgeos-dev

      - run: python -m pip install --upgrade pip poetry

      - name: install minimum postgres dependencies
        run: poetry add --lock --optional "psycopg2@2.8.4" --optional "GeoAlchemy2@0.6.3" --optional "geopandas@0.6" --optional "Shapely@1.6"

      - name: install ibis
        run: poetry install --extras postgres --extras geospatial

      - uses: extractions/setup-just@v1

      - name: download backend data
        run: just download-data

      - name: install backend data
        run: poetry run python ci/datamgr.py load postgres

      - name: run tests
        run: just ci-check -m postgres --numprocesses auto

      - name: upload code coverage
        if: success()
        uses: codecov/codecov-action@v2
        with:
          flags: backend,postgres,${{ runner.os }},python-${{ steps.install_python.outputs.python-version }}

      - name: publish test report
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: postgres-geospatial-bounded-${{ steps.install_python.outputs.python-version }}
          path: junit.xml

  test_impala:
    name: Impala python-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    env:
      IBIS_TEST_NN_HOST: localhost
      IBIS_TEST_IMPALA_HOST: localhost
      IBIS_TEST_IMPALA_PORT: 21050
      IBIS_TEST_WEBHDFS_PORT: 50070
      IBIS_TEST_WEBHDFS_USER: hdfs
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.8"
          # XXX: unlikely that impala will ever support 3.10
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: start impala and kudu containers
        run: docker compose up -d impala kudu

      - name: install python
        uses: actions/setup-python@v3
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - name: update system dependencies
        run: sudo apt-get update -qq -y

      - name: install system dependencies
        run: sudo apt-get install -qq -y build-essential cmake ninja-build krb5-config python-dev libkrb5-dev

      - uses: syphar/restore-virtualenv@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: impala-${{ steps.install_python.outputs.python-version }}

      - uses: syphar/restore-pip-download-cache@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: impala-${{ steps.install_python.outputs.python-version }}

      - run: python -m pip install --upgrade pip poetry

      - name: install ibis
        run: poetry install --extras impala

      - uses: extractions/setup-just@v1

      - name: download backend data
        run: just download-data

      - name: install backend data
        run: poetry run python ci/datamgr.py load impala

      - name: run tests
        run: just ci-check -m impala

      - name: upload code coverage
        if: success()
        uses: codecov/codecov-action@v2
        with:
          flags: backend,impala,${{ runner.os }},python-${{ steps.install_python.outputs.python-version }}

      - name: publish test report
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: impala-${{ matrix.python-version }}
          path: junit.xml

  test_postgres_mysql_clickhouse:
    name: ${{ matrix.backend.title }} python-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.8"
          - "3.10"
        backend:
          - name: mysql
            title: MySQL
          - name: clickhouse
            title: ClickHouse
          - name: postgres
            title: PostgreSQL
        include:
          - python-version: "3.9"
            backend:
              name: postgres
              title: PostgreSQL
        exclude:
          - python-version: "3.10"
            backend:
              name: postgres
              title: PostgreSQL
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: start ${{ matrix.backend.name }} container
        run: docker compose up --build -d ${{ matrix.backend.name }}

      - name: install python
        uses: actions/setup-python@v3
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - uses: syphar/restore-virtualenv@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: ${{ matrix.backend.name }}-${{ steps.install_python.outputs.python-version }}

      - uses: syphar/restore-pip-download-cache@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: ${{ matrix.backend.name }}-${{ steps.install_python.outputs.python-version }}

      - run: python -m pip install --upgrade pip poetry

      - name: install ibis
        if: ${{ matrix.backend.name != 'postgres' }}
        run: poetry install --extras ${{ matrix.backend.name }}

      - name: install ibis
        if: ${{ matrix.backend.name == 'postgres' }}
        run: poetry install --extras ${{ matrix.backend.name }} --extras geospatial

      - name: install libgeos for shapely
        if: ${{ matrix.backend.name == 'postgres' }}
        run: sudo apt-get install -qq -y build-essential libgeos-dev python-dev

      - uses: extractions/setup-just@v1

      - name: download backend data
        run: just download-data

      - name: install backend data
        run: poetry run python ci/datamgr.py load ${{ matrix.backend.name }}

      - name: run tests
        run: just ci-check -m ${{ matrix.backend.name }} --numprocesses auto --dist=loadgroup

      - name: upload code coverage
        if: success()
        uses: codecov/codecov-action@v2
        with:
          flags: backend,${{ matrix.backend.name }},${{ runner.os }},python-${{ steps.install_python.outputs.python-version }}

      - name: publish test report
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ matrix.backend.name }}-${{ matrix.python-version }}
          path: junit.xml

  backends:
    # this job exists so that we can use a single job from this workflow to gate merging
    runs-on: ubuntu-latest
    needs:
      - test_dask_min_version
      - test_impala
      - test_postgres_mysql_clickhouse
      - test_postgres_min_version
      - test_simple_backends
    steps:
      - run: exit 0
