from __future__ import annotations  # noqa: INP001

import json
import os
from urllib.request import urlopen

from algoliasearch.search_client import SearchClient

api_key = os.getenv("ALGOLIA_API_KEY")
app_id = os.getenv("ALGOLIA_APP_ID")
index_name = os.getenv("ALGOLIA_INDEX")
index_file = os.getenv("QUARTO_INDEX_PATH")  # search.json


def truncate_string(string, max_size):
    # Encode the string to bytes using UTF-8 encoding
    encoded_string = string.encode("utf-8")

    # Truncate the bytes to ensure the size is smaller than max_bytes
    truncated_bytes = encoded_string[: max_size - 1]

    # Decode the truncated bytes back to string
    truncated_string = truncated_bytes.decode("utf-8", errors="ignore")

    return truncated_string


# Download the index generated by quarto from the ibis website
with urlopen("https://ibis-project.org/search.json") as response:
    with open(index_file, "wb") as f:
        f.write(response.read())

client = SearchClient.create(app_id, api_key)
index = client.init_index(index_name)

index_file = "search.json"
with open(index_file) as f:
    search = json.load(f)

max_size = 1_000
for obj in search:
    if len(obj["text"].encode("utf-8")) >= max_size:
        obj["text"] = truncate_string(obj["text"], max_size)
        size = len(obj["text"].encode("utf-8"))
        assert size <= max_size


index.replace_all_objects(search)
