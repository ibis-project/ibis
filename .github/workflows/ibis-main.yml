# vim: filetype=yaml
name: Ibis

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  test_no_backends:
    name: Test ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - name: install poetry
        run: pip install poetry

      - name: cache dependencies linux
        uses: actions/cache@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          path: ~/.cache/pypoetry
          key: no-backends-${{ runner.os }}-${{ steps.install_python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: cache dependencies windows
        uses: actions/cache@v2
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          path: ~\AppData\Local\pypoetry
          key: no-backends-${{ runner.os }}-${{ steps.install_python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: install ibis
        run: poetry install

      - name: run tests
        shell: bash
        run: ./ci/run_tests.sh ibis/tests

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: no-backends-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit.xml

  benchmarks:
    name: Benchmark ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - name: install system dependencies
        run: sudo apt-get install -qq -y build-essential cmake krb5-config python-dev libkrb5-dev libboost-all-dev

      - name: install poetry
        run: pip install poetry

      - name: cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: benchmarks-impala-${{ runner.os }}-${{ steps.install_python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: install ibis
        run: poetry install --extras impala

      - name: benchmark
        run: |
          set -euo pipefail

          poetry run asv machine --yes
          poetry run asv dev

  docs:
    name: Docs ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install system dependencies
        run: sudo apt-get install -qq -y build-essential cmake krb5-config python-dev libkrb5-dev libboost-all-dev pandoc

      - name: install python
        uses: actions/setup-python@v2
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - name: install poetry
        run: pip install poetry

      - name: cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: docs-${{ runner.os }}-${{ steps.install_python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: install ibis
        run: poetry install --extras all

      - name: build web
        run: poetry run python -m pysuerga docs/web --target-path=docbuild

      - name: build docs
        run: poetry run sphinx-build -b html docs/source docbuild/docs -W -T

      - name: Add config to docs
        run: |
          set -euo pipefail

          touch docbuild/.nojekyll
          echo "ibis-project.org" > docbuild/CNAME

      - name: Push docs
        if: ${{ github.event_name == 'push' }}
        uses: cpina/github-action-push-to-another-repository@v1.3
        env:
          API_TOKEN_GITHUB: ${{ secrets.IBIS_PROJECT_DOCS_PAT }}
        with:
          source-directory: docbuild
          target-branch: master
          destination-github-username: ibis-project
          destination-repository-name: ibis-project.org
          user-email: '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Clean up doc build
        run: rm -r docbuild

  conda_package:
    # TODO: fully automate the conda-forge PR submission on release
    name: Conda Package ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.7"
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: update recipe file
        run: |
          set -euo pipefail

          # TODO: this is a hack that should be fixed by automatically generating
          # a recipe from pyproject.toml once we move to poetry
          set -x
          IBIS_PATH=`pwd`
          sed -i "s|url:.*|path: $IBIS_PATH|g" ci/recipe/meta.yaml
          IBIS_VERSION=$(grep -Po '(?<=^version = ").+(?=")' pyproject.toml)
          sed -i "s/{{ version }}/$IBIS_VERSION/g" ci/recipe/meta.yaml
          cat ci/recipe/meta.yaml

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          condarc-file: ci/condarc

      - name: install boa
        run: mamba install boa

      - name: build recipe
        run: conda mambabuild -c conda-forge --python "${{ matrix.python-version }}" ci/recipe/meta.yaml
