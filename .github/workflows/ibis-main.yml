# vim: filetype=yaml
name: Ibis

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  commitlint:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: install nix
        uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: lint commits
        run: nix shell -L --keep-going -f '<nixpkgs>' commitlint -c commitlint --from=${{ github.event.pull_request.base.sha }} --to=${{ github.sha }} --verbose

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install nix
        uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: setup cachix
        uses: cachix/cachix-action@v10
        with:
          name: ibis
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community,poetry2nix

      - name: pre-commit checks
        run: nix-shell --pure --keep-going --run 'pre-commit run --all-files'

  nix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-11
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install nix
        uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: setup cachix
        uses: cachix/cachix-action@v10
        with:
          name: ibis
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community,poetry2nix

      - name: nix build and run tests
        run: nix build --keep-going --print-build-logs --file . --argstr python ${{ matrix.python-version }}

  test_no_backends:
    name: Test ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - name: install poetry
        run: pip install poetry

      - name: cache dependencies linux
        uses: actions/cache@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          path: ~/.cache/pypoetry
          key: no-backends-${{ runner.os }}-${{ steps.install_python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: cache dependencies windows
        uses: actions/cache@v2
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          path: ~\AppData\Local\pypoetry
          key: no-backends-${{ runner.os }}-${{ steps.install_python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: install ibis
        run: poetry install

      - name: run tests
        shell: bash
        run: ./ci/run_tests.sh ibis/tests

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: no-backends-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit.xml

  benchmarks:
    name: Benchmark ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - name: install system dependencies
        run: sudo apt-get install -qq -y build-essential cmake krb5-config python-dev libkrb5-dev libboost-all-dev

      - name: install poetry
        run: pip install poetry

      - name: cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: benchmarks-impala-${{ runner.os }}-${{ steps.install_python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: install ibis
        run: poetry install --extras impala

      - name: benchmark
        run: |
          set -euo pipefail

          poetry run asv machine --yes
          poetry run asv dev

  docs:
    name: Docs ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          path: ibis

      - name: install system dependencies
        run: sudo apt-get install -qq -y build-essential cmake krb5-config python-dev libkrb5-dev libboost-all-dev pandoc

      - name: install python
        uses: actions/setup-python@v2
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - name: install poetry
        run: pip install poetry

      - name: cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: docs-${{ runner.os }}-${{ steps.install_python.outputs.python-version }}-${{ hashFiles('ibis/poetry.lock') }}

      - name: install ibis
        working-directory: ibis
        run: poetry install --extras all

      - name: build web
        working-directory: ibis
        run: poetry run python -m pysuerga docs/web --target-path=docbuild

      - name: build docs
        working-directory: ibis
        run: poetry run sphinx-build -b html docs/source docbuild/docs -W -T

      - name: Add config to docs
        working-directory: ibis
        run: |
          set -euo pipefail

          touch docbuild/.nojekyll
          echo "ibis-project.org" > docbuild/CNAME

      - name: Generate a GitHub token
        if: ${{ github.event_name == 'push' }}
        uses: tibdex/github-app-token@v1
        id: generate_token
        with:
          app_id: ${{ secrets.DOCS_BOT_APP_ID }}
          private_key: ${{ secrets.DOCS_BOT_APP_PRIVATE_KEY }}
          repository: ibis-project/ibis-project.org

      - name: checkout
        uses: actions/checkout@v2
        if: ${{ github.event_name == 'push' }}
        with:
          repository: ibis-project/ibis-project.org
          token: ${{ steps.generate_token.outputs.token }}
          path: ibis-project.org

      - name: checkout
        uses: actions/checkout@v2
        if: ${{ github.event_name != 'push' }}
        with:
          repository: ibis-project/ibis-project.org
          path: ibis-project.org

      - name: Copy docbuild to checkout
        working-directory: ibis
        run: |
          set -euo pipefail

          # the trailing slash matters here; it means "everything underneath
          # docbuild, but not docbuild itself"
          rsync -avz docbuild/ ../ibis-project.org

      - name: Configure git info
        working-directory: ibis-project.org
        run: |
          set -euo pipefail

          git config user.name 'ibis-docs-bot[bot]'
          git config user.email 'ibis-docs-bot[bot]@users.noreply.github.com'

      - name: Commit docs
        if: ${{ github.event_name == 'push' }}
        working-directory: ibis-project.org
        run: |
          set -euo pipefail

          git commit -am 'docs: ibis-project/ibis@${{ github.sha }}' || true

      - name: Push docs
        if: ${{ github.event_name == 'push' }}
        working-directory: ibis-project.org
        run: git push -f origin master

  conda_package:
    # TODO: fully automate the conda-forge PR submission on release
    name: Conda Package ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.7"
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: update recipe file
        run: |
          set -euxo pipefail

          IBIS_PATH=`pwd`
          sed -i "s|url:.*|path: $IBIS_PATH|g" ci/recipe/meta.yaml
          IBIS_VERSION=$(grep -Po '(?<=^version = ").+(?=")' pyproject.toml)
          sed -i "s/{{ version }}/$IBIS_VERSION/g" ci/recipe/meta.yaml

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          condarc-file: ci/condarc

      - name: install boa
        run: mamba install boa

      - name: build recipe
        run: conda mambabuild -c conda-forge --python "${{ matrix.python-version }}" ci/recipe/meta.yaml

  simulate_release:
    runs-on: ubuntu-latest
    needs:
      - nix
      - lint
      - test_no_backends
      - benchmarks
      - docs
      - conda_package
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure git info
        run: |
          set -euo pipefail

          git config --global user.name 'ibis-project-bot[bot]'
          git config --global user.email 'ibis-project-bot[bot]@users.noreply.github.com'

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: install poetry and semantic-release
        run: pip install poetry python-semantic-release

      - name: semantic release
        run: semantic-release publish --noop --verbosity=DEBUG
