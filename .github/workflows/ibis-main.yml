# vim: filetype=yaml
name: Ibis

on:
  push:
    # Skip the test suite if all changes are in the docs directory
    paths-ignore:
      - "docs/**"
      - "mkdocs.yml"
    branches:
      - master
      - "*.x.x"
  pull_request:
    # Skip the test suite if all changes are in the docs directory
    paths-ignore:
      - "docs/**"
      - "mkdocs.yml"
    branches:
      - master
      - "*.x.x"

permissions:
  contents: read

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  test_no_backends:
    name: Test ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install python
        uses: actions/setup-python@v4
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - uses: syphar/restore-virtualenv@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: no-backends-${{ steps.install_python.outputs.python-version }}

      - uses: syphar/restore-pip-download-cache@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: no-backends-${{ steps.install_python.outputs.python-version }}

      - name: install ${{ matrix.os }} system dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          set -euo pipefail

          sudo apt-get update -y -q
          sudo apt-get install -y -q build-essential graphviz krb5-config libkrb5-dev libgeos-dev

      - name: install ${{ matrix.os }} system dependencies
        if: ${{ matrix.os == 'windows-latest' }}
        run: choco install graphviz

      - run: python -m pip install --upgrade pip 'poetry<1.2'

      - name: install ibis
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: poetry install --extras all

      - name: install ibis
        if: ${{ matrix.os == 'windows-latest' }}
        run: poetry install --extras visualization

      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: run core tests
        run: just ci-check -m core

      - name: run benchmarks once
        if: ${{ matrix.os == 'ubuntu-latest' }}
        # run benchmarks once to make sure they aren't broken
        run: just ci-check -m benchmark

      - name: upload code coverage
        if: success()
        uses: codecov/codecov-action@v3
        with:
          flags: core,${{ runner.os }},python-${{ steps.install_python.outputs.python-version }}

      - name: publish test report
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: no-backends-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit.xml
