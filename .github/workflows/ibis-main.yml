# vim: filetype=yaml
name: Ibis

on:
  push:
    # Skip the test suite if all changes are in the docs directory
    paths-ignore:
      - "docs/**"
    branches:
      - master
  pull_request:
    # Skip the test suite if all changes are in the docs directory
    paths-ignore:
      - "docs/**"
    branches:
      - master

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  nix-lint:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install nix
        uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: setup cachix
        uses: cachix/cachix-action@v10
        with:
          name: ibis
          extraPullNames: nix-community,poetry2nix

      - name: nixpkgs-fmt
        run: nix shell -f ./nix nixpkgs-fmt -c nixpkgs-fmt --check $(find . -name '*.nix' -and \( -not -wholename '*nix/sources.nix' \))

      - name: nix-linter
        run: nix shell -f ./nix nix-linter -c nix-linter $(find . -name '*.nix' -and \( -not -wholename '*nix/sources.nix' \))

  test_no_backends:
    name: Test ${{ matrix.os }} python-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        id: install_python
        with:
          python-version: ${{ matrix.python-version }}

      - uses: syphar/restore-virtualenv@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: no-backends-${{ steps.install_python.outputs.python-version }}

      - uses: syphar/restore-pip-download-cache@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: no-backends-${{ steps.install_python.outputs.python-version }}

      - run: python -m pip install --upgrade pip poetry

      - name: install ibis
        run: poetry install

      - uses: extractions/setup-just@v1

      - name: run tests
        run: just check --junitxml=junit.xml

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: no-backends-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit.xml

  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        id: install_python
        with:
          python-version: "3.10"

      - name: install system dependencies
        run: sudo apt-get install -qq -y build-essential krb5-config libkrb5-dev

      - uses: syphar/restore-virtualenv@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: benchmarks-${{ steps.install_python.outputs.python-version }}

      - uses: syphar/restore-pip-download-cache@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: benchmarks-${{ steps.install_python.outputs.python-version }}

      - run: python -m pip install --upgrade pip poetry

      - name: install ibis
        run: poetry install --extras impala

      - run: mkdir .benchmarks

      - name: benchmark
        run: poetry run pytest --benchmark-enable --benchmark-only --benchmark-json .benchmarks/output.json ibis/tests/benchmarks

      - uses: tibdex/github-app-token@v1
        if: ${{ github.event_name != 'pull_request' }}
        id: generate-token
        with:
          app_id: ${{ secrets.SQUAWK_BOT_APP_ID }}
          private_key: ${{ secrets.SQUAWK_BOT_APP_PRIVATE_KEY }}

      - name: store benchmark results in gh-pages
        uses: benchmark-action/github-action-benchmark@v1
        if: ${{ github.event_name != 'pull_request' }}
        with:
          tool: pytest
          github-token: ${{ steps.generate-token.outputs.token }}
          output-file-path: .benchmarks/output.json
          auto-push: true
