# vim: filetype=yaml
name: Docs/Linting/Benchmarks

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  commitlint:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: install nix
        uses: cachix/install-nix-action@v17
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: lint commits
        run: nix shell -f '<nixpkgs>' commitlint -c commitlint --from=${{ github.event.pull_request.base.sha }} --to=${{ github.sha }} --verbose

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install nix
        uses: cachix/install-nix-action@v17
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: setup cachix
        uses: cachix/cachix-action@v10
        with:
          name: ibis
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community,poetry2nix

      # run against a smaller shell for speed for pull requests
      - name: pre-commit checks pull_request
        if: ${{ github.event_name == 'pull_request' }}
        run: nix develop -f nix preCommitShell --ignore-environment --keep-going -c pre-commit run --all-files

      # run against the full shell.nix on push so it gets pushed to cachix
      - name: pre-commit checks push
        if: ${{ github.event_name == 'push' }}
        run: nix develop -f shell.nix --ignore-environment --keep-going -c pre-commit run --all-files

  benchmarks:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install python
        uses: actions/setup-python@v3
        id: install_python
        with:
          python-version: "3.10"

      - name: install system dependencies
        run: sudo apt-get install -qq -y build-essential krb5-config libkrb5-dev

      - uses: syphar/restore-virtualenv@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: benchmarks-${{ steps.install_python.outputs.python-version }}

      - uses: syphar/restore-pip-download-cache@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: benchmarks-${{ steps.install_python.outputs.python-version }}

      - run: python -m pip install --upgrade pip poetry

      - name: install ibis
        run: poetry install --extras all

      - run: mkdir .benchmarks

      - name: benchmark
        run: poetry run pytest --benchmark-only --benchmark-json .benchmarks/output.json ibis/tests/benchmarks

      - uses: tibdex/github-app-token@v1
        if: ${{ github.event_name == 'push' }}
        id: generate-token
        with:
          app_id: ${{ secrets.SQUAWK_BOT_APP_ID }}
          private_key: ${{ secrets.SQUAWK_BOT_APP_PRIVATE_KEY }}

      - uses: benchmark-action/github-action-benchmark@v1
        if: ${{ github.event_name == 'push' }}
        with:
          tool: pytest
          github-token: ${{ steps.generate-token.outputs.token }}
          output-file-path: .benchmarks/output.json
          benchmark-data-dir-path: bench
          auto-push: true
          comment-on-alert: true
          alert-threshold: "300%"

  docs:
    runs-on: ubuntu-latest
    concurrency: docs-${{ github.repository }}-${{ github.head_ref || github.sha }}
    needs:
      # wait on benchmarks to prevent a race condition when pushing to the
      # gh-pages branch
      - benchmarks
    steps:
      - name: install nix
        uses: cachix/install-nix-action@v17
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: setup cachix
        uses: cachix/cachix-action@v10
        with:
          name: ibis
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community,poetry2nix

      - name: checkout
        uses: actions/checkout@v3
        if: ${{ github.event_name != 'push' }}
        with:
          fetch-depth: 0

      - name: Generate a GitHub token
        uses: tibdex/github-app-token@v1
        if: ${{ github.event_name == 'push' }}
        id: generate_token
        with:
          app_id: ${{ secrets.DOCS_BOT_APP_ID }}
          private_key: ${{ secrets.DOCS_BOT_APP_PRIVATE_KEY }}

      - name: checkout
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'push' }}
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: build docs
        if: ${{ github.event_name != 'push' }}
        run: nix run -f nix ibisDevEnv310 -- -m mkdocs build

      - name: verify internal links
        if: ${{ github.event_name != 'push' }}
        run: nix shell -f nix --ignore-environment bash findutils just lychee -c just checklinks --offline --no-progress

      - name: Configure git info
        if: ${{ github.event_name == 'push' }}
        run: |
          set -euo pipefail

          git config user.name 'ibis-docs-bot[bot]'
          git config user.email 'ibis-docs-bot[bot]@users.noreply.github.com'

      - name: build and push dev docs
        if: ${{ github.event_name == 'push' }}
        run: |
          set -euo pipefail

          nix run -f nix mic -- \
            deploy \
              --push \
              --rebase \
              --prefix docs \
              --message 'docs(dev): ibis@${{ github.sha }}' \
                dev
        env:
          PYTHONPATH: .

  simulate_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: cachix/install-nix-action@v17
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - uses: cachix/cachix-action@v10
        with:
          name: ibis
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community,poetry2nix

      - name: run semantic-release
        run: ./ci/release/dry_run.sh
